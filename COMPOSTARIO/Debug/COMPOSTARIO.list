
COMPOSTARIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041ec  080041ec  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080041ec  080041ec  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041ec  080041ec  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080041f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000084  08004278  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004278  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be14  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e95  00000000  00000000  0002bec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0002dd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  0002ea78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018826  00000000  00000000  0002f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df91  00000000  00000000  00047ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6ed  00000000  00000000  00055e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  000e55b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08004110 	.word	0x08004110

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08004110 	.word	0x08004110

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <delay+0x2c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800094e:	bf00      	nop
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <delay+0x2c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	429a      	cmp	r2, r3
 800095a:	d3f9      	bcc.n	8000950 <delay+0x14>
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	200000d0 	.word	0x200000d0

0800096c <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	461a      	mov	r2, r3
 800097e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000982:	4820      	ldr	r0, [pc, #128]	; (8000a04 <send_to_lcd+0x98>)
 8000984:	f001 fd03 	bl	800238e <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	461a      	mov	r2, r3
 8000996:	2108      	movs	r1, #8
 8000998:	481a      	ldr	r0, [pc, #104]	; (8000a04 <send_to_lcd+0x98>)
 800099a:	f001 fcf8 	bl	800238e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	2110      	movs	r1, #16
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <send_to_lcd+0x98>)
 80009b0:	f001 fced 	bl	800238e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	085b      	lsrs	r3, r3, #1
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	2120      	movs	r1, #32
 80009c4:	480f      	ldr	r0, [pc, #60]	; (8000a04 <send_to_lcd+0x98>)
 80009c6:	f001 fce2 	bl	800238e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	2140      	movs	r1, #64	; 0x40
 80009d6:	480b      	ldr	r0, [pc, #44]	; (8000a04 <send_to_lcd+0x98>)
 80009d8:	f001 fcd9 	bl	800238e <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <send_to_lcd+0x98>)
 80009e2:	f001 fcd4 	bl	800238e <HAL_GPIO_WritePin>
	delay (20);
 80009e6:	2014      	movs	r0, #20
 80009e8:	f7ff ffa8 	bl	800093c <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <send_to_lcd+0x98>)
 80009f2:	f001 fccc 	bl	800238e <HAL_GPIO_WritePin>
	delay (20);
 80009f6:	2014      	movs	r0, #20
 80009f8:	f7ff ffa0 	bl	800093c <delay>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40010c00 	.word	0x40010c00

08000a08 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	091b      	lsrs	r3, r3, #4
 8000a16:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ffa5 	bl	800096c <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff9c 	bl	800096c <send_to_lcd>
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	091b      	lsrs	r3, r3, #4
 8000a4a:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff8b 	bl	800096c <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 030f 	and.w	r3, r3, #15
 8000a5c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2101      	movs	r1, #1
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff82 	bl	800096c <send_to_lcd>
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <lcd_clear>:

void lcd_clear (void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff ffc7 	bl	8000a08 <lcd_send_cmd>
	HAL_Delay(2);
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f000 fd8c 	bl	8001598 <HAL_Delay>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
    switch (row)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <lcd_put_cur+0x18>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d005      	beq.n	8000aa6 <lcd_put_cur+0x22>
 8000a9a:	e009      	b.n	8000ab0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa2:	603b      	str	r3, [r7, #0]
            break;
 8000aa4:	e004      	b.n	8000ab0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000aac:	603b      	str	r3, [r7, #0]
            break;
 8000aae:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ffa7 	bl	8000a08 <lcd_send_cmd>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <lcd_init>:


void lcd_init (void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ac6:	2032      	movs	r0, #50	; 0x32
 8000ac8:	f000 fd66 	bl	8001598 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000acc:	2030      	movs	r0, #48	; 0x30
 8000ace:	f7ff ff9b 	bl	8000a08 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000ad2:	2005      	movs	r0, #5
 8000ad4:	f000 fd60 	bl	8001598 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ad8:	2030      	movs	r0, #48	; 0x30
 8000ada:	f7ff ff95 	bl	8000a08 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 fd5a 	bl	8001598 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ae4:	2030      	movs	r0, #48	; 0x30
 8000ae6:	f7ff ff8f 	bl	8000a08 <lcd_send_cmd>
	HAL_Delay(10);
 8000aea:	200a      	movs	r0, #10
 8000aec:	f000 fd54 	bl	8001598 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000af0:	2020      	movs	r0, #32
 8000af2:	f7ff ff89 	bl	8000a08 <lcd_send_cmd>
	HAL_Delay(10);
 8000af6:	200a      	movs	r0, #10
 8000af8:	f000 fd4e 	bl	8001598 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000afc:	2028      	movs	r0, #40	; 0x28
 8000afe:	f7ff ff83 	bl	8000a08 <lcd_send_cmd>
	HAL_Delay(1);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 fd48 	bl	8001598 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000b08:	2008      	movs	r0, #8
 8000b0a:	f7ff ff7d 	bl	8000a08 <lcd_send_cmd>
	HAL_Delay(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f000 fd42 	bl	8001598 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff ff77 	bl	8000a08 <lcd_send_cmd>
	HAL_Delay(1);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 fd3c 	bl	8001598 <HAL_Delay>
	HAL_Delay(1);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 fd39 	bl	8001598 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000b26:	2006      	movs	r0, #6
 8000b28:	f7ff ff6e 	bl	8000a08 <lcd_send_cmd>
	HAL_Delay(1);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 fd33 	bl	8001598 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff ff68 	bl	8000a08 <lcd_send_cmd>
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000b44:	e006      	b.n	8000b54 <lcd_send_string+0x18>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	607a      	str	r2, [r7, #4]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff74 	bl	8000a3c <lcd_send_data>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f4      	bne.n	8000b46 <lcd_send_string+0xa>
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <measure_distance>:
//uint32_t Value1 = 0;				//ORIGINAL
//uint32_t Value2 = 0;				//ORIGINAL
//uint16_t Distance  = 0;			//ORIGINAL


uint16_t measure_distance() {
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
	uint32_t pMillis = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
	uint32_t Value1 = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
	uint32_t Value2 = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
	uint16_t Distance = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b84:	4838      	ldr	r0, [pc, #224]	; (8000c68 <measure_distance+0x100>)
 8000b86:	f001 fc02 	bl	800238e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b90:	4835      	ldr	r0, [pc, #212]	; (8000c68 <measure_distance+0x100>)
 8000b92:	f001 fbfc 	bl	800238e <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000b96:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <measure_distance+0x104>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&timer) < 10);  // wait for 10 us
 8000b9e:	bf00      	nop
 8000ba0:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <measure_distance+0x104>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	2b09      	cmp	r3, #9
 8000ba8:	d9fa      	bls.n	8000ba0 <measure_distance+0x38>
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb0:	482d      	ldr	r0, [pc, #180]	; (8000c68 <measure_distance+0x100>)
 8000bb2:	f001 fbec 	bl	800238e <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000bb6:	f000 fce5 	bl	8001584 <HAL_GetTick>
 8000bba:	60f8      	str	r0, [r7, #12]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&& pMillis + 10 > HAL_GetTick());
 8000bbc:	bf00      	nop
 8000bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc2:	4829      	ldr	r0, [pc, #164]	; (8000c68 <measure_distance+0x100>)
 8000bc4:	f001 fbcc 	bl	8002360 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d107      	bne.n	8000bde <measure_distance+0x76>
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f103 040a 	add.w	r4, r3, #10
 8000bd4:	f000 fcd6 	bl	8001584 <HAL_GetTick>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	d8ef      	bhi.n	8000bbe <measure_distance+0x56>
		Value1 = __HAL_TIM_GET_COUNTER(&timer);
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <measure_distance+0x104>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be4:	60bb      	str	r3, [r7, #8]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000be6:	f000 fccd 	bl	8001584 <HAL_GetTick>
 8000bea:	60f8      	str	r0, [r7, #12]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&& pMillis + 50 > HAL_GetTick());
 8000bec:	bf00      	nop
 8000bee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf2:	481d      	ldr	r0, [pc, #116]	; (8000c68 <measure_distance+0x100>)
 8000bf4:	f001 fbb4 	bl	8002360 <HAL_GPIO_ReadPin>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <measure_distance+0xa6>
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000c04:	f000 fcbe 	bl	8001584 <HAL_GetTick>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	d8ef      	bhi.n	8000bee <measure_distance+0x86>
		Value2 = __HAL_TIM_GET_COUNTER(&timer);
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <measure_distance+0x104>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c14:	607b      	str	r3, [r7, #4]

	Distance = (Value2 - Value1) * 0.034 / 2;
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fbe1 	bl	80003e4 <__aeabi_ui2d>
 8000c22:	a30f      	add	r3, pc, #60	; (adr r3, 8000c60 <measure_distance+0xf8>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fc56 	bl	80004d8 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 0200 	mov.w	r2, #0
 8000c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c3c:	f7ff fd76 	bl	800072c <__aeabi_ddiv>
 8000c40:	4602      	mov	r2, r0
 8000c42:	460b      	mov	r3, r1
 8000c44:	4610      	mov	r0, r2
 8000c46:	4619      	mov	r1, r3
 8000c48:	f7ff fe58 	bl	80008fc <__aeabi_d2uiz>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	807b      	strh	r3, [r7, #2]
	HAL_Delay(50);
 8000c50:	2032      	movs	r0, #50	; 0x32
 8000c52:	f000 fca1 	bl	8001598 <HAL_Delay>

	return Distance;
 8000c56:	887b      	ldrh	r3, [r7, #2]

}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	b020c49c 	.word	0xb020c49c
 8000c64:	3fa16872 	.word	0x3fa16872
 8000c68:	40010c00 	.word	0x40010c00
 8000c6c:	200000d0 	.word	0x200000d0

08000c70 <ADC_Select_CH1>:





void ADC_Select_CH1 (void){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <ADC_Select_CH1+0x38>)
 8000c92:	f000 ff69 	bl	8001b68 <HAL_ADC_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 8000c9c:	f000 fab0 	bl	8001200 <Error_Handler>
	  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000a0 	.word	0x200000a0

08000cac <ADC_Select_CH2>:

void ADC_Select_CH2 (void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <ADC_Select_CH2+0x38>)
 8000cce:	f000 ff4b 	bl	8001b68 <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 8000cd8:	f000 fa92 	bl	8001200 <Error_Handler>
	  }
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200000a0 	.word	0x200000a0

08000ce8 <ADC_Select_CH3>:

void ADC_Select_CH3 (void){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_3;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <ADC_Select_CH3+0x38>)
 8000d0a:	f000 ff2d 	bl	8001b68 <HAL_ADC_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <ADC_Select_CH3+0x30>
	  {
	    Error_Handler();
 8000d14:	f000 fa74 	bl	8001200 <Error_Handler>
	  }
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000a0 	.word	0x200000a0

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f000 fbd3 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f8fd 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 fa01 	bl	8001138 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d36:	f000 f985 	bl	8001044 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000d3a:	f000 f953 	bl	8000fe4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d3e:	f000 f9d1 	bl	80010e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000d42:	4866      	ldr	r0, [pc, #408]	; (8000edc <main+0x1b8>)
 8000d44:	f002 f91c 	bl	8002f80 <HAL_TIM_Base_Start>


  lcd_init();
 8000d48:	f7ff febb 	bl	8000ac2 <lcd_init>
  lcd_put_cur(0, 2);
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff fe98 	bl	8000a84 <lcd_put_cur>
  lcd_send_string("COMPOSTARIO!");
 8000d54:	4862      	ldr	r0, [pc, #392]	; (8000ee0 <main+0x1bc>)
 8000d56:	f7ff fef1 	bl	8000b3c <lcd_send_string>
  HAL_Delay(3000);
 8000d5a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d5e:	f000 fc1b 	bl	8001598 <HAL_Delay>
  lcd_clear();
 8000d62:	f7ff fe85 	bl	8000a70 <lcd_clear>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Leen los ADC
	  ADC_Select_CH1();
 8000d66:	f7ff ff83 	bl	8000c70 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8000d6a:	485e      	ldr	r0, [pc, #376]	; (8000ee4 <main+0x1c0>)
 8000d6c:	f000 fd10 	bl	8001790 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000d70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d74:	485b      	ldr	r0, [pc, #364]	; (8000ee4 <main+0x1c0>)
 8000d76:	f000 fde5 	bl	8001944 <HAL_ADC_PollForConversion>
	  humidity=HAL_ADC_GetValue(&hadc1);
 8000d7a:	485a      	ldr	r0, [pc, #360]	; (8000ee4 <main+0x1c0>)
 8000d7c:	f000 fee8 	bl	8001b50 <HAL_ADC_GetValue>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a59      	ldr	r2, [pc, #356]	; (8000ee8 <main+0x1c4>)
 8000d84:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000d86:	4857      	ldr	r0, [pc, #348]	; (8000ee4 <main+0x1c0>)
 8000d88:	f000 fdb0 	bl	80018ec <HAL_ADC_Stop>

	  ADC_Select_CH2();
 8000d8c:	f7ff ff8e 	bl	8000cac <ADC_Select_CH2>
	  HAL_ADC_Start(&hadc1);
 8000d90:	4854      	ldr	r0, [pc, #336]	; (8000ee4 <main+0x1c0>)
 8000d92:	f000 fcfd 	bl	8001790 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000d96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d9a:	4852      	ldr	r0, [pc, #328]	; (8000ee4 <main+0x1c0>)
 8000d9c:	f000 fdd2 	bl	8001944 <HAL_ADC_PollForConversion>
	  temperature=HAL_ADC_GetValue(&hadc1);
 8000da0:	4850      	ldr	r0, [pc, #320]	; (8000ee4 <main+0x1c0>)
 8000da2:	f000 fed5 	bl	8001b50 <HAL_ADC_GetValue>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a50      	ldr	r2, [pc, #320]	; (8000eec <main+0x1c8>)
 8000daa:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000dac:	484d      	ldr	r0, [pc, #308]	; (8000ee4 <main+0x1c0>)
 8000dae:	f000 fd9d 	bl	80018ec <HAL_ADC_Stop>

	  ADC_Select_CH3();
 8000db2:	f7ff ff99 	bl	8000ce8 <ADC_Select_CH3>
	  HAL_ADC_Start(&hadc1);
 8000db6:	484b      	ldr	r0, [pc, #300]	; (8000ee4 <main+0x1c0>)
 8000db8:	f000 fcea 	bl	8001790 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dc0:	4848      	ldr	r0, [pc, #288]	; (8000ee4 <main+0x1c0>)
 8000dc2:	f000 fdbf 	bl	8001944 <HAL_ADC_PollForConversion>
	  sun=HAL_ADC_GetValue(&hadc1);
 8000dc6:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <main+0x1c0>)
 8000dc8:	f000 fec2 	bl	8001b50 <HAL_ADC_GetValue>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a48      	ldr	r2, [pc, #288]	; (8000ef0 <main+0x1cc>)
 8000dd0:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000dd2:	4844      	ldr	r0, [pc, #272]	; (8000ee4 <main+0x1c0>)
 8000dd4:	f000 fd8a 	bl	80018ec <HAL_ADC_Stop>

	  //Lee el Ultrasonido
	  distance=measure_distance();
 8000dd8:	f7ff fec6 	bl	8000b68 <measure_distance>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b44      	ldr	r3, [pc, #272]	; (8000ef4 <main+0x1d0>)
 8000de2:	801a      	strh	r2, [r3, #0]

	  //valores int a string
	  sprintf(dist,"%u",distance);
 8000de4:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <main+0x1d0>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4943      	ldr	r1, [pc, #268]	; (8000ef8 <main+0x1d4>)
 8000dec:	4843      	ldr	r0, [pc, #268]	; (8000efc <main+0x1d8>)
 8000dee:	f002 fd15 	bl	800381c <siprintf>
	  sprintf(hum,"%u",humidity);
 8000df2:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <main+0x1c4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	493f      	ldr	r1, [pc, #252]	; (8000ef8 <main+0x1d4>)
 8000dfa:	4841      	ldr	r0, [pc, #260]	; (8000f00 <main+0x1dc>)
 8000dfc:	f002 fd0e 	bl	800381c <siprintf>
	  sprintf(temp,"%u",temperature);
 8000e00:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <main+0x1c8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	493c      	ldr	r1, [pc, #240]	; (8000ef8 <main+0x1d4>)
 8000e08:	483e      	ldr	r0, [pc, #248]	; (8000f04 <main+0x1e0>)
 8000e0a:	f002 fd07 	bl	800381c <siprintf>
	  sprintf(sun_exposition, "%u",sun);
 8000e0e:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <main+0x1cc>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4938      	ldr	r1, [pc, #224]	; (8000ef8 <main+0x1d4>)
 8000e16:	483c      	ldr	r0, [pc, #240]	; (8000f08 <main+0x1e4>)
 8000e18:	f002 fd00 	bl	800381c <siprintf>
	  sprintf(msg, "distancia:%u Humedad:%u Temperatura:%u Sol:%u \r\n",distance, humidity, temperature, sun);
 8000e1c:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <main+0x1d0>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <main+0x1c4>)
 8000e24:	6819      	ldr	r1, [r3, #0]
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <main+0x1c8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <main+0x1cc>)
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	9201      	str	r2, [sp, #4]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	460b      	mov	r3, r1
 8000e34:	4602      	mov	r2, r0
 8000e36:	4935      	ldr	r1, [pc, #212]	; (8000f0c <main+0x1e8>)
 8000e38:	4835      	ldr	r0, [pc, #212]	; (8000f10 <main+0x1ec>)
 8000e3a:	f002 fcef 	bl	800381c <siprintf>



	  // Imprimo en pantalla
	  lcd_put_cur(0, 0);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2000      	movs	r0, #0
 8000e42:	f7ff fe1f 	bl	8000a84 <lcd_put_cur>
	  lcd_send_string("D:");
 8000e46:	4833      	ldr	r0, [pc, #204]	; (8000f14 <main+0x1f0>)
 8000e48:	f7ff fe78 	bl	8000b3c <lcd_send_string>
	  lcd_put_cur(0, 2);
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fe18 	bl	8000a84 <lcd_put_cur>
	  lcd_send_string(dist);
 8000e54:	4829      	ldr	r0, [pc, #164]	; (8000efc <main+0x1d8>)
 8000e56:	f7ff fe71 	bl	8000b3c <lcd_send_string>

	  lcd_put_cur(0, 6);
 8000e5a:	2106      	movs	r1, #6
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fe11 	bl	8000a84 <lcd_put_cur>
	  lcd_send_string("H:");
 8000e62:	482d      	ldr	r0, [pc, #180]	; (8000f18 <main+0x1f4>)
 8000e64:	f7ff fe6a 	bl	8000b3c <lcd_send_string>
	  lcd_put_cur(0, 8);
 8000e68:	2108      	movs	r1, #8
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fe0a 	bl	8000a84 <lcd_put_cur>
	  lcd_send_string(hum);
 8000e70:	4823      	ldr	r0, [pc, #140]	; (8000f00 <main+0x1dc>)
 8000e72:	f7ff fe63 	bl	8000b3c <lcd_send_string>

	  lcd_put_cur(1, 0);
 8000e76:	2100      	movs	r1, #0
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff fe03 	bl	8000a84 <lcd_put_cur>
	  lcd_send_string("T:");
 8000e7e:	4827      	ldr	r0, [pc, #156]	; (8000f1c <main+0x1f8>)
 8000e80:	f7ff fe5c 	bl	8000b3c <lcd_send_string>
	  lcd_put_cur(1, 2);
 8000e84:	2102      	movs	r1, #2
 8000e86:	2001      	movs	r0, #1
 8000e88:	f7ff fdfc 	bl	8000a84 <lcd_put_cur>
	  lcd_send_string(temp);
 8000e8c:	481d      	ldr	r0, [pc, #116]	; (8000f04 <main+0x1e0>)
 8000e8e:	f7ff fe55 	bl	8000b3c <lcd_send_string>

	  lcd_put_cur(1, 6);
 8000e92:	2106      	movs	r1, #6
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff fdf5 	bl	8000a84 <lcd_put_cur>
	  lcd_send_string("S:");
 8000e9a:	4821      	ldr	r0, [pc, #132]	; (8000f20 <main+0x1fc>)
 8000e9c:	f7ff fe4e 	bl	8000b3c <lcd_send_string>
	  lcd_put_cur(1, 8);
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff fdee 	bl	8000a84 <lcd_put_cur>
	  lcd_send_string(sun_exposition);
 8000ea8:	4817      	ldr	r0, [pc, #92]	; (8000f08 <main+0x1e4>)
 8000eaa:	f7ff fe47 	bl	8000b3c <lcd_send_string>

	  HAL_Delay(1000);
 8000eae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb2:	f000 fb71 	bl	8001598 <HAL_Delay>
	  //Envío por UART
 	  //HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 300);
 	  HAL_UART_Transmit(&huart1,(uint8_t*)AT, strlen(AT), 300);
 8000eb6:	481b      	ldr	r0, [pc, #108]	; (8000f24 <main+0x200>)
 8000eb8:	f7ff f94a 	bl	8000150 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ec4:	4917      	ldr	r1, [pc, #92]	; (8000f24 <main+0x200>)
 8000ec6:	4818      	ldr	r0, [pc, #96]	; (8000f28 <main+0x204>)
 8000ec8:	f002 fb0b 	bl	80034e2 <HAL_UART_Transmit>
 	  HAL_Delay(3000);
 8000ecc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ed0:	f000 fb62 	bl	8001598 <HAL_Delay>

	  lcd_clear();
 8000ed4:	f7ff fdcc 	bl	8000a70 <lcd_clear>
	  ADC_Select_CH1();
 8000ed8:	e745      	b.n	8000d66 <main+0x42>
 8000eda:	bf00      	nop
 8000edc:	200000d0 	.word	0x200000d0
 8000ee0:	08004128 	.word	0x08004128
 8000ee4:	200000a0 	.word	0x200000a0
 8000ee8:	20000160 	.word	0x20000160
 8000eec:	20000164 	.word	0x20000164
 8000ef0:	20000168 	.word	0x20000168
 8000ef4:	2000015c 	.word	0x2000015c
 8000ef8:	08004138 	.word	0x08004138
 8000efc:	2000016c 	.word	0x2000016c
 8000f00:	2000017c 	.word	0x2000017c
 8000f04:	20000174 	.word	0x20000174
 8000f08:	20000184 	.word	0x20000184
 8000f0c:	0800413c 	.word	0x0800413c
 8000f10:	2000018c 	.word	0x2000018c
 8000f14:	08004170 	.word	0x08004170
 8000f18:	08004174 	.word	0x08004174
 8000f1c:	08004178 	.word	0x08004178
 8000f20:	0800417c 	.word	0x0800417c
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000118 	.word	0x20000118

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f36:	2228      	movs	r2, #40	; 0x28
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 fc66 	bl	800380c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 fa1c 	bl	80023c0 <HAL_RCC_OscConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f8e:	f000 f937 	bl	8001200 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f92:	230f      	movs	r3, #15
 8000f94:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2102      	movs	r1, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fc88 	bl	80028c4 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fba:	f000 f921 	bl	8001200 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fe12 	bl	8002bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fd6:	f000 f913 	bl	8001200 <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3750      	adds	r7, #80	; 0x50
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_ADC1_Init+0x58>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_ADC1_Init+0x5c>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_ADC1_Init+0x58>)
 8000ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001000:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_ADC1_Init+0x58>)
 8001004:	2201      	movs	r2, #1
 8001006:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_ADC1_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_ADC1_Init+0x58>)
 8001010:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001014:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_ADC1_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <MX_ADC1_Init+0x58>)
 800101e:	2203      	movs	r2, #3
 8001020:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_ADC1_Init+0x58>)
 8001024:	f000 fadc 	bl	80015e0 <HAL_ADC_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800102e:	f000 f8e7 	bl	8001200 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000a0 	.word	0x200000a0
 8001040:	40012400 	.word	0x40012400

08001044 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_TIM1_Init+0x98>)
 8001062:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <MX_TIM1_Init+0x9c>)
 8001064:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_TIM1_Init+0x98>)
 8001068:	2247      	movs	r2, #71	; 0x47
 800106a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <MX_TIM1_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_TIM1_Init+0x98>)
 8001074:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001078:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_TIM1_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_TIM1_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MX_TIM1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <MX_TIM1_Init+0x98>)
 800108e:	f001 ff27 	bl	8002ee0 <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001098:	f000 f8b2 	bl	8001200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_TIM1_Init+0x98>)
 80010aa:	f001 ffb3 	bl	8003014 <HAL_TIM_ConfigClockSource>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80010b4:	f000 f8a4 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_TIM1_Init+0x98>)
 80010c6:	f002 f961 	bl	800338c <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010d0:	f000 f896 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200000d0 	.word	0x200000d0
 80010e0:	40012c00 	.word	0x40012c00

080010e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <MX_USART1_UART_Init+0x50>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_USART1_UART_Init+0x4c>)
 800111c:	f002 f994 	bl	8003448 <HAL_UART_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001126:	f000 f86b 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000118 	.word	0x20000118
 8001134:	40013800 	.word	0x40013800

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <MX_GPIO_Init+0xc0>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <MX_GPIO_Init+0xc0>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_GPIO_Init+0xc0>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_GPIO_Init+0xc0>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <MX_GPIO_Init+0xc0>)
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_GPIO_Init+0xc0>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_GPIO_Init+0xc0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <MX_GPIO_Init+0xc0>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_GPIO_Init+0xc0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_GPIO_Init+0xc0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <MX_GPIO_Init+0xc0>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_GPIO_Init+0xc0>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 80011b2:	4812      	ldr	r0, [pc, #72]	; (80011fc <MX_GPIO_Init+0xc4>)
 80011b4:	f001 f8eb 	bl	800238e <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80011b8:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 80011bc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4619      	mov	r1, r3
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <MX_GPIO_Init+0xc4>)
 80011d2:	f000 ff41 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_GPIO_Init+0xc4>)
 80011ec:	f000 ff34 	bl	8002058 <HAL_GPIO_Init>

}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010c00 	.word	0x40010c00

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_MspInit+0x5c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_MspInit+0x5c>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6193      	str	r3, [r2, #24]
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_MspInit+0x5c>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_MspInit+0x5c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_MspInit+0x5c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_MspInit+0x5c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_MspInit+0x60>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_MspInit+0x60>)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000

08001270 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_ADC_MspInit+0x6c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d121      	bne.n	80012d4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_ADC_MspInit+0x70>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <HAL_ADC_MspInit+0x70>)
 8001296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_ADC_MspInit+0x70>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_ADC_MspInit+0x70>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <HAL_ADC_MspInit+0x70>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_ADC_MspInit+0x70>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80012c0:	230e      	movs	r3, #14
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_ADC_MspInit+0x74>)
 80012d0:	f000 fec2 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40012400 	.word	0x40012400
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010800 	.word	0x40010800

080012e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_TIM_Base_MspInit+0x34>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10b      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_TIM_Base_MspInit+0x38>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_TIM_Base_MspInit+0x38>)
 8001300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001304:	6193      	str	r3, [r2, #24]
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_TIM_Base_MspInit+0x38>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	40012c00 	.word	0x40012c00
 8001320:	40021000 	.word	0x40021000

08001324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <HAL_UART_MspInit+0x8c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d131      	bne.n	80013a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_UART_MspInit+0x90>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <HAL_UART_MspInit+0x90>)
 800134a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_UART_MspInit+0x90>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_UART_MspInit+0x90>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_UART_MspInit+0x90>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_UART_MspInit+0x90>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001378:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <HAL_UART_MspInit+0x94>)
 800138a:	f000 fe65 	bl	8002058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800138e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_UART_MspInit+0x94>)
 80013a4:	f000 fe58 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010800 	.word	0x40010800

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <HardFault_Handler+0x4>

080013ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <MemManage_Handler+0x4>

080013d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <BusFault_Handler+0x4>

080013da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <UsageFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f8aa 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f002 f9ba 	bl	80037b8 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20005000 	.word	0x20005000
 8001470:	00000400 	.word	0x00000400
 8001474:	200001f0 	.word	0x200001f0
 8001478:	20000208 	.word	0x20000208

0800147c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800148a:	490d      	ldr	r1, [pc, #52]	; (80014c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a0:	4c0a      	ldr	r4, [pc, #40]	; (80014cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ae:	f7ff ffe5 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f002 f987 	bl	80037c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b6:	f7ff fc35 	bl	8000d24 <main>
  bx lr
 80014ba:	4770      	bx	lr
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80014c4:	080041f4 	.word	0x080041f4
  ldr r2, =_sbss
 80014c8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80014cc:	20000208 	.word	0x20000208

080014d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_2_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x28>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x28>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 fd83 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	200f      	movs	r0, #15
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff fe8c 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fd8d 	bl	800203e <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 fd63 	bl	8002006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000014 	.word	0x20000014
 8001558:	2000001c 	.word	0x2000001c
 800155c:	20000018 	.word	0x20000018

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_IncTick+0x20>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	2000001c 	.word	0x2000001c
 8001580:	200001f4 	.word	0x200001f4

08001584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_GetTick+0x10>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	200001f4 	.word	0x200001f4

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fff0 	bl	8001584 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffe0 	bl	8001584 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000001c 	.word	0x2000001c

080015e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0be      	b.n	8001780 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fe26 	bl	8001270 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fbf1 	bl	8001e0c <ADC_ConversionStop_Disable>
 800162a:	4603      	mov	r3, r0
 800162c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 8099 	bne.w	800176e <HAL_ADC_Init+0x18e>
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 8095 	bne.w	800176e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800164c:	f023 0302 	bic.w	r3, r3, #2
 8001650:	f043 0202 	orr.w	r2, r3, #2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001660:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7b1b      	ldrb	r3, [r3, #12]
 8001666:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001668:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	4313      	orrs	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001678:	d003      	beq.n	8001682 <HAL_ADC_Init+0xa2>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d102      	bne.n	8001688 <HAL_ADC_Init+0xa8>
 8001682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001686:	e000      	b.n	800168a <HAL_ADC_Init+0xaa>
 8001688:	2300      	movs	r3, #0
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7d1b      	ldrb	r3, [r3, #20]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d119      	bne.n	80016cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7b1b      	ldrb	r3, [r3, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d109      	bne.n	80016b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	035a      	lsls	r2, r3, #13
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	e00b      	b.n	80016cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f043 0220 	orr.w	r2, r3, #32
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <HAL_ADC_Init+0x1a8>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016fc:	d003      	beq.n	8001706 <HAL_ADC_Init+0x126>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d104      	bne.n	8001710 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	3b01      	subs	r3, #1
 800170c:	051b      	lsls	r3, r3, #20
 800170e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	430a      	orrs	r2, r1
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_ADC_Init+0x1ac>)
 800172c:	4013      	ands	r3, r2
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	429a      	cmp	r2, r3
 8001732:	d10b      	bne.n	800174c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800174a:	e018      	b.n	800177e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	f023 0312 	bic.w	r3, r3, #18
 8001754:	f043 0210 	orr.w	r2, r3, #16
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800176c:	e007      	b.n	800177e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	f043 0210 	orr.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800177e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	ffe1f7fd 	.word	0xffe1f7fd
 800178c:	ff1f0efe 	.word	0xff1f0efe

08001790 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_ADC_Start+0x1a>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e098      	b.n	80018dc <HAL_ADC_Start+0x14c>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fad0 	bl	8001d58 <ADC_Enable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 8087 	bne.w	80018d2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a41      	ldr	r2, [pc, #260]	; (80018e4 <HAL_ADC_Start+0x154>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d105      	bne.n	80017ee <HAL_ADC_Start+0x5e>
 80017e2:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <HAL_ADC_Start+0x158>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d115      	bne.n	800181a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d026      	beq.n	8001856 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001810:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001818:	e01d      	b.n	8001856 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <HAL_ADC_Start+0x158>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d004      	beq.n	800183a <HAL_ADC_Start+0xaa>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2b      	ldr	r2, [pc, #172]	; (80018e4 <HAL_ADC_Start+0x154>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d10d      	bne.n	8001856 <HAL_ADC_Start+0xc6>
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_ADC_Start+0x158>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800184e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	f023 0206 	bic.w	r2, r3, #6
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
 800186e:	e002      	b.n	8001876 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f06f 0202 	mvn.w	r2, #2
 8001886:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001892:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001896:	d113      	bne.n	80018c0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800189c:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_ADC_Start+0x154>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d105      	bne.n	80018ae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_ADC_Start+0x158>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d108      	bne.n	80018c0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	e00c      	b.n	80018da <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	e003      	b.n	80018da <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40012800 	.word	0x40012800
 80018e8:	40012400 	.word	0x40012400

080018ec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_ADC_Stop+0x1a>
 8001902:	2302      	movs	r3, #2
 8001904:	e01a      	b.n	800193c <HAL_ADC_Stop+0x50>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fa7c 	bl	8001e0c <ADC_ConversionStop_Disable>
 8001914:	4603      	mov	r3, r0
 8001916:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800195a:	f7ff fe13 	bl	8001584 <HAL_GetTick>
 800195e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	f043 0220 	orr.w	r2, r3, #32
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0d3      	b.n	8001b2e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d131      	bne.n	80019f8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d12a      	bne.n	80019f8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019a2:	e021      	b.n	80019e8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019aa:	d01d      	beq.n	80019e8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <HAL_ADC_PollForConversion+0x7e>
 80019b2:	f7ff fde7 	bl	8001584 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d212      	bcs.n	80019e8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10b      	bne.n	80019e8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	f043 0204 	orr.w	r2, r3, #4
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e0a2      	b.n	8001b2e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0d6      	beq.n	80019a4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019f6:	e070      	b.n	8001ada <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019f8:	4b4f      	ldr	r3, [pc, #316]	; (8001b38 <HAL_ADC_PollForConversion+0x1f4>)
 80019fa:	681c      	ldr	r4, [r3, #0]
 80019fc:	2002      	movs	r0, #2
 80019fe:	f001 f9af 	bl	8002d60 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a02:	4603      	mov	r3, r0
 8001a04:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6919      	ldr	r1, [r3, #16]
 8001a0e:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_ADC_PollForConversion+0x1f8>)
 8001a10:	400b      	ands	r3, r1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <HAL_ADC_PollForConversion+0x104>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68d9      	ldr	r1, [r3, #12]
 8001a1c:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <HAL_ADC_PollForConversion+0x1fc>)
 8001a1e:	400b      	ands	r3, r1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d111      	bne.n	8001a48 <HAL_ADC_PollForConversion+0x104>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6919      	ldr	r1, [r3, #16]
 8001a2a:	4b46      	ldr	r3, [pc, #280]	; (8001b44 <HAL_ADC_PollForConversion+0x200>)
 8001a2c:	400b      	ands	r3, r1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x100>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68d9      	ldr	r1, [r3, #12]
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_ADC_PollForConversion+0x204>)
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x100>
 8001a40:	2314      	movs	r3, #20
 8001a42:	e020      	b.n	8001a86 <HAL_ADC_PollForConversion+0x142>
 8001a44:	2329      	movs	r3, #41	; 0x29
 8001a46:	e01e      	b.n	8001a86 <HAL_ADC_PollForConversion+0x142>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6919      	ldr	r1, [r3, #16]
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_ADC_PollForConversion+0x200>)
 8001a50:	400b      	ands	r3, r1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x120>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68d9      	ldr	r1, [r3, #12]
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_ADC_PollForConversion+0x204>)
 8001a5e:	400b      	ands	r3, r1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00d      	beq.n	8001a80 <HAL_ADC_PollForConversion+0x13c>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6919      	ldr	r1, [r3, #16]
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_ADC_PollForConversion+0x208>)
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d108      	bne.n	8001a84 <HAL_ADC_PollForConversion+0x140>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68d9      	ldr	r1, [r3, #12]
 8001a78:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_ADC_PollForConversion+0x208>)
 8001a7a:	400b      	ands	r3, r1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_PollForConversion+0x140>
 8001a80:	2354      	movs	r3, #84	; 0x54
 8001a82:	e000      	b.n	8001a86 <HAL_ADC_PollForConversion+0x142>
 8001a84:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a8c:	e021      	b.n	8001ad2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d01a      	beq.n	8001acc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_ADC_PollForConversion+0x168>
 8001a9c:	f7ff fd72 	bl	8001584 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d20f      	bcs.n	8001acc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d90b      	bls.n	8001acc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	f043 0204 	orr.w	r2, r3, #4
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e030      	b.n	8001b2e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d8d9      	bhi.n	8001a8e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f06f 0212 	mvn.w	r2, #18
 8001ae2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001afa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001afe:	d115      	bne.n	8001b2c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d111      	bne.n	8001b2c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d105      	bne.n	8001b2c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd90      	pop	{r4, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000014 	.word	0x20000014
 8001b3c:	24924924 	.word	0x24924924
 8001b40:	00924924 	.word	0x00924924
 8001b44:	12492492 	.word	0x12492492
 8001b48:	00492492 	.word	0x00492492
 8001b4c:	00249249 	.word	0x00249249

08001b50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x20>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e0dc      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x1da>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b06      	cmp	r3, #6
 8001b96:	d81c      	bhi.n	8001bd2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b05      	subs	r3, #5
 8001baa:	221f      	movs	r2, #31
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4019      	ands	r1, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3b05      	subs	r3, #5
 8001bc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34
 8001bd0:	e03c      	b.n	8001c4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d81c      	bhi.n	8001c14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	3b23      	subs	r3, #35	; 0x23
 8001bec:	221f      	movs	r2, #31
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	4019      	ands	r1, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b23      	subs	r3, #35	; 0x23
 8001c06:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
 8001c12:	e01b      	b.n	8001c4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	3b41      	subs	r3, #65	; 0x41
 8001c26:	221f      	movs	r2, #31
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4019      	ands	r1, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b41      	subs	r3, #65	; 0x41
 8001c40:	fa00 f203 	lsl.w	r2, r0, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b09      	cmp	r3, #9
 8001c52:	d91c      	bls.n	8001c8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68d9      	ldr	r1, [r3, #12]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	3b1e      	subs	r3, #30
 8001c66:	2207      	movs	r2, #7
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4019      	ands	r1, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6898      	ldr	r0, [r3, #8]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b1e      	subs	r3, #30
 8001c80:	fa00 f203 	lsl.w	r2, r0, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	e019      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6919      	ldr	r1, [r3, #16]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	4019      	ands	r1, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6898      	ldr	r0, [r3, #8]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d003      	beq.n	8001cd2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cce:	2b11      	cmp	r3, #17
 8001cd0:	d132      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_ADC_ConfigChannel+0x1e4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d125      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d126      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cf8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b10      	cmp	r3, #16
 8001d00:	d11a      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	0c9a      	lsrs	r2, r3, #18
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d18:	e002      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f9      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x1b2>
 8001d26:	e007      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	f043 0220 	orr.w	r2, r3, #32
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40012400 	.word	0x40012400
 8001d50:	20000014 	.word	0x20000014
 8001d54:	431bde83 	.word	0x431bde83

08001d58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d040      	beq.n	8001df8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <ADC_Enable+0xac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <ADC_Enable+0xb0>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0c9b      	lsrs	r3, r3, #18
 8001d92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d94:	e002      	b.n	8001d9c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f9      	bne.n	8001d96 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001da2:	f7ff fbef 	bl	8001584 <HAL_GetTick>
 8001da6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001da8:	e01f      	b.n	8001dea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001daa:	f7ff fbeb 	bl	8001584 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d918      	bls.n	8001dea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d011      	beq.n	8001dea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	f043 0210 	orr.w	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	f043 0201 	orr.w	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e007      	b.n	8001dfa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d1d8      	bne.n	8001daa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000014 	.word	0x20000014
 8001e08:	431bde83 	.word	0x431bde83

08001e0c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d12e      	bne.n	8001e84 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e36:	f7ff fba5 	bl	8001584 <HAL_GetTick>
 8001e3a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e3c:	e01b      	b.n	8001e76 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e3e:	f7ff fba1 	bl	8001584 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d914      	bls.n	8001e76 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d10d      	bne.n	8001e76 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f043 0210 	orr.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e007      	b.n	8001e86 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d0dc      	beq.n	8001e3e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60d3      	str	r3, [r2, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fbc:	d301      	bcc.n	8001fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00f      	b.n	8001fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <SysTick_Config+0x40>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fca:	210f      	movs	r1, #15
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f7ff ff90 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <SysTick_Config+0x40>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <SysTick_Config+0x40>)
 8001fdc:	2207      	movs	r2, #7
 8001fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000e010 	.word	0xe000e010

08001ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff49 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002018:	f7ff ff5e 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 800201c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff90 	bl	8001f48 <NVIC_EncodePriority>
 8002028:	4602      	mov	r2, r0
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff5f 	bl	8001ef4 <__NVIC_SetPriority>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffb0 	bl	8001fac <SysTick_Config>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b08b      	sub	sp, #44	; 0x2c
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	e169      	b.n	8002340 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800206c:	2201      	movs	r2, #1
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	429a      	cmp	r2, r3
 8002086:	f040 8158 	bne.w	800233a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4a9a      	ldr	r2, [pc, #616]	; (80022f8 <HAL_GPIO_Init+0x2a0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d05e      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 8002094:	4a98      	ldr	r2, [pc, #608]	; (80022f8 <HAL_GPIO_Init+0x2a0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d875      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 800209a:	4a98      	ldr	r2, [pc, #608]	; (80022fc <HAL_GPIO_Init+0x2a4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d058      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020a0:	4a96      	ldr	r2, [pc, #600]	; (80022fc <HAL_GPIO_Init+0x2a4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d86f      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020a6:	4a96      	ldr	r2, [pc, #600]	; (8002300 <HAL_GPIO_Init+0x2a8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d052      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020ac:	4a94      	ldr	r2, [pc, #592]	; (8002300 <HAL_GPIO_Init+0x2a8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d869      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020b2:	4a94      	ldr	r2, [pc, #592]	; (8002304 <HAL_GPIO_Init+0x2ac>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d04c      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020b8:	4a92      	ldr	r2, [pc, #584]	; (8002304 <HAL_GPIO_Init+0x2ac>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d863      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020be:	4a92      	ldr	r2, [pc, #584]	; (8002308 <HAL_GPIO_Init+0x2b0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d046      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020c4:	4a90      	ldr	r2, [pc, #576]	; (8002308 <HAL_GPIO_Init+0x2b0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d85d      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020ca:	2b12      	cmp	r3, #18
 80020cc:	d82a      	bhi.n	8002124 <HAL_GPIO_Init+0xcc>
 80020ce:	2b12      	cmp	r3, #18
 80020d0:	d859      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020d2:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <HAL_GPIO_Init+0x80>)
 80020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d8:	08002153 	.word	0x08002153
 80020dc:	0800212d 	.word	0x0800212d
 80020e0:	0800213f 	.word	0x0800213f
 80020e4:	08002181 	.word	0x08002181
 80020e8:	08002187 	.word	0x08002187
 80020ec:	08002187 	.word	0x08002187
 80020f0:	08002187 	.word	0x08002187
 80020f4:	08002187 	.word	0x08002187
 80020f8:	08002187 	.word	0x08002187
 80020fc:	08002187 	.word	0x08002187
 8002100:	08002187 	.word	0x08002187
 8002104:	08002187 	.word	0x08002187
 8002108:	08002187 	.word	0x08002187
 800210c:	08002187 	.word	0x08002187
 8002110:	08002187 	.word	0x08002187
 8002114:	08002187 	.word	0x08002187
 8002118:	08002187 	.word	0x08002187
 800211c:	08002135 	.word	0x08002135
 8002120:	08002149 	.word	0x08002149
 8002124:	4a79      	ldr	r2, [pc, #484]	; (800230c <HAL_GPIO_Init+0x2b4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800212a:	e02c      	b.n	8002186 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e029      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	3304      	adds	r3, #4
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e024      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	3308      	adds	r3, #8
 8002144:	623b      	str	r3, [r7, #32]
          break;
 8002146:	e01f      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	330c      	adds	r3, #12
 800214e:	623b      	str	r3, [r7, #32]
          break;
 8002150:	e01a      	b.n	8002188 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800215a:	2304      	movs	r3, #4
 800215c:	623b      	str	r3, [r7, #32]
          break;
 800215e:	e013      	b.n	8002188 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002168:	2308      	movs	r3, #8
 800216a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	611a      	str	r2, [r3, #16]
          break;
 8002172:	e009      	b.n	8002188 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002174:	2308      	movs	r3, #8
 8002176:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	615a      	str	r2, [r3, #20]
          break;
 800217e:	e003      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
          break;
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x130>
          break;
 8002186:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2bff      	cmp	r3, #255	; 0xff
 800218c:	d801      	bhi.n	8002192 <HAL_GPIO_Init+0x13a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	e001      	b.n	8002196 <HAL_GPIO_Init+0x13e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3304      	adds	r3, #4
 8002196:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2bff      	cmp	r3, #255	; 0xff
 800219c:	d802      	bhi.n	80021a4 <HAL_GPIO_Init+0x14c>
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	e002      	b.n	80021aa <HAL_GPIO_Init+0x152>
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	3b08      	subs	r3, #8
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	210f      	movs	r1, #15
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	401a      	ands	r2, r3
 80021bc:	6a39      	ldr	r1, [r7, #32]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80b1 	beq.w	800233a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d8:	4b4d      	ldr	r3, [pc, #308]	; (8002310 <HAL_GPIO_Init+0x2b8>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a4c      	ldr	r2, [pc, #304]	; (8002310 <HAL_GPIO_Init+0x2b8>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b4a      	ldr	r3, [pc, #296]	; (8002310 <HAL_GPIO_Init+0x2b8>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021f0:	4a48      	ldr	r2, [pc, #288]	; (8002314 <HAL_GPIO_Init+0x2bc>)
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a40      	ldr	r2, [pc, #256]	; (8002318 <HAL_GPIO_Init+0x2c0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <HAL_GPIO_Init+0x1ec>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3f      	ldr	r2, [pc, #252]	; (800231c <HAL_GPIO_Init+0x2c4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00d      	beq.n	8002240 <HAL_GPIO_Init+0x1e8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3e      	ldr	r2, [pc, #248]	; (8002320 <HAL_GPIO_Init+0x2c8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <HAL_GPIO_Init+0x1e4>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3d      	ldr	r2, [pc, #244]	; (8002324 <HAL_GPIO_Init+0x2cc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_GPIO_Init+0x1e0>
 8002234:	2303      	movs	r3, #3
 8002236:	e006      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002238:	2304      	movs	r3, #4
 800223a:	e004      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 800223c:	2302      	movs	r3, #2
 800223e:	e002      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_GPIO_Init+0x1ee>
 8002244:	2300      	movs	r3, #0
 8002246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002248:	f002 0203 	and.w	r2, r2, #3
 800224c:	0092      	lsls	r2, r2, #2
 800224e:	4093      	lsls	r3, r2
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002256:	492f      	ldr	r1, [pc, #188]	; (8002314 <HAL_GPIO_Init+0x2bc>)
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	3302      	adds	r3, #2
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	492c      	ldr	r1, [pc, #176]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	43db      	mvns	r3, r3
 8002286:	4928      	ldr	r1, [pc, #160]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 8002288:	4013      	ands	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002298:	4b23      	ldr	r3, [pc, #140]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4922      	ldr	r1, [pc, #136]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	491e      	ldr	r1, [pc, #120]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	4918      	ldr	r1, [pc, #96]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4914      	ldr	r1, [pc, #80]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d021      	beq.n	800232c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	490e      	ldr	r1, [pc, #56]	; (8002328 <HAL_GPIO_Init+0x2d0>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60cb      	str	r3, [r1, #12]
 80022f4:	e021      	b.n	800233a <HAL_GPIO_Init+0x2e2>
 80022f6:	bf00      	nop
 80022f8:	10320000 	.word	0x10320000
 80022fc:	10310000 	.word	0x10310000
 8002300:	10220000 	.word	0x10220000
 8002304:	10210000 	.word	0x10210000
 8002308:	10120000 	.word	0x10120000
 800230c:	10110000 	.word	0x10110000
 8002310:	40021000 	.word	0x40021000
 8002314:	40010000 	.word	0x40010000
 8002318:	40010800 	.word	0x40010800
 800231c:	40010c00 	.word	0x40010c00
 8002320:	40011000 	.word	0x40011000
 8002324:	40011400 	.word	0x40011400
 8002328:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_GPIO_Init+0x304>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	43db      	mvns	r3, r3
 8002334:	4909      	ldr	r1, [pc, #36]	; (800235c <HAL_GPIO_Init+0x304>)
 8002336:	4013      	ands	r3, r2
 8002338:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	3301      	adds	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	f47f ae8e 	bne.w	800206c <HAL_GPIO_Init+0x14>
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	372c      	adds	r7, #44	; 0x2c
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	887b      	ldrh	r3, [r7, #2]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e001      	b.n	8002382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr

0800238e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	807b      	strh	r3, [r7, #2]
 800239a:	4613      	mov	r3, r2
 800239c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800239e:	787b      	ldrb	r3, [r7, #1]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a4:	887a      	ldrh	r2, [r7, #2]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023aa:	e003      	b.n	80023b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ac:	887b      	ldrh	r3, [r7, #2]
 80023ae:	041a      	lsls	r2, r3, #16
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	611a      	str	r2, [r3, #16]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e272      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8087 	beq.w	80024ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e0:	4b92      	ldr	r3, [pc, #584]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d00c      	beq.n	8002406 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ec:	4b8f      	ldr	r3, [pc, #572]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d112      	bne.n	800241e <HAL_RCC_OscConfig+0x5e>
 80023f8:	4b8c      	ldr	r3, [pc, #560]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d10b      	bne.n	800241e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002406:	4b89      	ldr	r3, [pc, #548]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d06c      	beq.n	80024ec <HAL_RCC_OscConfig+0x12c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d168      	bne.n	80024ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e24c      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x76>
 8002428:	4b80      	ldr	r3, [pc, #512]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a7f      	ldr	r2, [pc, #508]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800242e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	e02e      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x98>
 800243e:	4b7b      	ldr	r3, [pc, #492]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7a      	ldr	r2, [pc, #488]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b78      	ldr	r3, [pc, #480]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a77      	ldr	r2, [pc, #476]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e01d      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0xbc>
 8002462:	4b72      	ldr	r3, [pc, #456]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a71      	ldr	r2, [pc, #452]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b6f      	ldr	r3, [pc, #444]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6e      	ldr	r2, [pc, #440]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 800247c:	4b6b      	ldr	r3, [pc, #428]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6a      	ldr	r2, [pc, #424]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a67      	ldr	r2, [pc, #412]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800248e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002492:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff f872 	bl	8001584 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a4:	f7ff f86e 	bl	8001584 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e200      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b5d      	ldr	r3, [pc, #372]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0xe4>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff f85e 	bl	8001584 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024cc:	f7ff f85a 	bl	8001584 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e1ec      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x10c>
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fa:	4b4c      	ldr	r3, [pc, #304]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002506:	4b49      	ldr	r3, [pc, #292]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b08      	cmp	r3, #8
 8002510:	d11c      	bne.n	800254c <HAL_RCC_OscConfig+0x18c>
 8002512:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x176>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e1c0      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4939      	ldr	r1, [pc, #228]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	e03a      	b.n	80025c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_RCC_OscConfig+0x270>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7ff f813 	bl	8001584 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002562:	f7ff f80f 	bl	8001584 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e1a1      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b2a      	ldr	r3, [pc, #168]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4927      	ldr	r1, [pc, #156]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <HAL_RCC_OscConfig+0x270>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe fff2 	bl	8001584 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a4:	f7fe ffee 	bl	8001584 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e180      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d03a      	beq.n	8002644 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d019      	beq.n	800260a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_RCC_OscConfig+0x274>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7fe ffd2 	bl	8001584 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe ffce 	bl	8001584 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e160      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002602:	2001      	movs	r0, #1
 8002604:	f000 fad8 	bl	8002bb8 <RCC_Delay>
 8002608:	e01c      	b.n	8002644 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_OscConfig+0x274>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7fe ffb8 	bl	8001584 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002616:	e00f      	b.n	8002638 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002618:	f7fe ffb4 	bl	8001584 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d908      	bls.n	8002638 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e146      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	42420000 	.word	0x42420000
 8002634:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	4b92      	ldr	r3, [pc, #584]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e9      	bne.n	8002618 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80a6 	beq.w	800279e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002656:	4b8b      	ldr	r3, [pc, #556]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10d      	bne.n	800267e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b88      	ldr	r3, [pc, #544]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a87      	ldr	r2, [pc, #540]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	61d3      	str	r3, [r2, #28]
 800266e:	4b85      	ldr	r3, [pc, #532]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	4b82      	ldr	r3, [pc, #520]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d118      	bne.n	80026bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268a:	4b7f      	ldr	r3, [pc, #508]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a7e      	ldr	r2, [pc, #504]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002696:	f7fe ff75 	bl	8001584 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269e:	f7fe ff71 	bl	8001584 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b64      	cmp	r3, #100	; 0x64
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e103      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4b75      	ldr	r3, [pc, #468]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x312>
 80026c4:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6213      	str	r3, [r2, #32]
 80026d0:	e02d      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x334>
 80026da:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	4a69      	ldr	r2, [pc, #420]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	6213      	str	r3, [r2, #32]
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4a66      	ldr	r2, [pc, #408]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	f023 0304 	bic.w	r3, r3, #4
 80026f0:	6213      	str	r3, [r2, #32]
 80026f2:	e01c      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d10c      	bne.n	8002716 <HAL_RCC_OscConfig+0x356>
 80026fc:	4b61      	ldr	r3, [pc, #388]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4a60      	ldr	r2, [pc, #384]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	6213      	str	r3, [r2, #32]
 8002708:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4a5d      	ldr	r2, [pc, #372]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6213      	str	r3, [r2, #32]
 8002714:	e00b      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 8002716:	4b5b      	ldr	r3, [pc, #364]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a5a      	ldr	r2, [pc, #360]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	4b58      	ldr	r3, [pc, #352]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4a57      	ldr	r2, [pc, #348]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d015      	beq.n	8002762 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002736:	f7fe ff25 	bl	8001584 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe ff21 	bl	8001584 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0b1      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002754:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ee      	beq.n	800273e <HAL_RCC_OscConfig+0x37e>
 8002760:	e014      	b.n	800278c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002762:	f7fe ff0f 	bl	8001584 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe ff0b 	bl	8001584 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e09b      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002780:	4b40      	ldr	r3, [pc, #256]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ee      	bne.n	800276a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800278c:	7dfb      	ldrb	r3, [r7, #23]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a3b      	ldr	r2, [pc, #236]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8087 	beq.w	80028b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d061      	beq.n	8002878 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d146      	bne.n	800284a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027bc:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7fe fedf 	bl	8001584 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe fedb 	bl	8001584 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e06d      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d108      	bne.n	8002804 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4921      	ldr	r1, [pc, #132]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a19      	ldr	r1, [r3, #32]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	430b      	orrs	r3, r1
 8002816:	491b      	ldr	r1, [pc, #108]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7fe feaf 	bl	8001584 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe feab 	bl	8001584 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e03d      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x46a>
 8002848:	e035      	b.n	80028b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fe98 	bl	8001584 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fe94 	bl	8001584 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e026      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x498>
 8002876:	e01e      	b.n	80028b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d107      	bne.n	8002890 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e019      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
 8002884:	40021000 	.word	0x40021000
 8002888:	40007000 	.word	0x40007000
 800288c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_OscConfig+0x500>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0d0      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4965      	ldr	r1, [pc, #404]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b8      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800292a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	494d      	ldr	r1, [pc, #308]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d040      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d115      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e073      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06b      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4936      	ldr	r1, [pc, #216]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fde6 	bl	8001584 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe fde2 	bl	8001584 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e053      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d210      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0207 	bic.w	r2, r3, #7
 80029fa:	4922      	ldr	r1, [pc, #136]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e032      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a52:	f000 f821 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	490a      	ldr	r1, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	5ccb      	ldrb	r3, [r1, r3]
 8002a66:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1cc>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1d0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe fd44 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40022000 	.word	0x40022000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	080041a0 	.word	0x080041a0
 8002a90:	20000014 	.word	0x20000014
 8002a94:	20000018 	.word	0x20000018

08002a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	b490      	push	{r4, r7}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xac>)
 8002aa0:	1d3c      	adds	r4, r7, #4
 8002aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aa8:	f240 2301 	movw	r3, #513	; 0x201
 8002aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x46>
 8002ad6:	e02b      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad8:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ada:	623b      	str	r3, [r7, #32]
      break;
 8002adc:	e02b      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3328      	adds	r3, #40	; 0x28
 8002ae8:	443b      	add	r3, r7
 8002aea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d012      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0c5b      	lsrs	r3, r3, #17
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	3328      	adds	r3, #40	; 0x28
 8002b06:	443b      	add	r3, r7
 8002b08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	4a0e      	ldr	r2, [pc, #56]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b12:	fb03 f202 	mul.w	r2, r3, r2
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e004      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	623b      	str	r3, [r7, #32]
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b36:	6a3b      	ldr	r3, [r7, #32]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3728      	adds	r7, #40	; 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc90      	pop	{r4, r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	08004180 	.word	0x08004180
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	007a1200 	.word	0x007a1200
 8002b50:	003d0900 	.word	0x003d0900

08002b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	20000014 	.word	0x20000014

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b6c:	f7ff fff2 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	080041b0 	.word	0x080041b0

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b94:	f7ff ffde 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0adb      	lsrs	r3, r3, #11
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	080041b0 	.word	0x080041b0

08002bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <RCC_Delay+0x34>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <RCC_Delay+0x38>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0a5b      	lsrs	r3, r3, #9
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd4:	bf00      	nop
  }
  while (Delay --);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	60fa      	str	r2, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f9      	bne.n	8002bd4 <RCC_Delay+0x1c>
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	20000014 	.word	0x20000014
 8002bf0:	10624dd3 	.word	0x10624dd3

08002bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d07d      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c10:	2300      	movs	r3, #0
 8002c12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c14:	4b4f      	ldr	r3, [pc, #316]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10d      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c20:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	4a4b      	ldr	r2, [pc, #300]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	61d3      	str	r3, [r2, #28]
 8002c2c:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d118      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c48:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a42      	ldr	r2, [pc, #264]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c54:	f7fe fc96 	bl	8001584 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	e008      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5c:	f7fe fc92 	bl	8001584 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e06d      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6e:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d02e      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d027      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c98:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ca2:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca8:	4b2c      	ldr	r3, [pc, #176]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cae:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d014      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fe fc61 	bl	8001584 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fc5d 	bl	8001584 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e036      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ee      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4917      	ldr	r1, [pc, #92]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	490b      	ldr	r1, [pc, #44]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4904      	ldr	r1, [pc, #16]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	42420440 	.word	0x42420440

08002d60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b08d      	sub	sp, #52	; 0x34
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d68:	4b58      	ldr	r3, [pc, #352]	; (8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002d6a:	f107 040c 	add.w	r4, r7, #12
 8002d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d74:	f240 2301 	movw	r3, #513	; 0x201
 8002d78:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	f200 808e 	bhi.w	8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d049      	beq.n	8002e36 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d079      	beq.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002da8:	e086      	b.n	8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002daa:	4b49      	ldr	r3, [pc, #292]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002db0:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d07f      	beq.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	0c9b      	lsrs	r3, r3, #18
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	3330      	adds	r3, #48	; 0x30
 8002dc6:	443b      	add	r3, r7
 8002dc8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dcc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dd8:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c5b      	lsrs	r3, r3, #17
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	3330      	adds	r3, #48	; 0x30
 8002de4:	443b      	add	r3, r7
 8002de6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002df6:	4a37      	ldr	r2, [pc, #220]	; (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	fb02 f303 	mul.w	r3, r2, r3
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e06:	e004      	b.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	4a33      	ldr	r2, [pc, #204]	; (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e12:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e1e:	d102      	bne.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e24:	e04a      	b.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e34:	e042      	b.n	8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e46:	d108      	bne.n	8002e5a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e58:	e01f      	b.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e64:	d109      	bne.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002e66:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002e72:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e78:	e00f      	b.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e84:	d11c      	bne.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002e92:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e98:	e012      	b.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002e9a:	e011      	b.n	8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e9c:	f7ff fe78 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	0b9b      	lsrs	r3, r3, #14
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	3301      	adds	r3, #1
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002eb8:	bf00      	nop
 8002eba:	e002      	b.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002ebc:	bf00      	nop
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002ec0:	bf00      	nop
    }
  }
  return (frequency);
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3734      	adds	r7, #52	; 0x34
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd90      	pop	{r4, r7, pc}
 8002ecc:	08004190 	.word	0x08004190
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	007a1200 	.word	0x007a1200
 8002ed8:	003d0900 	.word	0x003d0900
 8002edc:	aaaaaaab 	.word	0xaaaaaaab

08002ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e041      	b.n	8002f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe f9ee 	bl	80012e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 f93c 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d001      	beq.n	8002f98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e032      	b.n	8002ffe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a18      	ldr	r2, [pc, #96]	; (8003008 <HAL_TIM_Base_Start+0x88>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x48>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x48>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_TIM_Base_Start+0x8c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x48>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a13      	ldr	r2, [pc, #76]	; (8003010 <HAL_TIM_Base_Start+0x90>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d111      	bne.n	8002fec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d010      	beq.n	8002ffc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	e007      	b.n	8002ffc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800

08003014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_TIM_ConfigClockSource+0x18>
 8003028:	2302      	movs	r3, #2
 800302a:	e0b3      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x180>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800304a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003052:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003064:	d03e      	beq.n	80030e4 <HAL_TIM_ConfigClockSource+0xd0>
 8003066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800306a:	f200 8087 	bhi.w	800317c <HAL_TIM_ConfigClockSource+0x168>
 800306e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003072:	f000 8085 	beq.w	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307a:	d87f      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 800307c:	2b70      	cmp	r3, #112	; 0x70
 800307e:	d01a      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0xa2>
 8003080:	2b70      	cmp	r3, #112	; 0x70
 8003082:	d87b      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 8003084:	2b60      	cmp	r3, #96	; 0x60
 8003086:	d050      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x116>
 8003088:	2b60      	cmp	r3, #96	; 0x60
 800308a:	d877      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 800308c:	2b50      	cmp	r3, #80	; 0x50
 800308e:	d03c      	beq.n	800310a <HAL_TIM_ConfigClockSource+0xf6>
 8003090:	2b50      	cmp	r3, #80	; 0x50
 8003092:	d873      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d058      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x136>
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d86f      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 800309c:	2b30      	cmp	r3, #48	; 0x30
 800309e:	d064      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x156>
 80030a0:	2b30      	cmp	r3, #48	; 0x30
 80030a2:	d86b      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d060      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x156>
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d867      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d05c      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x156>
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d05a      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030b4:	e062      	b.n	800317c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f000 f942 	bl	800334e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	609a      	str	r2, [r3, #8]
      break;
 80030e2:	e04e      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f000 f92b 	bl	800334e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003106:	609a      	str	r2, [r3, #8]
      break;
 8003108:	e03b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	461a      	mov	r2, r3
 8003118:	f000 f8a2 	bl	8003260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2150      	movs	r1, #80	; 0x50
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f8f9 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8003128:	e02b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	461a      	mov	r2, r3
 8003138:	f000 f8c0 	bl	80032bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2160      	movs	r1, #96	; 0x60
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f8e9 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8003148:	e01b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	461a      	mov	r2, r3
 8003158:	f000 f882 	bl	8003260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2140      	movs	r1, #64	; 0x40
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f8d9 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8003168:	e00b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4619      	mov	r1, r3
 8003174:	4610      	mov	r0, r2
 8003176:	f000 f8d0 	bl	800331a <TIM_ITRx_SetConfig>
        break;
 800317a:	e002      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800317c:	bf00      	nop
 800317e:	e000      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003180:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a29      	ldr	r2, [pc, #164]	; (8003254 <TIM_Base_SetConfig+0xb8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00b      	beq.n	80031cc <TIM_Base_SetConfig+0x30>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d007      	beq.n	80031cc <TIM_Base_SetConfig+0x30>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a26      	ldr	r2, [pc, #152]	; (8003258 <TIM_Base_SetConfig+0xbc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <TIM_Base_SetConfig+0x30>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a25      	ldr	r2, [pc, #148]	; (800325c <TIM_Base_SetConfig+0xc0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d108      	bne.n	80031de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <TIM_Base_SetConfig+0xb8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00b      	beq.n	80031fe <TIM_Base_SetConfig+0x62>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ec:	d007      	beq.n	80031fe <TIM_Base_SetConfig+0x62>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a19      	ldr	r2, [pc, #100]	; (8003258 <TIM_Base_SetConfig+0xbc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0x62>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a18      	ldr	r2, [pc, #96]	; (800325c <TIM_Base_SetConfig+0xc0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a07      	ldr	r2, [pc, #28]	; (8003254 <TIM_Base_SetConfig+0xb8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d103      	bne.n	8003244 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	615a      	str	r2, [r3, #20]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800

08003260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f023 0201 	bic.w	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800328a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f023 030a 	bic.w	r3, r3, #10
 800329c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f023 0210 	bic.w	r2, r3, #16
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	031b      	lsls	r3, r3, #12
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	621a      	str	r2, [r3, #32]
}
 8003310:	bf00      	nop
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	f043 0307 	orr.w	r3, r3, #7
 800333c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800334e:	b480      	push	{r7}
 8003350:	b087      	sub	sp, #28
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003368:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	021a      	lsls	r2, r3, #8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	431a      	orrs	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4313      	orrs	r3, r2
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	609a      	str	r2, [r3, #8]
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e046      	b.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a16      	ldr	r2, [pc, #88]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00e      	beq.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d009      	beq.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a12      	ldr	r2, [pc, #72]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a10      	ldr	r2, [pc, #64]	; (8003444 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10c      	bne.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	4313      	orrs	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800

08003448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e03f      	b.n	80034da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd ff58 	bl	8001324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2224      	movs	r2, #36	; 0x24
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800348a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f905 	bl	800369c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b08a      	sub	sp, #40	; 0x28
 80034e6:	af02      	add	r7, sp, #8
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d17c      	bne.n	80035fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_UART_Transmit+0x2c>
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e075      	b.n	80035fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_UART_Transmit+0x3e>
 800351c:	2302      	movs	r3, #2
 800351e:	e06e      	b.n	80035fe <HAL_UART_Transmit+0x11c>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2221      	movs	r2, #33	; 0x21
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003536:	f7fe f825 	bl	8001584 <HAL_GetTick>
 800353a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	88fa      	ldrh	r2, [r7, #6]
 8003540:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003550:	d108      	bne.n	8003564 <HAL_UART_Transmit+0x82>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d104      	bne.n	8003564 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	e003      	b.n	800356c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003568:	2300      	movs	r3, #0
 800356a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003574:	e02a      	b.n	80035cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f840 	bl	8003606 <UART_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e036      	b.n	80035fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10b      	bne.n	80035ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	3302      	adds	r3, #2
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	e007      	b.n	80035be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	781a      	ldrb	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	3301      	adds	r3, #1
 80035bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1cf      	bne.n	8003576 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2200      	movs	r2, #0
 80035de:	2140      	movs	r1, #64	; 0x40
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f810 	bl	8003606 <UART_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e006      	b.n	80035fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	4613      	mov	r3, r2
 8003614:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003616:	e02c      	b.n	8003672 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d028      	beq.n	8003672 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0x30>
 8003626:	f7fd ffad 	bl	8001584 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	429a      	cmp	r2, r3
 8003634:	d21d      	bcs.n	8003672 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003644:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e00f      	b.n	8003692 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4013      	ands	r3, r2
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	429a      	cmp	r2, r3
 8003680:	bf0c      	ite	eq
 8003682:	2301      	moveq	r3, #1
 8003684:	2300      	movne	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	429a      	cmp	r2, r3
 800368e:	d0c3      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036d6:	f023 030c 	bic.w	r3, r3, #12
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	430b      	orrs	r3, r1
 80036e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a2c      	ldr	r2, [pc, #176]	; (80037b0 <UART_SetConfig+0x114>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d103      	bne.n	800370c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003704:	f7ff fa44 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	e002      	b.n	8003712 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800370c:	f7ff fa2c 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8003710:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009a      	lsls	r2, r3, #2
 800371c:	441a      	add	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <UART_SetConfig+0x118>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	0119      	lsls	r1, r3, #4
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	009a      	lsls	r2, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fbb2 f2f3 	udiv	r2, r2, r3
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <UART_SetConfig+0x118>)
 800374a:	fba3 0302 	umull	r0, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	2064      	movs	r0, #100	; 0x64
 8003752:	fb00 f303 	mul.w	r3, r0, r3
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	3332      	adds	r3, #50	; 0x32
 800375c:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <UART_SetConfig+0x118>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003768:	4419      	add	r1, r3
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009a      	lsls	r2, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <UART_SetConfig+0x118>)
 8003782:	fba3 0302 	umull	r0, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2064      	movs	r0, #100	; 0x64
 800378a:	fb00 f303 	mul.w	r3, r0, r3
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	3332      	adds	r3, #50	; 0x32
 8003794:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <UART_SetConfig+0x118>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	f003 020f 	and.w	r2, r3, #15
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	440a      	add	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40013800 	.word	0x40013800
 80037b4:	51eb851f 	.word	0x51eb851f

080037b8 <__errno>:
 80037b8:	4b01      	ldr	r3, [pc, #4]	; (80037c0 <__errno+0x8>)
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000020 	.word	0x20000020

080037c4 <__libc_init_array>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	2600      	movs	r6, #0
 80037c8:	4d0c      	ldr	r5, [pc, #48]	; (80037fc <__libc_init_array+0x38>)
 80037ca:	4c0d      	ldr	r4, [pc, #52]	; (8003800 <__libc_init_array+0x3c>)
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d109      	bne.n	80037e8 <__libc_init_array+0x24>
 80037d4:	f000 fc9c 	bl	8004110 <_init>
 80037d8:	2600      	movs	r6, #0
 80037da:	4d0a      	ldr	r5, [pc, #40]	; (8003804 <__libc_init_array+0x40>)
 80037dc:	4c0a      	ldr	r4, [pc, #40]	; (8003808 <__libc_init_array+0x44>)
 80037de:	1b64      	subs	r4, r4, r5
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	42a6      	cmp	r6, r4
 80037e4:	d105      	bne.n	80037f2 <__libc_init_array+0x2e>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ec:	4798      	blx	r3
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7ee      	b.n	80037d0 <__libc_init_array+0xc>
 80037f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f6:	4798      	blx	r3
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7f2      	b.n	80037e2 <__libc_init_array+0x1e>
 80037fc:	080041ec 	.word	0x080041ec
 8003800:	080041ec 	.word	0x080041ec
 8003804:	080041ec 	.word	0x080041ec
 8003808:	080041f0 	.word	0x080041f0

0800380c <memset>:
 800380c:	4603      	mov	r3, r0
 800380e:	4402      	add	r2, r0
 8003810:	4293      	cmp	r3, r2
 8003812:	d100      	bne.n	8003816 <memset+0xa>
 8003814:	4770      	bx	lr
 8003816:	f803 1b01 	strb.w	r1, [r3], #1
 800381a:	e7f9      	b.n	8003810 <memset+0x4>

0800381c <siprintf>:
 800381c:	b40e      	push	{r1, r2, r3}
 800381e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003822:	b500      	push	{lr}
 8003824:	b09c      	sub	sp, #112	; 0x70
 8003826:	ab1d      	add	r3, sp, #116	; 0x74
 8003828:	9002      	str	r0, [sp, #8]
 800382a:	9006      	str	r0, [sp, #24]
 800382c:	9107      	str	r1, [sp, #28]
 800382e:	9104      	str	r1, [sp, #16]
 8003830:	4808      	ldr	r0, [pc, #32]	; (8003854 <siprintf+0x38>)
 8003832:	4909      	ldr	r1, [pc, #36]	; (8003858 <siprintf+0x3c>)
 8003834:	f853 2b04 	ldr.w	r2, [r3], #4
 8003838:	9105      	str	r1, [sp, #20]
 800383a:	6800      	ldr	r0, [r0, #0]
 800383c:	a902      	add	r1, sp, #8
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	f000 f868 	bl	8003914 <_svfiprintf_r>
 8003844:	2200      	movs	r2, #0
 8003846:	9b02      	ldr	r3, [sp, #8]
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	b01c      	add	sp, #112	; 0x70
 800384c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003850:	b003      	add	sp, #12
 8003852:	4770      	bx	lr
 8003854:	20000020 	.word	0x20000020
 8003858:	ffff0208 	.word	0xffff0208

0800385c <__ssputs_r>:
 800385c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003860:	688e      	ldr	r6, [r1, #8]
 8003862:	4682      	mov	sl, r0
 8003864:	429e      	cmp	r6, r3
 8003866:	460c      	mov	r4, r1
 8003868:	4690      	mov	r8, r2
 800386a:	461f      	mov	r7, r3
 800386c:	d838      	bhi.n	80038e0 <__ssputs_r+0x84>
 800386e:	898a      	ldrh	r2, [r1, #12]
 8003870:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003874:	d032      	beq.n	80038dc <__ssputs_r+0x80>
 8003876:	6825      	ldr	r5, [r4, #0]
 8003878:	6909      	ldr	r1, [r1, #16]
 800387a:	3301      	adds	r3, #1
 800387c:	eba5 0901 	sub.w	r9, r5, r1
 8003880:	6965      	ldr	r5, [r4, #20]
 8003882:	444b      	add	r3, r9
 8003884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800388c:	106d      	asrs	r5, r5, #1
 800388e:	429d      	cmp	r5, r3
 8003890:	bf38      	it	cc
 8003892:	461d      	movcc	r5, r3
 8003894:	0553      	lsls	r3, r2, #21
 8003896:	d531      	bpl.n	80038fc <__ssputs_r+0xa0>
 8003898:	4629      	mov	r1, r5
 800389a:	f000 fb6f 	bl	8003f7c <_malloc_r>
 800389e:	4606      	mov	r6, r0
 80038a0:	b950      	cbnz	r0, 80038b8 <__ssputs_r+0x5c>
 80038a2:	230c      	movs	r3, #12
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295
 80038a8:	f8ca 3000 	str.w	r3, [sl]
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b2:	81a3      	strh	r3, [r4, #12]
 80038b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b8:	464a      	mov	r2, r9
 80038ba:	6921      	ldr	r1, [r4, #16]
 80038bc:	f000 face 	bl	8003e5c <memcpy>
 80038c0:	89a3      	ldrh	r3, [r4, #12]
 80038c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ca:	81a3      	strh	r3, [r4, #12]
 80038cc:	6126      	str	r6, [r4, #16]
 80038ce:	444e      	add	r6, r9
 80038d0:	6026      	str	r6, [r4, #0]
 80038d2:	463e      	mov	r6, r7
 80038d4:	6165      	str	r5, [r4, #20]
 80038d6:	eba5 0509 	sub.w	r5, r5, r9
 80038da:	60a5      	str	r5, [r4, #8]
 80038dc:	42be      	cmp	r6, r7
 80038de:	d900      	bls.n	80038e2 <__ssputs_r+0x86>
 80038e0:	463e      	mov	r6, r7
 80038e2:	4632      	mov	r2, r6
 80038e4:	4641      	mov	r1, r8
 80038e6:	6820      	ldr	r0, [r4, #0]
 80038e8:	f000 fac6 	bl	8003e78 <memmove>
 80038ec:	68a3      	ldr	r3, [r4, #8]
 80038ee:	2000      	movs	r0, #0
 80038f0:	1b9b      	subs	r3, r3, r6
 80038f2:	60a3      	str	r3, [r4, #8]
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	4433      	add	r3, r6
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	e7db      	b.n	80038b4 <__ssputs_r+0x58>
 80038fc:	462a      	mov	r2, r5
 80038fe:	f000 fbb1 	bl	8004064 <_realloc_r>
 8003902:	4606      	mov	r6, r0
 8003904:	2800      	cmp	r0, #0
 8003906:	d1e1      	bne.n	80038cc <__ssputs_r+0x70>
 8003908:	4650      	mov	r0, sl
 800390a:	6921      	ldr	r1, [r4, #16]
 800390c:	f000 face 	bl	8003eac <_free_r>
 8003910:	e7c7      	b.n	80038a2 <__ssputs_r+0x46>
	...

08003914 <_svfiprintf_r>:
 8003914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003918:	4698      	mov	r8, r3
 800391a:	898b      	ldrh	r3, [r1, #12]
 800391c:	4607      	mov	r7, r0
 800391e:	061b      	lsls	r3, r3, #24
 8003920:	460d      	mov	r5, r1
 8003922:	4614      	mov	r4, r2
 8003924:	b09d      	sub	sp, #116	; 0x74
 8003926:	d50e      	bpl.n	8003946 <_svfiprintf_r+0x32>
 8003928:	690b      	ldr	r3, [r1, #16]
 800392a:	b963      	cbnz	r3, 8003946 <_svfiprintf_r+0x32>
 800392c:	2140      	movs	r1, #64	; 0x40
 800392e:	f000 fb25 	bl	8003f7c <_malloc_r>
 8003932:	6028      	str	r0, [r5, #0]
 8003934:	6128      	str	r0, [r5, #16]
 8003936:	b920      	cbnz	r0, 8003942 <_svfiprintf_r+0x2e>
 8003938:	230c      	movs	r3, #12
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	e0d1      	b.n	8003ae6 <_svfiprintf_r+0x1d2>
 8003942:	2340      	movs	r3, #64	; 0x40
 8003944:	616b      	str	r3, [r5, #20]
 8003946:	2300      	movs	r3, #0
 8003948:	9309      	str	r3, [sp, #36]	; 0x24
 800394a:	2320      	movs	r3, #32
 800394c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003950:	2330      	movs	r3, #48	; 0x30
 8003952:	f04f 0901 	mov.w	r9, #1
 8003956:	f8cd 800c 	str.w	r8, [sp, #12]
 800395a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b00 <_svfiprintf_r+0x1ec>
 800395e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003962:	4623      	mov	r3, r4
 8003964:	469a      	mov	sl, r3
 8003966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800396a:	b10a      	cbz	r2, 8003970 <_svfiprintf_r+0x5c>
 800396c:	2a25      	cmp	r2, #37	; 0x25
 800396e:	d1f9      	bne.n	8003964 <_svfiprintf_r+0x50>
 8003970:	ebba 0b04 	subs.w	fp, sl, r4
 8003974:	d00b      	beq.n	800398e <_svfiprintf_r+0x7a>
 8003976:	465b      	mov	r3, fp
 8003978:	4622      	mov	r2, r4
 800397a:	4629      	mov	r1, r5
 800397c:	4638      	mov	r0, r7
 800397e:	f7ff ff6d 	bl	800385c <__ssputs_r>
 8003982:	3001      	adds	r0, #1
 8003984:	f000 80aa 	beq.w	8003adc <_svfiprintf_r+0x1c8>
 8003988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800398a:	445a      	add	r2, fp
 800398c:	9209      	str	r2, [sp, #36]	; 0x24
 800398e:	f89a 3000 	ldrb.w	r3, [sl]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 80a2 	beq.w	8003adc <_svfiprintf_r+0x1c8>
 8003998:	2300      	movs	r3, #0
 800399a:	f04f 32ff 	mov.w	r2, #4294967295
 800399e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039a2:	f10a 0a01 	add.w	sl, sl, #1
 80039a6:	9304      	str	r3, [sp, #16]
 80039a8:	9307      	str	r3, [sp, #28]
 80039aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039ae:	931a      	str	r3, [sp, #104]	; 0x68
 80039b0:	4654      	mov	r4, sl
 80039b2:	2205      	movs	r2, #5
 80039b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b8:	4851      	ldr	r0, [pc, #324]	; (8003b00 <_svfiprintf_r+0x1ec>)
 80039ba:	f000 fa41 	bl	8003e40 <memchr>
 80039be:	9a04      	ldr	r2, [sp, #16]
 80039c0:	b9d8      	cbnz	r0, 80039fa <_svfiprintf_r+0xe6>
 80039c2:	06d0      	lsls	r0, r2, #27
 80039c4:	bf44      	itt	mi
 80039c6:	2320      	movmi	r3, #32
 80039c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039cc:	0711      	lsls	r1, r2, #28
 80039ce:	bf44      	itt	mi
 80039d0:	232b      	movmi	r3, #43	; 0x2b
 80039d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039d6:	f89a 3000 	ldrb.w	r3, [sl]
 80039da:	2b2a      	cmp	r3, #42	; 0x2a
 80039dc:	d015      	beq.n	8003a0a <_svfiprintf_r+0xf6>
 80039de:	4654      	mov	r4, sl
 80039e0:	2000      	movs	r0, #0
 80039e2:	f04f 0c0a 	mov.w	ip, #10
 80039e6:	9a07      	ldr	r2, [sp, #28]
 80039e8:	4621      	mov	r1, r4
 80039ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ee:	3b30      	subs	r3, #48	; 0x30
 80039f0:	2b09      	cmp	r3, #9
 80039f2:	d94e      	bls.n	8003a92 <_svfiprintf_r+0x17e>
 80039f4:	b1b0      	cbz	r0, 8003a24 <_svfiprintf_r+0x110>
 80039f6:	9207      	str	r2, [sp, #28]
 80039f8:	e014      	b.n	8003a24 <_svfiprintf_r+0x110>
 80039fa:	eba0 0308 	sub.w	r3, r0, r8
 80039fe:	fa09 f303 	lsl.w	r3, r9, r3
 8003a02:	4313      	orrs	r3, r2
 8003a04:	46a2      	mov	sl, r4
 8003a06:	9304      	str	r3, [sp, #16]
 8003a08:	e7d2      	b.n	80039b0 <_svfiprintf_r+0x9c>
 8003a0a:	9b03      	ldr	r3, [sp, #12]
 8003a0c:	1d19      	adds	r1, r3, #4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	9103      	str	r1, [sp, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bfbb      	ittet	lt
 8003a16:	425b      	neglt	r3, r3
 8003a18:	f042 0202 	orrlt.w	r2, r2, #2
 8003a1c:	9307      	strge	r3, [sp, #28]
 8003a1e:	9307      	strlt	r3, [sp, #28]
 8003a20:	bfb8      	it	lt
 8003a22:	9204      	strlt	r2, [sp, #16]
 8003a24:	7823      	ldrb	r3, [r4, #0]
 8003a26:	2b2e      	cmp	r3, #46	; 0x2e
 8003a28:	d10c      	bne.n	8003a44 <_svfiprintf_r+0x130>
 8003a2a:	7863      	ldrb	r3, [r4, #1]
 8003a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a2e:	d135      	bne.n	8003a9c <_svfiprintf_r+0x188>
 8003a30:	9b03      	ldr	r3, [sp, #12]
 8003a32:	3402      	adds	r4, #2
 8003a34:	1d1a      	adds	r2, r3, #4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	9203      	str	r2, [sp, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bfb8      	it	lt
 8003a3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a42:	9305      	str	r3, [sp, #20]
 8003a44:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003b04 <_svfiprintf_r+0x1f0>
 8003a48:	2203      	movs	r2, #3
 8003a4a:	4650      	mov	r0, sl
 8003a4c:	7821      	ldrb	r1, [r4, #0]
 8003a4e:	f000 f9f7 	bl	8003e40 <memchr>
 8003a52:	b140      	cbz	r0, 8003a66 <_svfiprintf_r+0x152>
 8003a54:	2340      	movs	r3, #64	; 0x40
 8003a56:	eba0 000a 	sub.w	r0, r0, sl
 8003a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a5e:	9b04      	ldr	r3, [sp, #16]
 8003a60:	3401      	adds	r4, #1
 8003a62:	4303      	orrs	r3, r0
 8003a64:	9304      	str	r3, [sp, #16]
 8003a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a6a:	2206      	movs	r2, #6
 8003a6c:	4826      	ldr	r0, [pc, #152]	; (8003b08 <_svfiprintf_r+0x1f4>)
 8003a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a72:	f000 f9e5 	bl	8003e40 <memchr>
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d038      	beq.n	8003aec <_svfiprintf_r+0x1d8>
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <_svfiprintf_r+0x1f8>)
 8003a7c:	bb1b      	cbnz	r3, 8003ac6 <_svfiprintf_r+0x1b2>
 8003a7e:	9b03      	ldr	r3, [sp, #12]
 8003a80:	3307      	adds	r3, #7
 8003a82:	f023 0307 	bic.w	r3, r3, #7
 8003a86:	3308      	adds	r3, #8
 8003a88:	9303      	str	r3, [sp, #12]
 8003a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a8c:	4433      	add	r3, r6
 8003a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a90:	e767      	b.n	8003962 <_svfiprintf_r+0x4e>
 8003a92:	460c      	mov	r4, r1
 8003a94:	2001      	movs	r0, #1
 8003a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a9a:	e7a5      	b.n	80039e8 <_svfiprintf_r+0xd4>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f04f 0c0a 	mov.w	ip, #10
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	3401      	adds	r4, #1
 8003aa6:	9305      	str	r3, [sp, #20]
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aae:	3a30      	subs	r2, #48	; 0x30
 8003ab0:	2a09      	cmp	r2, #9
 8003ab2:	d903      	bls.n	8003abc <_svfiprintf_r+0x1a8>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0c5      	beq.n	8003a44 <_svfiprintf_r+0x130>
 8003ab8:	9105      	str	r1, [sp, #20]
 8003aba:	e7c3      	b.n	8003a44 <_svfiprintf_r+0x130>
 8003abc:	4604      	mov	r4, r0
 8003abe:	2301      	movs	r3, #1
 8003ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ac4:	e7f0      	b.n	8003aa8 <_svfiprintf_r+0x194>
 8003ac6:	ab03      	add	r3, sp, #12
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	462a      	mov	r2, r5
 8003acc:	4638      	mov	r0, r7
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <_svfiprintf_r+0x1fc>)
 8003ad0:	a904      	add	r1, sp, #16
 8003ad2:	f3af 8000 	nop.w
 8003ad6:	1c42      	adds	r2, r0, #1
 8003ad8:	4606      	mov	r6, r0
 8003ada:	d1d6      	bne.n	8003a8a <_svfiprintf_r+0x176>
 8003adc:	89ab      	ldrh	r3, [r5, #12]
 8003ade:	065b      	lsls	r3, r3, #25
 8003ae0:	f53f af2c 	bmi.w	800393c <_svfiprintf_r+0x28>
 8003ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ae6:	b01d      	add	sp, #116	; 0x74
 8003ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aec:	ab03      	add	r3, sp, #12
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	462a      	mov	r2, r5
 8003af2:	4638      	mov	r0, r7
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <_svfiprintf_r+0x1fc>)
 8003af6:	a904      	add	r1, sp, #16
 8003af8:	f000 f87c 	bl	8003bf4 <_printf_i>
 8003afc:	e7eb      	b.n	8003ad6 <_svfiprintf_r+0x1c2>
 8003afe:	bf00      	nop
 8003b00:	080041b8 	.word	0x080041b8
 8003b04:	080041be 	.word	0x080041be
 8003b08:	080041c2 	.word	0x080041c2
 8003b0c:	00000000 	.word	0x00000000
 8003b10:	0800385d 	.word	0x0800385d

08003b14 <_printf_common>:
 8003b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b18:	4616      	mov	r6, r2
 8003b1a:	4699      	mov	r9, r3
 8003b1c:	688a      	ldr	r2, [r1, #8]
 8003b1e:	690b      	ldr	r3, [r1, #16]
 8003b20:	4607      	mov	r7, r0
 8003b22:	4293      	cmp	r3, r2
 8003b24:	bfb8      	it	lt
 8003b26:	4613      	movlt	r3, r2
 8003b28:	6033      	str	r3, [r6, #0]
 8003b2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b2e:	460c      	mov	r4, r1
 8003b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b34:	b10a      	cbz	r2, 8003b3a <_printf_common+0x26>
 8003b36:	3301      	adds	r3, #1
 8003b38:	6033      	str	r3, [r6, #0]
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	0699      	lsls	r1, r3, #26
 8003b3e:	bf42      	ittt	mi
 8003b40:	6833      	ldrmi	r3, [r6, #0]
 8003b42:	3302      	addmi	r3, #2
 8003b44:	6033      	strmi	r3, [r6, #0]
 8003b46:	6825      	ldr	r5, [r4, #0]
 8003b48:	f015 0506 	ands.w	r5, r5, #6
 8003b4c:	d106      	bne.n	8003b5c <_printf_common+0x48>
 8003b4e:	f104 0a19 	add.w	sl, r4, #25
 8003b52:	68e3      	ldr	r3, [r4, #12]
 8003b54:	6832      	ldr	r2, [r6, #0]
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	42ab      	cmp	r3, r5
 8003b5a:	dc28      	bgt.n	8003bae <_printf_common+0x9a>
 8003b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b60:	1e13      	subs	r3, r2, #0
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	bf18      	it	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	0692      	lsls	r2, r2, #26
 8003b6a:	d42d      	bmi.n	8003bc8 <_printf_common+0xb4>
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	4638      	mov	r0, r7
 8003b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b74:	47c0      	blx	r8
 8003b76:	3001      	adds	r0, #1
 8003b78:	d020      	beq.n	8003bbc <_printf_common+0xa8>
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	68e5      	ldr	r5, [r4, #12]
 8003b7e:	f003 0306 	and.w	r3, r3, #6
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	bf18      	it	ne
 8003b86:	2500      	movne	r5, #0
 8003b88:	6832      	ldr	r2, [r6, #0]
 8003b8a:	f04f 0600 	mov.w	r6, #0
 8003b8e:	68a3      	ldr	r3, [r4, #8]
 8003b90:	bf08      	it	eq
 8003b92:	1aad      	subeq	r5, r5, r2
 8003b94:	6922      	ldr	r2, [r4, #16]
 8003b96:	bf08      	it	eq
 8003b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	bfc4      	itt	gt
 8003ba0:	1a9b      	subgt	r3, r3, r2
 8003ba2:	18ed      	addgt	r5, r5, r3
 8003ba4:	341a      	adds	r4, #26
 8003ba6:	42b5      	cmp	r5, r6
 8003ba8:	d11a      	bne.n	8003be0 <_printf_common+0xcc>
 8003baa:	2000      	movs	r0, #0
 8003bac:	e008      	b.n	8003bc0 <_printf_common+0xac>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	4652      	mov	r2, sl
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	4638      	mov	r0, r7
 8003bb6:	47c0      	blx	r8
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d103      	bne.n	8003bc4 <_printf_common+0xb0>
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc4:	3501      	adds	r5, #1
 8003bc6:	e7c4      	b.n	8003b52 <_printf_common+0x3e>
 8003bc8:	2030      	movs	r0, #48	; 0x30
 8003bca:	18e1      	adds	r1, r4, r3
 8003bcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bd6:	4422      	add	r2, r4
 8003bd8:	3302      	adds	r3, #2
 8003bda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bde:	e7c5      	b.n	8003b6c <_printf_common+0x58>
 8003be0:	2301      	movs	r3, #1
 8003be2:	4622      	mov	r2, r4
 8003be4:	4649      	mov	r1, r9
 8003be6:	4638      	mov	r0, r7
 8003be8:	47c0      	blx	r8
 8003bea:	3001      	adds	r0, #1
 8003bec:	d0e6      	beq.n	8003bbc <_printf_common+0xa8>
 8003bee:	3601      	adds	r6, #1
 8003bf0:	e7d9      	b.n	8003ba6 <_printf_common+0x92>
	...

08003bf4 <_printf_i>:
 8003bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf8:	7e0f      	ldrb	r7, [r1, #24]
 8003bfa:	4691      	mov	r9, r2
 8003bfc:	2f78      	cmp	r7, #120	; 0x78
 8003bfe:	4680      	mov	r8, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	469a      	mov	sl, r3
 8003c04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c0a:	d807      	bhi.n	8003c1c <_printf_i+0x28>
 8003c0c:	2f62      	cmp	r7, #98	; 0x62
 8003c0e:	d80a      	bhi.n	8003c26 <_printf_i+0x32>
 8003c10:	2f00      	cmp	r7, #0
 8003c12:	f000 80d9 	beq.w	8003dc8 <_printf_i+0x1d4>
 8003c16:	2f58      	cmp	r7, #88	; 0x58
 8003c18:	f000 80a4 	beq.w	8003d64 <_printf_i+0x170>
 8003c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c24:	e03a      	b.n	8003c9c <_printf_i+0xa8>
 8003c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c2a:	2b15      	cmp	r3, #21
 8003c2c:	d8f6      	bhi.n	8003c1c <_printf_i+0x28>
 8003c2e:	a101      	add	r1, pc, #4	; (adr r1, 8003c34 <_printf_i+0x40>)
 8003c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c34:	08003c8d 	.word	0x08003c8d
 8003c38:	08003ca1 	.word	0x08003ca1
 8003c3c:	08003c1d 	.word	0x08003c1d
 8003c40:	08003c1d 	.word	0x08003c1d
 8003c44:	08003c1d 	.word	0x08003c1d
 8003c48:	08003c1d 	.word	0x08003c1d
 8003c4c:	08003ca1 	.word	0x08003ca1
 8003c50:	08003c1d 	.word	0x08003c1d
 8003c54:	08003c1d 	.word	0x08003c1d
 8003c58:	08003c1d 	.word	0x08003c1d
 8003c5c:	08003c1d 	.word	0x08003c1d
 8003c60:	08003daf 	.word	0x08003daf
 8003c64:	08003cd1 	.word	0x08003cd1
 8003c68:	08003d91 	.word	0x08003d91
 8003c6c:	08003c1d 	.word	0x08003c1d
 8003c70:	08003c1d 	.word	0x08003c1d
 8003c74:	08003dd1 	.word	0x08003dd1
 8003c78:	08003c1d 	.word	0x08003c1d
 8003c7c:	08003cd1 	.word	0x08003cd1
 8003c80:	08003c1d 	.word	0x08003c1d
 8003c84:	08003c1d 	.word	0x08003c1d
 8003c88:	08003d99 	.word	0x08003d99
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	602a      	str	r2, [r5, #0]
 8003c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0a4      	b.n	8003dea <_printf_i+0x1f6>
 8003ca0:	6820      	ldr	r0, [r4, #0]
 8003ca2:	6829      	ldr	r1, [r5, #0]
 8003ca4:	0606      	lsls	r6, r0, #24
 8003ca6:	f101 0304 	add.w	r3, r1, #4
 8003caa:	d50a      	bpl.n	8003cc2 <_printf_i+0xce>
 8003cac:	680e      	ldr	r6, [r1, #0]
 8003cae:	602b      	str	r3, [r5, #0]
 8003cb0:	2e00      	cmp	r6, #0
 8003cb2:	da03      	bge.n	8003cbc <_printf_i+0xc8>
 8003cb4:	232d      	movs	r3, #45	; 0x2d
 8003cb6:	4276      	negs	r6, r6
 8003cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cbc:	230a      	movs	r3, #10
 8003cbe:	485e      	ldr	r0, [pc, #376]	; (8003e38 <_printf_i+0x244>)
 8003cc0:	e019      	b.n	8003cf6 <_printf_i+0x102>
 8003cc2:	680e      	ldr	r6, [r1, #0]
 8003cc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cc8:	602b      	str	r3, [r5, #0]
 8003cca:	bf18      	it	ne
 8003ccc:	b236      	sxthne	r6, r6
 8003cce:	e7ef      	b.n	8003cb0 <_printf_i+0xbc>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	6820      	ldr	r0, [r4, #0]
 8003cd4:	1d19      	adds	r1, r3, #4
 8003cd6:	6029      	str	r1, [r5, #0]
 8003cd8:	0601      	lsls	r1, r0, #24
 8003cda:	d501      	bpl.n	8003ce0 <_printf_i+0xec>
 8003cdc:	681e      	ldr	r6, [r3, #0]
 8003cde:	e002      	b.n	8003ce6 <_printf_i+0xf2>
 8003ce0:	0646      	lsls	r6, r0, #25
 8003ce2:	d5fb      	bpl.n	8003cdc <_printf_i+0xe8>
 8003ce4:	881e      	ldrh	r6, [r3, #0]
 8003ce6:	2f6f      	cmp	r7, #111	; 0x6f
 8003ce8:	bf0c      	ite	eq
 8003cea:	2308      	moveq	r3, #8
 8003cec:	230a      	movne	r3, #10
 8003cee:	4852      	ldr	r0, [pc, #328]	; (8003e38 <_printf_i+0x244>)
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cf6:	6865      	ldr	r5, [r4, #4]
 8003cf8:	2d00      	cmp	r5, #0
 8003cfa:	bfa8      	it	ge
 8003cfc:	6821      	ldrge	r1, [r4, #0]
 8003cfe:	60a5      	str	r5, [r4, #8]
 8003d00:	bfa4      	itt	ge
 8003d02:	f021 0104 	bicge.w	r1, r1, #4
 8003d06:	6021      	strge	r1, [r4, #0]
 8003d08:	b90e      	cbnz	r6, 8003d0e <_printf_i+0x11a>
 8003d0a:	2d00      	cmp	r5, #0
 8003d0c:	d04d      	beq.n	8003daa <_printf_i+0x1b6>
 8003d0e:	4615      	mov	r5, r2
 8003d10:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d14:	fb03 6711 	mls	r7, r3, r1, r6
 8003d18:	5dc7      	ldrb	r7, [r0, r7]
 8003d1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d1e:	4637      	mov	r7, r6
 8003d20:	42bb      	cmp	r3, r7
 8003d22:	460e      	mov	r6, r1
 8003d24:	d9f4      	bls.n	8003d10 <_printf_i+0x11c>
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d10b      	bne.n	8003d42 <_printf_i+0x14e>
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	07de      	lsls	r6, r3, #31
 8003d2e:	d508      	bpl.n	8003d42 <_printf_i+0x14e>
 8003d30:	6923      	ldr	r3, [r4, #16]
 8003d32:	6861      	ldr	r1, [r4, #4]
 8003d34:	4299      	cmp	r1, r3
 8003d36:	bfde      	ittt	le
 8003d38:	2330      	movle	r3, #48	; 0x30
 8003d3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d42:	1b52      	subs	r2, r2, r5
 8003d44:	6122      	str	r2, [r4, #16]
 8003d46:	464b      	mov	r3, r9
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4640      	mov	r0, r8
 8003d4c:	f8cd a000 	str.w	sl, [sp]
 8003d50:	aa03      	add	r2, sp, #12
 8003d52:	f7ff fedf 	bl	8003b14 <_printf_common>
 8003d56:	3001      	adds	r0, #1
 8003d58:	d14c      	bne.n	8003df4 <_printf_i+0x200>
 8003d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5e:	b004      	add	sp, #16
 8003d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d64:	4834      	ldr	r0, [pc, #208]	; (8003e38 <_printf_i+0x244>)
 8003d66:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d6a:	6829      	ldr	r1, [r5, #0]
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d72:	6029      	str	r1, [r5, #0]
 8003d74:	061d      	lsls	r5, r3, #24
 8003d76:	d514      	bpl.n	8003da2 <_printf_i+0x1ae>
 8003d78:	07df      	lsls	r7, r3, #31
 8003d7a:	bf44      	itt	mi
 8003d7c:	f043 0320 	orrmi.w	r3, r3, #32
 8003d80:	6023      	strmi	r3, [r4, #0]
 8003d82:	b91e      	cbnz	r6, 8003d8c <_printf_i+0x198>
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	f023 0320 	bic.w	r3, r3, #32
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	e7af      	b.n	8003cf0 <_printf_i+0xfc>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	f043 0320 	orr.w	r3, r3, #32
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	2378      	movs	r3, #120	; 0x78
 8003d9a:	4828      	ldr	r0, [pc, #160]	; (8003e3c <_printf_i+0x248>)
 8003d9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003da0:	e7e3      	b.n	8003d6a <_printf_i+0x176>
 8003da2:	0659      	lsls	r1, r3, #25
 8003da4:	bf48      	it	mi
 8003da6:	b2b6      	uxthmi	r6, r6
 8003da8:	e7e6      	b.n	8003d78 <_printf_i+0x184>
 8003daa:	4615      	mov	r5, r2
 8003dac:	e7bb      	b.n	8003d26 <_printf_i+0x132>
 8003dae:	682b      	ldr	r3, [r5, #0]
 8003db0:	6826      	ldr	r6, [r4, #0]
 8003db2:	1d18      	adds	r0, r3, #4
 8003db4:	6961      	ldr	r1, [r4, #20]
 8003db6:	6028      	str	r0, [r5, #0]
 8003db8:	0635      	lsls	r5, r6, #24
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	d501      	bpl.n	8003dc2 <_printf_i+0x1ce>
 8003dbe:	6019      	str	r1, [r3, #0]
 8003dc0:	e002      	b.n	8003dc8 <_printf_i+0x1d4>
 8003dc2:	0670      	lsls	r0, r6, #25
 8003dc4:	d5fb      	bpl.n	8003dbe <_printf_i+0x1ca>
 8003dc6:	8019      	strh	r1, [r3, #0]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	4615      	mov	r5, r2
 8003dcc:	6123      	str	r3, [r4, #16]
 8003dce:	e7ba      	b.n	8003d46 <_printf_i+0x152>
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	1d1a      	adds	r2, r3, #4
 8003dd6:	602a      	str	r2, [r5, #0]
 8003dd8:	681d      	ldr	r5, [r3, #0]
 8003dda:	6862      	ldr	r2, [r4, #4]
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f000 f82f 	bl	8003e40 <memchr>
 8003de2:	b108      	cbz	r0, 8003de8 <_printf_i+0x1f4>
 8003de4:	1b40      	subs	r0, r0, r5
 8003de6:	6060      	str	r0, [r4, #4]
 8003de8:	6863      	ldr	r3, [r4, #4]
 8003dea:	6123      	str	r3, [r4, #16]
 8003dec:	2300      	movs	r3, #0
 8003dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df2:	e7a8      	b.n	8003d46 <_printf_i+0x152>
 8003df4:	462a      	mov	r2, r5
 8003df6:	4649      	mov	r1, r9
 8003df8:	4640      	mov	r0, r8
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	47d0      	blx	sl
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d0ab      	beq.n	8003d5a <_printf_i+0x166>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	079b      	lsls	r3, r3, #30
 8003e06:	d413      	bmi.n	8003e30 <_printf_i+0x23c>
 8003e08:	68e0      	ldr	r0, [r4, #12]
 8003e0a:	9b03      	ldr	r3, [sp, #12]
 8003e0c:	4298      	cmp	r0, r3
 8003e0e:	bfb8      	it	lt
 8003e10:	4618      	movlt	r0, r3
 8003e12:	e7a4      	b.n	8003d5e <_printf_i+0x16a>
 8003e14:	2301      	movs	r3, #1
 8003e16:	4632      	mov	r2, r6
 8003e18:	4649      	mov	r1, r9
 8003e1a:	4640      	mov	r0, r8
 8003e1c:	47d0      	blx	sl
 8003e1e:	3001      	adds	r0, #1
 8003e20:	d09b      	beq.n	8003d5a <_printf_i+0x166>
 8003e22:	3501      	adds	r5, #1
 8003e24:	68e3      	ldr	r3, [r4, #12]
 8003e26:	9903      	ldr	r1, [sp, #12]
 8003e28:	1a5b      	subs	r3, r3, r1
 8003e2a:	42ab      	cmp	r3, r5
 8003e2c:	dcf2      	bgt.n	8003e14 <_printf_i+0x220>
 8003e2e:	e7eb      	b.n	8003e08 <_printf_i+0x214>
 8003e30:	2500      	movs	r5, #0
 8003e32:	f104 0619 	add.w	r6, r4, #25
 8003e36:	e7f5      	b.n	8003e24 <_printf_i+0x230>
 8003e38:	080041c9 	.word	0x080041c9
 8003e3c:	080041da 	.word	0x080041da

08003e40 <memchr>:
 8003e40:	4603      	mov	r3, r0
 8003e42:	b510      	push	{r4, lr}
 8003e44:	b2c9      	uxtb	r1, r1
 8003e46:	4402      	add	r2, r0
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	d101      	bne.n	8003e52 <memchr+0x12>
 8003e4e:	2000      	movs	r0, #0
 8003e50:	e003      	b.n	8003e5a <memchr+0x1a>
 8003e52:	7804      	ldrb	r4, [r0, #0]
 8003e54:	3301      	adds	r3, #1
 8003e56:	428c      	cmp	r4, r1
 8003e58:	d1f6      	bne.n	8003e48 <memchr+0x8>
 8003e5a:	bd10      	pop	{r4, pc}

08003e5c <memcpy>:
 8003e5c:	440a      	add	r2, r1
 8003e5e:	4291      	cmp	r1, r2
 8003e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e64:	d100      	bne.n	8003e68 <memcpy+0xc>
 8003e66:	4770      	bx	lr
 8003e68:	b510      	push	{r4, lr}
 8003e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e6e:	4291      	cmp	r1, r2
 8003e70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e74:	d1f9      	bne.n	8003e6a <memcpy+0xe>
 8003e76:	bd10      	pop	{r4, pc}

08003e78 <memmove>:
 8003e78:	4288      	cmp	r0, r1
 8003e7a:	b510      	push	{r4, lr}
 8003e7c:	eb01 0402 	add.w	r4, r1, r2
 8003e80:	d902      	bls.n	8003e88 <memmove+0x10>
 8003e82:	4284      	cmp	r4, r0
 8003e84:	4623      	mov	r3, r4
 8003e86:	d807      	bhi.n	8003e98 <memmove+0x20>
 8003e88:	1e43      	subs	r3, r0, #1
 8003e8a:	42a1      	cmp	r1, r4
 8003e8c:	d008      	beq.n	8003ea0 <memmove+0x28>
 8003e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e96:	e7f8      	b.n	8003e8a <memmove+0x12>
 8003e98:	4601      	mov	r1, r0
 8003e9a:	4402      	add	r2, r0
 8003e9c:	428a      	cmp	r2, r1
 8003e9e:	d100      	bne.n	8003ea2 <memmove+0x2a>
 8003ea0:	bd10      	pop	{r4, pc}
 8003ea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eaa:	e7f7      	b.n	8003e9c <memmove+0x24>

08003eac <_free_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	4605      	mov	r5, r0
 8003eb0:	2900      	cmp	r1, #0
 8003eb2:	d040      	beq.n	8003f36 <_free_r+0x8a>
 8003eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eb8:	1f0c      	subs	r4, r1, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bfb8      	it	lt
 8003ebe:	18e4      	addlt	r4, r4, r3
 8003ec0:	f000 f910 	bl	80040e4 <__malloc_lock>
 8003ec4:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <_free_r+0x8c>)
 8003ec6:	6813      	ldr	r3, [r2, #0]
 8003ec8:	b933      	cbnz	r3, 8003ed8 <_free_r+0x2c>
 8003eca:	6063      	str	r3, [r4, #4]
 8003ecc:	6014      	str	r4, [r2, #0]
 8003ece:	4628      	mov	r0, r5
 8003ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ed4:	f000 b90c 	b.w	80040f0 <__malloc_unlock>
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	d908      	bls.n	8003eee <_free_r+0x42>
 8003edc:	6820      	ldr	r0, [r4, #0]
 8003ede:	1821      	adds	r1, r4, r0
 8003ee0:	428b      	cmp	r3, r1
 8003ee2:	bf01      	itttt	eq
 8003ee4:	6819      	ldreq	r1, [r3, #0]
 8003ee6:	685b      	ldreq	r3, [r3, #4]
 8003ee8:	1809      	addeq	r1, r1, r0
 8003eea:	6021      	streq	r1, [r4, #0]
 8003eec:	e7ed      	b.n	8003eca <_free_r+0x1e>
 8003eee:	461a      	mov	r2, r3
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	b10b      	cbz	r3, 8003ef8 <_free_r+0x4c>
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	d9fa      	bls.n	8003eee <_free_r+0x42>
 8003ef8:	6811      	ldr	r1, [r2, #0]
 8003efa:	1850      	adds	r0, r2, r1
 8003efc:	42a0      	cmp	r0, r4
 8003efe:	d10b      	bne.n	8003f18 <_free_r+0x6c>
 8003f00:	6820      	ldr	r0, [r4, #0]
 8003f02:	4401      	add	r1, r0
 8003f04:	1850      	adds	r0, r2, r1
 8003f06:	4283      	cmp	r3, r0
 8003f08:	6011      	str	r1, [r2, #0]
 8003f0a:	d1e0      	bne.n	8003ece <_free_r+0x22>
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4401      	add	r1, r0
 8003f12:	6011      	str	r1, [r2, #0]
 8003f14:	6053      	str	r3, [r2, #4]
 8003f16:	e7da      	b.n	8003ece <_free_r+0x22>
 8003f18:	d902      	bls.n	8003f20 <_free_r+0x74>
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	602b      	str	r3, [r5, #0]
 8003f1e:	e7d6      	b.n	8003ece <_free_r+0x22>
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	1821      	adds	r1, r4, r0
 8003f24:	428b      	cmp	r3, r1
 8003f26:	bf01      	itttt	eq
 8003f28:	6819      	ldreq	r1, [r3, #0]
 8003f2a:	685b      	ldreq	r3, [r3, #4]
 8003f2c:	1809      	addeq	r1, r1, r0
 8003f2e:	6021      	streq	r1, [r4, #0]
 8003f30:	6063      	str	r3, [r4, #4]
 8003f32:	6054      	str	r4, [r2, #4]
 8003f34:	e7cb      	b.n	8003ece <_free_r+0x22>
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	200001f8 	.word	0x200001f8

08003f3c <sbrk_aligned>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	4e0e      	ldr	r6, [pc, #56]	; (8003f78 <sbrk_aligned+0x3c>)
 8003f40:	460c      	mov	r4, r1
 8003f42:	6831      	ldr	r1, [r6, #0]
 8003f44:	4605      	mov	r5, r0
 8003f46:	b911      	cbnz	r1, 8003f4e <sbrk_aligned+0x12>
 8003f48:	f000 f8bc 	bl	80040c4 <_sbrk_r>
 8003f4c:	6030      	str	r0, [r6, #0]
 8003f4e:	4621      	mov	r1, r4
 8003f50:	4628      	mov	r0, r5
 8003f52:	f000 f8b7 	bl	80040c4 <_sbrk_r>
 8003f56:	1c43      	adds	r3, r0, #1
 8003f58:	d00a      	beq.n	8003f70 <sbrk_aligned+0x34>
 8003f5a:	1cc4      	adds	r4, r0, #3
 8003f5c:	f024 0403 	bic.w	r4, r4, #3
 8003f60:	42a0      	cmp	r0, r4
 8003f62:	d007      	beq.n	8003f74 <sbrk_aligned+0x38>
 8003f64:	1a21      	subs	r1, r4, r0
 8003f66:	4628      	mov	r0, r5
 8003f68:	f000 f8ac 	bl	80040c4 <_sbrk_r>
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d101      	bne.n	8003f74 <sbrk_aligned+0x38>
 8003f70:	f04f 34ff 	mov.w	r4, #4294967295
 8003f74:	4620      	mov	r0, r4
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	200001fc 	.word	0x200001fc

08003f7c <_malloc_r>:
 8003f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f80:	1ccd      	adds	r5, r1, #3
 8003f82:	f025 0503 	bic.w	r5, r5, #3
 8003f86:	3508      	adds	r5, #8
 8003f88:	2d0c      	cmp	r5, #12
 8003f8a:	bf38      	it	cc
 8003f8c:	250c      	movcc	r5, #12
 8003f8e:	2d00      	cmp	r5, #0
 8003f90:	4607      	mov	r7, r0
 8003f92:	db01      	blt.n	8003f98 <_malloc_r+0x1c>
 8003f94:	42a9      	cmp	r1, r5
 8003f96:	d905      	bls.n	8003fa4 <_malloc_r+0x28>
 8003f98:	230c      	movs	r3, #12
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa4:	4e2e      	ldr	r6, [pc, #184]	; (8004060 <_malloc_r+0xe4>)
 8003fa6:	f000 f89d 	bl	80040e4 <__malloc_lock>
 8003faa:	6833      	ldr	r3, [r6, #0]
 8003fac:	461c      	mov	r4, r3
 8003fae:	bb34      	cbnz	r4, 8003ffe <_malloc_r+0x82>
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	f7ff ffc2 	bl	8003f3c <sbrk_aligned>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	4604      	mov	r4, r0
 8003fbc:	d14d      	bne.n	800405a <_malloc_r+0xde>
 8003fbe:	6834      	ldr	r4, [r6, #0]
 8003fc0:	4626      	mov	r6, r4
 8003fc2:	2e00      	cmp	r6, #0
 8003fc4:	d140      	bne.n	8004048 <_malloc_r+0xcc>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	4631      	mov	r1, r6
 8003fca:	4638      	mov	r0, r7
 8003fcc:	eb04 0803 	add.w	r8, r4, r3
 8003fd0:	f000 f878 	bl	80040c4 <_sbrk_r>
 8003fd4:	4580      	cmp	r8, r0
 8003fd6:	d13a      	bne.n	800404e <_malloc_r+0xd2>
 8003fd8:	6821      	ldr	r1, [r4, #0]
 8003fda:	3503      	adds	r5, #3
 8003fdc:	1a6d      	subs	r5, r5, r1
 8003fde:	f025 0503 	bic.w	r5, r5, #3
 8003fe2:	3508      	adds	r5, #8
 8003fe4:	2d0c      	cmp	r5, #12
 8003fe6:	bf38      	it	cc
 8003fe8:	250c      	movcc	r5, #12
 8003fea:	4638      	mov	r0, r7
 8003fec:	4629      	mov	r1, r5
 8003fee:	f7ff ffa5 	bl	8003f3c <sbrk_aligned>
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d02b      	beq.n	800404e <_malloc_r+0xd2>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	442b      	add	r3, r5
 8003ffa:	6023      	str	r3, [r4, #0]
 8003ffc:	e00e      	b.n	800401c <_malloc_r+0xa0>
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	1b52      	subs	r2, r2, r5
 8004002:	d41e      	bmi.n	8004042 <_malloc_r+0xc6>
 8004004:	2a0b      	cmp	r2, #11
 8004006:	d916      	bls.n	8004036 <_malloc_r+0xba>
 8004008:	1961      	adds	r1, r4, r5
 800400a:	42a3      	cmp	r3, r4
 800400c:	6025      	str	r5, [r4, #0]
 800400e:	bf18      	it	ne
 8004010:	6059      	strne	r1, [r3, #4]
 8004012:	6863      	ldr	r3, [r4, #4]
 8004014:	bf08      	it	eq
 8004016:	6031      	streq	r1, [r6, #0]
 8004018:	5162      	str	r2, [r4, r5]
 800401a:	604b      	str	r3, [r1, #4]
 800401c:	4638      	mov	r0, r7
 800401e:	f104 060b 	add.w	r6, r4, #11
 8004022:	f000 f865 	bl	80040f0 <__malloc_unlock>
 8004026:	f026 0607 	bic.w	r6, r6, #7
 800402a:	1d23      	adds	r3, r4, #4
 800402c:	1af2      	subs	r2, r6, r3
 800402e:	d0b6      	beq.n	8003f9e <_malloc_r+0x22>
 8004030:	1b9b      	subs	r3, r3, r6
 8004032:	50a3      	str	r3, [r4, r2]
 8004034:	e7b3      	b.n	8003f9e <_malloc_r+0x22>
 8004036:	6862      	ldr	r2, [r4, #4]
 8004038:	42a3      	cmp	r3, r4
 800403a:	bf0c      	ite	eq
 800403c:	6032      	streq	r2, [r6, #0]
 800403e:	605a      	strne	r2, [r3, #4]
 8004040:	e7ec      	b.n	800401c <_malloc_r+0xa0>
 8004042:	4623      	mov	r3, r4
 8004044:	6864      	ldr	r4, [r4, #4]
 8004046:	e7b2      	b.n	8003fae <_malloc_r+0x32>
 8004048:	4634      	mov	r4, r6
 800404a:	6876      	ldr	r6, [r6, #4]
 800404c:	e7b9      	b.n	8003fc2 <_malloc_r+0x46>
 800404e:	230c      	movs	r3, #12
 8004050:	4638      	mov	r0, r7
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	f000 f84c 	bl	80040f0 <__malloc_unlock>
 8004058:	e7a1      	b.n	8003f9e <_malloc_r+0x22>
 800405a:	6025      	str	r5, [r4, #0]
 800405c:	e7de      	b.n	800401c <_malloc_r+0xa0>
 800405e:	bf00      	nop
 8004060:	200001f8 	.word	0x200001f8

08004064 <_realloc_r>:
 8004064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004068:	4680      	mov	r8, r0
 800406a:	4614      	mov	r4, r2
 800406c:	460e      	mov	r6, r1
 800406e:	b921      	cbnz	r1, 800407a <_realloc_r+0x16>
 8004070:	4611      	mov	r1, r2
 8004072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004076:	f7ff bf81 	b.w	8003f7c <_malloc_r>
 800407a:	b92a      	cbnz	r2, 8004088 <_realloc_r+0x24>
 800407c:	f7ff ff16 	bl	8003eac <_free_r>
 8004080:	4625      	mov	r5, r4
 8004082:	4628      	mov	r0, r5
 8004084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004088:	f000 f838 	bl	80040fc <_malloc_usable_size_r>
 800408c:	4284      	cmp	r4, r0
 800408e:	4607      	mov	r7, r0
 8004090:	d802      	bhi.n	8004098 <_realloc_r+0x34>
 8004092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004096:	d812      	bhi.n	80040be <_realloc_r+0x5a>
 8004098:	4621      	mov	r1, r4
 800409a:	4640      	mov	r0, r8
 800409c:	f7ff ff6e 	bl	8003f7c <_malloc_r>
 80040a0:	4605      	mov	r5, r0
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d0ed      	beq.n	8004082 <_realloc_r+0x1e>
 80040a6:	42bc      	cmp	r4, r7
 80040a8:	4622      	mov	r2, r4
 80040aa:	4631      	mov	r1, r6
 80040ac:	bf28      	it	cs
 80040ae:	463a      	movcs	r2, r7
 80040b0:	f7ff fed4 	bl	8003e5c <memcpy>
 80040b4:	4631      	mov	r1, r6
 80040b6:	4640      	mov	r0, r8
 80040b8:	f7ff fef8 	bl	8003eac <_free_r>
 80040bc:	e7e1      	b.n	8004082 <_realloc_r+0x1e>
 80040be:	4635      	mov	r5, r6
 80040c0:	e7df      	b.n	8004082 <_realloc_r+0x1e>
	...

080040c4 <_sbrk_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	2300      	movs	r3, #0
 80040c8:	4d05      	ldr	r5, [pc, #20]	; (80040e0 <_sbrk_r+0x1c>)
 80040ca:	4604      	mov	r4, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	602b      	str	r3, [r5, #0]
 80040d0:	f7fd f99e 	bl	8001410 <_sbrk>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_sbrk_r+0x1a>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	b103      	cbz	r3, 80040de <_sbrk_r+0x1a>
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	20000200 	.word	0x20000200

080040e4 <__malloc_lock>:
 80040e4:	4801      	ldr	r0, [pc, #4]	; (80040ec <__malloc_lock+0x8>)
 80040e6:	f000 b811 	b.w	800410c <__retarget_lock_acquire_recursive>
 80040ea:	bf00      	nop
 80040ec:	20000204 	.word	0x20000204

080040f0 <__malloc_unlock>:
 80040f0:	4801      	ldr	r0, [pc, #4]	; (80040f8 <__malloc_unlock+0x8>)
 80040f2:	f000 b80c 	b.w	800410e <__retarget_lock_release_recursive>
 80040f6:	bf00      	nop
 80040f8:	20000204 	.word	0x20000204

080040fc <_malloc_usable_size_r>:
 80040fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004100:	1f18      	subs	r0, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	bfbc      	itt	lt
 8004106:	580b      	ldrlt	r3, [r1, r0]
 8004108:	18c0      	addlt	r0, r0, r3
 800410a:	4770      	bx	lr

0800410c <__retarget_lock_acquire_recursive>:
 800410c:	4770      	bx	lr

0800410e <__retarget_lock_release_recursive>:
 800410e:	4770      	bx	lr

08004110 <_init>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr

0800411c <_fini>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr
