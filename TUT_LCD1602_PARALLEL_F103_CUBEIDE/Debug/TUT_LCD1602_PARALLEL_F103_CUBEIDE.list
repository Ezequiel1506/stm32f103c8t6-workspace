
TUT_LCD1602_PARALLEL_F103_CUBEIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005508  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08005618  08005618  00015618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a44  08005a44  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005a44  08005a44  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a44  08005a44  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a44  08005a44  00015a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  200001dc  08005c28  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005c28  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a570  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0d  00000000  00000000  0002a775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  0002d200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152fa  00000000  00000000  0002dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b941  00000000  00000000  0004307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072fc2  00000000  00000000  0004e9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c197d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000438c  00000000  00000000  000c19d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005600 	.word	0x08005600

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005600 	.word	0x08005600

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <delay+0x2c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000a9a:	bf00      	nop
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <delay+0x2c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d3f9      	bcc.n	8000a9c <delay+0x14>
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	200001f8 	.word	0x200001f8

08000ab8 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	2102      	movs	r1, #2
 8000acc:	4820      	ldr	r0, [pc, #128]	; (8000b50 <send_to_lcd+0x98>)
 8000ace:	f001 f8b1 	bl	8001c34 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	08db      	lsrs	r3, r3, #3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	481b      	ldr	r0, [pc, #108]	; (8000b50 <send_to_lcd+0x98>)
 8000ae4:	f001 f8a6 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	089b      	lsrs	r3, r3, #2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	4815      	ldr	r0, [pc, #84]	; (8000b50 <send_to_lcd+0x98>)
 8000afa:	f001 f89b 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	4810      	ldr	r0, [pc, #64]	; (8000b50 <send_to_lcd+0x98>)
 8000b10:	f001 f890 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2110      	movs	r1, #16
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <send_to_lcd+0x98>)
 8000b22:	f001 f887 	bl	8001c34 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2108      	movs	r1, #8
 8000b2a:	4809      	ldr	r0, [pc, #36]	; (8000b50 <send_to_lcd+0x98>)
 8000b2c:	f001 f882 	bl	8001c34 <HAL_GPIO_WritePin>
	delay (20);
 8000b30:	2014      	movs	r0, #20
 8000b32:	f7ff ffa9 	bl	8000a88 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2108      	movs	r1, #8
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <send_to_lcd+0x98>)
 8000b3c:	f001 f87a 	bl	8001c34 <HAL_GPIO_WritePin>
	delay (20);
 8000b40:	2014      	movs	r0, #20
 8000b42:	f7ff ffa1 	bl	8000a88 <delay>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40010800 	.word	0x40010800

08000b54 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	091b      	lsrs	r3, r3, #4
 8000b62:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ffa5 	bl	8000ab8 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 030f 	and.w	r3, r3, #15
 8000b74:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff9c 	bl	8000ab8 <send_to_lcd>
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff8b 	bl	8000ab8 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	2101      	movs	r1, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff82 	bl	8000ab8 <send_to_lcd>
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <lcd_clear>:

void lcd_clear (void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff ffc7 	bl	8000b54 <lcd_send_cmd>
	HAL_Delay(2);
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f000 fc1e 	bl	8001408 <HAL_Delay>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
    switch (row)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <lcd_put_cur+0x18>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d005      	beq.n	8000bf2 <lcd_put_cur+0x22>
 8000be6:	e009      	b.n	8000bfc <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bee:	603b      	str	r3, [r7, #0]
            break;
 8000bf0:	e004      	b.n	8000bfc <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000bf8:	603b      	str	r3, [r7, #0]
            break;
 8000bfa:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ffa7 	bl	8000b54 <lcd_send_cmd>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <lcd_send_string>:
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}

void lcd_send_string (char *str)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000c16:	e006      	b.n	8000c26 <lcd_send_string+0x18>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ffb1 	bl	8000b88 <lcd_send_data>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f4      	bne.n	8000c18 <lcd_send_string+0xa>
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3c:	f000 fb82 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c40:	f000 f832 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c44:	f000 f90e 	bl	8000e64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c48:	f000 f8ee 	bl	8000e28 <MX_DMA_Init>
  MX_TIM1_Init();
 8000c4c:	f000 f872 	bl	8000d34 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000c50:	f000 f8c0 	bl	8000dd4 <MX_USART1_UART_Init>
  /*void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
  {
  	HAL_UART_Receive_DMA(&huart1, rx_msg, 2);
  }*/

  HAL_TIM_Base_Start(&htim1);
 8000c54:	480f      	ldr	r0, [pc, #60]	; (8000c94 <main+0x5c>)
 8000c56:	f001 fc4a 	bl	80024ee <HAL_TIM_Base_Start>
  lcd_clear();
 8000c5a:	f7ff ffaf 	bl	8000bbc <lcd_clear>
  lcd_put_cur(0, 0);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff ffb5 	bl	8000bd0 <lcd_put_cur>
  lcd_send_string("HELLO ");
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <main+0x60>)
 8000c68:	f7ff ffd1 	bl	8000c0e <lcd_send_string>
  lcd_send_string("WORLD ");
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <main+0x64>)
 8000c6e:	f7ff ffce 	bl	8000c0e <lcd_send_string>
  lcd_send_string("FROM");
 8000c72:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <main+0x68>)
 8000c74:	f7ff ffcb 	bl	8000c0e <lcd_send_string>

  lcd_put_cur(1, 0);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff ffa8 	bl	8000bd0 <lcd_put_cur>
  lcd_send_string("CONTROLLERS TECH");
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <main+0x6c>)
 8000c82:	f7ff ffc4 	bl	8000c0e <lcd_send_string>
  HAL_Delay(3000);
 8000c86:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c8a:	f000 fbbd 	bl	8001408 <HAL_Delay>
  lcd_clear();
 8000c8e:	f7ff ff95 	bl	8000bbc <lcd_clear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <main+0x5a>
 8000c94:	200001f8 	.word	0x200001f8
 8000c98:	08005618 	.word	0x08005618
 8000c9c:	08005620 	.word	0x08005620
 8000ca0:	08005628 	.word	0x08005628
 8000ca4:	08005630 	.word	0x08005630

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b090      	sub	sp, #64	; 0x40
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	2228      	movs	r2, #40	; 0x28
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 ff8e 	bl	8002bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ce6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 ffb7 	bl	8001c64 <HAL_RCC_OscConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cfc:	f000 f912 	bl	8000f24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d00:	230f      	movs	r3, #15
 8000d02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d04:	2302      	movs	r3, #2
 8000d06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fa24 	bl	8002168 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d26:	f000 f8fd 	bl	8000f24 <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3740      	adds	r7, #64	; 0x40
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_TIM1_Init+0x98>)
 8000d52:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <MX_TIM1_Init+0x9c>)
 8000d54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_TIM1_Init+0x98>)
 8000d58:	2247      	movs	r2, #71	; 0x47
 8000d5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_TIM1_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM1_Init+0x98>)
 8000d64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_TIM1_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_TIM1_Init+0x98>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_TIM1_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d7c:	4813      	ldr	r0, [pc, #76]	; (8000dcc <MX_TIM1_Init+0x98>)
 8000d7e:	f001 fb8b 	bl	8002498 <HAL_TIM_Base_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d88:	f000 f8cc 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	4619      	mov	r1, r3
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <MX_TIM1_Init+0x98>)
 8000d9a:	f001 fbcb 	bl	8002534 <HAL_TIM_ConfigClockSource>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000da4:	f000 f8be 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000db0:	463b      	mov	r3, r7
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_TIM1_Init+0x98>)
 8000db6:	f001 fd79 	bl	80028ac <HAL_TIMEx_MasterConfigSynchronization>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000dc0:	f000 f8b0 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200001f8 	.word	0x200001f8
 8000dd0:	40012c00 	.word	0x40012c00

08000dd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <MX_USART1_UART_Init+0x50>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_USART1_UART_Init+0x4c>)
 8000e0c:	f001 fd92 	bl	8002934 <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e16:	f000 f885 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000238 	.word	0x20000238
 8000e24:	40013800 	.word	0x40013800

08000e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_DMA_Init+0x38>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <MX_DMA_Init+0x38>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6153      	str	r3, [r2, #20]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_DMA_Init+0x38>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f000 fbd7 	bl	80015fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e50:	200f      	movs	r0, #15
 8000e52:	f000 fbf0 	bl	8001636 <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <MX_GPIO_Init+0xb4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <MX_GPIO_Init+0xb4>)
 8000e7e:	f043 0320 	orr.w	r3, r3, #32
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <MX_GPIO_Init+0xb4>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_GPIO_Init+0xb4>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <MX_GPIO_Init+0xb4>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_GPIO_Init+0xb4>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_GPIO_Init+0xb4>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <MX_GPIO_Init+0xb4>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_GPIO_Init+0xb4>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	21fe      	movs	r1, #254	; 0xfe
 8000ec4:	4815      	ldr	r0, [pc, #84]	; (8000f1c <MX_GPIO_Init+0xb8>)
 8000ec6:	f000 feb5 	bl	8001c34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <MX_GPIO_Init+0xbc>)
 8000ed2:	f000 feaf 	bl	8001c34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000ed6:	23fe      	movs	r3, #254	; 0xfe
 8000ed8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4619      	mov	r1, r3
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <MX_GPIO_Init+0xb8>)
 8000eee:	f000 fd1d 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000ef2:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000ef6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_GPIO_Init+0xbc>)
 8000f0c:	f000 fd0e 	bl	800192c <HAL_GPIO_Init>

}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010800 	.word	0x40010800
 8000f20:	40010c00 	.word	0x40010c00

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6193      	str	r3, [r2, #24]
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_MspInit+0x60>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_MspInit+0x60>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000

08000f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <HAL_TIM_Base_MspInit+0x34>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10b      	bne.n	8000fbe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_TIM_Base_MspInit+0x38>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_TIM_Base_MspInit+0x38>)
 8000fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb0:	6193      	str	r3, [r2, #24]
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_TIM_Base_MspInit+0x38>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40012c00 	.word	0x40012c00
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <HAL_UART_MspInit+0xd8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d157      	bne.n	80010a0 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff0:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <HAL_UART_MspInit+0xdc>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a2d      	ldr	r2, [pc, #180]	; (80010ac <HAL_UART_MspInit+0xdc>)
 8000ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_UART_MspInit+0xdc>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <HAL_UART_MspInit+0xdc>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <HAL_UART_MspInit+0xdc>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <HAL_UART_MspInit+0xdc>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001024:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4619      	mov	r1, r3
 8001034:	481e      	ldr	r0, [pc, #120]	; (80010b0 <HAL_UART_MspInit+0xe0>)
 8001036:	f000 fc79 	bl	800192c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800103a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4619      	mov	r1, r3
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <HAL_UART_MspInit+0xe0>)
 8001050:	f000 fc6c 	bl	800192c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_UART_MspInit+0xe4>)
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <HAL_UART_MspInit+0xe8>)
 8001058:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_UART_MspInit+0xe4>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_UART_MspInit+0xe4>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <HAL_UART_MspInit+0xe4>)
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_UART_MspInit+0xe4>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_UART_MspInit+0xe4>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_UART_MspInit+0xe4>)
 800107a:	2220      	movs	r2, #32
 800107c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_UART_MspInit+0xe4>)
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <HAL_UART_MspInit+0xe4>)
 8001086:	f000 faf1 	bl	800166c <HAL_DMA_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001090:	f7ff ff48 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_UART_MspInit+0xe4>)
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
 800109a:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_UART_MspInit+0xe4>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40013800 	.word	0x40013800
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010800 	.word	0x40010800
 80010b4:	20000278 	.word	0x20000278
 80010b8:	40020058 	.word	0x40020058

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <HardFault_Handler+0x4>

080010ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <MemManage_Handler+0x4>

080010d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <BusFault_Handler+0x4>

080010da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <UsageFault_Handler+0x4>

080010e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001108:	f000 f962 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <DMA1_Channel5_IRQHandler+0x10>)
 8001116:	f000 fb03 	bl	8001720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000278 	.word	0x20000278

08001124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	return 1;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <_kill>:

int _kill(int pid, int sig)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800113c:	f001 fd22 	bl	8002b84 <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	2216      	movs	r2, #22
 8001144:	601a      	str	r2, [r3, #0]
	return -1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_exit>:

void _exit (int status)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800115a:	f04f 31ff 	mov.w	r1, #4294967295
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffe7 	bl	8001132 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001164:	e7fe      	b.n	8001164 <_exit+0x12>

08001166 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e00a      	b.n	800118e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001178:	f3af 8000 	nop.w
 800117c:	4601      	mov	r1, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	60ba      	str	r2, [r7, #8]
 8001184:	b2ca      	uxtb	r2, r1
 8001186:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	dbf0      	blt.n	8001178 <_read+0x12>
	}

return len;
 8001196:	687b      	ldr	r3, [r7, #4]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e009      	b.n	80011c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	60ba      	str	r2, [r7, #8]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3301      	adds	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dbf1      	blt.n	80011b2 <_write+0x12>
	}
	return len;
 80011ce:	687b      	ldr	r3, [r7, #4]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_close>:

int _close(int file)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	return -1;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <_isatty>:

int _isatty(int file)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	return 1;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
	return 0;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <_sbrk+0x50>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <_sbrk+0x16>
		heap_end = &end;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <_sbrk+0x50>)
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <_sbrk+0x54>)
 800124c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <_sbrk+0x50>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <_sbrk+0x50>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4413      	add	r3, r2
 800125c:	466a      	mov	r2, sp
 800125e:	4293      	cmp	r3, r2
 8001260:	d907      	bls.n	8001272 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001262:	f001 fc8f 	bl	8002b84 <__errno>
 8001266:	4603      	mov	r3, r0
 8001268:	220c      	movs	r2, #12
 800126a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	e006      	b.n	8001280 <_sbrk+0x48>
	}

	heap_end += incr;
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <_sbrk+0x50>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4a03      	ldr	r2, [pc, #12]	; (8001288 <_sbrk+0x50>)
 800127c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200002bc 	.word	0x200002bc
 800128c:	200002d8 	.word	0x200002d8

08001290 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <SystemInit+0x5c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <SystemInit+0x5c>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <SystemInit+0x5c>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4911      	ldr	r1, [pc, #68]	; (80012ec <SystemInit+0x5c>)
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <SystemInit+0x60>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <SystemInit+0x5c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <SystemInit+0x5c>)
 80012b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <SystemInit+0x5c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <SystemInit+0x5c>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <SystemInit+0x5c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <SystemInit+0x5c>)
 80012ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80012d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <SystemInit+0x5c>)
 80012d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80012da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SystemInit+0x64>)
 80012de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000
 80012f0:	f8ff0000 	.word	0xf8ff0000
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012fa:	e003      	b.n	8001304 <LoopCopyDataInit>

080012fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001300:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001302:	3104      	adds	r1, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001308:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800130a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800130c:	d3f6      	bcc.n	80012fc <CopyDataInit>
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001310:	e002      	b.n	8001318 <LoopFillZerobss>

08001312 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001314:	f842 3b04 	str.w	r3, [r2], #4

08001318 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800131a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800131c:	d3f9      	bcc.n	8001312 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800131e:	f7ff ffb7 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f001 fc35 	bl	8002b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001326:	f7ff fc87 	bl	8000c38 <main>
  bx lr
 800132a:	4770      	bx	lr
  ldr r3, =_sidata
 800132c:	08005a4c 	.word	0x08005a4c
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001334:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001338:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800133c:	200002d4 	.word	0x200002d4

08001340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC1_2_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_Init+0x28>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_Init+0x28>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f000 f947 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f808 	bl	8001370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001360:	f7ff fde6 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40022000 	.word	0x40022000

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_InitTick+0x54>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_InitTick+0x58>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f95f 	bl	8001652 <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00e      	b.n	80013bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d80a      	bhi.n	80013ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f000 f927 	bl	80015fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_InitTick+0x5c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_IncTick+0x1c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_IncTick+0x20>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <HAL_IncTick+0x20>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000008 	.word	0x20000008
 80013f0:	200002c0 	.word	0x200002c0

080013f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b02      	ldr	r3, [pc, #8]	; (8001404 <HAL_GetTick+0x10>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	200002c0 	.word	0x200002c0

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff fff0 	bl	80013f4 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffe0 	bl	80013f4 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0b      	blt.n	80014de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 021f 	and.w	r2, r3, #31
 80014cc:	4906      	ldr	r1, [pc, #24]	; (80014e8 <__NVIC_EnableIRQ+0x34>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff90 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff2d 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff42 	bl	8001498 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff90 	bl	8001540 <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5f 	bl	80014ec <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff35 	bl	80014b4 <__NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffa2 	bl	80015a4 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e043      	b.n	800170a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <HAL_DMA_Init+0xa8>)
 800168a:	4413      	add	r3, r2
 800168c:	4a22      	ldr	r2, [pc, #136]	; (8001718 <HAL_DMA_Init+0xac>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	009a      	lsls	r2, r3, #2
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a1f      	ldr	r2, [pc, #124]	; (800171c <HAL_DMA_Init+0xb0>)
 800169e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	bffdfff8 	.word	0xbffdfff8
 8001718:	cccccccd 	.word	0xcccccccd
 800171c:	40020000 	.word	0x40020000

08001720 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	2204      	movs	r2, #4
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d04f      	beq.n	80017e8 <HAL_DMA_IRQHandler+0xc8>
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d04a      	beq.n	80017e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d107      	bne.n	8001770 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0204 	bic.w	r2, r2, #4
 800176e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a66      	ldr	r2, [pc, #408]	; (8001910 <HAL_DMA_IRQHandler+0x1f0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d029      	beq.n	80017ce <HAL_DMA_IRQHandler+0xae>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a65      	ldr	r2, [pc, #404]	; (8001914 <HAL_DMA_IRQHandler+0x1f4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d022      	beq.n	80017ca <HAL_DMA_IRQHandler+0xaa>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a63      	ldr	r2, [pc, #396]	; (8001918 <HAL_DMA_IRQHandler+0x1f8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d01a      	beq.n	80017c4 <HAL_DMA_IRQHandler+0xa4>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a62      	ldr	r2, [pc, #392]	; (800191c <HAL_DMA_IRQHandler+0x1fc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d012      	beq.n	80017be <HAL_DMA_IRQHandler+0x9e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a60      	ldr	r2, [pc, #384]	; (8001920 <HAL_DMA_IRQHandler+0x200>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00a      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x98>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a5f      	ldr	r2, [pc, #380]	; (8001924 <HAL_DMA_IRQHandler+0x204>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d102      	bne.n	80017b2 <HAL_DMA_IRQHandler+0x92>
 80017ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017b0:	e00e      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017b6:	e00b      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017bc:	e008      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017c2:	e005      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c8:	e002      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017ca:	2340      	movs	r3, #64	; 0x40
 80017cc:	e000      	b.n	80017d0 <HAL_DMA_IRQHandler+0xb0>
 80017ce:	2304      	movs	r3, #4
 80017d0:	4a55      	ldr	r2, [pc, #340]	; (8001928 <HAL_DMA_IRQHandler+0x208>)
 80017d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 8094 	beq.w	8001906 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017e6:	e08e      	b.n	8001906 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	2202      	movs	r2, #2
 80017ee:	409a      	lsls	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d056      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x186>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d051      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10b      	bne.n	8001828 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 020a 	bic.w	r2, r2, #10
 800181e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a38      	ldr	r2, [pc, #224]	; (8001910 <HAL_DMA_IRQHandler+0x1f0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d029      	beq.n	8001886 <HAL_DMA_IRQHandler+0x166>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a37      	ldr	r2, [pc, #220]	; (8001914 <HAL_DMA_IRQHandler+0x1f4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d022      	beq.n	8001882 <HAL_DMA_IRQHandler+0x162>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a35      	ldr	r2, [pc, #212]	; (8001918 <HAL_DMA_IRQHandler+0x1f8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d01a      	beq.n	800187c <HAL_DMA_IRQHandler+0x15c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a34      	ldr	r2, [pc, #208]	; (800191c <HAL_DMA_IRQHandler+0x1fc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d012      	beq.n	8001876 <HAL_DMA_IRQHandler+0x156>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a32      	ldr	r2, [pc, #200]	; (8001920 <HAL_DMA_IRQHandler+0x200>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00a      	beq.n	8001870 <HAL_DMA_IRQHandler+0x150>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a31      	ldr	r2, [pc, #196]	; (8001924 <HAL_DMA_IRQHandler+0x204>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d102      	bne.n	800186a <HAL_DMA_IRQHandler+0x14a>
 8001864:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001868:	e00e      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 800186a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800186e:	e00b      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 8001870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001874:	e008      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 8001876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187a:	e005      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 800187c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001880:	e002      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 8001882:	2320      	movs	r3, #32
 8001884:	e000      	b.n	8001888 <HAL_DMA_IRQHandler+0x168>
 8001886:	2302      	movs	r3, #2
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <HAL_DMA_IRQHandler+0x208>)
 800188a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	d034      	beq.n	8001906 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018a4:	e02f      	b.n	8001906 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	2208      	movs	r2, #8
 80018ac:	409a      	lsls	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d028      	beq.n	8001908 <HAL_DMA_IRQHandler+0x1e8>
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d023      	beq.n	8001908 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 020e 	bic.w	r2, r2, #14
 80018ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d8:	2101      	movs	r1, #1
 80018da:	fa01 f202 	lsl.w	r2, r1, r2
 80018de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
    }
  }
  return;
 8001906:	bf00      	nop
 8001908:	bf00      	nop
}
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40020008 	.word	0x40020008
 8001914:	4002001c 	.word	0x4002001c
 8001918:	40020030 	.word	0x40020030
 800191c:	40020044 	.word	0x40020044
 8001920:	40020058 	.word	0x40020058
 8001924:	4002006c 	.word	0x4002006c
 8001928:	40020000 	.word	0x40020000

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b08b      	sub	sp, #44	; 0x2c
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193e:	e169      	b.n	8001c14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001940:	2201      	movs	r2, #1
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	429a      	cmp	r2, r3
 800195a:	f040 8158 	bne.w	8001c0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4a9a      	ldr	r2, [pc, #616]	; (8001bcc <HAL_GPIO_Init+0x2a0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d05e      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001968:	4a98      	ldr	r2, [pc, #608]	; (8001bcc <HAL_GPIO_Init+0x2a0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d875      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 800196e:	4a98      	ldr	r2, [pc, #608]	; (8001bd0 <HAL_GPIO_Init+0x2a4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d058      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001974:	4a96      	ldr	r2, [pc, #600]	; (8001bd0 <HAL_GPIO_Init+0x2a4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d86f      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 800197a:	4a96      	ldr	r2, [pc, #600]	; (8001bd4 <HAL_GPIO_Init+0x2a8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d052      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001980:	4a94      	ldr	r2, [pc, #592]	; (8001bd4 <HAL_GPIO_Init+0x2a8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d869      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 8001986:	4a94      	ldr	r2, [pc, #592]	; (8001bd8 <HAL_GPIO_Init+0x2ac>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d04c      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 800198c:	4a92      	ldr	r2, [pc, #584]	; (8001bd8 <HAL_GPIO_Init+0x2ac>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d863      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 8001992:	4a92      	ldr	r2, [pc, #584]	; (8001bdc <HAL_GPIO_Init+0x2b0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d046      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001998:	4a90      	ldr	r2, [pc, #576]	; (8001bdc <HAL_GPIO_Init+0x2b0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d85d      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d82a      	bhi.n	80019f8 <HAL_GPIO_Init+0xcc>
 80019a2:	2b12      	cmp	r3, #18
 80019a4:	d859      	bhi.n	8001a5a <HAL_GPIO_Init+0x12e>
 80019a6:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <HAL_GPIO_Init+0x80>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	08001a27 	.word	0x08001a27
 80019b0:	08001a01 	.word	0x08001a01
 80019b4:	08001a13 	.word	0x08001a13
 80019b8:	08001a55 	.word	0x08001a55
 80019bc:	08001a5b 	.word	0x08001a5b
 80019c0:	08001a5b 	.word	0x08001a5b
 80019c4:	08001a5b 	.word	0x08001a5b
 80019c8:	08001a5b 	.word	0x08001a5b
 80019cc:	08001a5b 	.word	0x08001a5b
 80019d0:	08001a5b 	.word	0x08001a5b
 80019d4:	08001a5b 	.word	0x08001a5b
 80019d8:	08001a5b 	.word	0x08001a5b
 80019dc:	08001a5b 	.word	0x08001a5b
 80019e0:	08001a5b 	.word	0x08001a5b
 80019e4:	08001a5b 	.word	0x08001a5b
 80019e8:	08001a5b 	.word	0x08001a5b
 80019ec:	08001a5b 	.word	0x08001a5b
 80019f0:	08001a09 	.word	0x08001a09
 80019f4:	08001a1d 	.word	0x08001a1d
 80019f8:	4a79      	ldr	r2, [pc, #484]	; (8001be0 <HAL_GPIO_Init+0x2b4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019fe:	e02c      	b.n	8001a5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e029      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	623b      	str	r3, [r7, #32]
          break;
 8001a10:	e024      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	3308      	adds	r3, #8
 8001a18:	623b      	str	r3, [r7, #32]
          break;
 8001a1a:	e01f      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	330c      	adds	r3, #12
 8001a22:	623b      	str	r3, [r7, #32]
          break;
 8001a24:	e01a      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	623b      	str	r3, [r7, #32]
          break;
 8001a32:	e013      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	611a      	str	r2, [r3, #16]
          break;
 8001a46:	e009      	b.n	8001a5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	615a      	str	r2, [r3, #20]
          break;
 8001a52:	e003      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e000      	b.n	8001a5c <HAL_GPIO_Init+0x130>
          break;
 8001a5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2bff      	cmp	r3, #255	; 0xff
 8001a60:	d801      	bhi.n	8001a66 <HAL_GPIO_Init+0x13a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	e001      	b.n	8001a6a <HAL_GPIO_Init+0x13e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2bff      	cmp	r3, #255	; 0xff
 8001a70:	d802      	bhi.n	8001a78 <HAL_GPIO_Init+0x14c>
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	e002      	b.n	8001a7e <HAL_GPIO_Init+0x152>
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	3b08      	subs	r3, #8
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	210f      	movs	r1, #15
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	401a      	ands	r2, r3
 8001a90:	6a39      	ldr	r1, [r7, #32]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80b1 	beq.w	8001c0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <HAL_GPIO_Init+0x2b8>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	; (8001be4 <HAL_GPIO_Init+0x2b8>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b4a      	ldr	r3, [pc, #296]	; (8001be4 <HAL_GPIO_Init+0x2b8>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac4:	4a48      	ldr	r2, [pc, #288]	; (8001be8 <HAL_GPIO_Init+0x2bc>)
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a40      	ldr	r2, [pc, #256]	; (8001bec <HAL_GPIO_Init+0x2c0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_GPIO_Init+0x1ec>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a3f      	ldr	r2, [pc, #252]	; (8001bf0 <HAL_GPIO_Init+0x2c4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00d      	beq.n	8001b14 <HAL_GPIO_Init+0x1e8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3e      	ldr	r2, [pc, #248]	; (8001bf4 <HAL_GPIO_Init+0x2c8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d007      	beq.n	8001b10 <HAL_GPIO_Init+0x1e4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3d      	ldr	r2, [pc, #244]	; (8001bf8 <HAL_GPIO_Init+0x2cc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_GPIO_Init+0x1e0>
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e006      	b.n	8001b1a <HAL_GPIO_Init+0x1ee>
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	e004      	b.n	8001b1a <HAL_GPIO_Init+0x1ee>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e002      	b.n	8001b1a <HAL_GPIO_Init+0x1ee>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <HAL_GPIO_Init+0x1ee>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1c:	f002 0203 	and.w	r2, r2, #3
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	4093      	lsls	r3, r2
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b2a:	492f      	ldr	r1, [pc, #188]	; (8001be8 <HAL_GPIO_Init+0x2bc>)
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b44:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	492c      	ldr	r1, [pc, #176]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b52:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4928      	ldr	r1, [pc, #160]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d006      	beq.n	8001b7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b6c:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4922      	ldr	r1, [pc, #136]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	491e      	ldr	r1, [pc, #120]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4918      	ldr	r1, [pc, #96]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4914      	ldr	r1, [pc, #80]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d021      	beq.n	8001c00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	490e      	ldr	r1, [pc, #56]	; (8001bfc <HAL_GPIO_Init+0x2d0>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
 8001bc8:	e021      	b.n	8001c0e <HAL_GPIO_Init+0x2e2>
 8001bca:	bf00      	nop
 8001bcc:	10320000 	.word	0x10320000
 8001bd0:	10310000 	.word	0x10310000
 8001bd4:	10220000 	.word	0x10220000
 8001bd8:	10210000 	.word	0x10210000
 8001bdc:	10120000 	.word	0x10120000
 8001be0:	10110000 	.word	0x10110000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40010c00 	.word	0x40010c00
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40011400 	.word	0x40011400
 8001bfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_GPIO_Init+0x304>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4909      	ldr	r1, [pc, #36]	; (8001c30 <HAL_GPIO_Init+0x304>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	3301      	adds	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f47f ae8e 	bne.w	8001940 <HAL_GPIO_Init+0x14>
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	372c      	adds	r7, #44	; 0x2c
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	40010400 	.word	0x40010400

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c50:	e003      	b.n	8001c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	611a      	str	r2, [r3, #16]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e272      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8087 	beq.w	8001d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c84:	4b92      	ldr	r3, [pc, #584]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d00c      	beq.n	8001caa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c90:	4b8f      	ldr	r3, [pc, #572]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d112      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x5e>
 8001c9c:	4b8c      	ldr	r3, [pc, #560]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001caa:	4b89      	ldr	r3, [pc, #548]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d06c      	beq.n	8001d90 <HAL_RCC_OscConfig+0x12c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d168      	bne.n	8001d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e24c      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x76>
 8001ccc:	4b80      	ldr	r3, [pc, #512]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a7f      	ldr	r2, [pc, #508]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	e02e      	b.n	8001d38 <HAL_RCC_OscConfig+0xd4>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x98>
 8001ce2:	4b7b      	ldr	r3, [pc, #492]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7a      	ldr	r2, [pc, #488]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b78      	ldr	r3, [pc, #480]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a77      	ldr	r2, [pc, #476]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e01d      	b.n	8001d38 <HAL_RCC_OscConfig+0xd4>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0xbc>
 8001d06:	4b72      	ldr	r3, [pc, #456]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a71      	ldr	r2, [pc, #452]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b6f      	ldr	r3, [pc, #444]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a6e      	ldr	r2, [pc, #440]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0xd4>
 8001d20:	4b6b      	ldr	r3, [pc, #428]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a6a      	ldr	r2, [pc, #424]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b68      	ldr	r3, [pc, #416]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a67      	ldr	r2, [pc, #412]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fb58 	bl	80013f4 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff fb54 	bl	80013f4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e200      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0xe4>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fb44 	bl	80013f4 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff fb40 	bl	80013f4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1ec      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x10c>
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d063      	beq.n	8001e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d9e:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00b      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001daa:	4b49      	ldr	r3, [pc, #292]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d11c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x18c>
 8001db6:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d116      	bne.n	8001df0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_RCC_OscConfig+0x176>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e1c0      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dda:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4939      	ldr	r1, [pc, #228]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dee:	e03a      	b.n	8001e66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d020      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df8:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7ff faf9 	bl	80013f4 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e06:	f7ff faf5 	bl	80013f4 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1a1      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4927      	ldr	r1, [pc, #156]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
 8001e38:	e015      	b.n	8001e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3a:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fad8 	bl	80013f4 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e48:	f7ff fad4 	bl	80013f4 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e180      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d03a      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d019      	beq.n	8001eae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e80:	f7ff fab8 	bl	80013f4 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e88:	f7ff fab4 	bl	80013f4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e160      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f000 fad8 	bl	800245c <RCC_Delay>
 8001eac:	e01c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb4:	f7ff fa9e 	bl	80013f4 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eba:	e00f      	b.n	8001edc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fa9a 	bl	80013f4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d908      	bls.n	8001edc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e146      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	42420000 	.word	0x42420000
 8001ed8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001edc:	4b92      	ldr	r3, [pc, #584]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1e9      	bne.n	8001ebc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80a6 	beq.w	8002042 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efa:	4b8b      	ldr	r3, [pc, #556]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10d      	bne.n	8001f22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b88      	ldr	r3, [pc, #544]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a87      	ldr	r2, [pc, #540]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]
 8001f12:	4b85      	ldr	r3, [pc, #532]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b82      	ldr	r3, [pc, #520]	; (800212c <HAL_RCC_OscConfig+0x4c8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d118      	bne.n	8001f60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2e:	4b7f      	ldr	r3, [pc, #508]	; (800212c <HAL_RCC_OscConfig+0x4c8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a7e      	ldr	r2, [pc, #504]	; (800212c <HAL_RCC_OscConfig+0x4c8>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fa5b 	bl	80013f4 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f42:	f7ff fa57 	bl	80013f4 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b64      	cmp	r3, #100	; 0x64
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e103      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	4b75      	ldr	r3, [pc, #468]	; (800212c <HAL_RCC_OscConfig+0x4c8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x312>
 8001f68:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a6e      	ldr	r2, [pc, #440]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	e02d      	b.n	8001fd2 <HAL_RCC_OscConfig+0x36e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x334>
 8001f7e:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a69      	ldr	r2, [pc, #420]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6213      	str	r3, [r2, #32]
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a66      	ldr	r2, [pc, #408]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	6213      	str	r3, [r2, #32]
 8001f96:	e01c      	b.n	8001fd2 <HAL_RCC_OscConfig+0x36e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	d10c      	bne.n	8001fba <HAL_RCC_OscConfig+0x356>
 8001fa0:	4b61      	ldr	r3, [pc, #388]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a60      	ldr	r2, [pc, #384]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	f043 0304 	orr.w	r3, r3, #4
 8001faa:	6213      	str	r3, [r2, #32]
 8001fac:	4b5e      	ldr	r3, [pc, #376]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4a5d      	ldr	r2, [pc, #372]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6213      	str	r3, [r2, #32]
 8001fb8:	e00b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x36e>
 8001fba:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a5a      	ldr	r2, [pc, #360]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6213      	str	r3, [r2, #32]
 8001fc6:	4b58      	ldr	r3, [pc, #352]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a57      	ldr	r2, [pc, #348]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d015      	beq.n	8002006 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fda:	f7ff fa0b 	bl	80013f4 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff fa07 	bl	80013f4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0b1      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff8:	4b4b      	ldr	r3, [pc, #300]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0ee      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x37e>
 8002004:	e014      	b.n	8002030 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002006:	f7ff f9f5 	bl	80013f4 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7ff f9f1 	bl	80013f4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	; 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e09b      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002024:	4b40      	ldr	r3, [pc, #256]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1ee      	bne.n	800200e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d105      	bne.n	8002042 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002036:	4b3c      	ldr	r3, [pc, #240]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4a3b      	ldr	r2, [pc, #236]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002040:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8087 	beq.w	800215a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	2b08      	cmp	r3, #8
 8002056:	d061      	beq.n	800211c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d146      	bne.n	80020ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002060:	4b33      	ldr	r3, [pc, #204]	; (8002130 <HAL_RCC_OscConfig+0x4cc>)
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7ff f9c5 	bl	80013f4 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206e:	f7ff f9c1 	bl	80013f4 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e06d      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002080:	4b29      	ldr	r3, [pc, #164]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f0      	bne.n	800206e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002094:	d108      	bne.n	80020a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4921      	ldr	r1, [pc, #132]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a19      	ldr	r1, [r3, #32]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	430b      	orrs	r3, r1
 80020ba:	491b      	ldr	r1, [pc, #108]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_RCC_OscConfig+0x4cc>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff f995 	bl	80013f4 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ce:	f7ff f991 	bl	80013f4 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e03d      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x46a>
 80020ec:	e035      	b.n	800215a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <HAL_RCC_OscConfig+0x4cc>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff f97e 	bl	80013f4 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fc:	f7ff f97a 	bl	80013f4 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e026      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x498>
 800211a:	e01e      	b.n	800215a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d107      	bne.n	8002134 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e019      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
 8002128:	40021000 	.word	0x40021000
 800212c:	40007000 	.word	0x40007000
 8002130:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_OscConfig+0x500>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	429a      	cmp	r2, r3
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d001      	beq.n	800215a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000

08002168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0d0      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800217c:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d910      	bls.n	80021ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0207 	bic.w	r2, r3, #7
 8002192:	4965      	ldr	r1, [pc, #404]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b63      	ldr	r3, [pc, #396]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0b8      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d020      	beq.n	80021fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c4:	4b59      	ldr	r3, [pc, #356]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a58      	ldr	r2, [pc, #352]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021dc:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e8:	4b50      	ldr	r3, [pc, #320]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	494d      	ldr	r1, [pc, #308]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d040      	beq.n	8002288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b47      	ldr	r3, [pc, #284]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d115      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e07f      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002226:	4b41      	ldr	r3, [pc, #260]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e073      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002236:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e06b      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002246:	4b39      	ldr	r3, [pc, #228]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f023 0203 	bic.w	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4936      	ldr	r1, [pc, #216]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002258:	f7ff f8cc 	bl	80013f4 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	e00a      	b.n	8002276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002260:	f7ff f8c8 	bl	80013f4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e053      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 020c 	and.w	r2, r3, #12
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	429a      	cmp	r2, r3
 8002286:	d1eb      	bne.n	8002260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d210      	bcs.n	80022b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 0207 	bic.w	r2, r3, #7
 800229e:	4922      	ldr	r1, [pc, #136]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e032      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4916      	ldr	r1, [pc, #88]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	490e      	ldr	r1, [pc, #56]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022f6:	f000 f821 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80022fa:	4602      	mov	r2, r0
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	490a      	ldr	r1, [pc, #40]	; (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 8002308:	5ccb      	ldrb	r3, [r1, r3]
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_RCC_ClockConfig+0x1cc>)
 8002310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1d0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f82a 	bl	8001370 <HAL_InitTick>

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40022000 	.word	0x40022000
 800232c:	40021000 	.word	0x40021000
 8002330:	08005654 	.word	0x08005654
 8002334:	20000000 	.word	0x20000000
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	b490      	push	{r4, r7}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002344:	1d3c      	adds	r4, r7, #4
 8002346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800234c:	f240 2301 	movw	r3, #513	; 0x201
 8002350:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002366:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b04      	cmp	r3, #4
 8002374:	d002      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x40>
 8002376:	2b08      	cmp	r3, #8
 8002378:	d003      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0x46>
 800237a:	e02b      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800237e:	623b      	str	r3, [r7, #32]
      break;
 8002380:	e02b      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	0c9b      	lsrs	r3, r3, #18
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	3328      	adds	r3, #40	; 0x28
 800238c:	443b      	add	r3, r7
 800238e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002392:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d012      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	0c5b      	lsrs	r3, r3, #17
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	3328      	adds	r3, #40	; 0x28
 80023aa:	443b      	add	r3, r7
 80023ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023b6:	fb03 f202 	mul.w	r2, r3, r2
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
 80023c2:	e004      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c8:	fb02 f303 	mul.w	r3, r2, r3
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	623b      	str	r3, [r7, #32]
      break;
 80023d2:	e002      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023d6:	623b      	str	r3, [r7, #32]
      break;
 80023d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023da:	6a3b      	ldr	r3, [r7, #32]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3728      	adds	r7, #40	; 0x28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc90      	pop	{r4, r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	08005644 	.word	0x08005644
 80023ec:	40021000 	.word	0x40021000
 80023f0:	007a1200 	.word	0x007a1200
 80023f4:	003d0900 	.word	0x003d0900

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b02      	ldr	r3, [pc, #8]	; (8002408 <HAL_RCC_GetHCLKFreq+0x10>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	20000000 	.word	0x20000000

0800240c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002410:	f7ff fff2 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4903      	ldr	r1, [pc, #12]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	08005664 	.word	0x08005664

08002434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002438:	f7ff ffde 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0adb      	lsrs	r3, r3, #11
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	08005664 	.word	0x08005664

0800245c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <RCC_Delay+0x34>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <RCC_Delay+0x38>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0a5b      	lsrs	r3, r3, #9
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002478:	bf00      	nop
  }
  while (Delay --);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	60fa      	str	r2, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f9      	bne.n	8002478 <RCC_Delay+0x1c>
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	20000000 	.word	0x20000000
 8002494:	10624dd3 	.word	0x10624dd3

08002498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e01d      	b.n	80024e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fd68 	bl	8000f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 f8f0 	bl	80026bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d007      	beq.n	8002520 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_TIM_ConfigClockSource+0x18>
 8002548:	2302      	movs	r3, #2
 800254a:	e0b3      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x180>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800256a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002572:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002584:	d03e      	beq.n	8002604 <HAL_TIM_ConfigClockSource+0xd0>
 8002586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258a:	f200 8087 	bhi.w	800269c <HAL_TIM_ConfigClockSource+0x168>
 800258e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002592:	f000 8085 	beq.w	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259a:	d87f      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 800259c:	2b70      	cmp	r3, #112	; 0x70
 800259e:	d01a      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0xa2>
 80025a0:	2b70      	cmp	r3, #112	; 0x70
 80025a2:	d87b      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025a4:	2b60      	cmp	r3, #96	; 0x60
 80025a6:	d050      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x116>
 80025a8:	2b60      	cmp	r3, #96	; 0x60
 80025aa:	d877      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025ac:	2b50      	cmp	r3, #80	; 0x50
 80025ae:	d03c      	beq.n	800262a <HAL_TIM_ConfigClockSource+0xf6>
 80025b0:	2b50      	cmp	r3, #80	; 0x50
 80025b2:	d873      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025b4:	2b40      	cmp	r3, #64	; 0x40
 80025b6:	d058      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x136>
 80025b8:	2b40      	cmp	r3, #64	; 0x40
 80025ba:	d86f      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025bc:	2b30      	cmp	r3, #48	; 0x30
 80025be:	d064      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x156>
 80025c0:	2b30      	cmp	r3, #48	; 0x30
 80025c2:	d86b      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d060      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x156>
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d867      	bhi.n	800269c <HAL_TIM_ConfigClockSource+0x168>
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d05c      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x156>
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d05a      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80025d4:	e062      	b.n	800269c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6899      	ldr	r1, [r3, #8]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f000 f942 	bl	800286e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	609a      	str	r2, [r3, #8]
      break;
 8002602:	e04e      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f000 f92b 	bl	800286e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002626:	609a      	str	r2, [r3, #8]
      break;
 8002628:	e03b      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	461a      	mov	r2, r3
 8002638:	f000 f8a2 	bl	8002780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2150      	movs	r1, #80	; 0x50
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f8f9 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 8002648:	e02b      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	461a      	mov	r2, r3
 8002658:	f000 f8c0 	bl	80027dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2160      	movs	r1, #96	; 0x60
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f8e9 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 8002668:	e01b      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	461a      	mov	r2, r3
 8002678:	f000 f882 	bl	8002780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2140      	movs	r1, #64	; 0x40
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f8d9 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 8002688:	e00b      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	4610      	mov	r0, r2
 8002696:	f000 f8d0 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 800269a:	e002      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800269c:	bf00      	nop
 800269e:	e000      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a29      	ldr	r2, [pc, #164]	; (8002774 <TIM_Base_SetConfig+0xb8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00b      	beq.n	80026ec <TIM_Base_SetConfig+0x30>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026da:	d007      	beq.n	80026ec <TIM_Base_SetConfig+0x30>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a26      	ldr	r2, [pc, #152]	; (8002778 <TIM_Base_SetConfig+0xbc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <TIM_Base_SetConfig+0x30>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a25      	ldr	r2, [pc, #148]	; (800277c <TIM_Base_SetConfig+0xc0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d108      	bne.n	80026fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <TIM_Base_SetConfig+0xb8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00b      	beq.n	800271e <TIM_Base_SetConfig+0x62>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270c:	d007      	beq.n	800271e <TIM_Base_SetConfig+0x62>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a19      	ldr	r2, [pc, #100]	; (8002778 <TIM_Base_SetConfig+0xbc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d003      	beq.n	800271e <TIM_Base_SetConfig+0x62>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a18      	ldr	r2, [pc, #96]	; (800277c <TIM_Base_SetConfig+0xc0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d108      	bne.n	8002730 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a07      	ldr	r2, [pc, #28]	; (8002774 <TIM_Base_SetConfig+0xb8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d103      	bne.n	8002764 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	615a      	str	r2, [r3, #20]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800

08002780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	f023 0201 	bic.w	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f023 030a 	bic.w	r3, r3, #10
 80027bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	621a      	str	r2, [r3, #32]
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f023 0210 	bic.w	r2, r3, #16
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002806:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	031b      	lsls	r3, r3, #12
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002818:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	621a      	str	r2, [r3, #32]
}
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	f043 0307 	orr.w	r3, r3, #7
 800285c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800286e:	b480      	push	{r7}
 8002870:	b087      	sub	sp, #28
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002888:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	021a      	lsls	r2, r3, #8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	431a      	orrs	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4313      	orrs	r3, r2
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	609a      	str	r2, [r3, #8]
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e032      	b.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028fc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	4313      	orrs	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e03f      	b.n	80029c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe fb38 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2224      	movs	r2, #36	; 0x24
 8002964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f829 	bl	80029d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800298c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800299c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a0a:	f023 030c 	bic.w	r3, r3, #12
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	68f9      	ldr	r1, [r7, #12]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <UART_SetConfig+0x1ac>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d14e      	bne.n	8002ad6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a38:	f7ff fcfc 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8002a3c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	009a      	lsls	r2, r3, #2
 8002a48:	441a      	add	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	0119      	lsls	r1, r3, #4
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	009a      	lsls	r2, r3, #2
 8002a68:	441a      	add	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a74:	4b42      	ldr	r3, [pc, #264]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002a76:	fba3 0302 	umull	r0, r3, r3, r2
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2064      	movs	r0, #100	; 0x64
 8002a7e:	fb00 f303 	mul.w	r3, r0, r3
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	3332      	adds	r3, #50	; 0x32
 8002a88:	4a3d      	ldr	r2, [pc, #244]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a94:	4419      	add	r1, r3
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009a      	lsls	r2, r3, #2
 8002aa0:	441a      	add	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aac:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002aae:	fba3 0302 	umull	r0, r3, r3, r2
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2064      	movs	r0, #100	; 0x64
 8002ab6:	fb00 f303 	mul.w	r3, r0, r3
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	3332      	adds	r3, #50	; 0x32
 8002ac0:	4a2f      	ldr	r2, [pc, #188]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	f003 020f 	and.w	r2, r3, #15
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	440a      	add	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002ad4:	e04d      	b.n	8002b72 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ad6:	f7ff fc99 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 8002ada:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009a      	lsls	r2, r3, #2
 8002ae6:	441a      	add	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	0119      	lsls	r1, r3, #4
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009a      	lsls	r2, r3, #2
 8002b06:	441a      	add	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002b14:	fba3 0302 	umull	r0, r3, r3, r2
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	2064      	movs	r0, #100	; 0x64
 8002b1c:	fb00 f303 	mul.w	r3, r0, r3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	3332      	adds	r3, #50	; 0x32
 8002b26:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b32:	4419      	add	r1, r3
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009a      	lsls	r2, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002b4c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	2064      	movs	r0, #100	; 0x64
 8002b54:	fb00 f303 	mul.w	r3, r0, r3
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	3332      	adds	r3, #50	; 0x32
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <UART_SetConfig+0x1b0>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	440a      	add	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	51eb851f 	.word	0x51eb851f

08002b84 <__errno>:
 8002b84:	4b01      	ldr	r3, [pc, #4]	; (8002b8c <__errno+0x8>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000000c 	.word	0x2000000c

08002b90 <__libc_init_array>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	2600      	movs	r6, #0
 8002b94:	4d0c      	ldr	r5, [pc, #48]	; (8002bc8 <__libc_init_array+0x38>)
 8002b96:	4c0d      	ldr	r4, [pc, #52]	; (8002bcc <__libc_init_array+0x3c>)
 8002b98:	1b64      	subs	r4, r4, r5
 8002b9a:	10a4      	asrs	r4, r4, #2
 8002b9c:	42a6      	cmp	r6, r4
 8002b9e:	d109      	bne.n	8002bb4 <__libc_init_array+0x24>
 8002ba0:	f002 fd2e 	bl	8005600 <_init>
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	4d0a      	ldr	r5, [pc, #40]	; (8002bd0 <__libc_init_array+0x40>)
 8002ba8:	4c0a      	ldr	r4, [pc, #40]	; (8002bd4 <__libc_init_array+0x44>)
 8002baa:	1b64      	subs	r4, r4, r5
 8002bac:	10a4      	asrs	r4, r4, #2
 8002bae:	42a6      	cmp	r6, r4
 8002bb0:	d105      	bne.n	8002bbe <__libc_init_array+0x2e>
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb8:	4798      	blx	r3
 8002bba:	3601      	adds	r6, #1
 8002bbc:	e7ee      	b.n	8002b9c <__libc_init_array+0xc>
 8002bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc2:	4798      	blx	r3
 8002bc4:	3601      	adds	r6, #1
 8002bc6:	e7f2      	b.n	8002bae <__libc_init_array+0x1e>
 8002bc8:	08005a44 	.word	0x08005a44
 8002bcc:	08005a44 	.word	0x08005a44
 8002bd0:	08005a44 	.word	0x08005a44
 8002bd4:	08005a48 	.word	0x08005a48

08002bd8 <memset>:
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4402      	add	r2, r0
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d100      	bne.n	8002be2 <memset+0xa>
 8002be0:	4770      	bx	lr
 8002be2:	f803 1b01 	strb.w	r1, [r3], #1
 8002be6:	e7f9      	b.n	8002bdc <memset+0x4>

08002be8 <__cvt>:
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bee:	461f      	mov	r7, r3
 8002bf0:	bfbb      	ittet	lt
 8002bf2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002bf6:	461f      	movlt	r7, r3
 8002bf8:	2300      	movge	r3, #0
 8002bfa:	232d      	movlt	r3, #45	; 0x2d
 8002bfc:	b088      	sub	sp, #32
 8002bfe:	4614      	mov	r4, r2
 8002c00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002c02:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002c04:	7013      	strb	r3, [r2, #0]
 8002c06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002c08:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002c0c:	f023 0820 	bic.w	r8, r3, #32
 8002c10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002c14:	d005      	beq.n	8002c22 <__cvt+0x3a>
 8002c16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002c1a:	d100      	bne.n	8002c1e <__cvt+0x36>
 8002c1c:	3501      	adds	r5, #1
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e000      	b.n	8002c24 <__cvt+0x3c>
 8002c22:	2303      	movs	r3, #3
 8002c24:	aa07      	add	r2, sp, #28
 8002c26:	9204      	str	r2, [sp, #16]
 8002c28:	aa06      	add	r2, sp, #24
 8002c2a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002c2e:	e9cd 3500 	strd	r3, r5, [sp]
 8002c32:	4622      	mov	r2, r4
 8002c34:	463b      	mov	r3, r7
 8002c36:	f000 fcc3 	bl	80035c0 <_dtoa_r>
 8002c3a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002c3e:	4606      	mov	r6, r0
 8002c40:	d102      	bne.n	8002c48 <__cvt+0x60>
 8002c42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002c44:	07db      	lsls	r3, r3, #31
 8002c46:	d522      	bpl.n	8002c8e <__cvt+0xa6>
 8002c48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002c4c:	eb06 0905 	add.w	r9, r6, r5
 8002c50:	d110      	bne.n	8002c74 <__cvt+0x8c>
 8002c52:	7833      	ldrb	r3, [r6, #0]
 8002c54:	2b30      	cmp	r3, #48	; 0x30
 8002c56:	d10a      	bne.n	8002c6e <__cvt+0x86>
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	4639      	mov	r1, r7
 8002c60:	f7fd fea2 	bl	80009a8 <__aeabi_dcmpeq>
 8002c64:	b918      	cbnz	r0, 8002c6e <__cvt+0x86>
 8002c66:	f1c5 0501 	rsb	r5, r5, #1
 8002c6a:	f8ca 5000 	str.w	r5, [sl]
 8002c6e:	f8da 3000 	ldr.w	r3, [sl]
 8002c72:	4499      	add	r9, r3
 8002c74:	2200      	movs	r2, #0
 8002c76:	2300      	movs	r3, #0
 8002c78:	4620      	mov	r0, r4
 8002c7a:	4639      	mov	r1, r7
 8002c7c:	f7fd fe94 	bl	80009a8 <__aeabi_dcmpeq>
 8002c80:	b108      	cbz	r0, 8002c86 <__cvt+0x9e>
 8002c82:	f8cd 901c 	str.w	r9, [sp, #28]
 8002c86:	2230      	movs	r2, #48	; 0x30
 8002c88:	9b07      	ldr	r3, [sp, #28]
 8002c8a:	454b      	cmp	r3, r9
 8002c8c:	d307      	bcc.n	8002c9e <__cvt+0xb6>
 8002c8e:	4630      	mov	r0, r6
 8002c90:	9b07      	ldr	r3, [sp, #28]
 8002c92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002c94:	1b9b      	subs	r3, r3, r6
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	b008      	add	sp, #32
 8002c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c9e:	1c59      	adds	r1, r3, #1
 8002ca0:	9107      	str	r1, [sp, #28]
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e7f0      	b.n	8002c88 <__cvt+0xa0>

08002ca6 <__exponent>:
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002caa:	2900      	cmp	r1, #0
 8002cac:	f803 2b02 	strb.w	r2, [r3], #2
 8002cb0:	bfb6      	itet	lt
 8002cb2:	222d      	movlt	r2, #45	; 0x2d
 8002cb4:	222b      	movge	r2, #43	; 0x2b
 8002cb6:	4249      	neglt	r1, r1
 8002cb8:	2909      	cmp	r1, #9
 8002cba:	7042      	strb	r2, [r0, #1]
 8002cbc:	dd2b      	ble.n	8002d16 <__exponent+0x70>
 8002cbe:	f10d 0407 	add.w	r4, sp, #7
 8002cc2:	46a4      	mov	ip, r4
 8002cc4:	270a      	movs	r7, #10
 8002cc6:	fb91 f6f7 	sdiv	r6, r1, r7
 8002cca:	460a      	mov	r2, r1
 8002ccc:	46a6      	mov	lr, r4
 8002cce:	fb07 1516 	mls	r5, r7, r6, r1
 8002cd2:	2a63      	cmp	r2, #99	; 0x63
 8002cd4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002cd8:	4631      	mov	r1, r6
 8002cda:	f104 34ff 	add.w	r4, r4, #4294967295
 8002cde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002ce2:	dcf0      	bgt.n	8002cc6 <__exponent+0x20>
 8002ce4:	3130      	adds	r1, #48	; 0x30
 8002ce6:	f1ae 0502 	sub.w	r5, lr, #2
 8002cea:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002cee:	4629      	mov	r1, r5
 8002cf0:	1c44      	adds	r4, r0, #1
 8002cf2:	4561      	cmp	r1, ip
 8002cf4:	d30a      	bcc.n	8002d0c <__exponent+0x66>
 8002cf6:	f10d 0209 	add.w	r2, sp, #9
 8002cfa:	eba2 020e 	sub.w	r2, r2, lr
 8002cfe:	4565      	cmp	r5, ip
 8002d00:	bf88      	it	hi
 8002d02:	2200      	movhi	r2, #0
 8002d04:	4413      	add	r3, r2
 8002d06:	1a18      	subs	r0, r3, r0
 8002d08:	b003      	add	sp, #12
 8002d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d10:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002d14:	e7ed      	b.n	8002cf2 <__exponent+0x4c>
 8002d16:	2330      	movs	r3, #48	; 0x30
 8002d18:	3130      	adds	r1, #48	; 0x30
 8002d1a:	7083      	strb	r3, [r0, #2]
 8002d1c:	70c1      	strb	r1, [r0, #3]
 8002d1e:	1d03      	adds	r3, r0, #4
 8002d20:	e7f1      	b.n	8002d06 <__exponent+0x60>
	...

08002d24 <_printf_float>:
 8002d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d28:	b091      	sub	sp, #68	; 0x44
 8002d2a:	460c      	mov	r4, r1
 8002d2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002d30:	4616      	mov	r6, r2
 8002d32:	461f      	mov	r7, r3
 8002d34:	4605      	mov	r5, r0
 8002d36:	f001 fa31 	bl	800419c <_localeconv_r>
 8002d3a:	6803      	ldr	r3, [r0, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d40:	f7fd fa06 	bl	8000150 <strlen>
 8002d44:	2300      	movs	r3, #0
 8002d46:	930e      	str	r3, [sp, #56]	; 0x38
 8002d48:	f8d8 3000 	ldr.w	r3, [r8]
 8002d4c:	900a      	str	r0, [sp, #40]	; 0x28
 8002d4e:	3307      	adds	r3, #7
 8002d50:	f023 0307 	bic.w	r3, r3, #7
 8002d54:	f103 0208 	add.w	r2, r3, #8
 8002d58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002d5c:	f8d4 b000 	ldr.w	fp, [r4]
 8002d60:	f8c8 2000 	str.w	r2, [r8]
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002d6c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002d70:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d76:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7a:	4640      	mov	r0, r8
 8002d7c:	4b9c      	ldr	r3, [pc, #624]	; (8002ff0 <_printf_float+0x2cc>)
 8002d7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d80:	f7fd fe44 	bl	8000a0c <__aeabi_dcmpun>
 8002d84:	bb70      	cbnz	r0, 8002de4 <_printf_float+0xc0>
 8002d86:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8a:	4640      	mov	r0, r8
 8002d8c:	4b98      	ldr	r3, [pc, #608]	; (8002ff0 <_printf_float+0x2cc>)
 8002d8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d90:	f7fd fe1e 	bl	80009d0 <__aeabi_dcmple>
 8002d94:	bb30      	cbnz	r0, 8002de4 <_printf_float+0xc0>
 8002d96:	2200      	movs	r2, #0
 8002d98:	2300      	movs	r3, #0
 8002d9a:	4640      	mov	r0, r8
 8002d9c:	4651      	mov	r1, sl
 8002d9e:	f7fd fe0d 	bl	80009bc <__aeabi_dcmplt>
 8002da2:	b110      	cbz	r0, 8002daa <_printf_float+0x86>
 8002da4:	232d      	movs	r3, #45	; 0x2d
 8002da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002daa:	4b92      	ldr	r3, [pc, #584]	; (8002ff4 <_printf_float+0x2d0>)
 8002dac:	4892      	ldr	r0, [pc, #584]	; (8002ff8 <_printf_float+0x2d4>)
 8002dae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002db2:	bf94      	ite	ls
 8002db4:	4698      	movls	r8, r3
 8002db6:	4680      	movhi	r8, r0
 8002db8:	2303      	movs	r3, #3
 8002dba:	f04f 0a00 	mov.w	sl, #0
 8002dbe:	6123      	str	r3, [r4, #16]
 8002dc0:	f02b 0304 	bic.w	r3, fp, #4
 8002dc4:	6023      	str	r3, [r4, #0]
 8002dc6:	4633      	mov	r3, r6
 8002dc8:	4621      	mov	r1, r4
 8002dca:	4628      	mov	r0, r5
 8002dcc:	9700      	str	r7, [sp, #0]
 8002dce:	aa0f      	add	r2, sp, #60	; 0x3c
 8002dd0:	f000 f9d4 	bl	800317c <_printf_common>
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	f040 8090 	bne.w	8002efa <_printf_float+0x1d6>
 8002dda:	f04f 30ff 	mov.w	r0, #4294967295
 8002dde:	b011      	add	sp, #68	; 0x44
 8002de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002de4:	4642      	mov	r2, r8
 8002de6:	4653      	mov	r3, sl
 8002de8:	4640      	mov	r0, r8
 8002dea:	4651      	mov	r1, sl
 8002dec:	f7fd fe0e 	bl	8000a0c <__aeabi_dcmpun>
 8002df0:	b148      	cbz	r0, 8002e06 <_printf_float+0xe2>
 8002df2:	f1ba 0f00 	cmp.w	sl, #0
 8002df6:	bfb8      	it	lt
 8002df8:	232d      	movlt	r3, #45	; 0x2d
 8002dfa:	4880      	ldr	r0, [pc, #512]	; (8002ffc <_printf_float+0x2d8>)
 8002dfc:	bfb8      	it	lt
 8002dfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002e02:	4b7f      	ldr	r3, [pc, #508]	; (8003000 <_printf_float+0x2dc>)
 8002e04:	e7d3      	b.n	8002dae <_printf_float+0x8a>
 8002e06:	6863      	ldr	r3, [r4, #4]
 8002e08:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	d142      	bne.n	8002e96 <_printf_float+0x172>
 8002e10:	2306      	movs	r3, #6
 8002e12:	6063      	str	r3, [r4, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	9206      	str	r2, [sp, #24]
 8002e18:	aa0e      	add	r2, sp, #56	; 0x38
 8002e1a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002e1e:	aa0d      	add	r2, sp, #52	; 0x34
 8002e20:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002e24:	9203      	str	r2, [sp, #12]
 8002e26:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002e2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002e2e:	6023      	str	r3, [r4, #0]
 8002e30:	6863      	ldr	r3, [r4, #4]
 8002e32:	4642      	mov	r2, r8
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4628      	mov	r0, r5
 8002e38:	4653      	mov	r3, sl
 8002e3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8002e3c:	f7ff fed4 	bl	8002be8 <__cvt>
 8002e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e42:	4680      	mov	r8, r0
 8002e44:	2947      	cmp	r1, #71	; 0x47
 8002e46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002e48:	d108      	bne.n	8002e5c <_printf_float+0x138>
 8002e4a:	1cc8      	adds	r0, r1, #3
 8002e4c:	db02      	blt.n	8002e54 <_printf_float+0x130>
 8002e4e:	6863      	ldr	r3, [r4, #4]
 8002e50:	4299      	cmp	r1, r3
 8002e52:	dd40      	ble.n	8002ed6 <_printf_float+0x1b2>
 8002e54:	f1a9 0902 	sub.w	r9, r9, #2
 8002e58:	fa5f f989 	uxtb.w	r9, r9
 8002e5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002e60:	d81f      	bhi.n	8002ea2 <_printf_float+0x17e>
 8002e62:	464a      	mov	r2, r9
 8002e64:	3901      	subs	r1, #1
 8002e66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002e6a:	910d      	str	r1, [sp, #52]	; 0x34
 8002e6c:	f7ff ff1b 	bl	8002ca6 <__exponent>
 8002e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e72:	4682      	mov	sl, r0
 8002e74:	1813      	adds	r3, r2, r0
 8002e76:	2a01      	cmp	r2, #1
 8002e78:	6123      	str	r3, [r4, #16]
 8002e7a:	dc02      	bgt.n	8002e82 <_printf_float+0x15e>
 8002e7c:	6822      	ldr	r2, [r4, #0]
 8002e7e:	07d2      	lsls	r2, r2, #31
 8002e80:	d501      	bpl.n	8002e86 <_printf_float+0x162>
 8002e82:	3301      	adds	r3, #1
 8002e84:	6123      	str	r3, [r4, #16]
 8002e86:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d09b      	beq.n	8002dc6 <_printf_float+0xa2>
 8002e8e:	232d      	movs	r3, #45	; 0x2d
 8002e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e94:	e797      	b.n	8002dc6 <_printf_float+0xa2>
 8002e96:	2947      	cmp	r1, #71	; 0x47
 8002e98:	d1bc      	bne.n	8002e14 <_printf_float+0xf0>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1ba      	bne.n	8002e14 <_printf_float+0xf0>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e7b7      	b.n	8002e12 <_printf_float+0xee>
 8002ea2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002ea6:	d118      	bne.n	8002eda <_printf_float+0x1b6>
 8002ea8:	2900      	cmp	r1, #0
 8002eaa:	6863      	ldr	r3, [r4, #4]
 8002eac:	dd0b      	ble.n	8002ec6 <_printf_float+0x1a2>
 8002eae:	6121      	str	r1, [r4, #16]
 8002eb0:	b913      	cbnz	r3, 8002eb8 <_printf_float+0x194>
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	07d0      	lsls	r0, r2, #31
 8002eb6:	d502      	bpl.n	8002ebe <_printf_float+0x19a>
 8002eb8:	3301      	adds	r3, #1
 8002eba:	440b      	add	r3, r1
 8002ebc:	6123      	str	r3, [r4, #16]
 8002ebe:	f04f 0a00 	mov.w	sl, #0
 8002ec2:	65a1      	str	r1, [r4, #88]	; 0x58
 8002ec4:	e7df      	b.n	8002e86 <_printf_float+0x162>
 8002ec6:	b913      	cbnz	r3, 8002ece <_printf_float+0x1aa>
 8002ec8:	6822      	ldr	r2, [r4, #0]
 8002eca:	07d2      	lsls	r2, r2, #31
 8002ecc:	d501      	bpl.n	8002ed2 <_printf_float+0x1ae>
 8002ece:	3302      	adds	r3, #2
 8002ed0:	e7f4      	b.n	8002ebc <_printf_float+0x198>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e7f2      	b.n	8002ebc <_printf_float+0x198>
 8002ed6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002edc:	4299      	cmp	r1, r3
 8002ede:	db05      	blt.n	8002eec <_printf_float+0x1c8>
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	6121      	str	r1, [r4, #16]
 8002ee4:	07d8      	lsls	r0, r3, #31
 8002ee6:	d5ea      	bpl.n	8002ebe <_printf_float+0x19a>
 8002ee8:	1c4b      	adds	r3, r1, #1
 8002eea:	e7e7      	b.n	8002ebc <_printf_float+0x198>
 8002eec:	2900      	cmp	r1, #0
 8002eee:	bfcc      	ite	gt
 8002ef0:	2201      	movgt	r2, #1
 8002ef2:	f1c1 0202 	rsble	r2, r1, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	e7e0      	b.n	8002ebc <_printf_float+0x198>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	055a      	lsls	r2, r3, #21
 8002efe:	d407      	bmi.n	8002f10 <_printf_float+0x1ec>
 8002f00:	6923      	ldr	r3, [r4, #16]
 8002f02:	4642      	mov	r2, r8
 8002f04:	4631      	mov	r1, r6
 8002f06:	4628      	mov	r0, r5
 8002f08:	47b8      	blx	r7
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	d12b      	bne.n	8002f66 <_printf_float+0x242>
 8002f0e:	e764      	b.n	8002dda <_printf_float+0xb6>
 8002f10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002f14:	f240 80dd 	bls.w	80030d2 <_printf_float+0x3ae>
 8002f18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f7fd fd42 	bl	80009a8 <__aeabi_dcmpeq>
 8002f24:	2800      	cmp	r0, #0
 8002f26:	d033      	beq.n	8002f90 <_printf_float+0x26c>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	4631      	mov	r1, r6
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	4a35      	ldr	r2, [pc, #212]	; (8003004 <_printf_float+0x2e0>)
 8002f30:	47b8      	blx	r7
 8002f32:	3001      	adds	r0, #1
 8002f34:	f43f af51 	beq.w	8002dda <_printf_float+0xb6>
 8002f38:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	db02      	blt.n	8002f46 <_printf_float+0x222>
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	07d8      	lsls	r0, r3, #31
 8002f44:	d50f      	bpl.n	8002f66 <_printf_float+0x242>
 8002f46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f4a:	4631      	mov	r1, r6
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	47b8      	blx	r7
 8002f50:	3001      	adds	r0, #1
 8002f52:	f43f af42 	beq.w	8002dda <_printf_float+0xb6>
 8002f56:	f04f 0800 	mov.w	r8, #0
 8002f5a:	f104 091a 	add.w	r9, r4, #26
 8002f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f60:	3b01      	subs	r3, #1
 8002f62:	4543      	cmp	r3, r8
 8002f64:	dc09      	bgt.n	8002f7a <_printf_float+0x256>
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	079b      	lsls	r3, r3, #30
 8002f6a:	f100 8102 	bmi.w	8003172 <_printf_float+0x44e>
 8002f6e:	68e0      	ldr	r0, [r4, #12]
 8002f70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f72:	4298      	cmp	r0, r3
 8002f74:	bfb8      	it	lt
 8002f76:	4618      	movlt	r0, r3
 8002f78:	e731      	b.n	8002dde <_printf_float+0xba>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	464a      	mov	r2, r9
 8002f7e:	4631      	mov	r1, r6
 8002f80:	4628      	mov	r0, r5
 8002f82:	47b8      	blx	r7
 8002f84:	3001      	adds	r0, #1
 8002f86:	f43f af28 	beq.w	8002dda <_printf_float+0xb6>
 8002f8a:	f108 0801 	add.w	r8, r8, #1
 8002f8e:	e7e6      	b.n	8002f5e <_printf_float+0x23a>
 8002f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	dc38      	bgt.n	8003008 <_printf_float+0x2e4>
 8002f96:	2301      	movs	r3, #1
 8002f98:	4631      	mov	r1, r6
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	4a19      	ldr	r2, [pc, #100]	; (8003004 <_printf_float+0x2e0>)
 8002f9e:	47b8      	blx	r7
 8002fa0:	3001      	adds	r0, #1
 8002fa2:	f43f af1a 	beq.w	8002dda <_printf_float+0xb6>
 8002fa6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002faa:	4313      	orrs	r3, r2
 8002fac:	d102      	bne.n	8002fb4 <_printf_float+0x290>
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	07d9      	lsls	r1, r3, #31
 8002fb2:	d5d8      	bpl.n	8002f66 <_printf_float+0x242>
 8002fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fb8:	4631      	mov	r1, r6
 8002fba:	4628      	mov	r0, r5
 8002fbc:	47b8      	blx	r7
 8002fbe:	3001      	adds	r0, #1
 8002fc0:	f43f af0b 	beq.w	8002dda <_printf_float+0xb6>
 8002fc4:	f04f 0900 	mov.w	r9, #0
 8002fc8:	f104 0a1a 	add.w	sl, r4, #26
 8002fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fce:	425b      	negs	r3, r3
 8002fd0:	454b      	cmp	r3, r9
 8002fd2:	dc01      	bgt.n	8002fd8 <_printf_float+0x2b4>
 8002fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fd6:	e794      	b.n	8002f02 <_printf_float+0x1de>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	4652      	mov	r2, sl
 8002fdc:	4631      	mov	r1, r6
 8002fde:	4628      	mov	r0, r5
 8002fe0:	47b8      	blx	r7
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	f43f aef9 	beq.w	8002dda <_printf_float+0xb6>
 8002fe8:	f109 0901 	add.w	r9, r9, #1
 8002fec:	e7ee      	b.n	8002fcc <_printf_float+0x2a8>
 8002fee:	bf00      	nop
 8002ff0:	7fefffff 	.word	0x7fefffff
 8002ff4:	08005670 	.word	0x08005670
 8002ff8:	08005674 	.word	0x08005674
 8002ffc:	0800567c 	.word	0x0800567c
 8003000:	08005678 	.word	0x08005678
 8003004:	08005680 	.word	0x08005680
 8003008:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800300a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800300c:	429a      	cmp	r2, r3
 800300e:	bfa8      	it	ge
 8003010:	461a      	movge	r2, r3
 8003012:	2a00      	cmp	r2, #0
 8003014:	4691      	mov	r9, r2
 8003016:	dc37      	bgt.n	8003088 <_printf_float+0x364>
 8003018:	f04f 0b00 	mov.w	fp, #0
 800301c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003020:	f104 021a 	add.w	r2, r4, #26
 8003024:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003028:	ebaa 0309 	sub.w	r3, sl, r9
 800302c:	455b      	cmp	r3, fp
 800302e:	dc33      	bgt.n	8003098 <_printf_float+0x374>
 8003030:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003034:	429a      	cmp	r2, r3
 8003036:	db3b      	blt.n	80030b0 <_printf_float+0x38c>
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	07da      	lsls	r2, r3, #31
 800303c:	d438      	bmi.n	80030b0 <_printf_float+0x38c>
 800303e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003040:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003042:	eba3 020a 	sub.w	r2, r3, sl
 8003046:	eba3 0901 	sub.w	r9, r3, r1
 800304a:	4591      	cmp	r9, r2
 800304c:	bfa8      	it	ge
 800304e:	4691      	movge	r9, r2
 8003050:	f1b9 0f00 	cmp.w	r9, #0
 8003054:	dc34      	bgt.n	80030c0 <_printf_float+0x39c>
 8003056:	f04f 0800 	mov.w	r8, #0
 800305a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800305e:	f104 0a1a 	add.w	sl, r4, #26
 8003062:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	eba3 0309 	sub.w	r3, r3, r9
 800306c:	4543      	cmp	r3, r8
 800306e:	f77f af7a 	ble.w	8002f66 <_printf_float+0x242>
 8003072:	2301      	movs	r3, #1
 8003074:	4652      	mov	r2, sl
 8003076:	4631      	mov	r1, r6
 8003078:	4628      	mov	r0, r5
 800307a:	47b8      	blx	r7
 800307c:	3001      	adds	r0, #1
 800307e:	f43f aeac 	beq.w	8002dda <_printf_float+0xb6>
 8003082:	f108 0801 	add.w	r8, r8, #1
 8003086:	e7ec      	b.n	8003062 <_printf_float+0x33e>
 8003088:	4613      	mov	r3, r2
 800308a:	4631      	mov	r1, r6
 800308c:	4642      	mov	r2, r8
 800308e:	4628      	mov	r0, r5
 8003090:	47b8      	blx	r7
 8003092:	3001      	adds	r0, #1
 8003094:	d1c0      	bne.n	8003018 <_printf_float+0x2f4>
 8003096:	e6a0      	b.n	8002dda <_printf_float+0xb6>
 8003098:	2301      	movs	r3, #1
 800309a:	4631      	mov	r1, r6
 800309c:	4628      	mov	r0, r5
 800309e:	920b      	str	r2, [sp, #44]	; 0x2c
 80030a0:	47b8      	blx	r7
 80030a2:	3001      	adds	r0, #1
 80030a4:	f43f ae99 	beq.w	8002dda <_printf_float+0xb6>
 80030a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80030aa:	f10b 0b01 	add.w	fp, fp, #1
 80030ae:	e7b9      	b.n	8003024 <_printf_float+0x300>
 80030b0:	4631      	mov	r1, r6
 80030b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030b6:	4628      	mov	r0, r5
 80030b8:	47b8      	blx	r7
 80030ba:	3001      	adds	r0, #1
 80030bc:	d1bf      	bne.n	800303e <_printf_float+0x31a>
 80030be:	e68c      	b.n	8002dda <_printf_float+0xb6>
 80030c0:	464b      	mov	r3, r9
 80030c2:	4631      	mov	r1, r6
 80030c4:	4628      	mov	r0, r5
 80030c6:	eb08 020a 	add.w	r2, r8, sl
 80030ca:	47b8      	blx	r7
 80030cc:	3001      	adds	r0, #1
 80030ce:	d1c2      	bne.n	8003056 <_printf_float+0x332>
 80030d0:	e683      	b.n	8002dda <_printf_float+0xb6>
 80030d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030d4:	2a01      	cmp	r2, #1
 80030d6:	dc01      	bgt.n	80030dc <_printf_float+0x3b8>
 80030d8:	07db      	lsls	r3, r3, #31
 80030da:	d537      	bpl.n	800314c <_printf_float+0x428>
 80030dc:	2301      	movs	r3, #1
 80030de:	4642      	mov	r2, r8
 80030e0:	4631      	mov	r1, r6
 80030e2:	4628      	mov	r0, r5
 80030e4:	47b8      	blx	r7
 80030e6:	3001      	adds	r0, #1
 80030e8:	f43f ae77 	beq.w	8002dda <_printf_float+0xb6>
 80030ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030f0:	4631      	mov	r1, r6
 80030f2:	4628      	mov	r0, r5
 80030f4:	47b8      	blx	r7
 80030f6:	3001      	adds	r0, #1
 80030f8:	f43f ae6f 	beq.w	8002dda <_printf_float+0xb6>
 80030fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003100:	2200      	movs	r2, #0
 8003102:	2300      	movs	r3, #0
 8003104:	f7fd fc50 	bl	80009a8 <__aeabi_dcmpeq>
 8003108:	b9d8      	cbnz	r0, 8003142 <_printf_float+0x41e>
 800310a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800310c:	f108 0201 	add.w	r2, r8, #1
 8003110:	3b01      	subs	r3, #1
 8003112:	4631      	mov	r1, r6
 8003114:	4628      	mov	r0, r5
 8003116:	47b8      	blx	r7
 8003118:	3001      	adds	r0, #1
 800311a:	d10e      	bne.n	800313a <_printf_float+0x416>
 800311c:	e65d      	b.n	8002dda <_printf_float+0xb6>
 800311e:	2301      	movs	r3, #1
 8003120:	464a      	mov	r2, r9
 8003122:	4631      	mov	r1, r6
 8003124:	4628      	mov	r0, r5
 8003126:	47b8      	blx	r7
 8003128:	3001      	adds	r0, #1
 800312a:	f43f ae56 	beq.w	8002dda <_printf_float+0xb6>
 800312e:	f108 0801 	add.w	r8, r8, #1
 8003132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003134:	3b01      	subs	r3, #1
 8003136:	4543      	cmp	r3, r8
 8003138:	dcf1      	bgt.n	800311e <_printf_float+0x3fa>
 800313a:	4653      	mov	r3, sl
 800313c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003140:	e6e0      	b.n	8002f04 <_printf_float+0x1e0>
 8003142:	f04f 0800 	mov.w	r8, #0
 8003146:	f104 091a 	add.w	r9, r4, #26
 800314a:	e7f2      	b.n	8003132 <_printf_float+0x40e>
 800314c:	2301      	movs	r3, #1
 800314e:	4642      	mov	r2, r8
 8003150:	e7df      	b.n	8003112 <_printf_float+0x3ee>
 8003152:	2301      	movs	r3, #1
 8003154:	464a      	mov	r2, r9
 8003156:	4631      	mov	r1, r6
 8003158:	4628      	mov	r0, r5
 800315a:	47b8      	blx	r7
 800315c:	3001      	adds	r0, #1
 800315e:	f43f ae3c 	beq.w	8002dda <_printf_float+0xb6>
 8003162:	f108 0801 	add.w	r8, r8, #1
 8003166:	68e3      	ldr	r3, [r4, #12]
 8003168:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800316a:	1a5b      	subs	r3, r3, r1
 800316c:	4543      	cmp	r3, r8
 800316e:	dcf0      	bgt.n	8003152 <_printf_float+0x42e>
 8003170:	e6fd      	b.n	8002f6e <_printf_float+0x24a>
 8003172:	f04f 0800 	mov.w	r8, #0
 8003176:	f104 0919 	add.w	r9, r4, #25
 800317a:	e7f4      	b.n	8003166 <_printf_float+0x442>

0800317c <_printf_common>:
 800317c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003180:	4616      	mov	r6, r2
 8003182:	4699      	mov	r9, r3
 8003184:	688a      	ldr	r2, [r1, #8]
 8003186:	690b      	ldr	r3, [r1, #16]
 8003188:	4607      	mov	r7, r0
 800318a:	4293      	cmp	r3, r2
 800318c:	bfb8      	it	lt
 800318e:	4613      	movlt	r3, r2
 8003190:	6033      	str	r3, [r6, #0]
 8003192:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003196:	460c      	mov	r4, r1
 8003198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800319c:	b10a      	cbz	r2, 80031a2 <_printf_common+0x26>
 800319e:	3301      	adds	r3, #1
 80031a0:	6033      	str	r3, [r6, #0]
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	0699      	lsls	r1, r3, #26
 80031a6:	bf42      	ittt	mi
 80031a8:	6833      	ldrmi	r3, [r6, #0]
 80031aa:	3302      	addmi	r3, #2
 80031ac:	6033      	strmi	r3, [r6, #0]
 80031ae:	6825      	ldr	r5, [r4, #0]
 80031b0:	f015 0506 	ands.w	r5, r5, #6
 80031b4:	d106      	bne.n	80031c4 <_printf_common+0x48>
 80031b6:	f104 0a19 	add.w	sl, r4, #25
 80031ba:	68e3      	ldr	r3, [r4, #12]
 80031bc:	6832      	ldr	r2, [r6, #0]
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	42ab      	cmp	r3, r5
 80031c2:	dc28      	bgt.n	8003216 <_printf_common+0x9a>
 80031c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031c8:	1e13      	subs	r3, r2, #0
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	bf18      	it	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	0692      	lsls	r2, r2, #26
 80031d2:	d42d      	bmi.n	8003230 <_printf_common+0xb4>
 80031d4:	4649      	mov	r1, r9
 80031d6:	4638      	mov	r0, r7
 80031d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031dc:	47c0      	blx	r8
 80031de:	3001      	adds	r0, #1
 80031e0:	d020      	beq.n	8003224 <_printf_common+0xa8>
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	68e5      	ldr	r5, [r4, #12]
 80031e6:	f003 0306 	and.w	r3, r3, #6
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	bf18      	it	ne
 80031ee:	2500      	movne	r5, #0
 80031f0:	6832      	ldr	r2, [r6, #0]
 80031f2:	f04f 0600 	mov.w	r6, #0
 80031f6:	68a3      	ldr	r3, [r4, #8]
 80031f8:	bf08      	it	eq
 80031fa:	1aad      	subeq	r5, r5, r2
 80031fc:	6922      	ldr	r2, [r4, #16]
 80031fe:	bf08      	it	eq
 8003200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003204:	4293      	cmp	r3, r2
 8003206:	bfc4      	itt	gt
 8003208:	1a9b      	subgt	r3, r3, r2
 800320a:	18ed      	addgt	r5, r5, r3
 800320c:	341a      	adds	r4, #26
 800320e:	42b5      	cmp	r5, r6
 8003210:	d11a      	bne.n	8003248 <_printf_common+0xcc>
 8003212:	2000      	movs	r0, #0
 8003214:	e008      	b.n	8003228 <_printf_common+0xac>
 8003216:	2301      	movs	r3, #1
 8003218:	4652      	mov	r2, sl
 800321a:	4649      	mov	r1, r9
 800321c:	4638      	mov	r0, r7
 800321e:	47c0      	blx	r8
 8003220:	3001      	adds	r0, #1
 8003222:	d103      	bne.n	800322c <_printf_common+0xb0>
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322c:	3501      	adds	r5, #1
 800322e:	e7c4      	b.n	80031ba <_printf_common+0x3e>
 8003230:	2030      	movs	r0, #48	; 0x30
 8003232:	18e1      	adds	r1, r4, r3
 8003234:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800323e:	4422      	add	r2, r4
 8003240:	3302      	adds	r3, #2
 8003242:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003246:	e7c5      	b.n	80031d4 <_printf_common+0x58>
 8003248:	2301      	movs	r3, #1
 800324a:	4622      	mov	r2, r4
 800324c:	4649      	mov	r1, r9
 800324e:	4638      	mov	r0, r7
 8003250:	47c0      	blx	r8
 8003252:	3001      	adds	r0, #1
 8003254:	d0e6      	beq.n	8003224 <_printf_common+0xa8>
 8003256:	3601      	adds	r6, #1
 8003258:	e7d9      	b.n	800320e <_printf_common+0x92>
	...

0800325c <_printf_i>:
 800325c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003260:	7e0f      	ldrb	r7, [r1, #24]
 8003262:	4691      	mov	r9, r2
 8003264:	2f78      	cmp	r7, #120	; 0x78
 8003266:	4680      	mov	r8, r0
 8003268:	460c      	mov	r4, r1
 800326a:	469a      	mov	sl, r3
 800326c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800326e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003272:	d807      	bhi.n	8003284 <_printf_i+0x28>
 8003274:	2f62      	cmp	r7, #98	; 0x62
 8003276:	d80a      	bhi.n	800328e <_printf_i+0x32>
 8003278:	2f00      	cmp	r7, #0
 800327a:	f000 80d9 	beq.w	8003430 <_printf_i+0x1d4>
 800327e:	2f58      	cmp	r7, #88	; 0x58
 8003280:	f000 80a4 	beq.w	80033cc <_printf_i+0x170>
 8003284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800328c:	e03a      	b.n	8003304 <_printf_i+0xa8>
 800328e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003292:	2b15      	cmp	r3, #21
 8003294:	d8f6      	bhi.n	8003284 <_printf_i+0x28>
 8003296:	a101      	add	r1, pc, #4	; (adr r1, 800329c <_printf_i+0x40>)
 8003298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800329c:	080032f5 	.word	0x080032f5
 80032a0:	08003309 	.word	0x08003309
 80032a4:	08003285 	.word	0x08003285
 80032a8:	08003285 	.word	0x08003285
 80032ac:	08003285 	.word	0x08003285
 80032b0:	08003285 	.word	0x08003285
 80032b4:	08003309 	.word	0x08003309
 80032b8:	08003285 	.word	0x08003285
 80032bc:	08003285 	.word	0x08003285
 80032c0:	08003285 	.word	0x08003285
 80032c4:	08003285 	.word	0x08003285
 80032c8:	08003417 	.word	0x08003417
 80032cc:	08003339 	.word	0x08003339
 80032d0:	080033f9 	.word	0x080033f9
 80032d4:	08003285 	.word	0x08003285
 80032d8:	08003285 	.word	0x08003285
 80032dc:	08003439 	.word	0x08003439
 80032e0:	08003285 	.word	0x08003285
 80032e4:	08003339 	.word	0x08003339
 80032e8:	08003285 	.word	0x08003285
 80032ec:	08003285 	.word	0x08003285
 80032f0:	08003401 	.word	0x08003401
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	1d1a      	adds	r2, r3, #4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	602a      	str	r2, [r5, #0]
 80032fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003304:	2301      	movs	r3, #1
 8003306:	e0a4      	b.n	8003452 <_printf_i+0x1f6>
 8003308:	6820      	ldr	r0, [r4, #0]
 800330a:	6829      	ldr	r1, [r5, #0]
 800330c:	0606      	lsls	r6, r0, #24
 800330e:	f101 0304 	add.w	r3, r1, #4
 8003312:	d50a      	bpl.n	800332a <_printf_i+0xce>
 8003314:	680e      	ldr	r6, [r1, #0]
 8003316:	602b      	str	r3, [r5, #0]
 8003318:	2e00      	cmp	r6, #0
 800331a:	da03      	bge.n	8003324 <_printf_i+0xc8>
 800331c:	232d      	movs	r3, #45	; 0x2d
 800331e:	4276      	negs	r6, r6
 8003320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003324:	230a      	movs	r3, #10
 8003326:	485e      	ldr	r0, [pc, #376]	; (80034a0 <_printf_i+0x244>)
 8003328:	e019      	b.n	800335e <_printf_i+0x102>
 800332a:	680e      	ldr	r6, [r1, #0]
 800332c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003330:	602b      	str	r3, [r5, #0]
 8003332:	bf18      	it	ne
 8003334:	b236      	sxthne	r6, r6
 8003336:	e7ef      	b.n	8003318 <_printf_i+0xbc>
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	6820      	ldr	r0, [r4, #0]
 800333c:	1d19      	adds	r1, r3, #4
 800333e:	6029      	str	r1, [r5, #0]
 8003340:	0601      	lsls	r1, r0, #24
 8003342:	d501      	bpl.n	8003348 <_printf_i+0xec>
 8003344:	681e      	ldr	r6, [r3, #0]
 8003346:	e002      	b.n	800334e <_printf_i+0xf2>
 8003348:	0646      	lsls	r6, r0, #25
 800334a:	d5fb      	bpl.n	8003344 <_printf_i+0xe8>
 800334c:	881e      	ldrh	r6, [r3, #0]
 800334e:	2f6f      	cmp	r7, #111	; 0x6f
 8003350:	bf0c      	ite	eq
 8003352:	2308      	moveq	r3, #8
 8003354:	230a      	movne	r3, #10
 8003356:	4852      	ldr	r0, [pc, #328]	; (80034a0 <_printf_i+0x244>)
 8003358:	2100      	movs	r1, #0
 800335a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800335e:	6865      	ldr	r5, [r4, #4]
 8003360:	2d00      	cmp	r5, #0
 8003362:	bfa8      	it	ge
 8003364:	6821      	ldrge	r1, [r4, #0]
 8003366:	60a5      	str	r5, [r4, #8]
 8003368:	bfa4      	itt	ge
 800336a:	f021 0104 	bicge.w	r1, r1, #4
 800336e:	6021      	strge	r1, [r4, #0]
 8003370:	b90e      	cbnz	r6, 8003376 <_printf_i+0x11a>
 8003372:	2d00      	cmp	r5, #0
 8003374:	d04d      	beq.n	8003412 <_printf_i+0x1b6>
 8003376:	4615      	mov	r5, r2
 8003378:	fbb6 f1f3 	udiv	r1, r6, r3
 800337c:	fb03 6711 	mls	r7, r3, r1, r6
 8003380:	5dc7      	ldrb	r7, [r0, r7]
 8003382:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003386:	4637      	mov	r7, r6
 8003388:	42bb      	cmp	r3, r7
 800338a:	460e      	mov	r6, r1
 800338c:	d9f4      	bls.n	8003378 <_printf_i+0x11c>
 800338e:	2b08      	cmp	r3, #8
 8003390:	d10b      	bne.n	80033aa <_printf_i+0x14e>
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	07de      	lsls	r6, r3, #31
 8003396:	d508      	bpl.n	80033aa <_printf_i+0x14e>
 8003398:	6923      	ldr	r3, [r4, #16]
 800339a:	6861      	ldr	r1, [r4, #4]
 800339c:	4299      	cmp	r1, r3
 800339e:	bfde      	ittt	le
 80033a0:	2330      	movle	r3, #48	; 0x30
 80033a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033aa:	1b52      	subs	r2, r2, r5
 80033ac:	6122      	str	r2, [r4, #16]
 80033ae:	464b      	mov	r3, r9
 80033b0:	4621      	mov	r1, r4
 80033b2:	4640      	mov	r0, r8
 80033b4:	f8cd a000 	str.w	sl, [sp]
 80033b8:	aa03      	add	r2, sp, #12
 80033ba:	f7ff fedf 	bl	800317c <_printf_common>
 80033be:	3001      	adds	r0, #1
 80033c0:	d14c      	bne.n	800345c <_printf_i+0x200>
 80033c2:	f04f 30ff 	mov.w	r0, #4294967295
 80033c6:	b004      	add	sp, #16
 80033c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033cc:	4834      	ldr	r0, [pc, #208]	; (80034a0 <_printf_i+0x244>)
 80033ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80033d2:	6829      	ldr	r1, [r5, #0]
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80033da:	6029      	str	r1, [r5, #0]
 80033dc:	061d      	lsls	r5, r3, #24
 80033de:	d514      	bpl.n	800340a <_printf_i+0x1ae>
 80033e0:	07df      	lsls	r7, r3, #31
 80033e2:	bf44      	itt	mi
 80033e4:	f043 0320 	orrmi.w	r3, r3, #32
 80033e8:	6023      	strmi	r3, [r4, #0]
 80033ea:	b91e      	cbnz	r6, 80033f4 <_printf_i+0x198>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	f023 0320 	bic.w	r3, r3, #32
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	2310      	movs	r3, #16
 80033f6:	e7af      	b.n	8003358 <_printf_i+0xfc>
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	f043 0320 	orr.w	r3, r3, #32
 80033fe:	6023      	str	r3, [r4, #0]
 8003400:	2378      	movs	r3, #120	; 0x78
 8003402:	4828      	ldr	r0, [pc, #160]	; (80034a4 <_printf_i+0x248>)
 8003404:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003408:	e7e3      	b.n	80033d2 <_printf_i+0x176>
 800340a:	0659      	lsls	r1, r3, #25
 800340c:	bf48      	it	mi
 800340e:	b2b6      	uxthmi	r6, r6
 8003410:	e7e6      	b.n	80033e0 <_printf_i+0x184>
 8003412:	4615      	mov	r5, r2
 8003414:	e7bb      	b.n	800338e <_printf_i+0x132>
 8003416:	682b      	ldr	r3, [r5, #0]
 8003418:	6826      	ldr	r6, [r4, #0]
 800341a:	1d18      	adds	r0, r3, #4
 800341c:	6961      	ldr	r1, [r4, #20]
 800341e:	6028      	str	r0, [r5, #0]
 8003420:	0635      	lsls	r5, r6, #24
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	d501      	bpl.n	800342a <_printf_i+0x1ce>
 8003426:	6019      	str	r1, [r3, #0]
 8003428:	e002      	b.n	8003430 <_printf_i+0x1d4>
 800342a:	0670      	lsls	r0, r6, #25
 800342c:	d5fb      	bpl.n	8003426 <_printf_i+0x1ca>
 800342e:	8019      	strh	r1, [r3, #0]
 8003430:	2300      	movs	r3, #0
 8003432:	4615      	mov	r5, r2
 8003434:	6123      	str	r3, [r4, #16]
 8003436:	e7ba      	b.n	80033ae <_printf_i+0x152>
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	2100      	movs	r1, #0
 800343c:	1d1a      	adds	r2, r3, #4
 800343e:	602a      	str	r2, [r5, #0]
 8003440:	681d      	ldr	r5, [r3, #0]
 8003442:	6862      	ldr	r2, [r4, #4]
 8003444:	4628      	mov	r0, r5
 8003446:	f000 feb5 	bl	80041b4 <memchr>
 800344a:	b108      	cbz	r0, 8003450 <_printf_i+0x1f4>
 800344c:	1b40      	subs	r0, r0, r5
 800344e:	6060      	str	r0, [r4, #4]
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	6123      	str	r3, [r4, #16]
 8003454:	2300      	movs	r3, #0
 8003456:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800345a:	e7a8      	b.n	80033ae <_printf_i+0x152>
 800345c:	462a      	mov	r2, r5
 800345e:	4649      	mov	r1, r9
 8003460:	4640      	mov	r0, r8
 8003462:	6923      	ldr	r3, [r4, #16]
 8003464:	47d0      	blx	sl
 8003466:	3001      	adds	r0, #1
 8003468:	d0ab      	beq.n	80033c2 <_printf_i+0x166>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	079b      	lsls	r3, r3, #30
 800346e:	d413      	bmi.n	8003498 <_printf_i+0x23c>
 8003470:	68e0      	ldr	r0, [r4, #12]
 8003472:	9b03      	ldr	r3, [sp, #12]
 8003474:	4298      	cmp	r0, r3
 8003476:	bfb8      	it	lt
 8003478:	4618      	movlt	r0, r3
 800347a:	e7a4      	b.n	80033c6 <_printf_i+0x16a>
 800347c:	2301      	movs	r3, #1
 800347e:	4632      	mov	r2, r6
 8003480:	4649      	mov	r1, r9
 8003482:	4640      	mov	r0, r8
 8003484:	47d0      	blx	sl
 8003486:	3001      	adds	r0, #1
 8003488:	d09b      	beq.n	80033c2 <_printf_i+0x166>
 800348a:	3501      	adds	r5, #1
 800348c:	68e3      	ldr	r3, [r4, #12]
 800348e:	9903      	ldr	r1, [sp, #12]
 8003490:	1a5b      	subs	r3, r3, r1
 8003492:	42ab      	cmp	r3, r5
 8003494:	dcf2      	bgt.n	800347c <_printf_i+0x220>
 8003496:	e7eb      	b.n	8003470 <_printf_i+0x214>
 8003498:	2500      	movs	r5, #0
 800349a:	f104 0619 	add.w	r6, r4, #25
 800349e:	e7f5      	b.n	800348c <_printf_i+0x230>
 80034a0:	08005682 	.word	0x08005682
 80034a4:	08005693 	.word	0x08005693

080034a8 <quorem>:
 80034a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ac:	6903      	ldr	r3, [r0, #16]
 80034ae:	690c      	ldr	r4, [r1, #16]
 80034b0:	4607      	mov	r7, r0
 80034b2:	42a3      	cmp	r3, r4
 80034b4:	f2c0 8082 	blt.w	80035bc <quorem+0x114>
 80034b8:	3c01      	subs	r4, #1
 80034ba:	f100 0514 	add.w	r5, r0, #20
 80034be:	f101 0814 	add.w	r8, r1, #20
 80034c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80034cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80034d0:	3301      	adds	r3, #1
 80034d2:	429a      	cmp	r2, r3
 80034d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80034d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80034dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80034e0:	d331      	bcc.n	8003546 <quorem+0x9e>
 80034e2:	f04f 0e00 	mov.w	lr, #0
 80034e6:	4640      	mov	r0, r8
 80034e8:	46ac      	mov	ip, r5
 80034ea:	46f2      	mov	sl, lr
 80034ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80034f0:	b293      	uxth	r3, r2
 80034f2:	fb06 e303 	mla	r3, r6, r3, lr
 80034f6:	0c12      	lsrs	r2, r2, #16
 80034f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	fb06 e202 	mla	r2, r6, r2, lr
 8003502:	ebaa 0303 	sub.w	r3, sl, r3
 8003506:	f8dc a000 	ldr.w	sl, [ip]
 800350a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800350e:	fa1f fa8a 	uxth.w	sl, sl
 8003512:	4453      	add	r3, sl
 8003514:	f8dc a000 	ldr.w	sl, [ip]
 8003518:	b292      	uxth	r2, r2
 800351a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800351e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003522:	b29b      	uxth	r3, r3
 8003524:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003528:	4581      	cmp	r9, r0
 800352a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800352e:	f84c 3b04 	str.w	r3, [ip], #4
 8003532:	d2db      	bcs.n	80034ec <quorem+0x44>
 8003534:	f855 300b 	ldr.w	r3, [r5, fp]
 8003538:	b92b      	cbnz	r3, 8003546 <quorem+0x9e>
 800353a:	9b01      	ldr	r3, [sp, #4]
 800353c:	3b04      	subs	r3, #4
 800353e:	429d      	cmp	r5, r3
 8003540:	461a      	mov	r2, r3
 8003542:	d32f      	bcc.n	80035a4 <quorem+0xfc>
 8003544:	613c      	str	r4, [r7, #16]
 8003546:	4638      	mov	r0, r7
 8003548:	f001 f8ce 	bl	80046e8 <__mcmp>
 800354c:	2800      	cmp	r0, #0
 800354e:	db25      	blt.n	800359c <quorem+0xf4>
 8003550:	4628      	mov	r0, r5
 8003552:	f04f 0c00 	mov.w	ip, #0
 8003556:	3601      	adds	r6, #1
 8003558:	f858 1b04 	ldr.w	r1, [r8], #4
 800355c:	f8d0 e000 	ldr.w	lr, [r0]
 8003560:	b28b      	uxth	r3, r1
 8003562:	ebac 0303 	sub.w	r3, ip, r3
 8003566:	fa1f f28e 	uxth.w	r2, lr
 800356a:	4413      	add	r3, r2
 800356c:	0c0a      	lsrs	r2, r1, #16
 800356e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003572:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003576:	b29b      	uxth	r3, r3
 8003578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800357c:	45c1      	cmp	r9, r8
 800357e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003582:	f840 3b04 	str.w	r3, [r0], #4
 8003586:	d2e7      	bcs.n	8003558 <quorem+0xb0>
 8003588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800358c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003590:	b922      	cbnz	r2, 800359c <quorem+0xf4>
 8003592:	3b04      	subs	r3, #4
 8003594:	429d      	cmp	r5, r3
 8003596:	461a      	mov	r2, r3
 8003598:	d30a      	bcc.n	80035b0 <quorem+0x108>
 800359a:	613c      	str	r4, [r7, #16]
 800359c:	4630      	mov	r0, r6
 800359e:	b003      	add	sp, #12
 80035a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	3b04      	subs	r3, #4
 80035a8:	2a00      	cmp	r2, #0
 80035aa:	d1cb      	bne.n	8003544 <quorem+0x9c>
 80035ac:	3c01      	subs	r4, #1
 80035ae:	e7c6      	b.n	800353e <quorem+0x96>
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	3b04      	subs	r3, #4
 80035b4:	2a00      	cmp	r2, #0
 80035b6:	d1f0      	bne.n	800359a <quorem+0xf2>
 80035b8:	3c01      	subs	r4, #1
 80035ba:	e7eb      	b.n	8003594 <quorem+0xec>
 80035bc:	2000      	movs	r0, #0
 80035be:	e7ee      	b.n	800359e <quorem+0xf6>

080035c0 <_dtoa_r>:
 80035c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c4:	4616      	mov	r6, r2
 80035c6:	461f      	mov	r7, r3
 80035c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80035ca:	b099      	sub	sp, #100	; 0x64
 80035cc:	4605      	mov	r5, r0
 80035ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80035d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80035d6:	b974      	cbnz	r4, 80035f6 <_dtoa_r+0x36>
 80035d8:	2010      	movs	r0, #16
 80035da:	f000 fde3 	bl	80041a4 <malloc>
 80035de:	4602      	mov	r2, r0
 80035e0:	6268      	str	r0, [r5, #36]	; 0x24
 80035e2:	b920      	cbnz	r0, 80035ee <_dtoa_r+0x2e>
 80035e4:	21ea      	movs	r1, #234	; 0xea
 80035e6:	4ba8      	ldr	r3, [pc, #672]	; (8003888 <_dtoa_r+0x2c8>)
 80035e8:	48a8      	ldr	r0, [pc, #672]	; (800388c <_dtoa_r+0x2cc>)
 80035ea:	f001 fa81 	bl	8004af0 <__assert_func>
 80035ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80035f2:	6004      	str	r4, [r0, #0]
 80035f4:	60c4      	str	r4, [r0, #12]
 80035f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80035f8:	6819      	ldr	r1, [r3, #0]
 80035fa:	b151      	cbz	r1, 8003612 <_dtoa_r+0x52>
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	2301      	movs	r3, #1
 8003600:	4093      	lsls	r3, r2
 8003602:	604a      	str	r2, [r1, #4]
 8003604:	608b      	str	r3, [r1, #8]
 8003606:	4628      	mov	r0, r5
 8003608:	f000 fe30 	bl	800426c <_Bfree>
 800360c:	2200      	movs	r2, #0
 800360e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	1e3b      	subs	r3, r7, #0
 8003614:	bfaf      	iteee	ge
 8003616:	2300      	movge	r3, #0
 8003618:	2201      	movlt	r2, #1
 800361a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800361e:	9305      	strlt	r3, [sp, #20]
 8003620:	bfa8      	it	ge
 8003622:	f8c8 3000 	strge.w	r3, [r8]
 8003626:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800362a:	4b99      	ldr	r3, [pc, #612]	; (8003890 <_dtoa_r+0x2d0>)
 800362c:	bfb8      	it	lt
 800362e:	f8c8 2000 	strlt.w	r2, [r8]
 8003632:	ea33 0309 	bics.w	r3, r3, r9
 8003636:	d119      	bne.n	800366c <_dtoa_r+0xac>
 8003638:	f242 730f 	movw	r3, #9999	; 0x270f
 800363c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003644:	4333      	orrs	r3, r6
 8003646:	f000 857f 	beq.w	8004148 <_dtoa_r+0xb88>
 800364a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800364c:	b953      	cbnz	r3, 8003664 <_dtoa_r+0xa4>
 800364e:	4b91      	ldr	r3, [pc, #580]	; (8003894 <_dtoa_r+0x2d4>)
 8003650:	e022      	b.n	8003698 <_dtoa_r+0xd8>
 8003652:	4b91      	ldr	r3, [pc, #580]	; (8003898 <_dtoa_r+0x2d8>)
 8003654:	9303      	str	r3, [sp, #12]
 8003656:	3308      	adds	r3, #8
 8003658:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	9803      	ldr	r0, [sp, #12]
 800365e:	b019      	add	sp, #100	; 0x64
 8003660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003664:	4b8b      	ldr	r3, [pc, #556]	; (8003894 <_dtoa_r+0x2d4>)
 8003666:	9303      	str	r3, [sp, #12]
 8003668:	3303      	adds	r3, #3
 800366a:	e7f5      	b.n	8003658 <_dtoa_r+0x98>
 800366c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003670:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003678:	2200      	movs	r2, #0
 800367a:	2300      	movs	r3, #0
 800367c:	f7fd f994 	bl	80009a8 <__aeabi_dcmpeq>
 8003680:	4680      	mov	r8, r0
 8003682:	b158      	cbz	r0, 800369c <_dtoa_r+0xdc>
 8003684:	2301      	movs	r3, #1
 8003686:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8558 	beq.w	8004142 <_dtoa_r+0xb82>
 8003692:	4882      	ldr	r0, [pc, #520]	; (800389c <_dtoa_r+0x2dc>)
 8003694:	6018      	str	r0, [r3, #0]
 8003696:	1e43      	subs	r3, r0, #1
 8003698:	9303      	str	r3, [sp, #12]
 800369a:	e7df      	b.n	800365c <_dtoa_r+0x9c>
 800369c:	ab16      	add	r3, sp, #88	; 0x58
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	ab17      	add	r3, sp, #92	; 0x5c
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4628      	mov	r0, r5
 80036a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80036aa:	f001 f8c5 	bl	8004838 <__d2b>
 80036ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80036b2:	4683      	mov	fp, r0
 80036b4:	2c00      	cmp	r4, #0
 80036b6:	d07f      	beq.n	80037b8 <_dtoa_r+0x1f8>
 80036b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80036bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80036c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80036ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80036ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80036d2:	2200      	movs	r2, #0
 80036d4:	4b72      	ldr	r3, [pc, #456]	; (80038a0 <_dtoa_r+0x2e0>)
 80036d6:	f7fc fd47 	bl	8000168 <__aeabi_dsub>
 80036da:	a365      	add	r3, pc, #404	; (adr r3, 8003870 <_dtoa_r+0x2b0>)
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f7fc fefa 	bl	80004d8 <__aeabi_dmul>
 80036e4:	a364      	add	r3, pc, #400	; (adr r3, 8003878 <_dtoa_r+0x2b8>)
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	f7fc fd3f 	bl	800016c <__adddf3>
 80036ee:	4606      	mov	r6, r0
 80036f0:	4620      	mov	r0, r4
 80036f2:	460f      	mov	r7, r1
 80036f4:	f7fc fe86 	bl	8000404 <__aeabi_i2d>
 80036f8:	a361      	add	r3, pc, #388	; (adr r3, 8003880 <_dtoa_r+0x2c0>)
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f7fc feeb 	bl	80004d8 <__aeabi_dmul>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4630      	mov	r0, r6
 8003708:	4639      	mov	r1, r7
 800370a:	f7fc fd2f 	bl	800016c <__adddf3>
 800370e:	4606      	mov	r6, r0
 8003710:	460f      	mov	r7, r1
 8003712:	f7fd f991 	bl	8000a38 <__aeabi_d2iz>
 8003716:	2200      	movs	r2, #0
 8003718:	4682      	mov	sl, r0
 800371a:	2300      	movs	r3, #0
 800371c:	4630      	mov	r0, r6
 800371e:	4639      	mov	r1, r7
 8003720:	f7fd f94c 	bl	80009bc <__aeabi_dcmplt>
 8003724:	b148      	cbz	r0, 800373a <_dtoa_r+0x17a>
 8003726:	4650      	mov	r0, sl
 8003728:	f7fc fe6c 	bl	8000404 <__aeabi_i2d>
 800372c:	4632      	mov	r2, r6
 800372e:	463b      	mov	r3, r7
 8003730:	f7fd f93a 	bl	80009a8 <__aeabi_dcmpeq>
 8003734:	b908      	cbnz	r0, 800373a <_dtoa_r+0x17a>
 8003736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800373a:	f1ba 0f16 	cmp.w	sl, #22
 800373e:	d858      	bhi.n	80037f2 <_dtoa_r+0x232>
 8003740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003744:	4b57      	ldr	r3, [pc, #348]	; (80038a4 <_dtoa_r+0x2e4>)
 8003746:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f7fd f935 	bl	80009bc <__aeabi_dcmplt>
 8003752:	2800      	cmp	r0, #0
 8003754:	d04f      	beq.n	80037f6 <_dtoa_r+0x236>
 8003756:	2300      	movs	r3, #0
 8003758:	f10a 3aff 	add.w	sl, sl, #4294967295
 800375c:	930f      	str	r3, [sp, #60]	; 0x3c
 800375e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003760:	1b1c      	subs	r4, r3, r4
 8003762:	1e63      	subs	r3, r4, #1
 8003764:	9309      	str	r3, [sp, #36]	; 0x24
 8003766:	bf49      	itett	mi
 8003768:	f1c4 0301 	rsbmi	r3, r4, #1
 800376c:	2300      	movpl	r3, #0
 800376e:	9306      	strmi	r3, [sp, #24]
 8003770:	2300      	movmi	r3, #0
 8003772:	bf54      	ite	pl
 8003774:	9306      	strpl	r3, [sp, #24]
 8003776:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003778:	f1ba 0f00 	cmp.w	sl, #0
 800377c:	db3d      	blt.n	80037fa <_dtoa_r+0x23a>
 800377e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003780:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003784:	4453      	add	r3, sl
 8003786:	9309      	str	r3, [sp, #36]	; 0x24
 8003788:	2300      	movs	r3, #0
 800378a:	930a      	str	r3, [sp, #40]	; 0x28
 800378c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800378e:	2b09      	cmp	r3, #9
 8003790:	f200 808c 	bhi.w	80038ac <_dtoa_r+0x2ec>
 8003794:	2b05      	cmp	r3, #5
 8003796:	bfc4      	itt	gt
 8003798:	3b04      	subgt	r3, #4
 800379a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800379c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800379e:	bfc8      	it	gt
 80037a0:	2400      	movgt	r4, #0
 80037a2:	f1a3 0302 	sub.w	r3, r3, #2
 80037a6:	bfd8      	it	le
 80037a8:	2401      	movle	r4, #1
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	f200 808a 	bhi.w	80038c4 <_dtoa_r+0x304>
 80037b0:	e8df f003 	tbb	[pc, r3]
 80037b4:	5b4d4f2d 	.word	0x5b4d4f2d
 80037b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80037bc:	441c      	add	r4, r3
 80037be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	bfc3      	ittte	gt
 80037c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80037ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80037ce:	fa09 f303 	lslgt.w	r3, r9, r3
 80037d2:	f1c3 0320 	rsble	r3, r3, #32
 80037d6:	bfc6      	itte	gt
 80037d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80037dc:	4318      	orrgt	r0, r3
 80037de:	fa06 f003 	lslle.w	r0, r6, r3
 80037e2:	f7fc fdff 	bl	80003e4 <__aeabi_ui2d>
 80037e6:	2301      	movs	r3, #1
 80037e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80037ec:	3c01      	subs	r4, #1
 80037ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80037f0:	e76f      	b.n	80036d2 <_dtoa_r+0x112>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e7b2      	b.n	800375c <_dtoa_r+0x19c>
 80037f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80037f8:	e7b1      	b.n	800375e <_dtoa_r+0x19e>
 80037fa:	9b06      	ldr	r3, [sp, #24]
 80037fc:	eba3 030a 	sub.w	r3, r3, sl
 8003800:	9306      	str	r3, [sp, #24]
 8003802:	f1ca 0300 	rsb	r3, sl, #0
 8003806:	930a      	str	r3, [sp, #40]	; 0x28
 8003808:	2300      	movs	r3, #0
 800380a:	930e      	str	r3, [sp, #56]	; 0x38
 800380c:	e7be      	b.n	800378c <_dtoa_r+0x1cc>
 800380e:	2300      	movs	r3, #0
 8003810:	930b      	str	r3, [sp, #44]	; 0x2c
 8003812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003814:	2b00      	cmp	r3, #0
 8003816:	dc58      	bgt.n	80038ca <_dtoa_r+0x30a>
 8003818:	f04f 0901 	mov.w	r9, #1
 800381c:	464b      	mov	r3, r9
 800381e:	f8cd 9020 	str.w	r9, [sp, #32]
 8003822:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003826:	2200      	movs	r2, #0
 8003828:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800382a:	6042      	str	r2, [r0, #4]
 800382c:	2204      	movs	r2, #4
 800382e:	f102 0614 	add.w	r6, r2, #20
 8003832:	429e      	cmp	r6, r3
 8003834:	6841      	ldr	r1, [r0, #4]
 8003836:	d94e      	bls.n	80038d6 <_dtoa_r+0x316>
 8003838:	4628      	mov	r0, r5
 800383a:	f000 fcd7 	bl	80041ec <_Balloc>
 800383e:	9003      	str	r0, [sp, #12]
 8003840:	2800      	cmp	r0, #0
 8003842:	d14c      	bne.n	80038de <_dtoa_r+0x31e>
 8003844:	4602      	mov	r2, r0
 8003846:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800384a:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <_dtoa_r+0x2e8>)
 800384c:	e6cc      	b.n	80035e8 <_dtoa_r+0x28>
 800384e:	2301      	movs	r3, #1
 8003850:	e7de      	b.n	8003810 <_dtoa_r+0x250>
 8003852:	2300      	movs	r3, #0
 8003854:	930b      	str	r3, [sp, #44]	; 0x2c
 8003856:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003858:	eb0a 0903 	add.w	r9, sl, r3
 800385c:	f109 0301 	add.w	r3, r9, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	9308      	str	r3, [sp, #32]
 8003864:	bfb8      	it	lt
 8003866:	2301      	movlt	r3, #1
 8003868:	e7dd      	b.n	8003826 <_dtoa_r+0x266>
 800386a:	2301      	movs	r3, #1
 800386c:	e7f2      	b.n	8003854 <_dtoa_r+0x294>
 800386e:	bf00      	nop
 8003870:	636f4361 	.word	0x636f4361
 8003874:	3fd287a7 	.word	0x3fd287a7
 8003878:	8b60c8b3 	.word	0x8b60c8b3
 800387c:	3fc68a28 	.word	0x3fc68a28
 8003880:	509f79fb 	.word	0x509f79fb
 8003884:	3fd34413 	.word	0x3fd34413
 8003888:	080056b1 	.word	0x080056b1
 800388c:	080056c8 	.word	0x080056c8
 8003890:	7ff00000 	.word	0x7ff00000
 8003894:	080056ad 	.word	0x080056ad
 8003898:	080056a4 	.word	0x080056a4
 800389c:	08005681 	.word	0x08005681
 80038a0:	3ff80000 	.word	0x3ff80000
 80038a4:	080057b8 	.word	0x080057b8
 80038a8:	08005723 	.word	0x08005723
 80038ac:	2401      	movs	r4, #1
 80038ae:	2300      	movs	r3, #0
 80038b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80038b2:	9322      	str	r3, [sp, #136]	; 0x88
 80038b4:	f04f 39ff 	mov.w	r9, #4294967295
 80038b8:	2200      	movs	r2, #0
 80038ba:	2312      	movs	r3, #18
 80038bc:	f8cd 9020 	str.w	r9, [sp, #32]
 80038c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80038c2:	e7b0      	b.n	8003826 <_dtoa_r+0x266>
 80038c4:	2301      	movs	r3, #1
 80038c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80038c8:	e7f4      	b.n	80038b4 <_dtoa_r+0x2f4>
 80038ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80038ce:	464b      	mov	r3, r9
 80038d0:	f8cd 9020 	str.w	r9, [sp, #32]
 80038d4:	e7a7      	b.n	8003826 <_dtoa_r+0x266>
 80038d6:	3101      	adds	r1, #1
 80038d8:	6041      	str	r1, [r0, #4]
 80038da:	0052      	lsls	r2, r2, #1
 80038dc:	e7a7      	b.n	800382e <_dtoa_r+0x26e>
 80038de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80038e0:	9a03      	ldr	r2, [sp, #12]
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	9b08      	ldr	r3, [sp, #32]
 80038e6:	2b0e      	cmp	r3, #14
 80038e8:	f200 80a8 	bhi.w	8003a3c <_dtoa_r+0x47c>
 80038ec:	2c00      	cmp	r4, #0
 80038ee:	f000 80a5 	beq.w	8003a3c <_dtoa_r+0x47c>
 80038f2:	f1ba 0f00 	cmp.w	sl, #0
 80038f6:	dd34      	ble.n	8003962 <_dtoa_r+0x3a2>
 80038f8:	4a9a      	ldr	r2, [pc, #616]	; (8003b64 <_dtoa_r+0x5a4>)
 80038fa:	f00a 030f 	and.w	r3, sl, #15
 80038fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003902:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003906:	e9d3 3400 	ldrd	r3, r4, [r3]
 800390a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800390e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003912:	d016      	beq.n	8003942 <_dtoa_r+0x382>
 8003914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003918:	4b93      	ldr	r3, [pc, #588]	; (8003b68 <_dtoa_r+0x5a8>)
 800391a:	2703      	movs	r7, #3
 800391c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003920:	f7fc ff04 	bl	800072c <__aeabi_ddiv>
 8003924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003928:	f004 040f 	and.w	r4, r4, #15
 800392c:	4e8e      	ldr	r6, [pc, #568]	; (8003b68 <_dtoa_r+0x5a8>)
 800392e:	b954      	cbnz	r4, 8003946 <_dtoa_r+0x386>
 8003930:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003938:	f7fc fef8 	bl	800072c <__aeabi_ddiv>
 800393c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003940:	e029      	b.n	8003996 <_dtoa_r+0x3d6>
 8003942:	2702      	movs	r7, #2
 8003944:	e7f2      	b.n	800392c <_dtoa_r+0x36c>
 8003946:	07e1      	lsls	r1, r4, #31
 8003948:	d508      	bpl.n	800395c <_dtoa_r+0x39c>
 800394a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800394e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003952:	f7fc fdc1 	bl	80004d8 <__aeabi_dmul>
 8003956:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800395a:	3701      	adds	r7, #1
 800395c:	1064      	asrs	r4, r4, #1
 800395e:	3608      	adds	r6, #8
 8003960:	e7e5      	b.n	800392e <_dtoa_r+0x36e>
 8003962:	f000 80a5 	beq.w	8003ab0 <_dtoa_r+0x4f0>
 8003966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800396a:	f1ca 0400 	rsb	r4, sl, #0
 800396e:	4b7d      	ldr	r3, [pc, #500]	; (8003b64 <_dtoa_r+0x5a4>)
 8003970:	f004 020f 	and.w	r2, r4, #15
 8003974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f7fc fdac 	bl	80004d8 <__aeabi_dmul>
 8003980:	2702      	movs	r7, #2
 8003982:	2300      	movs	r3, #0
 8003984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003988:	4e77      	ldr	r6, [pc, #476]	; (8003b68 <_dtoa_r+0x5a8>)
 800398a:	1124      	asrs	r4, r4, #4
 800398c:	2c00      	cmp	r4, #0
 800398e:	f040 8084 	bne.w	8003a9a <_dtoa_r+0x4da>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1d2      	bne.n	800393c <_dtoa_r+0x37c>
 8003996:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 808b 	beq.w	8003ab4 <_dtoa_r+0x4f4>
 800399e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80039a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80039a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80039aa:	2200      	movs	r2, #0
 80039ac:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <_dtoa_r+0x5ac>)
 80039ae:	f7fd f805 	bl	80009bc <__aeabi_dcmplt>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d07e      	beq.n	8003ab4 <_dtoa_r+0x4f4>
 80039b6:	9b08      	ldr	r3, [sp, #32]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d07b      	beq.n	8003ab4 <_dtoa_r+0x4f4>
 80039bc:	f1b9 0f00 	cmp.w	r9, #0
 80039c0:	dd38      	ble.n	8003a34 <_dtoa_r+0x474>
 80039c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80039c6:	2200      	movs	r2, #0
 80039c8:	4b69      	ldr	r3, [pc, #420]	; (8003b70 <_dtoa_r+0x5b0>)
 80039ca:	f7fc fd85 	bl	80004d8 <__aeabi_dmul>
 80039ce:	464c      	mov	r4, r9
 80039d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80039d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80039d8:	3701      	adds	r7, #1
 80039da:	4638      	mov	r0, r7
 80039dc:	f7fc fd12 	bl	8000404 <__aeabi_i2d>
 80039e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039e4:	f7fc fd78 	bl	80004d8 <__aeabi_dmul>
 80039e8:	2200      	movs	r2, #0
 80039ea:	4b62      	ldr	r3, [pc, #392]	; (8003b74 <_dtoa_r+0x5b4>)
 80039ec:	f7fc fbbe 	bl	800016c <__adddf3>
 80039f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80039f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80039f8:	9611      	str	r6, [sp, #68]	; 0x44
 80039fa:	2c00      	cmp	r4, #0
 80039fc:	d15d      	bne.n	8003aba <_dtoa_r+0x4fa>
 80039fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a02:	2200      	movs	r2, #0
 8003a04:	4b5c      	ldr	r3, [pc, #368]	; (8003b78 <_dtoa_r+0x5b8>)
 8003a06:	f7fc fbaf 	bl	8000168 <__aeabi_dsub>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a12:	4633      	mov	r3, r6
 8003a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a16:	f7fc ffef 	bl	80009f8 <__aeabi_dcmpgt>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	f040 829c 	bne.w	8003f58 <_dtoa_r+0x998>
 8003a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003a2a:	f7fc ffc7 	bl	80009bc <__aeabi_dcmplt>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	f040 8290 	bne.w	8003f54 <_dtoa_r+0x994>
 8003a34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003a38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003a3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f2c0 8152 	blt.w	8003ce8 <_dtoa_r+0x728>
 8003a44:	f1ba 0f0e 	cmp.w	sl, #14
 8003a48:	f300 814e 	bgt.w	8003ce8 <_dtoa_r+0x728>
 8003a4c:	4b45      	ldr	r3, [pc, #276]	; (8003b64 <_dtoa_r+0x5a4>)
 8003a4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003a52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f280 80db 	bge.w	8003c18 <_dtoa_r+0x658>
 8003a62:	9b08      	ldr	r3, [sp, #32]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f300 80d7 	bgt.w	8003c18 <_dtoa_r+0x658>
 8003a6a:	f040 8272 	bne.w	8003f52 <_dtoa_r+0x992>
 8003a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a72:	2200      	movs	r2, #0
 8003a74:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <_dtoa_r+0x5b8>)
 8003a76:	f7fc fd2f 	bl	80004d8 <__aeabi_dmul>
 8003a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a7e:	f7fc ffb1 	bl	80009e4 <__aeabi_dcmpge>
 8003a82:	9c08      	ldr	r4, [sp, #32]
 8003a84:	4626      	mov	r6, r4
 8003a86:	2800      	cmp	r0, #0
 8003a88:	f040 8248 	bne.w	8003f1c <_dtoa_r+0x95c>
 8003a8c:	2331      	movs	r3, #49	; 0x31
 8003a8e:	9f03      	ldr	r7, [sp, #12]
 8003a90:	f10a 0a01 	add.w	sl, sl, #1
 8003a94:	f807 3b01 	strb.w	r3, [r7], #1
 8003a98:	e244      	b.n	8003f24 <_dtoa_r+0x964>
 8003a9a:	07e2      	lsls	r2, r4, #31
 8003a9c:	d505      	bpl.n	8003aaa <_dtoa_r+0x4ea>
 8003a9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003aa2:	f7fc fd19 	bl	80004d8 <__aeabi_dmul>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	3701      	adds	r7, #1
 8003aaa:	1064      	asrs	r4, r4, #1
 8003aac:	3608      	adds	r6, #8
 8003aae:	e76d      	b.n	800398c <_dtoa_r+0x3cc>
 8003ab0:	2702      	movs	r7, #2
 8003ab2:	e770      	b.n	8003996 <_dtoa_r+0x3d6>
 8003ab4:	46d0      	mov	r8, sl
 8003ab6:	9c08      	ldr	r4, [sp, #32]
 8003ab8:	e78f      	b.n	80039da <_dtoa_r+0x41a>
 8003aba:	9903      	ldr	r1, [sp, #12]
 8003abc:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <_dtoa_r+0x5a4>)
 8003abe:	4421      	add	r1, r4
 8003ac0:	9112      	str	r1, [sp, #72]	; 0x48
 8003ac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ac8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003acc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	d055      	beq.n	8003b80 <_dtoa_r+0x5c0>
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	4929      	ldr	r1, [pc, #164]	; (8003b7c <_dtoa_r+0x5bc>)
 8003ad8:	f7fc fe28 	bl	800072c <__aeabi_ddiv>
 8003adc:	463b      	mov	r3, r7
 8003ade:	4632      	mov	r2, r6
 8003ae0:	f7fc fb42 	bl	8000168 <__aeabi_dsub>
 8003ae4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ae8:	9f03      	ldr	r7, [sp, #12]
 8003aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003aee:	f7fc ffa3 	bl	8000a38 <__aeabi_d2iz>
 8003af2:	4604      	mov	r4, r0
 8003af4:	f7fc fc86 	bl	8000404 <__aeabi_i2d>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b00:	f7fc fb32 	bl	8000168 <__aeabi_dsub>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	3430      	adds	r4, #48	; 0x30
 8003b0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003b12:	f807 4b01 	strb.w	r4, [r7], #1
 8003b16:	f7fc ff51 	bl	80009bc <__aeabi_dcmplt>
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d174      	bne.n	8003c08 <_dtoa_r+0x648>
 8003b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b22:	2000      	movs	r0, #0
 8003b24:	4911      	ldr	r1, [pc, #68]	; (8003b6c <_dtoa_r+0x5ac>)
 8003b26:	f7fc fb1f 	bl	8000168 <__aeabi_dsub>
 8003b2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003b2e:	f7fc ff45 	bl	80009bc <__aeabi_dcmplt>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	f040 80b7 	bne.w	8003ca6 <_dtoa_r+0x6e6>
 8003b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b3a:	429f      	cmp	r7, r3
 8003b3c:	f43f af7a 	beq.w	8003a34 <_dtoa_r+0x474>
 8003b40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003b44:	2200      	movs	r2, #0
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <_dtoa_r+0x5b0>)
 8003b48:	f7fc fcc6 	bl	80004d8 <__aeabi_dmul>
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003b52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <_dtoa_r+0x5b0>)
 8003b58:	f7fc fcbe 	bl	80004d8 <__aeabi_dmul>
 8003b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b60:	e7c3      	b.n	8003aea <_dtoa_r+0x52a>
 8003b62:	bf00      	nop
 8003b64:	080057b8 	.word	0x080057b8
 8003b68:	08005790 	.word	0x08005790
 8003b6c:	3ff00000 	.word	0x3ff00000
 8003b70:	40240000 	.word	0x40240000
 8003b74:	401c0000 	.word	0x401c0000
 8003b78:	40140000 	.word	0x40140000
 8003b7c:	3fe00000 	.word	0x3fe00000
 8003b80:	4630      	mov	r0, r6
 8003b82:	4639      	mov	r1, r7
 8003b84:	f7fc fca8 	bl	80004d8 <__aeabi_dmul>
 8003b88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003b8e:	9c03      	ldr	r4, [sp, #12]
 8003b90:	9314      	str	r3, [sp, #80]	; 0x50
 8003b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b96:	f7fc ff4f 	bl	8000a38 <__aeabi_d2iz>
 8003b9a:	9015      	str	r0, [sp, #84]	; 0x54
 8003b9c:	f7fc fc32 	bl	8000404 <__aeabi_i2d>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ba8:	f7fc fade 	bl	8000168 <__aeabi_dsub>
 8003bac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003bae:	4606      	mov	r6, r0
 8003bb0:	3330      	adds	r3, #48	; 0x30
 8003bb2:	f804 3b01 	strb.w	r3, [r4], #1
 8003bb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003bb8:	460f      	mov	r7, r1
 8003bba:	429c      	cmp	r4, r3
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	d124      	bne.n	8003c0c <_dtoa_r+0x64c>
 8003bc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003bc6:	4bb0      	ldr	r3, [pc, #704]	; (8003e88 <_dtoa_r+0x8c8>)
 8003bc8:	f7fc fad0 	bl	800016c <__adddf3>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	4639      	mov	r1, r7
 8003bd4:	f7fc ff10 	bl	80009f8 <__aeabi_dcmpgt>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d163      	bne.n	8003ca4 <_dtoa_r+0x6e4>
 8003bdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003be0:	2000      	movs	r0, #0
 8003be2:	49a9      	ldr	r1, [pc, #676]	; (8003e88 <_dtoa_r+0x8c8>)
 8003be4:	f7fc fac0 	bl	8000168 <__aeabi_dsub>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4630      	mov	r0, r6
 8003bee:	4639      	mov	r1, r7
 8003bf0:	f7fc fee4 	bl	80009bc <__aeabi_dcmplt>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	f43f af1d 	beq.w	8003a34 <_dtoa_r+0x474>
 8003bfa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003bfc:	1e7b      	subs	r3, r7, #1
 8003bfe:	9314      	str	r3, [sp, #80]	; 0x50
 8003c00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003c04:	2b30      	cmp	r3, #48	; 0x30
 8003c06:	d0f8      	beq.n	8003bfa <_dtoa_r+0x63a>
 8003c08:	46c2      	mov	sl, r8
 8003c0a:	e03b      	b.n	8003c84 <_dtoa_r+0x6c4>
 8003c0c:	4b9f      	ldr	r3, [pc, #636]	; (8003e8c <_dtoa_r+0x8cc>)
 8003c0e:	f7fc fc63 	bl	80004d8 <__aeabi_dmul>
 8003c12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c16:	e7bc      	b.n	8003b92 <_dtoa_r+0x5d2>
 8003c18:	9f03      	ldr	r7, [sp, #12]
 8003c1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003c1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c22:	4640      	mov	r0, r8
 8003c24:	4649      	mov	r1, r9
 8003c26:	f7fc fd81 	bl	800072c <__aeabi_ddiv>
 8003c2a:	f7fc ff05 	bl	8000a38 <__aeabi_d2iz>
 8003c2e:	4604      	mov	r4, r0
 8003c30:	f7fc fbe8 	bl	8000404 <__aeabi_i2d>
 8003c34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c38:	f7fc fc4e 	bl	80004d8 <__aeabi_dmul>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4640      	mov	r0, r8
 8003c42:	4649      	mov	r1, r9
 8003c44:	f7fc fa90 	bl	8000168 <__aeabi_dsub>
 8003c48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003c4c:	f807 6b01 	strb.w	r6, [r7], #1
 8003c50:	9e03      	ldr	r6, [sp, #12]
 8003c52:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003c56:	1bbe      	subs	r6, r7, r6
 8003c58:	45b4      	cmp	ip, r6
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	d136      	bne.n	8003cce <_dtoa_r+0x70e>
 8003c60:	f7fc fa84 	bl	800016c <__adddf3>
 8003c64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c68:	4680      	mov	r8, r0
 8003c6a:	4689      	mov	r9, r1
 8003c6c:	f7fc fec4 	bl	80009f8 <__aeabi_dcmpgt>
 8003c70:	bb58      	cbnz	r0, 8003cca <_dtoa_r+0x70a>
 8003c72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c76:	4640      	mov	r0, r8
 8003c78:	4649      	mov	r1, r9
 8003c7a:	f7fc fe95 	bl	80009a8 <__aeabi_dcmpeq>
 8003c7e:	b108      	cbz	r0, 8003c84 <_dtoa_r+0x6c4>
 8003c80:	07e1      	lsls	r1, r4, #31
 8003c82:	d422      	bmi.n	8003cca <_dtoa_r+0x70a>
 8003c84:	4628      	mov	r0, r5
 8003c86:	4659      	mov	r1, fp
 8003c88:	f000 faf0 	bl	800426c <_Bfree>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	703b      	strb	r3, [r7, #0]
 8003c90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003c92:	f10a 0001 	add.w	r0, sl, #1
 8003c96:	6018      	str	r0, [r3, #0]
 8003c98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f43f acde 	beq.w	800365c <_dtoa_r+0x9c>
 8003ca0:	601f      	str	r7, [r3, #0]
 8003ca2:	e4db      	b.n	800365c <_dtoa_r+0x9c>
 8003ca4:	4627      	mov	r7, r4
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	461f      	mov	r7, r3
 8003caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003cae:	2a39      	cmp	r2, #57	; 0x39
 8003cb0:	d107      	bne.n	8003cc2 <_dtoa_r+0x702>
 8003cb2:	9a03      	ldr	r2, [sp, #12]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d1f7      	bne.n	8003ca8 <_dtoa_r+0x6e8>
 8003cb8:	2230      	movs	r2, #48	; 0x30
 8003cba:	9903      	ldr	r1, [sp, #12]
 8003cbc:	f108 0801 	add.w	r8, r8, #1
 8003cc0:	700a      	strb	r2, [r1, #0]
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	3201      	adds	r2, #1
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e79e      	b.n	8003c08 <_dtoa_r+0x648>
 8003cca:	46d0      	mov	r8, sl
 8003ccc:	e7eb      	b.n	8003ca6 <_dtoa_r+0x6e6>
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4b6e      	ldr	r3, [pc, #440]	; (8003e8c <_dtoa_r+0x8cc>)
 8003cd2:	f7fc fc01 	bl	80004d8 <__aeabi_dmul>
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4680      	mov	r8, r0
 8003cdc:	4689      	mov	r9, r1
 8003cde:	f7fc fe63 	bl	80009a8 <__aeabi_dcmpeq>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d09b      	beq.n	8003c1e <_dtoa_r+0x65e>
 8003ce6:	e7cd      	b.n	8003c84 <_dtoa_r+0x6c4>
 8003ce8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	f000 80d0 	beq.w	8003e90 <_dtoa_r+0x8d0>
 8003cf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003cf2:	2a01      	cmp	r2, #1
 8003cf4:	f300 80ae 	bgt.w	8003e54 <_dtoa_r+0x894>
 8003cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003cfa:	2a00      	cmp	r2, #0
 8003cfc:	f000 80a6 	beq.w	8003e4c <_dtoa_r+0x88c>
 8003d00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003d04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003d06:	9f06      	ldr	r7, [sp, #24]
 8003d08:	9a06      	ldr	r2, [sp, #24]
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	441a      	add	r2, r3
 8003d0e:	9206      	str	r2, [sp, #24]
 8003d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d12:	4628      	mov	r0, r5
 8003d14:	441a      	add	r2, r3
 8003d16:	9209      	str	r2, [sp, #36]	; 0x24
 8003d18:	f000 fb5e 	bl	80043d8 <__i2b>
 8003d1c:	4606      	mov	r6, r0
 8003d1e:	2f00      	cmp	r7, #0
 8003d20:	dd0c      	ble.n	8003d3c <_dtoa_r+0x77c>
 8003d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	dd09      	ble.n	8003d3c <_dtoa_r+0x77c>
 8003d28:	42bb      	cmp	r3, r7
 8003d2a:	bfa8      	it	ge
 8003d2c:	463b      	movge	r3, r7
 8003d2e:	9a06      	ldr	r2, [sp, #24]
 8003d30:	1aff      	subs	r7, r7, r3
 8003d32:	1ad2      	subs	r2, r2, r3
 8003d34:	9206      	str	r2, [sp, #24]
 8003d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d3e:	b1f3      	cbz	r3, 8003d7e <_dtoa_r+0x7be>
 8003d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80a8 	beq.w	8003e98 <_dtoa_r+0x8d8>
 8003d48:	2c00      	cmp	r4, #0
 8003d4a:	dd10      	ble.n	8003d6e <_dtoa_r+0x7ae>
 8003d4c:	4631      	mov	r1, r6
 8003d4e:	4622      	mov	r2, r4
 8003d50:	4628      	mov	r0, r5
 8003d52:	f000 fbff 	bl	8004554 <__pow5mult>
 8003d56:	465a      	mov	r2, fp
 8003d58:	4601      	mov	r1, r0
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f000 fb51 	bl	8004404 <__multiply>
 8003d62:	4680      	mov	r8, r0
 8003d64:	4659      	mov	r1, fp
 8003d66:	4628      	mov	r0, r5
 8003d68:	f000 fa80 	bl	800426c <_Bfree>
 8003d6c:	46c3      	mov	fp, r8
 8003d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d70:	1b1a      	subs	r2, r3, r4
 8003d72:	d004      	beq.n	8003d7e <_dtoa_r+0x7be>
 8003d74:	4659      	mov	r1, fp
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 fbec 	bl	8004554 <__pow5mult>
 8003d7c:	4683      	mov	fp, r0
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4628      	mov	r0, r5
 8003d82:	f000 fb29 	bl	80043d8 <__i2b>
 8003d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d88:	4604      	mov	r4, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f340 8086 	ble.w	8003e9c <_dtoa_r+0x8dc>
 8003d90:	461a      	mov	r2, r3
 8003d92:	4601      	mov	r1, r0
 8003d94:	4628      	mov	r0, r5
 8003d96:	f000 fbdd 	bl	8004554 <__pow5mult>
 8003d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	dd7f      	ble.n	8003ea2 <_dtoa_r+0x8e2>
 8003da2:	f04f 0800 	mov.w	r8, #0
 8003da6:	6923      	ldr	r3, [r4, #16]
 8003da8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003dac:	6918      	ldr	r0, [r3, #16]
 8003dae:	f000 fac5 	bl	800433c <__hi0bits>
 8003db2:	f1c0 0020 	rsb	r0, r0, #32
 8003db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003db8:	4418      	add	r0, r3
 8003dba:	f010 001f 	ands.w	r0, r0, #31
 8003dbe:	f000 8092 	beq.w	8003ee6 <_dtoa_r+0x926>
 8003dc2:	f1c0 0320 	rsb	r3, r0, #32
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	f340 808a 	ble.w	8003ee0 <_dtoa_r+0x920>
 8003dcc:	f1c0 001c 	rsb	r0, r0, #28
 8003dd0:	9b06      	ldr	r3, [sp, #24]
 8003dd2:	4407      	add	r7, r0
 8003dd4:	4403      	add	r3, r0
 8003dd6:	9306      	str	r3, [sp, #24]
 8003dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dda:	4403      	add	r3, r0
 8003ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dde:	9b06      	ldr	r3, [sp, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	dd05      	ble.n	8003df0 <_dtoa_r+0x830>
 8003de4:	4659      	mov	r1, fp
 8003de6:	461a      	mov	r2, r3
 8003de8:	4628      	mov	r0, r5
 8003dea:	f000 fc0d 	bl	8004608 <__lshift>
 8003dee:	4683      	mov	fp, r0
 8003df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	dd05      	ble.n	8003e02 <_dtoa_r+0x842>
 8003df6:	4621      	mov	r1, r4
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f000 fc04 	bl	8004608 <__lshift>
 8003e00:	4604      	mov	r4, r0
 8003e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d070      	beq.n	8003eea <_dtoa_r+0x92a>
 8003e08:	4621      	mov	r1, r4
 8003e0a:	4658      	mov	r0, fp
 8003e0c:	f000 fc6c 	bl	80046e8 <__mcmp>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	da6a      	bge.n	8003eea <_dtoa_r+0x92a>
 8003e14:	2300      	movs	r3, #0
 8003e16:	4659      	mov	r1, fp
 8003e18:	220a      	movs	r2, #10
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 fa48 	bl	80042b0 <__multadd>
 8003e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e22:	4683      	mov	fp, r0
 8003e24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8194 	beq.w	8004156 <_dtoa_r+0xb96>
 8003e2e:	4631      	mov	r1, r6
 8003e30:	2300      	movs	r3, #0
 8003e32:	220a      	movs	r2, #10
 8003e34:	4628      	mov	r0, r5
 8003e36:	f000 fa3b 	bl	80042b0 <__multadd>
 8003e3a:	f1b9 0f00 	cmp.w	r9, #0
 8003e3e:	4606      	mov	r6, r0
 8003e40:	f300 8093 	bgt.w	8003f6a <_dtoa_r+0x9aa>
 8003e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	dc57      	bgt.n	8003efa <_dtoa_r+0x93a>
 8003e4a:	e08e      	b.n	8003f6a <_dtoa_r+0x9aa>
 8003e4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003e52:	e757      	b.n	8003d04 <_dtoa_r+0x744>
 8003e54:	9b08      	ldr	r3, [sp, #32]
 8003e56:	1e5c      	subs	r4, r3, #1
 8003e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e5a:	42a3      	cmp	r3, r4
 8003e5c:	bfb7      	itett	lt
 8003e5e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003e60:	1b1c      	subge	r4, r3, r4
 8003e62:	1ae2      	sublt	r2, r4, r3
 8003e64:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003e66:	bfbe      	ittt	lt
 8003e68:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003e6a:	189b      	addlt	r3, r3, r2
 8003e6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003e6e:	9b08      	ldr	r3, [sp, #32]
 8003e70:	bfb8      	it	lt
 8003e72:	2400      	movlt	r4, #0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bfbb      	ittet	lt
 8003e78:	9b06      	ldrlt	r3, [sp, #24]
 8003e7a:	9a08      	ldrlt	r2, [sp, #32]
 8003e7c:	9f06      	ldrge	r7, [sp, #24]
 8003e7e:	1a9f      	sublt	r7, r3, r2
 8003e80:	bfac      	ite	ge
 8003e82:	9b08      	ldrge	r3, [sp, #32]
 8003e84:	2300      	movlt	r3, #0
 8003e86:	e73f      	b.n	8003d08 <_dtoa_r+0x748>
 8003e88:	3fe00000 	.word	0x3fe00000
 8003e8c:	40240000 	.word	0x40240000
 8003e90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003e92:	9f06      	ldr	r7, [sp, #24]
 8003e94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003e96:	e742      	b.n	8003d1e <_dtoa_r+0x75e>
 8003e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e9a:	e76b      	b.n	8003d74 <_dtoa_r+0x7b4>
 8003e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	dc19      	bgt.n	8003ed6 <_dtoa_r+0x916>
 8003ea2:	9b04      	ldr	r3, [sp, #16]
 8003ea4:	b9bb      	cbnz	r3, 8003ed6 <_dtoa_r+0x916>
 8003ea6:	9b05      	ldr	r3, [sp, #20]
 8003ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eac:	b99b      	cbnz	r3, 8003ed6 <_dtoa_r+0x916>
 8003eae:	9b05      	ldr	r3, [sp, #20]
 8003eb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eb4:	0d1b      	lsrs	r3, r3, #20
 8003eb6:	051b      	lsls	r3, r3, #20
 8003eb8:	b183      	cbz	r3, 8003edc <_dtoa_r+0x91c>
 8003eba:	f04f 0801 	mov.w	r8, #1
 8003ebe:	9b06      	ldr	r3, [sp, #24]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	9306      	str	r3, [sp, #24]
 8003ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f47f af6a 	bne.w	8003da6 <_dtoa_r+0x7e6>
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	e76f      	b.n	8003db6 <_dtoa_r+0x7f6>
 8003ed6:	f04f 0800 	mov.w	r8, #0
 8003eda:	e7f6      	b.n	8003eca <_dtoa_r+0x90a>
 8003edc:	4698      	mov	r8, r3
 8003ede:	e7f4      	b.n	8003eca <_dtoa_r+0x90a>
 8003ee0:	f43f af7d 	beq.w	8003dde <_dtoa_r+0x81e>
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	301c      	adds	r0, #28
 8003ee8:	e772      	b.n	8003dd0 <_dtoa_r+0x810>
 8003eea:	9b08      	ldr	r3, [sp, #32]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	dc36      	bgt.n	8003f5e <_dtoa_r+0x99e>
 8003ef0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	dd33      	ble.n	8003f5e <_dtoa_r+0x99e>
 8003ef6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003efa:	f1b9 0f00 	cmp.w	r9, #0
 8003efe:	d10d      	bne.n	8003f1c <_dtoa_r+0x95c>
 8003f00:	4621      	mov	r1, r4
 8003f02:	464b      	mov	r3, r9
 8003f04:	2205      	movs	r2, #5
 8003f06:	4628      	mov	r0, r5
 8003f08:	f000 f9d2 	bl	80042b0 <__multadd>
 8003f0c:	4601      	mov	r1, r0
 8003f0e:	4604      	mov	r4, r0
 8003f10:	4658      	mov	r0, fp
 8003f12:	f000 fbe9 	bl	80046e8 <__mcmp>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	f73f adb8 	bgt.w	8003a8c <_dtoa_r+0x4cc>
 8003f1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f1e:	9f03      	ldr	r7, [sp, #12]
 8003f20:	ea6f 0a03 	mvn.w	sl, r3
 8003f24:	f04f 0800 	mov.w	r8, #0
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f99e 	bl	800426c <_Bfree>
 8003f30:	2e00      	cmp	r6, #0
 8003f32:	f43f aea7 	beq.w	8003c84 <_dtoa_r+0x6c4>
 8003f36:	f1b8 0f00 	cmp.w	r8, #0
 8003f3a:	d005      	beq.n	8003f48 <_dtoa_r+0x988>
 8003f3c:	45b0      	cmp	r8, r6
 8003f3e:	d003      	beq.n	8003f48 <_dtoa_r+0x988>
 8003f40:	4641      	mov	r1, r8
 8003f42:	4628      	mov	r0, r5
 8003f44:	f000 f992 	bl	800426c <_Bfree>
 8003f48:	4631      	mov	r1, r6
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	f000 f98e 	bl	800426c <_Bfree>
 8003f50:	e698      	b.n	8003c84 <_dtoa_r+0x6c4>
 8003f52:	2400      	movs	r4, #0
 8003f54:	4626      	mov	r6, r4
 8003f56:	e7e1      	b.n	8003f1c <_dtoa_r+0x95c>
 8003f58:	46c2      	mov	sl, r8
 8003f5a:	4626      	mov	r6, r4
 8003f5c:	e596      	b.n	8003a8c <_dtoa_r+0x4cc>
 8003f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80fd 	beq.w	8004164 <_dtoa_r+0xba4>
 8003f6a:	2f00      	cmp	r7, #0
 8003f6c:	dd05      	ble.n	8003f7a <_dtoa_r+0x9ba>
 8003f6e:	4631      	mov	r1, r6
 8003f70:	463a      	mov	r2, r7
 8003f72:	4628      	mov	r0, r5
 8003f74:	f000 fb48 	bl	8004608 <__lshift>
 8003f78:	4606      	mov	r6, r0
 8003f7a:	f1b8 0f00 	cmp.w	r8, #0
 8003f7e:	d05c      	beq.n	800403a <_dtoa_r+0xa7a>
 8003f80:	4628      	mov	r0, r5
 8003f82:	6871      	ldr	r1, [r6, #4]
 8003f84:	f000 f932 	bl	80041ec <_Balloc>
 8003f88:	4607      	mov	r7, r0
 8003f8a:	b928      	cbnz	r0, 8003f98 <_dtoa_r+0x9d8>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003f92:	4b7f      	ldr	r3, [pc, #508]	; (8004190 <_dtoa_r+0xbd0>)
 8003f94:	f7ff bb28 	b.w	80035e8 <_dtoa_r+0x28>
 8003f98:	6932      	ldr	r2, [r6, #16]
 8003f9a:	f106 010c 	add.w	r1, r6, #12
 8003f9e:	3202      	adds	r2, #2
 8003fa0:	0092      	lsls	r2, r2, #2
 8003fa2:	300c      	adds	r0, #12
 8003fa4:	f000 f914 	bl	80041d0 <memcpy>
 8003fa8:	2201      	movs	r2, #1
 8003faa:	4639      	mov	r1, r7
 8003fac:	4628      	mov	r0, r5
 8003fae:	f000 fb2b 	bl	8004608 <__lshift>
 8003fb2:	46b0      	mov	r8, r6
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	9b03      	ldr	r3, [sp, #12]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	9308      	str	r3, [sp, #32]
 8003fbc:	9b03      	ldr	r3, [sp, #12]
 8003fbe:	444b      	add	r3, r9
 8003fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8003fc2:	9b04      	ldr	r3, [sp, #16]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fca:	9b08      	ldr	r3, [sp, #32]
 8003fcc:	4621      	mov	r1, r4
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	4658      	mov	r0, fp
 8003fd2:	9304      	str	r3, [sp, #16]
 8003fd4:	f7ff fa68 	bl	80034a8 <quorem>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	4641      	mov	r1, r8
 8003fdc:	3330      	adds	r3, #48	; 0x30
 8003fde:	9006      	str	r0, [sp, #24]
 8003fe0:	4658      	mov	r0, fp
 8003fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fe4:	f000 fb80 	bl	80046e8 <__mcmp>
 8003fe8:	4632      	mov	r2, r6
 8003fea:	4681      	mov	r9, r0
 8003fec:	4621      	mov	r1, r4
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f000 fb96 	bl	8004720 <__mdiff>
 8003ff4:	68c2      	ldr	r2, [r0, #12]
 8003ff6:	4607      	mov	r7, r0
 8003ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ffa:	bb02      	cbnz	r2, 800403e <_dtoa_r+0xa7e>
 8003ffc:	4601      	mov	r1, r0
 8003ffe:	4658      	mov	r0, fp
 8004000:	f000 fb72 	bl	80046e8 <__mcmp>
 8004004:	4602      	mov	r2, r0
 8004006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004008:	4639      	mov	r1, r7
 800400a:	4628      	mov	r0, r5
 800400c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004010:	f000 f92c 	bl	800426c <_Bfree>
 8004014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004018:	9f08      	ldr	r7, [sp, #32]
 800401a:	ea43 0102 	orr.w	r1, r3, r2
 800401e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004020:	430b      	orrs	r3, r1
 8004022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004024:	d10d      	bne.n	8004042 <_dtoa_r+0xa82>
 8004026:	2b39      	cmp	r3, #57	; 0x39
 8004028:	d029      	beq.n	800407e <_dtoa_r+0xabe>
 800402a:	f1b9 0f00 	cmp.w	r9, #0
 800402e:	dd01      	ble.n	8004034 <_dtoa_r+0xa74>
 8004030:	9b06      	ldr	r3, [sp, #24]
 8004032:	3331      	adds	r3, #49	; 0x31
 8004034:	9a04      	ldr	r2, [sp, #16]
 8004036:	7013      	strb	r3, [r2, #0]
 8004038:	e776      	b.n	8003f28 <_dtoa_r+0x968>
 800403a:	4630      	mov	r0, r6
 800403c:	e7b9      	b.n	8003fb2 <_dtoa_r+0x9f2>
 800403e:	2201      	movs	r2, #1
 8004040:	e7e2      	b.n	8004008 <_dtoa_r+0xa48>
 8004042:	f1b9 0f00 	cmp.w	r9, #0
 8004046:	db06      	blt.n	8004056 <_dtoa_r+0xa96>
 8004048:	9922      	ldr	r1, [sp, #136]	; 0x88
 800404a:	ea41 0909 	orr.w	r9, r1, r9
 800404e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004050:	ea59 0101 	orrs.w	r1, r9, r1
 8004054:	d120      	bne.n	8004098 <_dtoa_r+0xad8>
 8004056:	2a00      	cmp	r2, #0
 8004058:	ddec      	ble.n	8004034 <_dtoa_r+0xa74>
 800405a:	4659      	mov	r1, fp
 800405c:	2201      	movs	r2, #1
 800405e:	4628      	mov	r0, r5
 8004060:	9308      	str	r3, [sp, #32]
 8004062:	f000 fad1 	bl	8004608 <__lshift>
 8004066:	4621      	mov	r1, r4
 8004068:	4683      	mov	fp, r0
 800406a:	f000 fb3d 	bl	80046e8 <__mcmp>
 800406e:	2800      	cmp	r0, #0
 8004070:	9b08      	ldr	r3, [sp, #32]
 8004072:	dc02      	bgt.n	800407a <_dtoa_r+0xaba>
 8004074:	d1de      	bne.n	8004034 <_dtoa_r+0xa74>
 8004076:	07da      	lsls	r2, r3, #31
 8004078:	d5dc      	bpl.n	8004034 <_dtoa_r+0xa74>
 800407a:	2b39      	cmp	r3, #57	; 0x39
 800407c:	d1d8      	bne.n	8004030 <_dtoa_r+0xa70>
 800407e:	2339      	movs	r3, #57	; 0x39
 8004080:	9a04      	ldr	r2, [sp, #16]
 8004082:	7013      	strb	r3, [r2, #0]
 8004084:	463b      	mov	r3, r7
 8004086:	461f      	mov	r7, r3
 8004088:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800408c:	3b01      	subs	r3, #1
 800408e:	2a39      	cmp	r2, #57	; 0x39
 8004090:	d050      	beq.n	8004134 <_dtoa_r+0xb74>
 8004092:	3201      	adds	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e747      	b.n	8003f28 <_dtoa_r+0x968>
 8004098:	2a00      	cmp	r2, #0
 800409a:	dd03      	ble.n	80040a4 <_dtoa_r+0xae4>
 800409c:	2b39      	cmp	r3, #57	; 0x39
 800409e:	d0ee      	beq.n	800407e <_dtoa_r+0xabe>
 80040a0:	3301      	adds	r3, #1
 80040a2:	e7c7      	b.n	8004034 <_dtoa_r+0xa74>
 80040a4:	9a08      	ldr	r2, [sp, #32]
 80040a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80040ac:	428a      	cmp	r2, r1
 80040ae:	d02a      	beq.n	8004106 <_dtoa_r+0xb46>
 80040b0:	4659      	mov	r1, fp
 80040b2:	2300      	movs	r3, #0
 80040b4:	220a      	movs	r2, #10
 80040b6:	4628      	mov	r0, r5
 80040b8:	f000 f8fa 	bl	80042b0 <__multadd>
 80040bc:	45b0      	cmp	r8, r6
 80040be:	4683      	mov	fp, r0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	f04f 020a 	mov.w	r2, #10
 80040c8:	4641      	mov	r1, r8
 80040ca:	4628      	mov	r0, r5
 80040cc:	d107      	bne.n	80040de <_dtoa_r+0xb1e>
 80040ce:	f000 f8ef 	bl	80042b0 <__multadd>
 80040d2:	4680      	mov	r8, r0
 80040d4:	4606      	mov	r6, r0
 80040d6:	9b08      	ldr	r3, [sp, #32]
 80040d8:	3301      	adds	r3, #1
 80040da:	9308      	str	r3, [sp, #32]
 80040dc:	e775      	b.n	8003fca <_dtoa_r+0xa0a>
 80040de:	f000 f8e7 	bl	80042b0 <__multadd>
 80040e2:	4631      	mov	r1, r6
 80040e4:	4680      	mov	r8, r0
 80040e6:	2300      	movs	r3, #0
 80040e8:	220a      	movs	r2, #10
 80040ea:	4628      	mov	r0, r5
 80040ec:	f000 f8e0 	bl	80042b0 <__multadd>
 80040f0:	4606      	mov	r6, r0
 80040f2:	e7f0      	b.n	80040d6 <_dtoa_r+0xb16>
 80040f4:	f1b9 0f00 	cmp.w	r9, #0
 80040f8:	bfcc      	ite	gt
 80040fa:	464f      	movgt	r7, r9
 80040fc:	2701      	movle	r7, #1
 80040fe:	f04f 0800 	mov.w	r8, #0
 8004102:	9a03      	ldr	r2, [sp, #12]
 8004104:	4417      	add	r7, r2
 8004106:	4659      	mov	r1, fp
 8004108:	2201      	movs	r2, #1
 800410a:	4628      	mov	r0, r5
 800410c:	9308      	str	r3, [sp, #32]
 800410e:	f000 fa7b 	bl	8004608 <__lshift>
 8004112:	4621      	mov	r1, r4
 8004114:	4683      	mov	fp, r0
 8004116:	f000 fae7 	bl	80046e8 <__mcmp>
 800411a:	2800      	cmp	r0, #0
 800411c:	dcb2      	bgt.n	8004084 <_dtoa_r+0xac4>
 800411e:	d102      	bne.n	8004126 <_dtoa_r+0xb66>
 8004120:	9b08      	ldr	r3, [sp, #32]
 8004122:	07db      	lsls	r3, r3, #31
 8004124:	d4ae      	bmi.n	8004084 <_dtoa_r+0xac4>
 8004126:	463b      	mov	r3, r7
 8004128:	461f      	mov	r7, r3
 800412a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800412e:	2a30      	cmp	r2, #48	; 0x30
 8004130:	d0fa      	beq.n	8004128 <_dtoa_r+0xb68>
 8004132:	e6f9      	b.n	8003f28 <_dtoa_r+0x968>
 8004134:	9a03      	ldr	r2, [sp, #12]
 8004136:	429a      	cmp	r2, r3
 8004138:	d1a5      	bne.n	8004086 <_dtoa_r+0xac6>
 800413a:	2331      	movs	r3, #49	; 0x31
 800413c:	f10a 0a01 	add.w	sl, sl, #1
 8004140:	e779      	b.n	8004036 <_dtoa_r+0xa76>
 8004142:	4b14      	ldr	r3, [pc, #80]	; (8004194 <_dtoa_r+0xbd4>)
 8004144:	f7ff baa8 	b.w	8003698 <_dtoa_r+0xd8>
 8004148:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800414a:	2b00      	cmp	r3, #0
 800414c:	f47f aa81 	bne.w	8003652 <_dtoa_r+0x92>
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <_dtoa_r+0xbd8>)
 8004152:	f7ff baa1 	b.w	8003698 <_dtoa_r+0xd8>
 8004156:	f1b9 0f00 	cmp.w	r9, #0
 800415a:	dc03      	bgt.n	8004164 <_dtoa_r+0xba4>
 800415c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800415e:	2b02      	cmp	r3, #2
 8004160:	f73f aecb 	bgt.w	8003efa <_dtoa_r+0x93a>
 8004164:	9f03      	ldr	r7, [sp, #12]
 8004166:	4621      	mov	r1, r4
 8004168:	4658      	mov	r0, fp
 800416a:	f7ff f99d 	bl	80034a8 <quorem>
 800416e:	9a03      	ldr	r2, [sp, #12]
 8004170:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004174:	f807 3b01 	strb.w	r3, [r7], #1
 8004178:	1aba      	subs	r2, r7, r2
 800417a:	4591      	cmp	r9, r2
 800417c:	ddba      	ble.n	80040f4 <_dtoa_r+0xb34>
 800417e:	4659      	mov	r1, fp
 8004180:	2300      	movs	r3, #0
 8004182:	220a      	movs	r2, #10
 8004184:	4628      	mov	r0, r5
 8004186:	f000 f893 	bl	80042b0 <__multadd>
 800418a:	4683      	mov	fp, r0
 800418c:	e7eb      	b.n	8004166 <_dtoa_r+0xba6>
 800418e:	bf00      	nop
 8004190:	08005723 	.word	0x08005723
 8004194:	08005680 	.word	0x08005680
 8004198:	080056a4 	.word	0x080056a4

0800419c <_localeconv_r>:
 800419c:	4800      	ldr	r0, [pc, #0]	; (80041a0 <_localeconv_r+0x4>)
 800419e:	4770      	bx	lr
 80041a0:	20000160 	.word	0x20000160

080041a4 <malloc>:
 80041a4:	4b02      	ldr	r3, [pc, #8]	; (80041b0 <malloc+0xc>)
 80041a6:	4601      	mov	r1, r0
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	f000 bc1d 	b.w	80049e8 <_malloc_r>
 80041ae:	bf00      	nop
 80041b0:	2000000c 	.word	0x2000000c

080041b4 <memchr>:
 80041b4:	4603      	mov	r3, r0
 80041b6:	b510      	push	{r4, lr}
 80041b8:	b2c9      	uxtb	r1, r1
 80041ba:	4402      	add	r2, r0
 80041bc:	4293      	cmp	r3, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	d101      	bne.n	80041c6 <memchr+0x12>
 80041c2:	2000      	movs	r0, #0
 80041c4:	e003      	b.n	80041ce <memchr+0x1a>
 80041c6:	7804      	ldrb	r4, [r0, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	428c      	cmp	r4, r1
 80041cc:	d1f6      	bne.n	80041bc <memchr+0x8>
 80041ce:	bd10      	pop	{r4, pc}

080041d0 <memcpy>:
 80041d0:	440a      	add	r2, r1
 80041d2:	4291      	cmp	r1, r2
 80041d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80041d8:	d100      	bne.n	80041dc <memcpy+0xc>
 80041da:	4770      	bx	lr
 80041dc:	b510      	push	{r4, lr}
 80041de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041e2:	4291      	cmp	r1, r2
 80041e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041e8:	d1f9      	bne.n	80041de <memcpy+0xe>
 80041ea:	bd10      	pop	{r4, pc}

080041ec <_Balloc>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80041f0:	4604      	mov	r4, r0
 80041f2:	460d      	mov	r5, r1
 80041f4:	b976      	cbnz	r6, 8004214 <_Balloc+0x28>
 80041f6:	2010      	movs	r0, #16
 80041f8:	f7ff ffd4 	bl	80041a4 <malloc>
 80041fc:	4602      	mov	r2, r0
 80041fe:	6260      	str	r0, [r4, #36]	; 0x24
 8004200:	b920      	cbnz	r0, 800420c <_Balloc+0x20>
 8004202:	2166      	movs	r1, #102	; 0x66
 8004204:	4b17      	ldr	r3, [pc, #92]	; (8004264 <_Balloc+0x78>)
 8004206:	4818      	ldr	r0, [pc, #96]	; (8004268 <_Balloc+0x7c>)
 8004208:	f000 fc72 	bl	8004af0 <__assert_func>
 800420c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004210:	6006      	str	r6, [r0, #0]
 8004212:	60c6      	str	r6, [r0, #12]
 8004214:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004216:	68f3      	ldr	r3, [r6, #12]
 8004218:	b183      	cbz	r3, 800423c <_Balloc+0x50>
 800421a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004222:	b9b8      	cbnz	r0, 8004254 <_Balloc+0x68>
 8004224:	2101      	movs	r1, #1
 8004226:	fa01 f605 	lsl.w	r6, r1, r5
 800422a:	1d72      	adds	r2, r6, #5
 800422c:	4620      	mov	r0, r4
 800422e:	0092      	lsls	r2, r2, #2
 8004230:	f000 fb5e 	bl	80048f0 <_calloc_r>
 8004234:	b160      	cbz	r0, 8004250 <_Balloc+0x64>
 8004236:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800423a:	e00e      	b.n	800425a <_Balloc+0x6e>
 800423c:	2221      	movs	r2, #33	; 0x21
 800423e:	2104      	movs	r1, #4
 8004240:	4620      	mov	r0, r4
 8004242:	f000 fb55 	bl	80048f0 <_calloc_r>
 8004246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004248:	60f0      	str	r0, [r6, #12]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e4      	bne.n	800421a <_Balloc+0x2e>
 8004250:	2000      	movs	r0, #0
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	6802      	ldr	r2, [r0, #0]
 8004256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800425a:	2300      	movs	r3, #0
 800425c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004260:	e7f7      	b.n	8004252 <_Balloc+0x66>
 8004262:	bf00      	nop
 8004264:	080056b1 	.word	0x080056b1
 8004268:	08005734 	.word	0x08005734

0800426c <_Bfree>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004270:	4605      	mov	r5, r0
 8004272:	460c      	mov	r4, r1
 8004274:	b976      	cbnz	r6, 8004294 <_Bfree+0x28>
 8004276:	2010      	movs	r0, #16
 8004278:	f7ff ff94 	bl	80041a4 <malloc>
 800427c:	4602      	mov	r2, r0
 800427e:	6268      	str	r0, [r5, #36]	; 0x24
 8004280:	b920      	cbnz	r0, 800428c <_Bfree+0x20>
 8004282:	218a      	movs	r1, #138	; 0x8a
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <_Bfree+0x3c>)
 8004286:	4809      	ldr	r0, [pc, #36]	; (80042ac <_Bfree+0x40>)
 8004288:	f000 fc32 	bl	8004af0 <__assert_func>
 800428c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004290:	6006      	str	r6, [r0, #0]
 8004292:	60c6      	str	r6, [r0, #12]
 8004294:	b13c      	cbz	r4, 80042a6 <_Bfree+0x3a>
 8004296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004298:	6862      	ldr	r2, [r4, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042a0:	6021      	str	r1, [r4, #0]
 80042a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	080056b1 	.word	0x080056b1
 80042ac:	08005734 	.word	0x08005734

080042b0 <__multadd>:
 80042b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b4:	4607      	mov	r7, r0
 80042b6:	460c      	mov	r4, r1
 80042b8:	461e      	mov	r6, r3
 80042ba:	2000      	movs	r0, #0
 80042bc:	690d      	ldr	r5, [r1, #16]
 80042be:	f101 0c14 	add.w	ip, r1, #20
 80042c2:	f8dc 3000 	ldr.w	r3, [ip]
 80042c6:	3001      	adds	r0, #1
 80042c8:	b299      	uxth	r1, r3
 80042ca:	fb02 6101 	mla	r1, r2, r1, r6
 80042ce:	0c1e      	lsrs	r6, r3, #16
 80042d0:	0c0b      	lsrs	r3, r1, #16
 80042d2:	fb02 3306 	mla	r3, r2, r6, r3
 80042d6:	b289      	uxth	r1, r1
 80042d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80042dc:	4285      	cmp	r5, r0
 80042de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80042e2:	f84c 1b04 	str.w	r1, [ip], #4
 80042e6:	dcec      	bgt.n	80042c2 <__multadd+0x12>
 80042e8:	b30e      	cbz	r6, 800432e <__multadd+0x7e>
 80042ea:	68a3      	ldr	r3, [r4, #8]
 80042ec:	42ab      	cmp	r3, r5
 80042ee:	dc19      	bgt.n	8004324 <__multadd+0x74>
 80042f0:	6861      	ldr	r1, [r4, #4]
 80042f2:	4638      	mov	r0, r7
 80042f4:	3101      	adds	r1, #1
 80042f6:	f7ff ff79 	bl	80041ec <_Balloc>
 80042fa:	4680      	mov	r8, r0
 80042fc:	b928      	cbnz	r0, 800430a <__multadd+0x5a>
 80042fe:	4602      	mov	r2, r0
 8004300:	21b5      	movs	r1, #181	; 0xb5
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <__multadd+0x84>)
 8004304:	480c      	ldr	r0, [pc, #48]	; (8004338 <__multadd+0x88>)
 8004306:	f000 fbf3 	bl	8004af0 <__assert_func>
 800430a:	6922      	ldr	r2, [r4, #16]
 800430c:	f104 010c 	add.w	r1, r4, #12
 8004310:	3202      	adds	r2, #2
 8004312:	0092      	lsls	r2, r2, #2
 8004314:	300c      	adds	r0, #12
 8004316:	f7ff ff5b 	bl	80041d0 <memcpy>
 800431a:	4621      	mov	r1, r4
 800431c:	4638      	mov	r0, r7
 800431e:	f7ff ffa5 	bl	800426c <_Bfree>
 8004322:	4644      	mov	r4, r8
 8004324:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004328:	3501      	adds	r5, #1
 800432a:	615e      	str	r6, [r3, #20]
 800432c:	6125      	str	r5, [r4, #16]
 800432e:	4620      	mov	r0, r4
 8004330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004334:	08005723 	.word	0x08005723
 8004338:	08005734 	.word	0x08005734

0800433c <__hi0bits>:
 800433c:	0c02      	lsrs	r2, r0, #16
 800433e:	0412      	lsls	r2, r2, #16
 8004340:	4603      	mov	r3, r0
 8004342:	b9ca      	cbnz	r2, 8004378 <__hi0bits+0x3c>
 8004344:	0403      	lsls	r3, r0, #16
 8004346:	2010      	movs	r0, #16
 8004348:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800434c:	bf04      	itt	eq
 800434e:	021b      	lsleq	r3, r3, #8
 8004350:	3008      	addeq	r0, #8
 8004352:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004356:	bf04      	itt	eq
 8004358:	011b      	lsleq	r3, r3, #4
 800435a:	3004      	addeq	r0, #4
 800435c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004360:	bf04      	itt	eq
 8004362:	009b      	lsleq	r3, r3, #2
 8004364:	3002      	addeq	r0, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	db05      	blt.n	8004376 <__hi0bits+0x3a>
 800436a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800436e:	f100 0001 	add.w	r0, r0, #1
 8004372:	bf08      	it	eq
 8004374:	2020      	moveq	r0, #32
 8004376:	4770      	bx	lr
 8004378:	2000      	movs	r0, #0
 800437a:	e7e5      	b.n	8004348 <__hi0bits+0xc>

0800437c <__lo0bits>:
 800437c:	6803      	ldr	r3, [r0, #0]
 800437e:	4602      	mov	r2, r0
 8004380:	f013 0007 	ands.w	r0, r3, #7
 8004384:	d00b      	beq.n	800439e <__lo0bits+0x22>
 8004386:	07d9      	lsls	r1, r3, #31
 8004388:	d421      	bmi.n	80043ce <__lo0bits+0x52>
 800438a:	0798      	lsls	r0, r3, #30
 800438c:	bf49      	itett	mi
 800438e:	085b      	lsrmi	r3, r3, #1
 8004390:	089b      	lsrpl	r3, r3, #2
 8004392:	2001      	movmi	r0, #1
 8004394:	6013      	strmi	r3, [r2, #0]
 8004396:	bf5c      	itt	pl
 8004398:	2002      	movpl	r0, #2
 800439a:	6013      	strpl	r3, [r2, #0]
 800439c:	4770      	bx	lr
 800439e:	b299      	uxth	r1, r3
 80043a0:	b909      	cbnz	r1, 80043a6 <__lo0bits+0x2a>
 80043a2:	2010      	movs	r0, #16
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	b2d9      	uxtb	r1, r3
 80043a8:	b909      	cbnz	r1, 80043ae <__lo0bits+0x32>
 80043aa:	3008      	adds	r0, #8
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	0719      	lsls	r1, r3, #28
 80043b0:	bf04      	itt	eq
 80043b2:	091b      	lsreq	r3, r3, #4
 80043b4:	3004      	addeq	r0, #4
 80043b6:	0799      	lsls	r1, r3, #30
 80043b8:	bf04      	itt	eq
 80043ba:	089b      	lsreq	r3, r3, #2
 80043bc:	3002      	addeq	r0, #2
 80043be:	07d9      	lsls	r1, r3, #31
 80043c0:	d403      	bmi.n	80043ca <__lo0bits+0x4e>
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	f100 0001 	add.w	r0, r0, #1
 80043c8:	d003      	beq.n	80043d2 <__lo0bits+0x56>
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4770      	bx	lr
 80043ce:	2000      	movs	r0, #0
 80043d0:	4770      	bx	lr
 80043d2:	2020      	movs	r0, #32
 80043d4:	4770      	bx	lr
	...

080043d8 <__i2b>:
 80043d8:	b510      	push	{r4, lr}
 80043da:	460c      	mov	r4, r1
 80043dc:	2101      	movs	r1, #1
 80043de:	f7ff ff05 	bl	80041ec <_Balloc>
 80043e2:	4602      	mov	r2, r0
 80043e4:	b928      	cbnz	r0, 80043f2 <__i2b+0x1a>
 80043e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80043ea:	4b04      	ldr	r3, [pc, #16]	; (80043fc <__i2b+0x24>)
 80043ec:	4804      	ldr	r0, [pc, #16]	; (8004400 <__i2b+0x28>)
 80043ee:	f000 fb7f 	bl	8004af0 <__assert_func>
 80043f2:	2301      	movs	r3, #1
 80043f4:	6144      	str	r4, [r0, #20]
 80043f6:	6103      	str	r3, [r0, #16]
 80043f8:	bd10      	pop	{r4, pc}
 80043fa:	bf00      	nop
 80043fc:	08005723 	.word	0x08005723
 8004400:	08005734 	.word	0x08005734

08004404 <__multiply>:
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	4691      	mov	r9, r2
 800440a:	690a      	ldr	r2, [r1, #16]
 800440c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004410:	460c      	mov	r4, r1
 8004412:	429a      	cmp	r2, r3
 8004414:	bfbe      	ittt	lt
 8004416:	460b      	movlt	r3, r1
 8004418:	464c      	movlt	r4, r9
 800441a:	4699      	movlt	r9, r3
 800441c:	6927      	ldr	r7, [r4, #16]
 800441e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004422:	68a3      	ldr	r3, [r4, #8]
 8004424:	6861      	ldr	r1, [r4, #4]
 8004426:	eb07 060a 	add.w	r6, r7, sl
 800442a:	42b3      	cmp	r3, r6
 800442c:	b085      	sub	sp, #20
 800442e:	bfb8      	it	lt
 8004430:	3101      	addlt	r1, #1
 8004432:	f7ff fedb 	bl	80041ec <_Balloc>
 8004436:	b930      	cbnz	r0, 8004446 <__multiply+0x42>
 8004438:	4602      	mov	r2, r0
 800443a:	f240 115d 	movw	r1, #349	; 0x15d
 800443e:	4b43      	ldr	r3, [pc, #268]	; (800454c <__multiply+0x148>)
 8004440:	4843      	ldr	r0, [pc, #268]	; (8004550 <__multiply+0x14c>)
 8004442:	f000 fb55 	bl	8004af0 <__assert_func>
 8004446:	f100 0514 	add.w	r5, r0, #20
 800444a:	462b      	mov	r3, r5
 800444c:	2200      	movs	r2, #0
 800444e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004452:	4543      	cmp	r3, r8
 8004454:	d321      	bcc.n	800449a <__multiply+0x96>
 8004456:	f104 0314 	add.w	r3, r4, #20
 800445a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800445e:	f109 0314 	add.w	r3, r9, #20
 8004462:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004466:	9202      	str	r2, [sp, #8]
 8004468:	1b3a      	subs	r2, r7, r4
 800446a:	3a15      	subs	r2, #21
 800446c:	f022 0203 	bic.w	r2, r2, #3
 8004470:	3204      	adds	r2, #4
 8004472:	f104 0115 	add.w	r1, r4, #21
 8004476:	428f      	cmp	r7, r1
 8004478:	bf38      	it	cc
 800447a:	2204      	movcc	r2, #4
 800447c:	9201      	str	r2, [sp, #4]
 800447e:	9a02      	ldr	r2, [sp, #8]
 8004480:	9303      	str	r3, [sp, #12]
 8004482:	429a      	cmp	r2, r3
 8004484:	d80c      	bhi.n	80044a0 <__multiply+0x9c>
 8004486:	2e00      	cmp	r6, #0
 8004488:	dd03      	ble.n	8004492 <__multiply+0x8e>
 800448a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800448e:	2b00      	cmp	r3, #0
 8004490:	d059      	beq.n	8004546 <__multiply+0x142>
 8004492:	6106      	str	r6, [r0, #16]
 8004494:	b005      	add	sp, #20
 8004496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449a:	f843 2b04 	str.w	r2, [r3], #4
 800449e:	e7d8      	b.n	8004452 <__multiply+0x4e>
 80044a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80044a4:	f1ba 0f00 	cmp.w	sl, #0
 80044a8:	d023      	beq.n	80044f2 <__multiply+0xee>
 80044aa:	46a9      	mov	r9, r5
 80044ac:	f04f 0c00 	mov.w	ip, #0
 80044b0:	f104 0e14 	add.w	lr, r4, #20
 80044b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80044b8:	f8d9 1000 	ldr.w	r1, [r9]
 80044bc:	fa1f fb82 	uxth.w	fp, r2
 80044c0:	b289      	uxth	r1, r1
 80044c2:	fb0a 110b 	mla	r1, sl, fp, r1
 80044c6:	4461      	add	r1, ip
 80044c8:	f8d9 c000 	ldr.w	ip, [r9]
 80044cc:	0c12      	lsrs	r2, r2, #16
 80044ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80044d2:	fb0a c202 	mla	r2, sl, r2, ip
 80044d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80044da:	b289      	uxth	r1, r1
 80044dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80044e0:	4577      	cmp	r7, lr
 80044e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80044e6:	f849 1b04 	str.w	r1, [r9], #4
 80044ea:	d8e3      	bhi.n	80044b4 <__multiply+0xb0>
 80044ec:	9a01      	ldr	r2, [sp, #4]
 80044ee:	f845 c002 	str.w	ip, [r5, r2]
 80044f2:	9a03      	ldr	r2, [sp, #12]
 80044f4:	3304      	adds	r3, #4
 80044f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80044fa:	f1b9 0f00 	cmp.w	r9, #0
 80044fe:	d020      	beq.n	8004542 <__multiply+0x13e>
 8004500:	46ae      	mov	lr, r5
 8004502:	f04f 0a00 	mov.w	sl, #0
 8004506:	6829      	ldr	r1, [r5, #0]
 8004508:	f104 0c14 	add.w	ip, r4, #20
 800450c:	f8bc b000 	ldrh.w	fp, [ip]
 8004510:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004514:	b289      	uxth	r1, r1
 8004516:	fb09 220b 	mla	r2, r9, fp, r2
 800451a:	4492      	add	sl, r2
 800451c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004520:	f84e 1b04 	str.w	r1, [lr], #4
 8004524:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004528:	f8be 1000 	ldrh.w	r1, [lr]
 800452c:	0c12      	lsrs	r2, r2, #16
 800452e:	fb09 1102 	mla	r1, r9, r2, r1
 8004532:	4567      	cmp	r7, ip
 8004534:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004538:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800453c:	d8e6      	bhi.n	800450c <__multiply+0x108>
 800453e:	9a01      	ldr	r2, [sp, #4]
 8004540:	50a9      	str	r1, [r5, r2]
 8004542:	3504      	adds	r5, #4
 8004544:	e79b      	b.n	800447e <__multiply+0x7a>
 8004546:	3e01      	subs	r6, #1
 8004548:	e79d      	b.n	8004486 <__multiply+0x82>
 800454a:	bf00      	nop
 800454c:	08005723 	.word	0x08005723
 8004550:	08005734 	.word	0x08005734

08004554 <__pow5mult>:
 8004554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004558:	4615      	mov	r5, r2
 800455a:	f012 0203 	ands.w	r2, r2, #3
 800455e:	4606      	mov	r6, r0
 8004560:	460f      	mov	r7, r1
 8004562:	d007      	beq.n	8004574 <__pow5mult+0x20>
 8004564:	4c25      	ldr	r4, [pc, #148]	; (80045fc <__pow5mult+0xa8>)
 8004566:	3a01      	subs	r2, #1
 8004568:	2300      	movs	r3, #0
 800456a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800456e:	f7ff fe9f 	bl	80042b0 <__multadd>
 8004572:	4607      	mov	r7, r0
 8004574:	10ad      	asrs	r5, r5, #2
 8004576:	d03d      	beq.n	80045f4 <__pow5mult+0xa0>
 8004578:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800457a:	b97c      	cbnz	r4, 800459c <__pow5mult+0x48>
 800457c:	2010      	movs	r0, #16
 800457e:	f7ff fe11 	bl	80041a4 <malloc>
 8004582:	4602      	mov	r2, r0
 8004584:	6270      	str	r0, [r6, #36]	; 0x24
 8004586:	b928      	cbnz	r0, 8004594 <__pow5mult+0x40>
 8004588:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800458c:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <__pow5mult+0xac>)
 800458e:	481d      	ldr	r0, [pc, #116]	; (8004604 <__pow5mult+0xb0>)
 8004590:	f000 faae 	bl	8004af0 <__assert_func>
 8004594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004598:	6004      	str	r4, [r0, #0]
 800459a:	60c4      	str	r4, [r0, #12]
 800459c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80045a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80045a4:	b94c      	cbnz	r4, 80045ba <__pow5mult+0x66>
 80045a6:	f240 2171 	movw	r1, #625	; 0x271
 80045aa:	4630      	mov	r0, r6
 80045ac:	f7ff ff14 	bl	80043d8 <__i2b>
 80045b0:	2300      	movs	r3, #0
 80045b2:	4604      	mov	r4, r0
 80045b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80045b8:	6003      	str	r3, [r0, #0]
 80045ba:	f04f 0900 	mov.w	r9, #0
 80045be:	07eb      	lsls	r3, r5, #31
 80045c0:	d50a      	bpl.n	80045d8 <__pow5mult+0x84>
 80045c2:	4639      	mov	r1, r7
 80045c4:	4622      	mov	r2, r4
 80045c6:	4630      	mov	r0, r6
 80045c8:	f7ff ff1c 	bl	8004404 <__multiply>
 80045cc:	4680      	mov	r8, r0
 80045ce:	4639      	mov	r1, r7
 80045d0:	4630      	mov	r0, r6
 80045d2:	f7ff fe4b 	bl	800426c <_Bfree>
 80045d6:	4647      	mov	r7, r8
 80045d8:	106d      	asrs	r5, r5, #1
 80045da:	d00b      	beq.n	80045f4 <__pow5mult+0xa0>
 80045dc:	6820      	ldr	r0, [r4, #0]
 80045de:	b938      	cbnz	r0, 80045f0 <__pow5mult+0x9c>
 80045e0:	4622      	mov	r2, r4
 80045e2:	4621      	mov	r1, r4
 80045e4:	4630      	mov	r0, r6
 80045e6:	f7ff ff0d 	bl	8004404 <__multiply>
 80045ea:	6020      	str	r0, [r4, #0]
 80045ec:	f8c0 9000 	str.w	r9, [r0]
 80045f0:	4604      	mov	r4, r0
 80045f2:	e7e4      	b.n	80045be <__pow5mult+0x6a>
 80045f4:	4638      	mov	r0, r7
 80045f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045fa:	bf00      	nop
 80045fc:	08005880 	.word	0x08005880
 8004600:	080056b1 	.word	0x080056b1
 8004604:	08005734 	.word	0x08005734

08004608 <__lshift>:
 8004608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	460c      	mov	r4, r1
 800460e:	4607      	mov	r7, r0
 8004610:	4691      	mov	r9, r2
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	6849      	ldr	r1, [r1, #4]
 8004616:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800461a:	68a3      	ldr	r3, [r4, #8]
 800461c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004620:	f108 0601 	add.w	r6, r8, #1
 8004624:	42b3      	cmp	r3, r6
 8004626:	db0b      	blt.n	8004640 <__lshift+0x38>
 8004628:	4638      	mov	r0, r7
 800462a:	f7ff fddf 	bl	80041ec <_Balloc>
 800462e:	4605      	mov	r5, r0
 8004630:	b948      	cbnz	r0, 8004646 <__lshift+0x3e>
 8004632:	4602      	mov	r2, r0
 8004634:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004638:	4b29      	ldr	r3, [pc, #164]	; (80046e0 <__lshift+0xd8>)
 800463a:	482a      	ldr	r0, [pc, #168]	; (80046e4 <__lshift+0xdc>)
 800463c:	f000 fa58 	bl	8004af0 <__assert_func>
 8004640:	3101      	adds	r1, #1
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	e7ee      	b.n	8004624 <__lshift+0x1c>
 8004646:	2300      	movs	r3, #0
 8004648:	f100 0114 	add.w	r1, r0, #20
 800464c:	f100 0210 	add.w	r2, r0, #16
 8004650:	4618      	mov	r0, r3
 8004652:	4553      	cmp	r3, sl
 8004654:	db37      	blt.n	80046c6 <__lshift+0xbe>
 8004656:	6920      	ldr	r0, [r4, #16]
 8004658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800465c:	f104 0314 	add.w	r3, r4, #20
 8004660:	f019 091f 	ands.w	r9, r9, #31
 8004664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004668:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800466c:	d02f      	beq.n	80046ce <__lshift+0xc6>
 800466e:	468a      	mov	sl, r1
 8004670:	f04f 0c00 	mov.w	ip, #0
 8004674:	f1c9 0e20 	rsb	lr, r9, #32
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	fa02 f209 	lsl.w	r2, r2, r9
 800467e:	ea42 020c 	orr.w	r2, r2, ip
 8004682:	f84a 2b04 	str.w	r2, [sl], #4
 8004686:	f853 2b04 	ldr.w	r2, [r3], #4
 800468a:	4298      	cmp	r0, r3
 800468c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004690:	d8f2      	bhi.n	8004678 <__lshift+0x70>
 8004692:	1b03      	subs	r3, r0, r4
 8004694:	3b15      	subs	r3, #21
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	3304      	adds	r3, #4
 800469c:	f104 0215 	add.w	r2, r4, #21
 80046a0:	4290      	cmp	r0, r2
 80046a2:	bf38      	it	cc
 80046a4:	2304      	movcc	r3, #4
 80046a6:	f841 c003 	str.w	ip, [r1, r3]
 80046aa:	f1bc 0f00 	cmp.w	ip, #0
 80046ae:	d001      	beq.n	80046b4 <__lshift+0xac>
 80046b0:	f108 0602 	add.w	r6, r8, #2
 80046b4:	3e01      	subs	r6, #1
 80046b6:	4638      	mov	r0, r7
 80046b8:	4621      	mov	r1, r4
 80046ba:	612e      	str	r6, [r5, #16]
 80046bc:	f7ff fdd6 	bl	800426c <_Bfree>
 80046c0:	4628      	mov	r0, r5
 80046c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80046ca:	3301      	adds	r3, #1
 80046cc:	e7c1      	b.n	8004652 <__lshift+0x4a>
 80046ce:	3904      	subs	r1, #4
 80046d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046d4:	4298      	cmp	r0, r3
 80046d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80046da:	d8f9      	bhi.n	80046d0 <__lshift+0xc8>
 80046dc:	e7ea      	b.n	80046b4 <__lshift+0xac>
 80046de:	bf00      	nop
 80046e0:	08005723 	.word	0x08005723
 80046e4:	08005734 	.word	0x08005734

080046e8 <__mcmp>:
 80046e8:	4603      	mov	r3, r0
 80046ea:	690a      	ldr	r2, [r1, #16]
 80046ec:	6900      	ldr	r0, [r0, #16]
 80046ee:	b530      	push	{r4, r5, lr}
 80046f0:	1a80      	subs	r0, r0, r2
 80046f2:	d10d      	bne.n	8004710 <__mcmp+0x28>
 80046f4:	3314      	adds	r3, #20
 80046f6:	3114      	adds	r1, #20
 80046f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80046fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004700:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004704:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004708:	4295      	cmp	r5, r2
 800470a:	d002      	beq.n	8004712 <__mcmp+0x2a>
 800470c:	d304      	bcc.n	8004718 <__mcmp+0x30>
 800470e:	2001      	movs	r0, #1
 8004710:	bd30      	pop	{r4, r5, pc}
 8004712:	42a3      	cmp	r3, r4
 8004714:	d3f4      	bcc.n	8004700 <__mcmp+0x18>
 8004716:	e7fb      	b.n	8004710 <__mcmp+0x28>
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	e7f8      	b.n	8004710 <__mcmp+0x28>
	...

08004720 <__mdiff>:
 8004720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004724:	460d      	mov	r5, r1
 8004726:	4607      	mov	r7, r0
 8004728:	4611      	mov	r1, r2
 800472a:	4628      	mov	r0, r5
 800472c:	4614      	mov	r4, r2
 800472e:	f7ff ffdb 	bl	80046e8 <__mcmp>
 8004732:	1e06      	subs	r6, r0, #0
 8004734:	d111      	bne.n	800475a <__mdiff+0x3a>
 8004736:	4631      	mov	r1, r6
 8004738:	4638      	mov	r0, r7
 800473a:	f7ff fd57 	bl	80041ec <_Balloc>
 800473e:	4602      	mov	r2, r0
 8004740:	b928      	cbnz	r0, 800474e <__mdiff+0x2e>
 8004742:	f240 2132 	movw	r1, #562	; 0x232
 8004746:	4b3a      	ldr	r3, [pc, #232]	; (8004830 <__mdiff+0x110>)
 8004748:	483a      	ldr	r0, [pc, #232]	; (8004834 <__mdiff+0x114>)
 800474a:	f000 f9d1 	bl	8004af0 <__assert_func>
 800474e:	2301      	movs	r3, #1
 8004750:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004754:	4610      	mov	r0, r2
 8004756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800475a:	bfa4      	itt	ge
 800475c:	4623      	movge	r3, r4
 800475e:	462c      	movge	r4, r5
 8004760:	4638      	mov	r0, r7
 8004762:	6861      	ldr	r1, [r4, #4]
 8004764:	bfa6      	itte	ge
 8004766:	461d      	movge	r5, r3
 8004768:	2600      	movge	r6, #0
 800476a:	2601      	movlt	r6, #1
 800476c:	f7ff fd3e 	bl	80041ec <_Balloc>
 8004770:	4602      	mov	r2, r0
 8004772:	b918      	cbnz	r0, 800477c <__mdiff+0x5c>
 8004774:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004778:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <__mdiff+0x110>)
 800477a:	e7e5      	b.n	8004748 <__mdiff+0x28>
 800477c:	f102 0814 	add.w	r8, r2, #20
 8004780:	46c2      	mov	sl, r8
 8004782:	f04f 0c00 	mov.w	ip, #0
 8004786:	6927      	ldr	r7, [r4, #16]
 8004788:	60c6      	str	r6, [r0, #12]
 800478a:	692e      	ldr	r6, [r5, #16]
 800478c:	f104 0014 	add.w	r0, r4, #20
 8004790:	f105 0914 	add.w	r9, r5, #20
 8004794:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004798:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800479c:	3410      	adds	r4, #16
 800479e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80047a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80047a6:	fa1f f18b 	uxth.w	r1, fp
 80047aa:	448c      	add	ip, r1
 80047ac:	b299      	uxth	r1, r3
 80047ae:	0c1b      	lsrs	r3, r3, #16
 80047b0:	ebac 0101 	sub.w	r1, ip, r1
 80047b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80047b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80047bc:	b289      	uxth	r1, r1
 80047be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80047c2:	454e      	cmp	r6, r9
 80047c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80047c8:	f84a 3b04 	str.w	r3, [sl], #4
 80047cc:	d8e7      	bhi.n	800479e <__mdiff+0x7e>
 80047ce:	1b73      	subs	r3, r6, r5
 80047d0:	3b15      	subs	r3, #21
 80047d2:	f023 0303 	bic.w	r3, r3, #3
 80047d6:	3515      	adds	r5, #21
 80047d8:	3304      	adds	r3, #4
 80047da:	42ae      	cmp	r6, r5
 80047dc:	bf38      	it	cc
 80047de:	2304      	movcc	r3, #4
 80047e0:	4418      	add	r0, r3
 80047e2:	4443      	add	r3, r8
 80047e4:	461e      	mov	r6, r3
 80047e6:	4605      	mov	r5, r0
 80047e8:	4575      	cmp	r5, lr
 80047ea:	d30e      	bcc.n	800480a <__mdiff+0xea>
 80047ec:	f10e 0103 	add.w	r1, lr, #3
 80047f0:	1a09      	subs	r1, r1, r0
 80047f2:	f021 0103 	bic.w	r1, r1, #3
 80047f6:	3803      	subs	r0, #3
 80047f8:	4586      	cmp	lr, r0
 80047fa:	bf38      	it	cc
 80047fc:	2100      	movcc	r1, #0
 80047fe:	4419      	add	r1, r3
 8004800:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004804:	b18b      	cbz	r3, 800482a <__mdiff+0x10a>
 8004806:	6117      	str	r7, [r2, #16]
 8004808:	e7a4      	b.n	8004754 <__mdiff+0x34>
 800480a:	f855 8b04 	ldr.w	r8, [r5], #4
 800480e:	fa1f f188 	uxth.w	r1, r8
 8004812:	4461      	add	r1, ip
 8004814:	140c      	asrs	r4, r1, #16
 8004816:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800481a:	b289      	uxth	r1, r1
 800481c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004820:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004824:	f846 1b04 	str.w	r1, [r6], #4
 8004828:	e7de      	b.n	80047e8 <__mdiff+0xc8>
 800482a:	3f01      	subs	r7, #1
 800482c:	e7e8      	b.n	8004800 <__mdiff+0xe0>
 800482e:	bf00      	nop
 8004830:	08005723 	.word	0x08005723
 8004834:	08005734 	.word	0x08005734

08004838 <__d2b>:
 8004838:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800483c:	2101      	movs	r1, #1
 800483e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004842:	4690      	mov	r8, r2
 8004844:	461d      	mov	r5, r3
 8004846:	f7ff fcd1 	bl	80041ec <_Balloc>
 800484a:	4604      	mov	r4, r0
 800484c:	b930      	cbnz	r0, 800485c <__d2b+0x24>
 800484e:	4602      	mov	r2, r0
 8004850:	f240 310a 	movw	r1, #778	; 0x30a
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <__d2b+0xb0>)
 8004856:	4825      	ldr	r0, [pc, #148]	; (80048ec <__d2b+0xb4>)
 8004858:	f000 f94a 	bl	8004af0 <__assert_func>
 800485c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004860:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004864:	bb2d      	cbnz	r5, 80048b2 <__d2b+0x7a>
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	f1b8 0300 	subs.w	r3, r8, #0
 800486c:	d026      	beq.n	80048bc <__d2b+0x84>
 800486e:	4668      	mov	r0, sp
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	f7ff fd83 	bl	800437c <__lo0bits>
 8004876:	9900      	ldr	r1, [sp, #0]
 8004878:	b1f0      	cbz	r0, 80048b8 <__d2b+0x80>
 800487a:	9a01      	ldr	r2, [sp, #4]
 800487c:	f1c0 0320 	rsb	r3, r0, #32
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	430b      	orrs	r3, r1
 8004886:	40c2      	lsrs	r2, r0
 8004888:	6163      	str	r3, [r4, #20]
 800488a:	9201      	str	r2, [sp, #4]
 800488c:	9b01      	ldr	r3, [sp, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf14      	ite	ne
 8004892:	2102      	movne	r1, #2
 8004894:	2101      	moveq	r1, #1
 8004896:	61a3      	str	r3, [r4, #24]
 8004898:	6121      	str	r1, [r4, #16]
 800489a:	b1c5      	cbz	r5, 80048ce <__d2b+0x96>
 800489c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80048a0:	4405      	add	r5, r0
 80048a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80048a6:	603d      	str	r5, [r7, #0]
 80048a8:	6030      	str	r0, [r6, #0]
 80048aa:	4620      	mov	r0, r4
 80048ac:	b002      	add	sp, #8
 80048ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048b6:	e7d6      	b.n	8004866 <__d2b+0x2e>
 80048b8:	6161      	str	r1, [r4, #20]
 80048ba:	e7e7      	b.n	800488c <__d2b+0x54>
 80048bc:	a801      	add	r0, sp, #4
 80048be:	f7ff fd5d 	bl	800437c <__lo0bits>
 80048c2:	2101      	movs	r1, #1
 80048c4:	9b01      	ldr	r3, [sp, #4]
 80048c6:	6121      	str	r1, [r4, #16]
 80048c8:	6163      	str	r3, [r4, #20]
 80048ca:	3020      	adds	r0, #32
 80048cc:	e7e5      	b.n	800489a <__d2b+0x62>
 80048ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80048d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80048d6:	6038      	str	r0, [r7, #0]
 80048d8:	6918      	ldr	r0, [r3, #16]
 80048da:	f7ff fd2f 	bl	800433c <__hi0bits>
 80048de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80048e2:	6031      	str	r1, [r6, #0]
 80048e4:	e7e1      	b.n	80048aa <__d2b+0x72>
 80048e6:	bf00      	nop
 80048e8:	08005723 	.word	0x08005723
 80048ec:	08005734 	.word	0x08005734

080048f0 <_calloc_r>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	fba1 5402 	umull	r5, r4, r1, r2
 80048f6:	b934      	cbnz	r4, 8004906 <_calloc_r+0x16>
 80048f8:	4629      	mov	r1, r5
 80048fa:	f000 f875 	bl	80049e8 <_malloc_r>
 80048fe:	4606      	mov	r6, r0
 8004900:	b928      	cbnz	r0, 800490e <_calloc_r+0x1e>
 8004902:	4630      	mov	r0, r6
 8004904:	bd70      	pop	{r4, r5, r6, pc}
 8004906:	220c      	movs	r2, #12
 8004908:	2600      	movs	r6, #0
 800490a:	6002      	str	r2, [r0, #0]
 800490c:	e7f9      	b.n	8004902 <_calloc_r+0x12>
 800490e:	462a      	mov	r2, r5
 8004910:	4621      	mov	r1, r4
 8004912:	f7fe f961 	bl	8002bd8 <memset>
 8004916:	e7f4      	b.n	8004902 <_calloc_r+0x12>

08004918 <_free_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4605      	mov	r5, r0
 800491c:	2900      	cmp	r1, #0
 800491e:	d040      	beq.n	80049a2 <_free_r+0x8a>
 8004920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004924:	1f0c      	subs	r4, r1, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	bfb8      	it	lt
 800492a:	18e4      	addlt	r4, r4, r3
 800492c:	f000 f922 	bl	8004b74 <__malloc_lock>
 8004930:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <_free_r+0x8c>)
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	b933      	cbnz	r3, 8004944 <_free_r+0x2c>
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	6014      	str	r4, [r2, #0]
 800493a:	4628      	mov	r0, r5
 800493c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004940:	f000 b91e 	b.w	8004b80 <__malloc_unlock>
 8004944:	42a3      	cmp	r3, r4
 8004946:	d908      	bls.n	800495a <_free_r+0x42>
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	1821      	adds	r1, r4, r0
 800494c:	428b      	cmp	r3, r1
 800494e:	bf01      	itttt	eq
 8004950:	6819      	ldreq	r1, [r3, #0]
 8004952:	685b      	ldreq	r3, [r3, #4]
 8004954:	1809      	addeq	r1, r1, r0
 8004956:	6021      	streq	r1, [r4, #0]
 8004958:	e7ed      	b.n	8004936 <_free_r+0x1e>
 800495a:	461a      	mov	r2, r3
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b10b      	cbz	r3, 8004964 <_free_r+0x4c>
 8004960:	42a3      	cmp	r3, r4
 8004962:	d9fa      	bls.n	800495a <_free_r+0x42>
 8004964:	6811      	ldr	r1, [r2, #0]
 8004966:	1850      	adds	r0, r2, r1
 8004968:	42a0      	cmp	r0, r4
 800496a:	d10b      	bne.n	8004984 <_free_r+0x6c>
 800496c:	6820      	ldr	r0, [r4, #0]
 800496e:	4401      	add	r1, r0
 8004970:	1850      	adds	r0, r2, r1
 8004972:	4283      	cmp	r3, r0
 8004974:	6011      	str	r1, [r2, #0]
 8004976:	d1e0      	bne.n	800493a <_free_r+0x22>
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4401      	add	r1, r0
 800497e:	6011      	str	r1, [r2, #0]
 8004980:	6053      	str	r3, [r2, #4]
 8004982:	e7da      	b.n	800493a <_free_r+0x22>
 8004984:	d902      	bls.n	800498c <_free_r+0x74>
 8004986:	230c      	movs	r3, #12
 8004988:	602b      	str	r3, [r5, #0]
 800498a:	e7d6      	b.n	800493a <_free_r+0x22>
 800498c:	6820      	ldr	r0, [r4, #0]
 800498e:	1821      	adds	r1, r4, r0
 8004990:	428b      	cmp	r3, r1
 8004992:	bf01      	itttt	eq
 8004994:	6819      	ldreq	r1, [r3, #0]
 8004996:	685b      	ldreq	r3, [r3, #4]
 8004998:	1809      	addeq	r1, r1, r0
 800499a:	6021      	streq	r1, [r4, #0]
 800499c:	6063      	str	r3, [r4, #4]
 800499e:	6054      	str	r4, [r2, #4]
 80049a0:	e7cb      	b.n	800493a <_free_r+0x22>
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	200002c4 	.word	0x200002c4

080049a8 <sbrk_aligned>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	4e0e      	ldr	r6, [pc, #56]	; (80049e4 <sbrk_aligned+0x3c>)
 80049ac:	460c      	mov	r4, r1
 80049ae:	6831      	ldr	r1, [r6, #0]
 80049b0:	4605      	mov	r5, r0
 80049b2:	b911      	cbnz	r1, 80049ba <sbrk_aligned+0x12>
 80049b4:	f000 f88c 	bl	8004ad0 <_sbrk_r>
 80049b8:	6030      	str	r0, [r6, #0]
 80049ba:	4621      	mov	r1, r4
 80049bc:	4628      	mov	r0, r5
 80049be:	f000 f887 	bl	8004ad0 <_sbrk_r>
 80049c2:	1c43      	adds	r3, r0, #1
 80049c4:	d00a      	beq.n	80049dc <sbrk_aligned+0x34>
 80049c6:	1cc4      	adds	r4, r0, #3
 80049c8:	f024 0403 	bic.w	r4, r4, #3
 80049cc:	42a0      	cmp	r0, r4
 80049ce:	d007      	beq.n	80049e0 <sbrk_aligned+0x38>
 80049d0:	1a21      	subs	r1, r4, r0
 80049d2:	4628      	mov	r0, r5
 80049d4:	f000 f87c 	bl	8004ad0 <_sbrk_r>
 80049d8:	3001      	adds	r0, #1
 80049da:	d101      	bne.n	80049e0 <sbrk_aligned+0x38>
 80049dc:	f04f 34ff 	mov.w	r4, #4294967295
 80049e0:	4620      	mov	r0, r4
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	200002c8 	.word	0x200002c8

080049e8 <_malloc_r>:
 80049e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ec:	1ccd      	adds	r5, r1, #3
 80049ee:	f025 0503 	bic.w	r5, r5, #3
 80049f2:	3508      	adds	r5, #8
 80049f4:	2d0c      	cmp	r5, #12
 80049f6:	bf38      	it	cc
 80049f8:	250c      	movcc	r5, #12
 80049fa:	2d00      	cmp	r5, #0
 80049fc:	4607      	mov	r7, r0
 80049fe:	db01      	blt.n	8004a04 <_malloc_r+0x1c>
 8004a00:	42a9      	cmp	r1, r5
 8004a02:	d905      	bls.n	8004a10 <_malloc_r+0x28>
 8004a04:	230c      	movs	r3, #12
 8004a06:	2600      	movs	r6, #0
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a10:	4e2e      	ldr	r6, [pc, #184]	; (8004acc <_malloc_r+0xe4>)
 8004a12:	f000 f8af 	bl	8004b74 <__malloc_lock>
 8004a16:	6833      	ldr	r3, [r6, #0]
 8004a18:	461c      	mov	r4, r3
 8004a1a:	bb34      	cbnz	r4, 8004a6a <_malloc_r+0x82>
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	4638      	mov	r0, r7
 8004a20:	f7ff ffc2 	bl	80049a8 <sbrk_aligned>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	4604      	mov	r4, r0
 8004a28:	d14d      	bne.n	8004ac6 <_malloc_r+0xde>
 8004a2a:	6834      	ldr	r4, [r6, #0]
 8004a2c:	4626      	mov	r6, r4
 8004a2e:	2e00      	cmp	r6, #0
 8004a30:	d140      	bne.n	8004ab4 <_malloc_r+0xcc>
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	4631      	mov	r1, r6
 8004a36:	4638      	mov	r0, r7
 8004a38:	eb04 0803 	add.w	r8, r4, r3
 8004a3c:	f000 f848 	bl	8004ad0 <_sbrk_r>
 8004a40:	4580      	cmp	r8, r0
 8004a42:	d13a      	bne.n	8004aba <_malloc_r+0xd2>
 8004a44:	6821      	ldr	r1, [r4, #0]
 8004a46:	3503      	adds	r5, #3
 8004a48:	1a6d      	subs	r5, r5, r1
 8004a4a:	f025 0503 	bic.w	r5, r5, #3
 8004a4e:	3508      	adds	r5, #8
 8004a50:	2d0c      	cmp	r5, #12
 8004a52:	bf38      	it	cc
 8004a54:	250c      	movcc	r5, #12
 8004a56:	4638      	mov	r0, r7
 8004a58:	4629      	mov	r1, r5
 8004a5a:	f7ff ffa5 	bl	80049a8 <sbrk_aligned>
 8004a5e:	3001      	adds	r0, #1
 8004a60:	d02b      	beq.n	8004aba <_malloc_r+0xd2>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	442b      	add	r3, r5
 8004a66:	6023      	str	r3, [r4, #0]
 8004a68:	e00e      	b.n	8004a88 <_malloc_r+0xa0>
 8004a6a:	6822      	ldr	r2, [r4, #0]
 8004a6c:	1b52      	subs	r2, r2, r5
 8004a6e:	d41e      	bmi.n	8004aae <_malloc_r+0xc6>
 8004a70:	2a0b      	cmp	r2, #11
 8004a72:	d916      	bls.n	8004aa2 <_malloc_r+0xba>
 8004a74:	1961      	adds	r1, r4, r5
 8004a76:	42a3      	cmp	r3, r4
 8004a78:	6025      	str	r5, [r4, #0]
 8004a7a:	bf18      	it	ne
 8004a7c:	6059      	strne	r1, [r3, #4]
 8004a7e:	6863      	ldr	r3, [r4, #4]
 8004a80:	bf08      	it	eq
 8004a82:	6031      	streq	r1, [r6, #0]
 8004a84:	5162      	str	r2, [r4, r5]
 8004a86:	604b      	str	r3, [r1, #4]
 8004a88:	4638      	mov	r0, r7
 8004a8a:	f104 060b 	add.w	r6, r4, #11
 8004a8e:	f000 f877 	bl	8004b80 <__malloc_unlock>
 8004a92:	f026 0607 	bic.w	r6, r6, #7
 8004a96:	1d23      	adds	r3, r4, #4
 8004a98:	1af2      	subs	r2, r6, r3
 8004a9a:	d0b6      	beq.n	8004a0a <_malloc_r+0x22>
 8004a9c:	1b9b      	subs	r3, r3, r6
 8004a9e:	50a3      	str	r3, [r4, r2]
 8004aa0:	e7b3      	b.n	8004a0a <_malloc_r+0x22>
 8004aa2:	6862      	ldr	r2, [r4, #4]
 8004aa4:	42a3      	cmp	r3, r4
 8004aa6:	bf0c      	ite	eq
 8004aa8:	6032      	streq	r2, [r6, #0]
 8004aaa:	605a      	strne	r2, [r3, #4]
 8004aac:	e7ec      	b.n	8004a88 <_malloc_r+0xa0>
 8004aae:	4623      	mov	r3, r4
 8004ab0:	6864      	ldr	r4, [r4, #4]
 8004ab2:	e7b2      	b.n	8004a1a <_malloc_r+0x32>
 8004ab4:	4634      	mov	r4, r6
 8004ab6:	6876      	ldr	r6, [r6, #4]
 8004ab8:	e7b9      	b.n	8004a2e <_malloc_r+0x46>
 8004aba:	230c      	movs	r3, #12
 8004abc:	4638      	mov	r0, r7
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	f000 f85e 	bl	8004b80 <__malloc_unlock>
 8004ac4:	e7a1      	b.n	8004a0a <_malloc_r+0x22>
 8004ac6:	6025      	str	r5, [r4, #0]
 8004ac8:	e7de      	b.n	8004a88 <_malloc_r+0xa0>
 8004aca:	bf00      	nop
 8004acc:	200002c4 	.word	0x200002c4

08004ad0 <_sbrk_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	4d05      	ldr	r5, [pc, #20]	; (8004aec <_sbrk_r+0x1c>)
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	4608      	mov	r0, r1
 8004ada:	602b      	str	r3, [r5, #0]
 8004adc:	f7fc fbac 	bl	8001238 <_sbrk>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_sbrk_r+0x1a>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_sbrk_r+0x1a>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	200002cc 	.word	0x200002cc

08004af0 <__assert_func>:
 8004af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004af2:	4614      	mov	r4, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <__assert_func+0x2c>)
 8004af8:	4605      	mov	r5, r0
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68d8      	ldr	r0, [r3, #12]
 8004afe:	b14c      	cbz	r4, 8004b14 <__assert_func+0x24>
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <__assert_func+0x30>)
 8004b02:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b06:	9100      	str	r1, [sp, #0]
 8004b08:	462b      	mov	r3, r5
 8004b0a:	4906      	ldr	r1, [pc, #24]	; (8004b24 <__assert_func+0x34>)
 8004b0c:	f000 f80e 	bl	8004b2c <fiprintf>
 8004b10:	f000 fa62 	bl	8004fd8 <abort>
 8004b14:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <__assert_func+0x38>)
 8004b16:	461c      	mov	r4, r3
 8004b18:	e7f3      	b.n	8004b02 <__assert_func+0x12>
 8004b1a:	bf00      	nop
 8004b1c:	2000000c 	.word	0x2000000c
 8004b20:	0800588c 	.word	0x0800588c
 8004b24:	08005899 	.word	0x08005899
 8004b28:	080058c7 	.word	0x080058c7

08004b2c <fiprintf>:
 8004b2c:	b40e      	push	{r1, r2, r3}
 8004b2e:	b503      	push	{r0, r1, lr}
 8004b30:	4601      	mov	r1, r0
 8004b32:	ab03      	add	r3, sp, #12
 8004b34:	4805      	ldr	r0, [pc, #20]	; (8004b4c <fiprintf+0x20>)
 8004b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b3a:	6800      	ldr	r0, [r0, #0]
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	f000 f84d 	bl	8004bdc <_vfiprintf_r>
 8004b42:	b002      	add	sp, #8
 8004b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b48:	b003      	add	sp, #12
 8004b4a:	4770      	bx	lr
 8004b4c:	2000000c 	.word	0x2000000c

08004b50 <__ascii_mbtowc>:
 8004b50:	b082      	sub	sp, #8
 8004b52:	b901      	cbnz	r1, 8004b56 <__ascii_mbtowc+0x6>
 8004b54:	a901      	add	r1, sp, #4
 8004b56:	b142      	cbz	r2, 8004b6a <__ascii_mbtowc+0x1a>
 8004b58:	b14b      	cbz	r3, 8004b6e <__ascii_mbtowc+0x1e>
 8004b5a:	7813      	ldrb	r3, [r2, #0]
 8004b5c:	600b      	str	r3, [r1, #0]
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	1e10      	subs	r0, r2, #0
 8004b62:	bf18      	it	ne
 8004b64:	2001      	movne	r0, #1
 8004b66:	b002      	add	sp, #8
 8004b68:	4770      	bx	lr
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	e7fb      	b.n	8004b66 <__ascii_mbtowc+0x16>
 8004b6e:	f06f 0001 	mvn.w	r0, #1
 8004b72:	e7f8      	b.n	8004b66 <__ascii_mbtowc+0x16>

08004b74 <__malloc_lock>:
 8004b74:	4801      	ldr	r0, [pc, #4]	; (8004b7c <__malloc_lock+0x8>)
 8004b76:	f000 bbeb 	b.w	8005350 <__retarget_lock_acquire_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	200002d0 	.word	0x200002d0

08004b80 <__malloc_unlock>:
 8004b80:	4801      	ldr	r0, [pc, #4]	; (8004b88 <__malloc_unlock+0x8>)
 8004b82:	f000 bbe6 	b.w	8005352 <__retarget_lock_release_recursive>
 8004b86:	bf00      	nop
 8004b88:	200002d0 	.word	0x200002d0

08004b8c <__sfputc_r>:
 8004b8c:	6893      	ldr	r3, [r2, #8]
 8004b8e:	b410      	push	{r4}
 8004b90:	3b01      	subs	r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	6093      	str	r3, [r2, #8]
 8004b96:	da07      	bge.n	8004ba8 <__sfputc_r+0x1c>
 8004b98:	6994      	ldr	r4, [r2, #24]
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	db01      	blt.n	8004ba2 <__sfputc_r+0x16>
 8004b9e:	290a      	cmp	r1, #10
 8004ba0:	d102      	bne.n	8004ba8 <__sfputc_r+0x1c>
 8004ba2:	bc10      	pop	{r4}
 8004ba4:	f000 b94a 	b.w	8004e3c <__swbuf_r>
 8004ba8:	6813      	ldr	r3, [r2, #0]
 8004baa:	1c58      	adds	r0, r3, #1
 8004bac:	6010      	str	r0, [r2, #0]
 8004bae:	7019      	strb	r1, [r3, #0]
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	bc10      	pop	{r4}
 8004bb4:	4770      	bx	lr

08004bb6 <__sfputs_r>:
 8004bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb8:	4606      	mov	r6, r0
 8004bba:	460f      	mov	r7, r1
 8004bbc:	4614      	mov	r4, r2
 8004bbe:	18d5      	adds	r5, r2, r3
 8004bc0:	42ac      	cmp	r4, r5
 8004bc2:	d101      	bne.n	8004bc8 <__sfputs_r+0x12>
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	e007      	b.n	8004bd8 <__sfputs_r+0x22>
 8004bc8:	463a      	mov	r2, r7
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd0:	f7ff ffdc 	bl	8004b8c <__sfputc_r>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d1f3      	bne.n	8004bc0 <__sfputs_r+0xa>
 8004bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bdc <_vfiprintf_r>:
 8004bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be0:	460d      	mov	r5, r1
 8004be2:	4614      	mov	r4, r2
 8004be4:	4698      	mov	r8, r3
 8004be6:	4606      	mov	r6, r0
 8004be8:	b09d      	sub	sp, #116	; 0x74
 8004bea:	b118      	cbz	r0, 8004bf4 <_vfiprintf_r+0x18>
 8004bec:	6983      	ldr	r3, [r0, #24]
 8004bee:	b90b      	cbnz	r3, 8004bf4 <_vfiprintf_r+0x18>
 8004bf0:	f000 fb10 	bl	8005214 <__sinit>
 8004bf4:	4b89      	ldr	r3, [pc, #548]	; (8004e1c <_vfiprintf_r+0x240>)
 8004bf6:	429d      	cmp	r5, r3
 8004bf8:	d11b      	bne.n	8004c32 <_vfiprintf_r+0x56>
 8004bfa:	6875      	ldr	r5, [r6, #4]
 8004bfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bfe:	07d9      	lsls	r1, r3, #31
 8004c00:	d405      	bmi.n	8004c0e <_vfiprintf_r+0x32>
 8004c02:	89ab      	ldrh	r3, [r5, #12]
 8004c04:	059a      	lsls	r2, r3, #22
 8004c06:	d402      	bmi.n	8004c0e <_vfiprintf_r+0x32>
 8004c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c0a:	f000 fba1 	bl	8005350 <__retarget_lock_acquire_recursive>
 8004c0e:	89ab      	ldrh	r3, [r5, #12]
 8004c10:	071b      	lsls	r3, r3, #28
 8004c12:	d501      	bpl.n	8004c18 <_vfiprintf_r+0x3c>
 8004c14:	692b      	ldr	r3, [r5, #16]
 8004c16:	b9eb      	cbnz	r3, 8004c54 <_vfiprintf_r+0x78>
 8004c18:	4629      	mov	r1, r5
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f000 f96e 	bl	8004efc <__swsetup_r>
 8004c20:	b1c0      	cbz	r0, 8004c54 <_vfiprintf_r+0x78>
 8004c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c24:	07dc      	lsls	r4, r3, #31
 8004c26:	d50e      	bpl.n	8004c46 <_vfiprintf_r+0x6a>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	b01d      	add	sp, #116	; 0x74
 8004c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c32:	4b7b      	ldr	r3, [pc, #492]	; (8004e20 <_vfiprintf_r+0x244>)
 8004c34:	429d      	cmp	r5, r3
 8004c36:	d101      	bne.n	8004c3c <_vfiprintf_r+0x60>
 8004c38:	68b5      	ldr	r5, [r6, #8]
 8004c3a:	e7df      	b.n	8004bfc <_vfiprintf_r+0x20>
 8004c3c:	4b79      	ldr	r3, [pc, #484]	; (8004e24 <_vfiprintf_r+0x248>)
 8004c3e:	429d      	cmp	r5, r3
 8004c40:	bf08      	it	eq
 8004c42:	68f5      	ldreq	r5, [r6, #12]
 8004c44:	e7da      	b.n	8004bfc <_vfiprintf_r+0x20>
 8004c46:	89ab      	ldrh	r3, [r5, #12]
 8004c48:	0598      	lsls	r0, r3, #22
 8004c4a:	d4ed      	bmi.n	8004c28 <_vfiprintf_r+0x4c>
 8004c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c4e:	f000 fb80 	bl	8005352 <__retarget_lock_release_recursive>
 8004c52:	e7e9      	b.n	8004c28 <_vfiprintf_r+0x4c>
 8004c54:	2300      	movs	r3, #0
 8004c56:	9309      	str	r3, [sp, #36]	; 0x24
 8004c58:	2320      	movs	r3, #32
 8004c5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c5e:	2330      	movs	r3, #48	; 0x30
 8004c60:	f04f 0901 	mov.w	r9, #1
 8004c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c68:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004e28 <_vfiprintf_r+0x24c>
 8004c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c70:	4623      	mov	r3, r4
 8004c72:	469a      	mov	sl, r3
 8004c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c78:	b10a      	cbz	r2, 8004c7e <_vfiprintf_r+0xa2>
 8004c7a:	2a25      	cmp	r2, #37	; 0x25
 8004c7c:	d1f9      	bne.n	8004c72 <_vfiprintf_r+0x96>
 8004c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8004c82:	d00b      	beq.n	8004c9c <_vfiprintf_r+0xc0>
 8004c84:	465b      	mov	r3, fp
 8004c86:	4622      	mov	r2, r4
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7ff ff93 	bl	8004bb6 <__sfputs_r>
 8004c90:	3001      	adds	r0, #1
 8004c92:	f000 80aa 	beq.w	8004dea <_vfiprintf_r+0x20e>
 8004c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c98:	445a      	add	r2, fp
 8004c9a:	9209      	str	r2, [sp, #36]	; 0x24
 8004c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80a2 	beq.w	8004dea <_vfiprintf_r+0x20e>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cb0:	f10a 0a01 	add.w	sl, sl, #1
 8004cb4:	9304      	str	r3, [sp, #16]
 8004cb6:	9307      	str	r3, [sp, #28]
 8004cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8004cbe:	4654      	mov	r4, sl
 8004cc0:	2205      	movs	r2, #5
 8004cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc6:	4858      	ldr	r0, [pc, #352]	; (8004e28 <_vfiprintf_r+0x24c>)
 8004cc8:	f7ff fa74 	bl	80041b4 <memchr>
 8004ccc:	9a04      	ldr	r2, [sp, #16]
 8004cce:	b9d8      	cbnz	r0, 8004d08 <_vfiprintf_r+0x12c>
 8004cd0:	06d1      	lsls	r1, r2, #27
 8004cd2:	bf44      	itt	mi
 8004cd4:	2320      	movmi	r3, #32
 8004cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cda:	0713      	lsls	r3, r2, #28
 8004cdc:	bf44      	itt	mi
 8004cde:	232b      	movmi	r3, #43	; 0x2b
 8004ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cea:	d015      	beq.n	8004d18 <_vfiprintf_r+0x13c>
 8004cec:	4654      	mov	r4, sl
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f04f 0c0a 	mov.w	ip, #10
 8004cf4:	9a07      	ldr	r2, [sp, #28]
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cfc:	3b30      	subs	r3, #48	; 0x30
 8004cfe:	2b09      	cmp	r3, #9
 8004d00:	d94e      	bls.n	8004da0 <_vfiprintf_r+0x1c4>
 8004d02:	b1b0      	cbz	r0, 8004d32 <_vfiprintf_r+0x156>
 8004d04:	9207      	str	r2, [sp, #28]
 8004d06:	e014      	b.n	8004d32 <_vfiprintf_r+0x156>
 8004d08:	eba0 0308 	sub.w	r3, r0, r8
 8004d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004d10:	4313      	orrs	r3, r2
 8004d12:	46a2      	mov	sl, r4
 8004d14:	9304      	str	r3, [sp, #16]
 8004d16:	e7d2      	b.n	8004cbe <_vfiprintf_r+0xe2>
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	1d19      	adds	r1, r3, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	9103      	str	r1, [sp, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bfbb      	ittet	lt
 8004d24:	425b      	neglt	r3, r3
 8004d26:	f042 0202 	orrlt.w	r2, r2, #2
 8004d2a:	9307      	strge	r3, [sp, #28]
 8004d2c:	9307      	strlt	r3, [sp, #28]
 8004d2e:	bfb8      	it	lt
 8004d30:	9204      	strlt	r2, [sp, #16]
 8004d32:	7823      	ldrb	r3, [r4, #0]
 8004d34:	2b2e      	cmp	r3, #46	; 0x2e
 8004d36:	d10c      	bne.n	8004d52 <_vfiprintf_r+0x176>
 8004d38:	7863      	ldrb	r3, [r4, #1]
 8004d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d3c:	d135      	bne.n	8004daa <_vfiprintf_r+0x1ce>
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	3402      	adds	r4, #2
 8004d42:	1d1a      	adds	r2, r3, #4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	9203      	str	r2, [sp, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bfb8      	it	lt
 8004d4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d50:	9305      	str	r3, [sp, #20]
 8004d52:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004e2c <_vfiprintf_r+0x250>
 8004d56:	2203      	movs	r2, #3
 8004d58:	4650      	mov	r0, sl
 8004d5a:	7821      	ldrb	r1, [r4, #0]
 8004d5c:	f7ff fa2a 	bl	80041b4 <memchr>
 8004d60:	b140      	cbz	r0, 8004d74 <_vfiprintf_r+0x198>
 8004d62:	2340      	movs	r3, #64	; 0x40
 8004d64:	eba0 000a 	sub.w	r0, r0, sl
 8004d68:	fa03 f000 	lsl.w	r0, r3, r0
 8004d6c:	9b04      	ldr	r3, [sp, #16]
 8004d6e:	3401      	adds	r4, #1
 8004d70:	4303      	orrs	r3, r0
 8004d72:	9304      	str	r3, [sp, #16]
 8004d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d78:	2206      	movs	r2, #6
 8004d7a:	482d      	ldr	r0, [pc, #180]	; (8004e30 <_vfiprintf_r+0x254>)
 8004d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d80:	f7ff fa18 	bl	80041b4 <memchr>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d03f      	beq.n	8004e08 <_vfiprintf_r+0x22c>
 8004d88:	4b2a      	ldr	r3, [pc, #168]	; (8004e34 <_vfiprintf_r+0x258>)
 8004d8a:	bb1b      	cbnz	r3, 8004dd4 <_vfiprintf_r+0x1f8>
 8004d8c:	9b03      	ldr	r3, [sp, #12]
 8004d8e:	3307      	adds	r3, #7
 8004d90:	f023 0307 	bic.w	r3, r3, #7
 8004d94:	3308      	adds	r3, #8
 8004d96:	9303      	str	r3, [sp, #12]
 8004d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d9a:	443b      	add	r3, r7
 8004d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d9e:	e767      	b.n	8004c70 <_vfiprintf_r+0x94>
 8004da0:	460c      	mov	r4, r1
 8004da2:	2001      	movs	r0, #1
 8004da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004da8:	e7a5      	b.n	8004cf6 <_vfiprintf_r+0x11a>
 8004daa:	2300      	movs	r3, #0
 8004dac:	f04f 0c0a 	mov.w	ip, #10
 8004db0:	4619      	mov	r1, r3
 8004db2:	3401      	adds	r4, #1
 8004db4:	9305      	str	r3, [sp, #20]
 8004db6:	4620      	mov	r0, r4
 8004db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dbc:	3a30      	subs	r2, #48	; 0x30
 8004dbe:	2a09      	cmp	r2, #9
 8004dc0:	d903      	bls.n	8004dca <_vfiprintf_r+0x1ee>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0c5      	beq.n	8004d52 <_vfiprintf_r+0x176>
 8004dc6:	9105      	str	r1, [sp, #20]
 8004dc8:	e7c3      	b.n	8004d52 <_vfiprintf_r+0x176>
 8004dca:	4604      	mov	r4, r0
 8004dcc:	2301      	movs	r3, #1
 8004dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dd2:	e7f0      	b.n	8004db6 <_vfiprintf_r+0x1da>
 8004dd4:	ab03      	add	r3, sp, #12
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	462a      	mov	r2, r5
 8004dda:	4630      	mov	r0, r6
 8004ddc:	4b16      	ldr	r3, [pc, #88]	; (8004e38 <_vfiprintf_r+0x25c>)
 8004dde:	a904      	add	r1, sp, #16
 8004de0:	f7fd ffa0 	bl	8002d24 <_printf_float>
 8004de4:	4607      	mov	r7, r0
 8004de6:	1c78      	adds	r0, r7, #1
 8004de8:	d1d6      	bne.n	8004d98 <_vfiprintf_r+0x1bc>
 8004dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dec:	07d9      	lsls	r1, r3, #31
 8004dee:	d405      	bmi.n	8004dfc <_vfiprintf_r+0x220>
 8004df0:	89ab      	ldrh	r3, [r5, #12]
 8004df2:	059a      	lsls	r2, r3, #22
 8004df4:	d402      	bmi.n	8004dfc <_vfiprintf_r+0x220>
 8004df6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004df8:	f000 faab 	bl	8005352 <__retarget_lock_release_recursive>
 8004dfc:	89ab      	ldrh	r3, [r5, #12]
 8004dfe:	065b      	lsls	r3, r3, #25
 8004e00:	f53f af12 	bmi.w	8004c28 <_vfiprintf_r+0x4c>
 8004e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e06:	e711      	b.n	8004c2c <_vfiprintf_r+0x50>
 8004e08:	ab03      	add	r3, sp, #12
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	462a      	mov	r2, r5
 8004e0e:	4630      	mov	r0, r6
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <_vfiprintf_r+0x25c>)
 8004e12:	a904      	add	r1, sp, #16
 8004e14:	f7fe fa22 	bl	800325c <_printf_i>
 8004e18:	e7e4      	b.n	8004de4 <_vfiprintf_r+0x208>
 8004e1a:	bf00      	nop
 8004e1c:	08005a04 	.word	0x08005a04
 8004e20:	08005a24 	.word	0x08005a24
 8004e24:	080059e4 	.word	0x080059e4
 8004e28:	080058d2 	.word	0x080058d2
 8004e2c:	080058d8 	.word	0x080058d8
 8004e30:	080058dc 	.word	0x080058dc
 8004e34:	08002d25 	.word	0x08002d25
 8004e38:	08004bb7 	.word	0x08004bb7

08004e3c <__swbuf_r>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	460e      	mov	r6, r1
 8004e40:	4614      	mov	r4, r2
 8004e42:	4605      	mov	r5, r0
 8004e44:	b118      	cbz	r0, 8004e4e <__swbuf_r+0x12>
 8004e46:	6983      	ldr	r3, [r0, #24]
 8004e48:	b90b      	cbnz	r3, 8004e4e <__swbuf_r+0x12>
 8004e4a:	f000 f9e3 	bl	8005214 <__sinit>
 8004e4e:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <__swbuf_r+0x98>)
 8004e50:	429c      	cmp	r4, r3
 8004e52:	d12b      	bne.n	8004eac <__swbuf_r+0x70>
 8004e54:	686c      	ldr	r4, [r5, #4]
 8004e56:	69a3      	ldr	r3, [r4, #24]
 8004e58:	60a3      	str	r3, [r4, #8]
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	071a      	lsls	r2, r3, #28
 8004e5e:	d52f      	bpl.n	8004ec0 <__swbuf_r+0x84>
 8004e60:	6923      	ldr	r3, [r4, #16]
 8004e62:	b36b      	cbz	r3, 8004ec0 <__swbuf_r+0x84>
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	6820      	ldr	r0, [r4, #0]
 8004e68:	b2f6      	uxtb	r6, r6
 8004e6a:	1ac0      	subs	r0, r0, r3
 8004e6c:	6963      	ldr	r3, [r4, #20]
 8004e6e:	4637      	mov	r7, r6
 8004e70:	4283      	cmp	r3, r0
 8004e72:	dc04      	bgt.n	8004e7e <__swbuf_r+0x42>
 8004e74:	4621      	mov	r1, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	f000 f938 	bl	80050ec <_fflush_r>
 8004e7c:	bb30      	cbnz	r0, 8004ecc <__swbuf_r+0x90>
 8004e7e:	68a3      	ldr	r3, [r4, #8]
 8004e80:	3001      	adds	r0, #1
 8004e82:	3b01      	subs	r3, #1
 8004e84:	60a3      	str	r3, [r4, #8]
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	6022      	str	r2, [r4, #0]
 8004e8c:	701e      	strb	r6, [r3, #0]
 8004e8e:	6963      	ldr	r3, [r4, #20]
 8004e90:	4283      	cmp	r3, r0
 8004e92:	d004      	beq.n	8004e9e <__swbuf_r+0x62>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	07db      	lsls	r3, r3, #31
 8004e98:	d506      	bpl.n	8004ea8 <__swbuf_r+0x6c>
 8004e9a:	2e0a      	cmp	r6, #10
 8004e9c:	d104      	bne.n	8004ea8 <__swbuf_r+0x6c>
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f000 f923 	bl	80050ec <_fflush_r>
 8004ea6:	b988      	cbnz	r0, 8004ecc <__swbuf_r+0x90>
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <__swbuf_r+0x9c>)
 8004eae:	429c      	cmp	r4, r3
 8004eb0:	d101      	bne.n	8004eb6 <__swbuf_r+0x7a>
 8004eb2:	68ac      	ldr	r4, [r5, #8]
 8004eb4:	e7cf      	b.n	8004e56 <__swbuf_r+0x1a>
 8004eb6:	4b09      	ldr	r3, [pc, #36]	; (8004edc <__swbuf_r+0xa0>)
 8004eb8:	429c      	cmp	r4, r3
 8004eba:	bf08      	it	eq
 8004ebc:	68ec      	ldreq	r4, [r5, #12]
 8004ebe:	e7ca      	b.n	8004e56 <__swbuf_r+0x1a>
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f000 f81a 	bl	8004efc <__swsetup_r>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d0cb      	beq.n	8004e64 <__swbuf_r+0x28>
 8004ecc:	f04f 37ff 	mov.w	r7, #4294967295
 8004ed0:	e7ea      	b.n	8004ea8 <__swbuf_r+0x6c>
 8004ed2:	bf00      	nop
 8004ed4:	08005a04 	.word	0x08005a04
 8004ed8:	08005a24 	.word	0x08005a24
 8004edc:	080059e4 	.word	0x080059e4

08004ee0 <__ascii_wctomb>:
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4608      	mov	r0, r1
 8004ee4:	b141      	cbz	r1, 8004ef8 <__ascii_wctomb+0x18>
 8004ee6:	2aff      	cmp	r2, #255	; 0xff
 8004ee8:	d904      	bls.n	8004ef4 <__ascii_wctomb+0x14>
 8004eea:	228a      	movs	r2, #138	; 0x8a
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	4770      	bx	lr
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	700a      	strb	r2, [r1, #0]
 8004ef8:	4770      	bx	lr
	...

08004efc <__swsetup_r>:
 8004efc:	4b32      	ldr	r3, [pc, #200]	; (8004fc8 <__swsetup_r+0xcc>)
 8004efe:	b570      	push	{r4, r5, r6, lr}
 8004f00:	681d      	ldr	r5, [r3, #0]
 8004f02:	4606      	mov	r6, r0
 8004f04:	460c      	mov	r4, r1
 8004f06:	b125      	cbz	r5, 8004f12 <__swsetup_r+0x16>
 8004f08:	69ab      	ldr	r3, [r5, #24]
 8004f0a:	b913      	cbnz	r3, 8004f12 <__swsetup_r+0x16>
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 f981 	bl	8005214 <__sinit>
 8004f12:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <__swsetup_r+0xd0>)
 8004f14:	429c      	cmp	r4, r3
 8004f16:	d10f      	bne.n	8004f38 <__swsetup_r+0x3c>
 8004f18:	686c      	ldr	r4, [r5, #4]
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f20:	0719      	lsls	r1, r3, #28
 8004f22:	d42c      	bmi.n	8004f7e <__swsetup_r+0x82>
 8004f24:	06dd      	lsls	r5, r3, #27
 8004f26:	d411      	bmi.n	8004f4c <__swsetup_r+0x50>
 8004f28:	2309      	movs	r3, #9
 8004f2a:	6033      	str	r3, [r6, #0]
 8004f2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	81a3      	strh	r3, [r4, #12]
 8004f36:	e03e      	b.n	8004fb6 <__swsetup_r+0xba>
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <__swsetup_r+0xd4>)
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	d101      	bne.n	8004f42 <__swsetup_r+0x46>
 8004f3e:	68ac      	ldr	r4, [r5, #8]
 8004f40:	e7eb      	b.n	8004f1a <__swsetup_r+0x1e>
 8004f42:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <__swsetup_r+0xd8>)
 8004f44:	429c      	cmp	r4, r3
 8004f46:	bf08      	it	eq
 8004f48:	68ec      	ldreq	r4, [r5, #12]
 8004f4a:	e7e6      	b.n	8004f1a <__swsetup_r+0x1e>
 8004f4c:	0758      	lsls	r0, r3, #29
 8004f4e:	d512      	bpl.n	8004f76 <__swsetup_r+0x7a>
 8004f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f52:	b141      	cbz	r1, 8004f66 <__swsetup_r+0x6a>
 8004f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f58:	4299      	cmp	r1, r3
 8004f5a:	d002      	beq.n	8004f62 <__swsetup_r+0x66>
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f7ff fcdb 	bl	8004918 <_free_r>
 8004f62:	2300      	movs	r3, #0
 8004f64:	6363      	str	r3, [r4, #52]	; 0x34
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6063      	str	r3, [r4, #4]
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	f043 0308 	orr.w	r3, r3, #8
 8004f7c:	81a3      	strh	r3, [r4, #12]
 8004f7e:	6923      	ldr	r3, [r4, #16]
 8004f80:	b94b      	cbnz	r3, 8004f96 <__swsetup_r+0x9a>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8c:	d003      	beq.n	8004f96 <__swsetup_r+0x9a>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4630      	mov	r0, r6
 8004f92:	f000 fa05 	bl	80053a0 <__smakebuf_r>
 8004f96:	89a0      	ldrh	r0, [r4, #12]
 8004f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f9c:	f010 0301 	ands.w	r3, r0, #1
 8004fa0:	d00a      	beq.n	8004fb8 <__swsetup_r+0xbc>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60a3      	str	r3, [r4, #8]
 8004fa6:	6963      	ldr	r3, [r4, #20]
 8004fa8:	425b      	negs	r3, r3
 8004faa:	61a3      	str	r3, [r4, #24]
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	b943      	cbnz	r3, 8004fc2 <__swsetup_r+0xc6>
 8004fb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fb4:	d1ba      	bne.n	8004f2c <__swsetup_r+0x30>
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	0781      	lsls	r1, r0, #30
 8004fba:	bf58      	it	pl
 8004fbc:	6963      	ldrpl	r3, [r4, #20]
 8004fbe:	60a3      	str	r3, [r4, #8]
 8004fc0:	e7f4      	b.n	8004fac <__swsetup_r+0xb0>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	e7f7      	b.n	8004fb6 <__swsetup_r+0xba>
 8004fc6:	bf00      	nop
 8004fc8:	2000000c 	.word	0x2000000c
 8004fcc:	08005a04 	.word	0x08005a04
 8004fd0:	08005a24 	.word	0x08005a24
 8004fd4:	080059e4 	.word	0x080059e4

08004fd8 <abort>:
 8004fd8:	2006      	movs	r0, #6
 8004fda:	b508      	push	{r3, lr}
 8004fdc:	f000 fa48 	bl	8005470 <raise>
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f7fc f8b6 	bl	8001152 <_exit>
	...

08004fe8 <__sflush_r>:
 8004fe8:	898a      	ldrh	r2, [r1, #12]
 8004fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fec:	4605      	mov	r5, r0
 8004fee:	0710      	lsls	r0, r2, #28
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	d457      	bmi.n	80050a4 <__sflush_r+0xbc>
 8004ff4:	684b      	ldr	r3, [r1, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	dc04      	bgt.n	8005004 <__sflush_r+0x1c>
 8004ffa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	dc01      	bgt.n	8005004 <__sflush_r+0x1c>
 8005000:	2000      	movs	r0, #0
 8005002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005006:	2e00      	cmp	r6, #0
 8005008:	d0fa      	beq.n	8005000 <__sflush_r+0x18>
 800500a:	2300      	movs	r3, #0
 800500c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005010:	682f      	ldr	r7, [r5, #0]
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	d032      	beq.n	800507c <__sflush_r+0x94>
 8005016:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	075a      	lsls	r2, r3, #29
 800501c:	d505      	bpl.n	800502a <__sflush_r+0x42>
 800501e:	6863      	ldr	r3, [r4, #4]
 8005020:	1ac0      	subs	r0, r0, r3
 8005022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005024:	b10b      	cbz	r3, 800502a <__sflush_r+0x42>
 8005026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005028:	1ac0      	subs	r0, r0, r3
 800502a:	2300      	movs	r3, #0
 800502c:	4602      	mov	r2, r0
 800502e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005030:	4628      	mov	r0, r5
 8005032:	6a21      	ldr	r1, [r4, #32]
 8005034:	47b0      	blx	r6
 8005036:	1c43      	adds	r3, r0, #1
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	d106      	bne.n	800504a <__sflush_r+0x62>
 800503c:	6829      	ldr	r1, [r5, #0]
 800503e:	291d      	cmp	r1, #29
 8005040:	d82c      	bhi.n	800509c <__sflush_r+0xb4>
 8005042:	4a29      	ldr	r2, [pc, #164]	; (80050e8 <__sflush_r+0x100>)
 8005044:	40ca      	lsrs	r2, r1
 8005046:	07d6      	lsls	r6, r2, #31
 8005048:	d528      	bpl.n	800509c <__sflush_r+0xb4>
 800504a:	2200      	movs	r2, #0
 800504c:	6062      	str	r2, [r4, #4]
 800504e:	6922      	ldr	r2, [r4, #16]
 8005050:	04d9      	lsls	r1, r3, #19
 8005052:	6022      	str	r2, [r4, #0]
 8005054:	d504      	bpl.n	8005060 <__sflush_r+0x78>
 8005056:	1c42      	adds	r2, r0, #1
 8005058:	d101      	bne.n	800505e <__sflush_r+0x76>
 800505a:	682b      	ldr	r3, [r5, #0]
 800505c:	b903      	cbnz	r3, 8005060 <__sflush_r+0x78>
 800505e:	6560      	str	r0, [r4, #84]	; 0x54
 8005060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005062:	602f      	str	r7, [r5, #0]
 8005064:	2900      	cmp	r1, #0
 8005066:	d0cb      	beq.n	8005000 <__sflush_r+0x18>
 8005068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800506c:	4299      	cmp	r1, r3
 800506e:	d002      	beq.n	8005076 <__sflush_r+0x8e>
 8005070:	4628      	mov	r0, r5
 8005072:	f7ff fc51 	bl	8004918 <_free_r>
 8005076:	2000      	movs	r0, #0
 8005078:	6360      	str	r0, [r4, #52]	; 0x34
 800507a:	e7c2      	b.n	8005002 <__sflush_r+0x1a>
 800507c:	6a21      	ldr	r1, [r4, #32]
 800507e:	2301      	movs	r3, #1
 8005080:	4628      	mov	r0, r5
 8005082:	47b0      	blx	r6
 8005084:	1c41      	adds	r1, r0, #1
 8005086:	d1c7      	bne.n	8005018 <__sflush_r+0x30>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0c4      	beq.n	8005018 <__sflush_r+0x30>
 800508e:	2b1d      	cmp	r3, #29
 8005090:	d001      	beq.n	8005096 <__sflush_r+0xae>
 8005092:	2b16      	cmp	r3, #22
 8005094:	d101      	bne.n	800509a <__sflush_r+0xb2>
 8005096:	602f      	str	r7, [r5, #0]
 8005098:	e7b2      	b.n	8005000 <__sflush_r+0x18>
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a0:	81a3      	strh	r3, [r4, #12]
 80050a2:	e7ae      	b.n	8005002 <__sflush_r+0x1a>
 80050a4:	690f      	ldr	r7, [r1, #16]
 80050a6:	2f00      	cmp	r7, #0
 80050a8:	d0aa      	beq.n	8005000 <__sflush_r+0x18>
 80050aa:	0793      	lsls	r3, r2, #30
 80050ac:	bf18      	it	ne
 80050ae:	2300      	movne	r3, #0
 80050b0:	680e      	ldr	r6, [r1, #0]
 80050b2:	bf08      	it	eq
 80050b4:	694b      	ldreq	r3, [r1, #20]
 80050b6:	1bf6      	subs	r6, r6, r7
 80050b8:	600f      	str	r7, [r1, #0]
 80050ba:	608b      	str	r3, [r1, #8]
 80050bc:	2e00      	cmp	r6, #0
 80050be:	dd9f      	ble.n	8005000 <__sflush_r+0x18>
 80050c0:	4633      	mov	r3, r6
 80050c2:	463a      	mov	r2, r7
 80050c4:	4628      	mov	r0, r5
 80050c6:	6a21      	ldr	r1, [r4, #32]
 80050c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80050cc:	47e0      	blx	ip
 80050ce:	2800      	cmp	r0, #0
 80050d0:	dc06      	bgt.n	80050e0 <__sflush_r+0xf8>
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295
 80050d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	e790      	b.n	8005002 <__sflush_r+0x1a>
 80050e0:	4407      	add	r7, r0
 80050e2:	1a36      	subs	r6, r6, r0
 80050e4:	e7ea      	b.n	80050bc <__sflush_r+0xd4>
 80050e6:	bf00      	nop
 80050e8:	20400001 	.word	0x20400001

080050ec <_fflush_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	690b      	ldr	r3, [r1, #16]
 80050f0:	4605      	mov	r5, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	b913      	cbnz	r3, 80050fc <_fflush_r+0x10>
 80050f6:	2500      	movs	r5, #0
 80050f8:	4628      	mov	r0, r5
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	b118      	cbz	r0, 8005106 <_fflush_r+0x1a>
 80050fe:	6983      	ldr	r3, [r0, #24]
 8005100:	b90b      	cbnz	r3, 8005106 <_fflush_r+0x1a>
 8005102:	f000 f887 	bl	8005214 <__sinit>
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <_fflush_r+0x6c>)
 8005108:	429c      	cmp	r4, r3
 800510a:	d11b      	bne.n	8005144 <_fflush_r+0x58>
 800510c:	686c      	ldr	r4, [r5, #4]
 800510e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0ef      	beq.n	80050f6 <_fflush_r+0xa>
 8005116:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005118:	07d0      	lsls	r0, r2, #31
 800511a:	d404      	bmi.n	8005126 <_fflush_r+0x3a>
 800511c:	0599      	lsls	r1, r3, #22
 800511e:	d402      	bmi.n	8005126 <_fflush_r+0x3a>
 8005120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005122:	f000 f915 	bl	8005350 <__retarget_lock_acquire_recursive>
 8005126:	4628      	mov	r0, r5
 8005128:	4621      	mov	r1, r4
 800512a:	f7ff ff5d 	bl	8004fe8 <__sflush_r>
 800512e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005130:	4605      	mov	r5, r0
 8005132:	07da      	lsls	r2, r3, #31
 8005134:	d4e0      	bmi.n	80050f8 <_fflush_r+0xc>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	059b      	lsls	r3, r3, #22
 800513a:	d4dd      	bmi.n	80050f8 <_fflush_r+0xc>
 800513c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800513e:	f000 f908 	bl	8005352 <__retarget_lock_release_recursive>
 8005142:	e7d9      	b.n	80050f8 <_fflush_r+0xc>
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <_fflush_r+0x70>)
 8005146:	429c      	cmp	r4, r3
 8005148:	d101      	bne.n	800514e <_fflush_r+0x62>
 800514a:	68ac      	ldr	r4, [r5, #8]
 800514c:	e7df      	b.n	800510e <_fflush_r+0x22>
 800514e:	4b04      	ldr	r3, [pc, #16]	; (8005160 <_fflush_r+0x74>)
 8005150:	429c      	cmp	r4, r3
 8005152:	bf08      	it	eq
 8005154:	68ec      	ldreq	r4, [r5, #12]
 8005156:	e7da      	b.n	800510e <_fflush_r+0x22>
 8005158:	08005a04 	.word	0x08005a04
 800515c:	08005a24 	.word	0x08005a24
 8005160:	080059e4 	.word	0x080059e4

08005164 <std>:
 8005164:	2300      	movs	r3, #0
 8005166:	b510      	push	{r4, lr}
 8005168:	4604      	mov	r4, r0
 800516a:	e9c0 3300 	strd	r3, r3, [r0]
 800516e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005172:	6083      	str	r3, [r0, #8]
 8005174:	8181      	strh	r1, [r0, #12]
 8005176:	6643      	str	r3, [r0, #100]	; 0x64
 8005178:	81c2      	strh	r2, [r0, #14]
 800517a:	6183      	str	r3, [r0, #24]
 800517c:	4619      	mov	r1, r3
 800517e:	2208      	movs	r2, #8
 8005180:	305c      	adds	r0, #92	; 0x5c
 8005182:	f7fd fd29 	bl	8002bd8 <memset>
 8005186:	4b05      	ldr	r3, [pc, #20]	; (800519c <std+0x38>)
 8005188:	6224      	str	r4, [r4, #32]
 800518a:	6263      	str	r3, [r4, #36]	; 0x24
 800518c:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <std+0x3c>)
 800518e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <std+0x40>)
 8005192:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005194:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <std+0x44>)
 8005196:	6323      	str	r3, [r4, #48]	; 0x30
 8005198:	bd10      	pop	{r4, pc}
 800519a:	bf00      	nop
 800519c:	080054a9 	.word	0x080054a9
 80051a0:	080054cb 	.word	0x080054cb
 80051a4:	08005503 	.word	0x08005503
 80051a8:	08005527 	.word	0x08005527

080051ac <_cleanup_r>:
 80051ac:	4901      	ldr	r1, [pc, #4]	; (80051b4 <_cleanup_r+0x8>)
 80051ae:	f000 b8af 	b.w	8005310 <_fwalk_reent>
 80051b2:	bf00      	nop
 80051b4:	080050ed 	.word	0x080050ed

080051b8 <__sfmoreglue>:
 80051b8:	2268      	movs	r2, #104	; 0x68
 80051ba:	b570      	push	{r4, r5, r6, lr}
 80051bc:	1e4d      	subs	r5, r1, #1
 80051be:	4355      	muls	r5, r2
 80051c0:	460e      	mov	r6, r1
 80051c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051c6:	f7ff fc0f 	bl	80049e8 <_malloc_r>
 80051ca:	4604      	mov	r4, r0
 80051cc:	b140      	cbz	r0, 80051e0 <__sfmoreglue+0x28>
 80051ce:	2100      	movs	r1, #0
 80051d0:	e9c0 1600 	strd	r1, r6, [r0]
 80051d4:	300c      	adds	r0, #12
 80051d6:	60a0      	str	r0, [r4, #8]
 80051d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051dc:	f7fd fcfc 	bl	8002bd8 <memset>
 80051e0:	4620      	mov	r0, r4
 80051e2:	bd70      	pop	{r4, r5, r6, pc}

080051e4 <__sfp_lock_acquire>:
 80051e4:	4801      	ldr	r0, [pc, #4]	; (80051ec <__sfp_lock_acquire+0x8>)
 80051e6:	f000 b8b3 	b.w	8005350 <__retarget_lock_acquire_recursive>
 80051ea:	bf00      	nop
 80051ec:	200002d1 	.word	0x200002d1

080051f0 <__sfp_lock_release>:
 80051f0:	4801      	ldr	r0, [pc, #4]	; (80051f8 <__sfp_lock_release+0x8>)
 80051f2:	f000 b8ae 	b.w	8005352 <__retarget_lock_release_recursive>
 80051f6:	bf00      	nop
 80051f8:	200002d1 	.word	0x200002d1

080051fc <__sinit_lock_acquire>:
 80051fc:	4801      	ldr	r0, [pc, #4]	; (8005204 <__sinit_lock_acquire+0x8>)
 80051fe:	f000 b8a7 	b.w	8005350 <__retarget_lock_acquire_recursive>
 8005202:	bf00      	nop
 8005204:	200002d2 	.word	0x200002d2

08005208 <__sinit_lock_release>:
 8005208:	4801      	ldr	r0, [pc, #4]	; (8005210 <__sinit_lock_release+0x8>)
 800520a:	f000 b8a2 	b.w	8005352 <__retarget_lock_release_recursive>
 800520e:	bf00      	nop
 8005210:	200002d2 	.word	0x200002d2

08005214 <__sinit>:
 8005214:	b510      	push	{r4, lr}
 8005216:	4604      	mov	r4, r0
 8005218:	f7ff fff0 	bl	80051fc <__sinit_lock_acquire>
 800521c:	69a3      	ldr	r3, [r4, #24]
 800521e:	b11b      	cbz	r3, 8005228 <__sinit+0x14>
 8005220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005224:	f7ff bff0 	b.w	8005208 <__sinit_lock_release>
 8005228:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800522c:	6523      	str	r3, [r4, #80]	; 0x50
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <__sinit+0x68>)
 8005230:	4a13      	ldr	r2, [pc, #76]	; (8005280 <__sinit+0x6c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	62a2      	str	r2, [r4, #40]	; 0x28
 8005236:	42a3      	cmp	r3, r4
 8005238:	bf08      	it	eq
 800523a:	2301      	moveq	r3, #1
 800523c:	4620      	mov	r0, r4
 800523e:	bf08      	it	eq
 8005240:	61a3      	streq	r3, [r4, #24]
 8005242:	f000 f81f 	bl	8005284 <__sfp>
 8005246:	6060      	str	r0, [r4, #4]
 8005248:	4620      	mov	r0, r4
 800524a:	f000 f81b 	bl	8005284 <__sfp>
 800524e:	60a0      	str	r0, [r4, #8]
 8005250:	4620      	mov	r0, r4
 8005252:	f000 f817 	bl	8005284 <__sfp>
 8005256:	2200      	movs	r2, #0
 8005258:	2104      	movs	r1, #4
 800525a:	60e0      	str	r0, [r4, #12]
 800525c:	6860      	ldr	r0, [r4, #4]
 800525e:	f7ff ff81 	bl	8005164 <std>
 8005262:	2201      	movs	r2, #1
 8005264:	2109      	movs	r1, #9
 8005266:	68a0      	ldr	r0, [r4, #8]
 8005268:	f7ff ff7c 	bl	8005164 <std>
 800526c:	2202      	movs	r2, #2
 800526e:	2112      	movs	r1, #18
 8005270:	68e0      	ldr	r0, [r4, #12]
 8005272:	f7ff ff77 	bl	8005164 <std>
 8005276:	2301      	movs	r3, #1
 8005278:	61a3      	str	r3, [r4, #24]
 800527a:	e7d1      	b.n	8005220 <__sinit+0xc>
 800527c:	0800566c 	.word	0x0800566c
 8005280:	080051ad 	.word	0x080051ad

08005284 <__sfp>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	4607      	mov	r7, r0
 8005288:	f7ff ffac 	bl	80051e4 <__sfp_lock_acquire>
 800528c:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <__sfp+0x84>)
 800528e:	681e      	ldr	r6, [r3, #0]
 8005290:	69b3      	ldr	r3, [r6, #24]
 8005292:	b913      	cbnz	r3, 800529a <__sfp+0x16>
 8005294:	4630      	mov	r0, r6
 8005296:	f7ff ffbd 	bl	8005214 <__sinit>
 800529a:	3648      	adds	r6, #72	; 0x48
 800529c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	d503      	bpl.n	80052ac <__sfp+0x28>
 80052a4:	6833      	ldr	r3, [r6, #0]
 80052a6:	b30b      	cbz	r3, 80052ec <__sfp+0x68>
 80052a8:	6836      	ldr	r6, [r6, #0]
 80052aa:	e7f7      	b.n	800529c <__sfp+0x18>
 80052ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052b0:	b9d5      	cbnz	r5, 80052e8 <__sfp+0x64>
 80052b2:	4b16      	ldr	r3, [pc, #88]	; (800530c <__sfp+0x88>)
 80052b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052b8:	60e3      	str	r3, [r4, #12]
 80052ba:	6665      	str	r5, [r4, #100]	; 0x64
 80052bc:	f000 f847 	bl	800534e <__retarget_lock_init_recursive>
 80052c0:	f7ff ff96 	bl	80051f0 <__sfp_lock_release>
 80052c4:	2208      	movs	r2, #8
 80052c6:	4629      	mov	r1, r5
 80052c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052d0:	6025      	str	r5, [r4, #0]
 80052d2:	61a5      	str	r5, [r4, #24]
 80052d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052d8:	f7fd fc7e 	bl	8002bd8 <memset>
 80052dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052e4:	4620      	mov	r0, r4
 80052e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052e8:	3468      	adds	r4, #104	; 0x68
 80052ea:	e7d9      	b.n	80052a0 <__sfp+0x1c>
 80052ec:	2104      	movs	r1, #4
 80052ee:	4638      	mov	r0, r7
 80052f0:	f7ff ff62 	bl	80051b8 <__sfmoreglue>
 80052f4:	4604      	mov	r4, r0
 80052f6:	6030      	str	r0, [r6, #0]
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d1d5      	bne.n	80052a8 <__sfp+0x24>
 80052fc:	f7ff ff78 	bl	80051f0 <__sfp_lock_release>
 8005300:	230c      	movs	r3, #12
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	e7ee      	b.n	80052e4 <__sfp+0x60>
 8005306:	bf00      	nop
 8005308:	0800566c 	.word	0x0800566c
 800530c:	ffff0001 	.word	0xffff0001

08005310 <_fwalk_reent>:
 8005310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005314:	4606      	mov	r6, r0
 8005316:	4688      	mov	r8, r1
 8005318:	2700      	movs	r7, #0
 800531a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800531e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005322:	f1b9 0901 	subs.w	r9, r9, #1
 8005326:	d505      	bpl.n	8005334 <_fwalk_reent+0x24>
 8005328:	6824      	ldr	r4, [r4, #0]
 800532a:	2c00      	cmp	r4, #0
 800532c:	d1f7      	bne.n	800531e <_fwalk_reent+0xe>
 800532e:	4638      	mov	r0, r7
 8005330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005334:	89ab      	ldrh	r3, [r5, #12]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d907      	bls.n	800534a <_fwalk_reent+0x3a>
 800533a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800533e:	3301      	adds	r3, #1
 8005340:	d003      	beq.n	800534a <_fwalk_reent+0x3a>
 8005342:	4629      	mov	r1, r5
 8005344:	4630      	mov	r0, r6
 8005346:	47c0      	blx	r8
 8005348:	4307      	orrs	r7, r0
 800534a:	3568      	adds	r5, #104	; 0x68
 800534c:	e7e9      	b.n	8005322 <_fwalk_reent+0x12>

0800534e <__retarget_lock_init_recursive>:
 800534e:	4770      	bx	lr

08005350 <__retarget_lock_acquire_recursive>:
 8005350:	4770      	bx	lr

08005352 <__retarget_lock_release_recursive>:
 8005352:	4770      	bx	lr

08005354 <__swhatbuf_r>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	460e      	mov	r6, r1
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	4614      	mov	r4, r2
 800535e:	2900      	cmp	r1, #0
 8005360:	461d      	mov	r5, r3
 8005362:	b096      	sub	sp, #88	; 0x58
 8005364:	da08      	bge.n	8005378 <__swhatbuf_r+0x24>
 8005366:	2200      	movs	r2, #0
 8005368:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800536c:	602a      	str	r2, [r5, #0]
 800536e:	061a      	lsls	r2, r3, #24
 8005370:	d410      	bmi.n	8005394 <__swhatbuf_r+0x40>
 8005372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005376:	e00e      	b.n	8005396 <__swhatbuf_r+0x42>
 8005378:	466a      	mov	r2, sp
 800537a:	f000 f8fb 	bl	8005574 <_fstat_r>
 800537e:	2800      	cmp	r0, #0
 8005380:	dbf1      	blt.n	8005366 <__swhatbuf_r+0x12>
 8005382:	9a01      	ldr	r2, [sp, #4]
 8005384:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005388:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800538c:	425a      	negs	r2, r3
 800538e:	415a      	adcs	r2, r3
 8005390:	602a      	str	r2, [r5, #0]
 8005392:	e7ee      	b.n	8005372 <__swhatbuf_r+0x1e>
 8005394:	2340      	movs	r3, #64	; 0x40
 8005396:	2000      	movs	r0, #0
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	b016      	add	sp, #88	; 0x58
 800539c:	bd70      	pop	{r4, r5, r6, pc}
	...

080053a0 <__smakebuf_r>:
 80053a0:	898b      	ldrh	r3, [r1, #12]
 80053a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053a4:	079d      	lsls	r5, r3, #30
 80053a6:	4606      	mov	r6, r0
 80053a8:	460c      	mov	r4, r1
 80053aa:	d507      	bpl.n	80053bc <__smakebuf_r+0x1c>
 80053ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	6123      	str	r3, [r4, #16]
 80053b4:	2301      	movs	r3, #1
 80053b6:	6163      	str	r3, [r4, #20]
 80053b8:	b002      	add	sp, #8
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	466a      	mov	r2, sp
 80053be:	ab01      	add	r3, sp, #4
 80053c0:	f7ff ffc8 	bl	8005354 <__swhatbuf_r>
 80053c4:	9900      	ldr	r1, [sp, #0]
 80053c6:	4605      	mov	r5, r0
 80053c8:	4630      	mov	r0, r6
 80053ca:	f7ff fb0d 	bl	80049e8 <_malloc_r>
 80053ce:	b948      	cbnz	r0, 80053e4 <__smakebuf_r+0x44>
 80053d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d4:	059a      	lsls	r2, r3, #22
 80053d6:	d4ef      	bmi.n	80053b8 <__smakebuf_r+0x18>
 80053d8:	f023 0303 	bic.w	r3, r3, #3
 80053dc:	f043 0302 	orr.w	r3, r3, #2
 80053e0:	81a3      	strh	r3, [r4, #12]
 80053e2:	e7e3      	b.n	80053ac <__smakebuf_r+0xc>
 80053e4:	4b0d      	ldr	r3, [pc, #52]	; (800541c <__smakebuf_r+0x7c>)
 80053e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	6020      	str	r0, [r4, #0]
 80053ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f0:	81a3      	strh	r3, [r4, #12]
 80053f2:	9b00      	ldr	r3, [sp, #0]
 80053f4:	6120      	str	r0, [r4, #16]
 80053f6:	6163      	str	r3, [r4, #20]
 80053f8:	9b01      	ldr	r3, [sp, #4]
 80053fa:	b15b      	cbz	r3, 8005414 <__smakebuf_r+0x74>
 80053fc:	4630      	mov	r0, r6
 80053fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005402:	f000 f8c9 	bl	8005598 <_isatty_r>
 8005406:	b128      	cbz	r0, 8005414 <__smakebuf_r+0x74>
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	81a3      	strh	r3, [r4, #12]
 8005414:	89a0      	ldrh	r0, [r4, #12]
 8005416:	4305      	orrs	r5, r0
 8005418:	81a5      	strh	r5, [r4, #12]
 800541a:	e7cd      	b.n	80053b8 <__smakebuf_r+0x18>
 800541c:	080051ad 	.word	0x080051ad

08005420 <_raise_r>:
 8005420:	291f      	cmp	r1, #31
 8005422:	b538      	push	{r3, r4, r5, lr}
 8005424:	4604      	mov	r4, r0
 8005426:	460d      	mov	r5, r1
 8005428:	d904      	bls.n	8005434 <_raise_r+0x14>
 800542a:	2316      	movs	r3, #22
 800542c:	6003      	str	r3, [r0, #0]
 800542e:	f04f 30ff 	mov.w	r0, #4294967295
 8005432:	bd38      	pop	{r3, r4, r5, pc}
 8005434:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005436:	b112      	cbz	r2, 800543e <_raise_r+0x1e>
 8005438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800543c:	b94b      	cbnz	r3, 8005452 <_raise_r+0x32>
 800543e:	4620      	mov	r0, r4
 8005440:	f000 f830 	bl	80054a4 <_getpid_r>
 8005444:	462a      	mov	r2, r5
 8005446:	4601      	mov	r1, r0
 8005448:	4620      	mov	r0, r4
 800544a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800544e:	f000 b817 	b.w	8005480 <_kill_r>
 8005452:	2b01      	cmp	r3, #1
 8005454:	d00a      	beq.n	800546c <_raise_r+0x4c>
 8005456:	1c59      	adds	r1, r3, #1
 8005458:	d103      	bne.n	8005462 <_raise_r+0x42>
 800545a:	2316      	movs	r3, #22
 800545c:	6003      	str	r3, [r0, #0]
 800545e:	2001      	movs	r0, #1
 8005460:	e7e7      	b.n	8005432 <_raise_r+0x12>
 8005462:	2400      	movs	r4, #0
 8005464:	4628      	mov	r0, r5
 8005466:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800546a:	4798      	blx	r3
 800546c:	2000      	movs	r0, #0
 800546e:	e7e0      	b.n	8005432 <_raise_r+0x12>

08005470 <raise>:
 8005470:	4b02      	ldr	r3, [pc, #8]	; (800547c <raise+0xc>)
 8005472:	4601      	mov	r1, r0
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	f7ff bfd3 	b.w	8005420 <_raise_r>
 800547a:	bf00      	nop
 800547c:	2000000c 	.word	0x2000000c

08005480 <_kill_r>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	2300      	movs	r3, #0
 8005484:	4d06      	ldr	r5, [pc, #24]	; (80054a0 <_kill_r+0x20>)
 8005486:	4604      	mov	r4, r0
 8005488:	4608      	mov	r0, r1
 800548a:	4611      	mov	r1, r2
 800548c:	602b      	str	r3, [r5, #0]
 800548e:	f7fb fe50 	bl	8001132 <_kill>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	d102      	bne.n	800549c <_kill_r+0x1c>
 8005496:	682b      	ldr	r3, [r5, #0]
 8005498:	b103      	cbz	r3, 800549c <_kill_r+0x1c>
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	bd38      	pop	{r3, r4, r5, pc}
 800549e:	bf00      	nop
 80054a0:	200002cc 	.word	0x200002cc

080054a4 <_getpid_r>:
 80054a4:	f7fb be3e 	b.w	8001124 <_getpid>

080054a8 <__sread>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	460c      	mov	r4, r1
 80054ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b0:	f000 f894 	bl	80055dc <_read_r>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	bfab      	itete	ge
 80054b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054ba:	89a3      	ldrhlt	r3, [r4, #12]
 80054bc:	181b      	addge	r3, r3, r0
 80054be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054c2:	bfac      	ite	ge
 80054c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80054c6:	81a3      	strhlt	r3, [r4, #12]
 80054c8:	bd10      	pop	{r4, pc}

080054ca <__swrite>:
 80054ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ce:	461f      	mov	r7, r3
 80054d0:	898b      	ldrh	r3, [r1, #12]
 80054d2:	4605      	mov	r5, r0
 80054d4:	05db      	lsls	r3, r3, #23
 80054d6:	460c      	mov	r4, r1
 80054d8:	4616      	mov	r6, r2
 80054da:	d505      	bpl.n	80054e8 <__swrite+0x1e>
 80054dc:	2302      	movs	r3, #2
 80054de:	2200      	movs	r2, #0
 80054e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e4:	f000 f868 	bl	80055b8 <_lseek_r>
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	4632      	mov	r2, r6
 80054ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054f0:	81a3      	strh	r3, [r4, #12]
 80054f2:	4628      	mov	r0, r5
 80054f4:	463b      	mov	r3, r7
 80054f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054fe:	f000 b817 	b.w	8005530 <_write_r>

08005502 <__sseek>:
 8005502:	b510      	push	{r4, lr}
 8005504:	460c      	mov	r4, r1
 8005506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550a:	f000 f855 	bl	80055b8 <_lseek_r>
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	bf15      	itete	ne
 8005514:	6560      	strne	r0, [r4, #84]	; 0x54
 8005516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800551a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800551e:	81a3      	strheq	r3, [r4, #12]
 8005520:	bf18      	it	ne
 8005522:	81a3      	strhne	r3, [r4, #12]
 8005524:	bd10      	pop	{r4, pc}

08005526 <__sclose>:
 8005526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552a:	f000 b813 	b.w	8005554 <_close_r>
	...

08005530 <_write_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4604      	mov	r4, r0
 8005534:	4608      	mov	r0, r1
 8005536:	4611      	mov	r1, r2
 8005538:	2200      	movs	r2, #0
 800553a:	4d05      	ldr	r5, [pc, #20]	; (8005550 <_write_r+0x20>)
 800553c:	602a      	str	r2, [r5, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f7fb fe2e 	bl	80011a0 <_write>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_write_r+0x1e>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_write_r+0x1e>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	200002cc 	.word	0x200002cc

08005554 <_close_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	2300      	movs	r3, #0
 8005558:	4d05      	ldr	r5, [pc, #20]	; (8005570 <_close_r+0x1c>)
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	f7fb fe3a 	bl	80011d8 <_close>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_close_r+0x1a>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_close_r+0x1a>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	200002cc 	.word	0x200002cc

08005574 <_fstat_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	2300      	movs	r3, #0
 8005578:	4d06      	ldr	r5, [pc, #24]	; (8005594 <_fstat_r+0x20>)
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	602b      	str	r3, [r5, #0]
 8005582:	f7fb fe34 	bl	80011ee <_fstat>
 8005586:	1c43      	adds	r3, r0, #1
 8005588:	d102      	bne.n	8005590 <_fstat_r+0x1c>
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	b103      	cbz	r3, 8005590 <_fstat_r+0x1c>
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	bd38      	pop	{r3, r4, r5, pc}
 8005592:	bf00      	nop
 8005594:	200002cc 	.word	0x200002cc

08005598 <_isatty_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	2300      	movs	r3, #0
 800559c:	4d05      	ldr	r5, [pc, #20]	; (80055b4 <_isatty_r+0x1c>)
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	f7fb fe32 	bl	800120c <_isatty>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_isatty_r+0x1a>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_isatty_r+0x1a>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	200002cc 	.word	0x200002cc

080055b8 <_lseek_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	4604      	mov	r4, r0
 80055bc:	4608      	mov	r0, r1
 80055be:	4611      	mov	r1, r2
 80055c0:	2200      	movs	r2, #0
 80055c2:	4d05      	ldr	r5, [pc, #20]	; (80055d8 <_lseek_r+0x20>)
 80055c4:	602a      	str	r2, [r5, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f7fb fe2a 	bl	8001220 <_lseek>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_lseek_r+0x1e>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_lseek_r+0x1e>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	200002cc 	.word	0x200002cc

080055dc <_read_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4604      	mov	r4, r0
 80055e0:	4608      	mov	r0, r1
 80055e2:	4611      	mov	r1, r2
 80055e4:	2200      	movs	r2, #0
 80055e6:	4d05      	ldr	r5, [pc, #20]	; (80055fc <_read_r+0x20>)
 80055e8:	602a      	str	r2, [r5, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f7fb fdbb 	bl	8001166 <_read>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_read_r+0x1e>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_read_r+0x1e>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	200002cc 	.word	0x200002cc

08005600 <_init>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr

0800560c <_fini>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr
