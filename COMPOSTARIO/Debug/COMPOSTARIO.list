
COMPOSTARIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b08  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08006c18  08006c18  00016c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b4  080070b4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  080070b4  080070b4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070b4  080070b4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070b4  080070b4  000170b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080070bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001ec  080072a8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080072a8  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca0c  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021db  00000000  00000000  0002cc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0002ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  0002fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001944e  00000000  00000000  00030938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eef1  00000000  00000000  00049d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b5a  00000000  00000000  00058c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e97d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf4  00000000  00000000  000e9824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c00 	.word	0x08006c00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08006c00 	.word	0x08006c00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <delay+0x2c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000ada:	bf00      	nop
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <delay+0x2c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d3f9      	bcc.n	8000adc <delay+0x14>
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	20000238 	.word	0x20000238

08000af8 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0e:	4820      	ldr	r0, [pc, #128]	; (8000b90 <send_to_lcd+0x98>)
 8000b10:	f001 ff43 	bl	800299a <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	08db      	lsrs	r3, r3, #3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	2108      	movs	r1, #8
 8000b24:	481a      	ldr	r0, [pc, #104]	; (8000b90 <send_to_lcd+0x98>)
 8000b26:	f001 ff38 	bl	800299a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	2110      	movs	r1, #16
 8000b3a:	4815      	ldr	r0, [pc, #84]	; (8000b90 <send_to_lcd+0x98>)
 8000b3c:	f001 ff2d 	bl	800299a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	085b      	lsrs	r3, r3, #1
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	2120      	movs	r1, #32
 8000b50:	480f      	ldr	r0, [pc, #60]	; (8000b90 <send_to_lcd+0x98>)
 8000b52:	f001 ff22 	bl	800299a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2140      	movs	r1, #64	; 0x40
 8000b62:	480b      	ldr	r0, [pc, #44]	; (8000b90 <send_to_lcd+0x98>)
 8000b64:	f001 ff19 	bl	800299a <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <send_to_lcd+0x98>)
 8000b6e:	f001 ff14 	bl	800299a <HAL_GPIO_WritePin>
	delay (20);
 8000b72:	2014      	movs	r0, #20
 8000b74:	f7ff ffa8 	bl	8000ac8 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <send_to_lcd+0x98>)
 8000b7e:	f001 ff0c 	bl	800299a <HAL_GPIO_WritePin>
	delay (20);
 8000b82:	2014      	movs	r0, #20
 8000b84:	f7ff ffa0 	bl	8000ac8 <delay>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40010c00 	.word	0x40010c00

08000b94 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	091b      	lsrs	r3, r3, #4
 8000ba2:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ffa5 	bl	8000af8 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 030f 	and.w	r3, r3, #15
 8000bb4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff9c 	bl	8000af8 <send_to_lcd>
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	091b      	lsrs	r3, r3, #4
 8000bd6:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff8b 	bl	8000af8 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2101      	movs	r1, #1
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff82 	bl	8000af8 <send_to_lcd>
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <lcd_clear>:

void lcd_clear (void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff ffc7 	bl	8000b94 <lcd_send_cmd>
	HAL_Delay(2);
 8000c06:	2002      	movs	r0, #2
 8000c08:	f000 ffcc 	bl	8001ba4 <HAL_Delay>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
    switch (row)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <lcd_put_cur+0x18>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d005      	beq.n	8000c32 <lcd_put_cur+0x22>
 8000c26:	e009      	b.n	8000c3c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2e:	603b      	str	r3, [r7, #0]
            break;
 8000c30:	e004      	b.n	8000c3c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c38:	603b      	str	r3, [r7, #0]
            break;
 8000c3a:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ffa7 	bl	8000b94 <lcd_send_cmd>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <lcd_init>:


void lcd_init (void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000c52:	2032      	movs	r0, #50	; 0x32
 8000c54:	f000 ffa6 	bl	8001ba4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c58:	2030      	movs	r0, #48	; 0x30
 8000c5a:	f7ff ff9b 	bl	8000b94 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000c5e:	2005      	movs	r0, #5
 8000c60:	f000 ffa0 	bl	8001ba4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c64:	2030      	movs	r0, #48	; 0x30
 8000c66:	f7ff ff95 	bl	8000b94 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f000 ff9a 	bl	8001ba4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c70:	2030      	movs	r0, #48	; 0x30
 8000c72:	f7ff ff8f 	bl	8000b94 <lcd_send_cmd>
	HAL_Delay(10);
 8000c76:	200a      	movs	r0, #10
 8000c78:	f000 ff94 	bl	8001ba4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000c7c:	2020      	movs	r0, #32
 8000c7e:	f7ff ff89 	bl	8000b94 <lcd_send_cmd>
	HAL_Delay(10);
 8000c82:	200a      	movs	r0, #10
 8000c84:	f000 ff8e 	bl	8001ba4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000c88:	2028      	movs	r0, #40	; 0x28
 8000c8a:	f7ff ff83 	bl	8000b94 <lcd_send_cmd>
	HAL_Delay(1);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 ff88 	bl	8001ba4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000c94:	2008      	movs	r0, #8
 8000c96:	f7ff ff7d 	bl	8000b94 <lcd_send_cmd>
	HAL_Delay(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 ff82 	bl	8001ba4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff ff77 	bl	8000b94 <lcd_send_cmd>
	HAL_Delay(1);
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 ff7c 	bl	8001ba4 <HAL_Delay>
	HAL_Delay(1);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 ff79 	bl	8001ba4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000cb2:	2006      	movs	r0, #6
 8000cb4:	f7ff ff6e 	bl	8000b94 <lcd_send_cmd>
	HAL_Delay(1);
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f000 ff73 	bl	8001ba4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000cbe:	200c      	movs	r0, #12
 8000cc0:	f7ff ff68 	bl	8000b94 <lcd_send_cmd>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000cd0:	e006      	b.n	8000ce0 <lcd_send_string+0x18>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff74 	bl	8000bc8 <lcd_send_data>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f4      	bne.n	8000cd2 <lcd_send_string+0xa>
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	0000      	movs	r0, r0
 8000cf4:	0000      	movs	r0, r0
	...

08000cf8 <measure_distance>:
//uint32_t Value1 = 0;				//ORIGINAL
//uint32_t Value2 = 0;				//ORIGINAL
//uint16_t Distance  = 0;			//ORIGINAL


uint16_t measure_distance() {
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
	uint32_t pMillis = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
	uint32_t Value1 = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
	uint32_t Value2 = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
	uint16_t Distance = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d14:	4838      	ldr	r0, [pc, #224]	; (8000df8 <measure_distance+0x100>)
 8000d16:	f001 fe40 	bl	800299a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d20:	4835      	ldr	r0, [pc, #212]	; (8000df8 <measure_distance+0x100>)
 8000d22:	f001 fe3a 	bl	800299a <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000d26:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <measure_distance+0x104>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&timer) < 10);  // wait for 10 us
 8000d2e:	bf00      	nop
 8000d30:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <measure_distance+0x104>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	2b09      	cmp	r3, #9
 8000d38:	d9fa      	bls.n	8000d30 <measure_distance+0x38>
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d40:	482d      	ldr	r0, [pc, #180]	; (8000df8 <measure_distance+0x100>)
 8000d42:	f001 fe2a 	bl	800299a <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000d46:	f000 ff23 	bl	8001b90 <HAL_GetTick>
 8000d4a:	60f8      	str	r0, [r7, #12]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&& pMillis + 10 > HAL_GetTick());
 8000d4c:	bf00      	nop
 8000d4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <measure_distance+0x100>)
 8000d54:	f001 fe0a 	bl	800296c <HAL_GPIO_ReadPin>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d107      	bne.n	8000d6e <measure_distance+0x76>
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f103 040a 	add.w	r4, r3, #10
 8000d64:	f000 ff14 	bl	8001b90 <HAL_GetTick>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	429c      	cmp	r4, r3
 8000d6c:	d8ef      	bhi.n	8000d4e <measure_distance+0x56>
		Value1 = __HAL_TIM_GET_COUNTER(&timer);
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <measure_distance+0x104>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d74:	60bb      	str	r3, [r7, #8]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000d76:	f000 ff0b 	bl	8001b90 <HAL_GetTick>
 8000d7a:	60f8      	str	r0, [r7, #12]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&& pMillis + 50 > HAL_GetTick());
 8000d7c:	bf00      	nop
 8000d7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d82:	481d      	ldr	r0, [pc, #116]	; (8000df8 <measure_distance+0x100>)
 8000d84:	f001 fdf2 	bl	800296c <HAL_GPIO_ReadPin>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d007      	beq.n	8000d9e <measure_distance+0xa6>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000d94:	f000 fefc 	bl	8001b90 <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	429c      	cmp	r4, r3
 8000d9c:	d8ef      	bhi.n	8000d7e <measure_distance+0x86>
		Value2 = __HAL_TIM_GET_COUNTER(&timer);
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <measure_distance+0x104>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da4:	607b      	str	r3, [r7, #4]

	Distance = (Value2 - Value1) * 0.034 / 2;
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fb19 	bl	80003e4 <__aeabi_ui2d>
 8000db2:	a30f      	add	r3, pc, #60	; (adr r3, 8000df0 <measure_distance+0xf8>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fb8e 	bl	80004d8 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dcc:	f7ff fcae 	bl	800072c <__aeabi_ddiv>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f7ff fe56 	bl	8000a88 <__aeabi_d2uiz>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	807b      	strh	r3, [r7, #2]
	HAL_Delay(50);
 8000de0:	2032      	movs	r0, #50	; 0x32
 8000de2:	f000 fedf 	bl	8001ba4 <HAL_Delay>

	return Distance;
 8000de6:	887b      	ldrh	r3, [r7, #2]

}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd90      	pop	{r4, r7, pc}
 8000df0:	b020c49c 	.word	0xb020c49c
 8000df4:	3fa16872 	.word	0x3fa16872
 8000df8:	40010c00 	.word	0x40010c00
 8000dfc:	20000238 	.word	0x20000238

08000e00 <ADC_Select_CH1>:
HUMTypeDef hum_t;

char AT[20]="temp=\"Ezequiel\"\r\n";


void ADC_Select_CH1 (void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <ADC_Select_CH1+0x38>)
 8000e22:	f001 f9a7 	bl	8002174 <HAL_ADC_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 8000e2c:	f000 fb2e 	bl	800148c <Error_Handler>
	  }
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000208 	.word	0x20000208

08000e3c <ADC_Select_CH2>:

void ADC_Select_CH2 (void){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <ADC_Select_CH2+0x38>)
 8000e5e:	f001 f989 	bl	8002174 <HAL_ADC_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 8000e68:	f000 fb10 	bl	800148c <Error_Handler>
	  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000208 	.word	0x20000208

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 fe2f 	bl	8001ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f95f 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 fa8f 	bl	80013a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e8a:	f000 fa13 	bl	80012b4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000e8e:	f000 f9b5 	bl	80011fc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000e92:	f000 fa5f 	bl	8001354 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000e96:	488e      	ldr	r0, [pc, #568]	; (80010d0 <main+0x258>)
 8000e98:	f002 fb78 	bl	800358c <HAL_TIM_Base_Start>


  lcd_init();
 8000e9c:	f7ff fed7 	bl	8000c4e <lcd_init>
  lcd_put_cur(0, 2);
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff feb4 	bl	8000c10 <lcd_put_cur>
  lcd_send_string("COMPOSTARIO!");
 8000ea8:	488a      	ldr	r0, [pc, #552]	; (80010d4 <main+0x25c>)
 8000eaa:	f7ff ff0d 	bl	8000cc8 <lcd_send_string>
  HAL_Delay(3000);
 8000eae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eb2:	f000 fe77 	bl	8001ba4 <HAL_Delay>
  lcd_clear();
 8000eb6:	f7ff fea1 	bl	8000bfc <lcd_clear>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Leen los ADC
	  ADC_Select_CH1();
 8000eba:	f7ff ffa1 	bl	8000e00 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8000ebe:	4886      	ldr	r0, [pc, #536]	; (80010d8 <main+0x260>)
 8000ec0:	f000 ff6c 	bl	8001d9c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000ec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec8:	4883      	ldr	r0, [pc, #524]	; (80010d8 <main+0x260>)
 8000eca:	f001 f841 	bl	8001f50 <HAL_ADC_PollForConversion>
	  humidity_adc=HAL_ADC_GetValue(&hadc1);
 8000ece:	4882      	ldr	r0, [pc, #520]	; (80010d8 <main+0x260>)
 8000ed0:	f001 f944 	bl	800215c <HAL_ADC_GetValue>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	4b80      	ldr	r3, [pc, #512]	; (80010dc <main+0x264>)
 8000eda:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000edc:	487e      	ldr	r0, [pc, #504]	; (80010d8 <main+0x260>)
 8000ede:	f001 f80b 	bl	8001ef8 <HAL_ADC_Stop>

	  ADC_Select_CH2();
 8000ee2:	f7ff ffab 	bl	8000e3c <ADC_Select_CH2>
	  HAL_ADC_Start(&hadc1);
 8000ee6:	487c      	ldr	r0, [pc, #496]	; (80010d8 <main+0x260>)
 8000ee8:	f000 ff58 	bl	8001d9c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000eec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ef0:	4879      	ldr	r0, [pc, #484]	; (80010d8 <main+0x260>)
 8000ef2:	f001 f82d 	bl	8001f50 <HAL_ADC_PollForConversion>
	  temperature_adc=HAL_ADC_GetValue(&hadc1);
 8000ef6:	4878      	ldr	r0, [pc, #480]	; (80010d8 <main+0x260>)
 8000ef8:	f001 f930 	bl	800215c <HAL_ADC_GetValue>
 8000efc:	4603      	mov	r3, r0
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	4b77      	ldr	r3, [pc, #476]	; (80010e0 <main+0x268>)
 8000f02:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000f04:	4874      	ldr	r0, [pc, #464]	; (80010d8 <main+0x260>)
 8000f06:	f000 fff7 	bl	8001ef8 <HAL_ADC_Stop>
//	  HAL_ADC_Start(&hadc1);
//	  HAL_ADC_PollForConversion(&hadc1, 1000);
//	  sun_adc=HAL_ADC_GetValue(&hadc1);
//	  HAL_ADC_Stop(&hadc1);

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	4875      	ldr	r0, [pc, #468]	; (80010e4 <main+0x26c>)
 8000f0e:	f001 fd2d 	bl	800296c <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d008      	beq.n	8000f2a <main+0xb2>
		  sun_value=1;
 8000f18:	4b73      	ldr	r3, [pc, #460]	; (80010e8 <main+0x270>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
		  strncpy(sun_exposition,"SI",5);
 8000f1e:	2205      	movs	r2, #5
 8000f20:	4972      	ldr	r1, [pc, #456]	; (80010ec <main+0x274>)
 8000f22:	4873      	ldr	r0, [pc, #460]	; (80010f0 <main+0x278>)
 8000f24:	f003 fc00 	bl	8004728 <strncpy>
 8000f28:	e007      	b.n	8000f3a <main+0xc2>

	  }
	  else{
		  sun_value=0;
 8000f2a:	4b6f      	ldr	r3, [pc, #444]	; (80010e8 <main+0x270>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
		  strncpy(sun_exposition,"NO",5);
 8000f30:	2205      	movs	r2, #5
 8000f32:	4970      	ldr	r1, [pc, #448]	; (80010f4 <main+0x27c>)
 8000f34:	486e      	ldr	r0, [pc, #440]	; (80010f0 <main+0x278>)
 8000f36:	f003 fbf7 	bl	8004728 <strncpy>
	  }



	  //Lee el Ultrasonido
	  distance=measure_distance();
 8000f3a:	f7ff fedd 	bl	8000cf8 <measure_distance>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b6d      	ldr	r3, [pc, #436]	; (80010f8 <main+0x280>)
 8000f44:	801a      	strh	r2, [r3, #0]
	  volume=calculate_volume(distance,1);
 8000f46:	4b6c      	ldr	r3, [pc, #432]	; (80010f8 <main+0x280>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fce3 	bl	8001918 <calculate_volume>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <main+0x284>)
 8000f58:	701a      	strb	r2, [r3, #0]

	  //Convertir valores de adc a porcentaje de humedad
	  humidity_value = adc_to_hum(humidity_adc);
 8000f5a:	4b60      	ldr	r3, [pc, #384]	; (80010dc <main+0x264>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fc62 	bl	8001828 <adc_to_hum>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b65      	ldr	r3, [pc, #404]	; (8001100 <main+0x288>)
 8000f6a:	701a      	strb	r2, [r3, #0]

	  //Convertir valores de adc a temperatura
	  temperature_value = adc_to_temp(temperature_adc);
 8000f6c:	4b5c      	ldr	r3, [pc, #368]	; (80010e0 <main+0x268>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fc8d 	bl	8001890 <adc_to_temp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b62      	ldr	r3, [pc, #392]	; (8001104 <main+0x28c>)
 8000f7c:	701a      	strb	r2, [r3, #0]

	  //valores int a string
	  sprintf(vol,"%u",volume);
 8000f7e:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <main+0x284>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	4960      	ldr	r1, [pc, #384]	; (8001108 <main+0x290>)
 8000f86:	4861      	ldr	r0, [pc, #388]	; (800110c <main+0x294>)
 8000f88:	f003 fbae 	bl	80046e8 <siprintf>
	  sprintf(hum,"%u",humidity_value);
 8000f8c:	4b5c      	ldr	r3, [pc, #368]	; (8001100 <main+0x288>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	495d      	ldr	r1, [pc, #372]	; (8001108 <main+0x290>)
 8000f94:	485e      	ldr	r0, [pc, #376]	; (8001110 <main+0x298>)
 8000f96:	f003 fba7 	bl	80046e8 <siprintf>
	  sprintf(temp,"%u",temperature_value);
 8000f9a:	4b5a      	ldr	r3, [pc, #360]	; (8001104 <main+0x28c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4959      	ldr	r1, [pc, #356]	; (8001108 <main+0x290>)
 8000fa2:	485c      	ldr	r0, [pc, #368]	; (8001114 <main+0x29c>)
 8000fa4:	f003 fba0 	bl	80046e8 <siprintf>
	  //sprintf(sun_exposition, "%u",sun_adc);
	  sprintf(msg, "%u,%u,%u,%u\r\n",volume, humidity_value, temperature_value, sun_value);
 8000fa8:	4b54      	ldr	r3, [pc, #336]	; (80010fc <main+0x284>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4b54      	ldr	r3, [pc, #336]	; (8001100 <main+0x288>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	4b53      	ldr	r3, [pc, #332]	; (8001104 <main+0x28c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b4b      	ldr	r3, [pc, #300]	; (80010e8 <main+0x270>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	9200      	str	r2, [sp, #0]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	4954      	ldr	r1, [pc, #336]	; (8001118 <main+0x2a0>)
 8000fc8:	4854      	ldr	r0, [pc, #336]	; (800111c <main+0x2a4>)
 8000fca:	f003 fb8d 	bl	80046e8 <siprintf>



	  // Imprimo en pantalla el volumen libre ocupado de la compostera
	  lcd_put_cur(0, 0);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fe1d 	bl	8000c10 <lcd_put_cur>
	  lcd_send_string("V:");
 8000fd6:	4852      	ldr	r0, [pc, #328]	; (8001120 <main+0x2a8>)
 8000fd8:	f7ff fe76 	bl	8000cc8 <lcd_send_string>
	  lcd_put_cur(0, 2);
 8000fdc:	2102      	movs	r1, #2
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fe16 	bl	8000c10 <lcd_put_cur>
	  lcd_send_string(vol);
 8000fe4:	4849      	ldr	r0, [pc, #292]	; (800110c <main+0x294>)
 8000fe6:	f7ff fe6f 	bl	8000cc8 <lcd_send_string>
	  lcd_put_cur(0,5);
 8000fea:	2105      	movs	r1, #5
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff fe0f 	bl	8000c10 <lcd_put_cur>
	  lcd_send_string("%");
 8000ff2:	484c      	ldr	r0, [pc, #304]	; (8001124 <main+0x2ac>)
 8000ff4:	f7ff fe68 	bl	8000cc8 <lcd_send_string>

	  // Imprimo en pantalla la humedad  de la compostera
	  lcd_put_cur(0,8);
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff fe08 	bl	8000c10 <lcd_put_cur>
	  lcd_send_string("H:");
 8001000:	4849      	ldr	r0, [pc, #292]	; (8001128 <main+0x2b0>)
 8001002:	f7ff fe61 	bl	8000cc8 <lcd_send_string>
	  lcd_put_cur(0,10);
 8001006:	210a      	movs	r1, #10
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff fe01 	bl	8000c10 <lcd_put_cur>
	  lcd_send_string(hum);
 800100e:	4840      	ldr	r0, [pc, #256]	; (8001110 <main+0x298>)
 8001010:	f7ff fe5a 	bl	8000cc8 <lcd_send_string>
	  lcd_put_cur(0,13);
 8001014:	210d      	movs	r1, #13
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff fdfa 	bl	8000c10 <lcd_put_cur>
	  lcd_send_string("%");
 800101c:	4841      	ldr	r0, [pc, #260]	; (8001124 <main+0x2ac>)
 800101e:	f7ff fe53 	bl	8000cc8 <lcd_send_string>

	  // Imprimo en pantalla la temperatura  de la compostera
	  lcd_put_cur(1, 0);
 8001022:	2100      	movs	r1, #0
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fdf3 	bl	8000c10 <lcd_put_cur>
	  lcd_send_string("T:");
 800102a:	4840      	ldr	r0, [pc, #256]	; (800112c <main+0x2b4>)
 800102c:	f7ff fe4c 	bl	8000cc8 <lcd_send_string>
	  lcd_put_cur(1, 2);
 8001030:	2102      	movs	r1, #2
 8001032:	2001      	movs	r0, #1
 8001034:	f7ff fdec 	bl	8000c10 <lcd_put_cur>
	  lcd_send_string(temp);
 8001038:	4836      	ldr	r0, [pc, #216]	; (8001114 <main+0x29c>)
 800103a:	f7ff fe45 	bl	8000cc8 <lcd_send_string>
	  lcd_put_cur(1, 5);
 800103e:	2105      	movs	r1, #5
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff fde5 	bl	8000c10 <lcd_put_cur>
	  lcd_send_string("C");
 8001046:	483a      	ldr	r0, [pc, #232]	; (8001130 <main+0x2b8>)
 8001048:	f7ff fe3e 	bl	8000cc8 <lcd_send_string>

	  // Imprimo en pantalla la exposicion al sol de la compostera
	  lcd_put_cur(1, 8);
 800104c:	2108      	movs	r1, #8
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff fdde 	bl	8000c10 <lcd_put_cur>
	  lcd_send_string("S:");
 8001054:	4837      	ldr	r0, [pc, #220]	; (8001134 <main+0x2bc>)
 8001056:	f7ff fe37 	bl	8000cc8 <lcd_send_string>
	  lcd_put_cur(1, 10);
 800105a:	210a      	movs	r1, #10
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fdd7 	bl	8000c10 <lcd_put_cur>
	  lcd_send_string(sun_exposition);
 8001062:	4823      	ldr	r0, [pc, #140]	; (80010f0 <main+0x278>)
 8001064:	f7ff fe30 	bl	8000cc8 <lcd_send_string>

	  HAL_Delay(5000);
 8001068:	f241 3088 	movw	r0, #5000	; 0x1388
 800106c:	f000 fd9a 	bl	8001ba4 <HAL_Delay>
	  //Envío por UART
 	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 300);
 8001070:	482a      	ldr	r0, [pc, #168]	; (800111c <main+0x2a4>)
 8001072:	f7ff f86d 	bl	8000150 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800107e:	4927      	ldr	r1, [pc, #156]	; (800111c <main+0x2a4>)
 8001080:	482d      	ldr	r0, [pc, #180]	; (8001138 <main+0x2c0>)
 8001082:	f002 fd34 	bl	8003aee <HAL_UART_Transmit>
 	  //HAL_UART_Transmit(&huart1,(uint8_t*)AT, strlen(AT), 300);

	  //Chequeo que los valores esten dentro de los limites
	  temp_t=check_temperature(temperature_value);
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <main+0x28c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fc6c 	bl	8001968 <check_temperature>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <main+0x2c4>)
 8001096:	701a      	strb	r2, [r3, #0]
	  hum_t=check_humidity(humidity_value);
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <main+0x288>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fc7a 	bl	8001996 <check_humidity>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <main+0x2c8>)
 80010a8:	701a      	strb	r2, [r3, #0]

	  //Si hay valores fuera de los limites, imprimo
	  if(temp_t !=TEMP_OK || hum_t!=HUM_OK){
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <main+0x2c4>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <main+0x242>
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <main+0x2c8>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <main+0x252>
		  print_error_msg(temp_t,hum_t);
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <main+0x2c4>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4a20      	ldr	r2, [pc, #128]	; (8001140 <main+0x2c8>)
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fc7d 	bl	80019c4 <print_error_msg>
	  }
	  lcd_clear();
 80010ca:	f7ff fd97 	bl	8000bfc <lcd_clear>
	  ADC_Select_CH1();
 80010ce:	e6f4      	b.n	8000eba <main+0x42>
 80010d0:	20000238 	.word	0x20000238
 80010d4:	08006c18 	.word	0x08006c18
 80010d8:	20000208 	.word	0x20000208
 80010dc:	200002c8 	.word	0x200002c8
 80010e0:	200002ca 	.word	0x200002ca
 80010e4:	40010800 	.word	0x40010800
 80010e8:	200002ce 	.word	0x200002ce
 80010ec:	08006c28 	.word	0x08006c28
 80010f0:	200002e8 	.word	0x200002e8
 80010f4:	08006c2c 	.word	0x08006c2c
 80010f8:	200002c4 	.word	0x200002c4
 80010fc:	200002c6 	.word	0x200002c6
 8001100:	200002cc 	.word	0x200002cc
 8001104:	200002cd 	.word	0x200002cd
 8001108:	08006c30 	.word	0x08006c30
 800110c:	200002d0 	.word	0x200002d0
 8001110:	200002e0 	.word	0x200002e0
 8001114:	200002d8 	.word	0x200002d8
 8001118:	08006c34 	.word	0x08006c34
 800111c:	200002f0 	.word	0x200002f0
 8001120:	08006c44 	.word	0x08006c44
 8001124:	08006c48 	.word	0x08006c48
 8001128:	08006c4c 	.word	0x08006c4c
 800112c:	08006c50 	.word	0x08006c50
 8001130:	08006c54 	.word	0x08006c54
 8001134:	08006c58 	.word	0x08006c58
 8001138:	20000280 	.word	0x20000280
 800113c:	20000354 	.word	0x20000354
 8001140:	20000355 	.word	0x20000355

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	; 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	2228      	movs	r2, #40	; 0x28
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fe60 	bl	8003e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001182:	2301      	movs	r3, #1
 8001184:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001186:	2302      	movs	r3, #2
 8001188:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001190:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001194:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fc16 	bl	80029cc <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011a6:	f000 f971 	bl	800148c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2102      	movs	r1, #2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fe82 	bl	8002ed0 <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011d2:	f000 f95b 	bl	800148c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011d6:	2302      	movs	r3, #2
 80011d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 f80c 	bl	8003200 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011ee:	f000 f94d 	bl	800148c <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3750      	adds	r7, #80	; 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <MX_ADC1_Init+0xb0>)
 800120e:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <MX_ADC1_Init+0xb4>)
 8001210:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_ADC1_Init+0xb0>)
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_ADC1_Init+0xb0>)
 800121c:	2201      	movs	r2, #1
 800121e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_ADC1_Init+0xb0>)
 8001222:	2200      	movs	r2, #0
 8001224:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_ADC1_Init+0xb0>)
 8001228:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800122c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_ADC1_Init+0xb0>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_ADC1_Init+0xb0>)
 8001236:	2203      	movs	r2, #3
 8001238:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800123a:	481c      	ldr	r0, [pc, #112]	; (80012ac <MX_ADC1_Init+0xb0>)
 800123c:	f000 fcd6 	bl	8001bec <HAL_ADC_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001246:	f000 f921 	bl	800148c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800124a:	2301      	movs	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800124e:	2301      	movs	r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4814      	ldr	r0, [pc, #80]	; (80012ac <MX_ADC1_Init+0xb0>)
 800125c:	f000 ff8a 	bl	8002174 <HAL_ADC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 f911 	bl	800148c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800126a:	2302      	movs	r3, #2
 800126c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800126e:	2302      	movs	r3, #2
 8001270:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_ADC1_Init+0xb0>)
 8001278:	f000 ff7c 	bl	8002174 <HAL_ADC_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001282:	f000 f903 	bl	800148c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001286:	2303      	movs	r3, #3
 8001288:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800128a:	2303      	movs	r3, #3
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <MX_ADC1_Init+0xb0>)
 8001294:	f000 ff6e 	bl	8002174 <HAL_ADC_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800129e:	f000 f8f5 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000208 	.word	0x20000208
 80012b0:	40012400 	.word	0x40012400

080012b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_TIM1_Init+0x98>)
 80012d2:	4a1f      	ldr	r2, [pc, #124]	; (8001350 <MX_TIM1_Init+0x9c>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_TIM1_Init+0x98>)
 80012d8:	2247      	movs	r2, #71	; 0x47
 80012da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_TIM1_Init+0x98>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_TIM1_Init+0x98>)
 80012e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_TIM1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_TIM1_Init+0x98>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_TIM1_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012fc:	4813      	ldr	r0, [pc, #76]	; (800134c <MX_TIM1_Init+0x98>)
 80012fe:	f002 f8f5 	bl	80034ec <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001308:	f000 f8c0 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_TIM1_Init+0x98>)
 800131a:	f002 f981 	bl	8003620 <HAL_TIM_ConfigClockSource>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001324:	f000 f8b2 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_TIM1_Init+0x98>)
 8001336:	f002 fb2f 	bl	8003998 <HAL_TIMEx_MasterConfigSynchronization>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001340:	f000 f8a4 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000238 	.word	0x20000238
 8001350:	40012c00 	.word	0x40012c00

08001354 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_USART1_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART1_UART_Init+0x4c>)
 800138c:	f002 fb62 	bl	8003a54 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f000 f879 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000280 	.word	0x20000280
 80013a4:	40013800 	.word	0x40013800

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013bc:	4b30      	ldr	r3, [pc, #192]	; (8001480 <MX_GPIO_Init+0xd8>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <MX_GPIO_Init+0xd8>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <MX_GPIO_Init+0xd8>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0310 	and.w	r3, r3, #16
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_GPIO_Init+0xd8>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a29      	ldr	r2, [pc, #164]	; (8001480 <MX_GPIO_Init+0xd8>)
 80013da:	f043 0320 	orr.w	r3, r3, #32
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_GPIO_Init+0xd8>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_GPIO_Init+0xd8>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a23      	ldr	r2, [pc, #140]	; (8001480 <MX_GPIO_Init+0xd8>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_GPIO_Init+0xd8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_GPIO_Init+0xd8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <MX_GPIO_Init+0xd8>)
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_GPIO_Init+0xd8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <MX_GPIO_Init+0xdc>)
 8001424:	f001 fab9 	bl	800299a <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	4813      	ldr	r0, [pc, #76]	; (8001488 <MX_GPIO_Init+0xe0>)
 800143c:	f001 f912 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001440:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8001444:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2302      	movs	r3, #2
 8001450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4619      	mov	r1, r3
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <MX_GPIO_Init+0xdc>)
 800145a:	f001 f903 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800145e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4619      	mov	r1, r3
 8001472:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_GPIO_Init+0xdc>)
 8001474:	f001 f8f6 	bl	8002664 <HAL_GPIO_Init>

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	40010c00 	.word	0x40010c00
 8001488:	40010800 	.word	0x40010800

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_MspInit+0x5c>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_MspInit+0x5c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6193      	str	r3, [r2, #24]
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_MspInit+0x5c>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_MspInit+0x5c>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_MspInit+0x5c>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_MspInit+0x5c>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_MspInit+0x60>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_MspInit+0x60>)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000

080014fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_ADC_MspInit+0x6c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d121      	bne.n	8001560 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_ADC_MspInit+0x70>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <HAL_ADC_MspInit+0x70>)
 8001522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_ADC_MspInit+0x70>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_ADC_MspInit+0x70>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a0c      	ldr	r2, [pc, #48]	; (800156c <HAL_ADC_MspInit+0x70>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_ADC_MspInit+0x70>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800154c:	230e      	movs	r3, #14
 800154e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001550:	2303      	movs	r3, #3
 8001552:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_ADC_MspInit+0x74>)
 800155c:	f001 f882 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40012400 	.word	0x40012400
 800156c:	40021000 	.word	0x40021000
 8001570:	40010800 	.word	0x40010800

08001574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_TIM_Base_MspInit+0x34>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10b      	bne.n	800159e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_TIM_Base_MspInit+0x38>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_TIM_Base_MspInit+0x38>)
 800158c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001590:	6193      	str	r3, [r2, #24]
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_TIM_Base_MspInit+0x38>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	40012c00 	.word	0x40012c00
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1c      	ldr	r2, [pc, #112]	; (800163c <HAL_UART_MspInit+0x8c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d131      	bne.n	8001634 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_UART_MspInit+0x90>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a1a      	ldr	r2, [pc, #104]	; (8001640 <HAL_UART_MspInit+0x90>)
 80015d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_UART_MspInit+0x90>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_MspInit+0x90>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_UART_MspInit+0x90>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_UART_MspInit+0x90>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	4619      	mov	r1, r3
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <HAL_UART_MspInit+0x94>)
 8001616:	f001 f825 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800161a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	4619      	mov	r1, r3
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_UART_MspInit+0x94>)
 8001630:	f001 f818 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3720      	adds	r7, #32
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40013800 	.word	0x40013800
 8001640:	40021000 	.word	0x40021000
 8001644:	40010800 	.word	0x40010800

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <HardFault_Handler+0x4>

0800165a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <MemManage_Handler+0x4>

08001660 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <BusFault_Handler+0x4>

08001666 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <UsageFault_Handler+0x4>

0800166c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001694:	f000 fa6a 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
	return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <_kill>:

int _kill(int pid, int sig)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016b4:	f002 fb86 	bl	8003dc4 <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2216      	movs	r2, #22
 80016bc:	601a      	str	r2, [r3, #0]
	return -1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_exit>:

void _exit (int status)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016d2:	f04f 31ff 	mov.w	r1, #4294967295
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffe7 	bl	80016aa <_kill>
	while (1) {}		/* Make sure we hang here */
 80016dc:	e7fe      	b.n	80016dc <_exit+0x12>

080016de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e00a      	b.n	8001706 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016f0:	f3af 8000 	nop.w
 80016f4:	4601      	mov	r1, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	60ba      	str	r2, [r7, #8]
 80016fc:	b2ca      	uxtb	r2, r1
 80016fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	dbf0      	blt.n	80016f0 <_read+0x12>
	}

return len;
 800170e:	687b      	ldr	r3, [r7, #4]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e009      	b.n	800173e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	60ba      	str	r2, [r7, #8]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbf1      	blt.n	800172a <_write+0x12>
	}
	return len;
 8001746:	687b      	ldr	r3, [r7, #4]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_close>:

int _close(int file)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	return -1;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001776:	605a      	str	r2, [r3, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <_isatty>:

int _isatty(int file)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	return 1;
 800178c:	2301      	movs	r3, #1
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
	return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f002 faf0 	bl	8003dc4 <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20005000 	.word	0x20005000
 8001810:	00000400 	.word	0x00000400
 8001814:	20000358 	.word	0x20000358
 8001818:	20000370 	.word	0x20000370

0800181c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <adc_to_hum>:

uint8_t map(uint16_t au16_IN, uint16_t au16_INmin, uint16_t au16_INmax, uint16_t au16_OUTmin, uint16_t au16_OUTmax){
    return ((((au16_IN - au16_INmin)*(au16_OUTmax - au16_OUTmin))/(au16_INmax - au16_INmin)) + au16_OUTmin);
}

uint8_t adc_to_hum(uint16_t hum){
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
	uint8_t var;
	var=-0.042281*hum+169.13;
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fde5 	bl	8000404 <__aeabi_i2d>
 800183a:	a311      	add	r3, pc, #68	; (adr r3, 8001880 <adc_to_hum+0x58>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe fe4a 	bl	80004d8 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	a30e      	add	r3, pc, #56	; (adr r3, 8001888 <adc_to_hum+0x60>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fc8b 	bl	800016c <__adddf3>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f913 	bl	8000a88 <__aeabi_d2uiz>
 8001862:	4603      	mov	r3, r0
 8001864:	73fb      	strb	r3, [r7, #15]
	if(var>100){
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	2b64      	cmp	r3, #100	; 0x64
 800186a:	d901      	bls.n	8001870 <adc_to_hum+0x48>
		var=100.00;
 800186c:	2364      	movs	r3, #100	; 0x64
 800186e:	73fb      	strb	r3, [r7, #15]
	}
	return var;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	f3af 8000 	nop.w
 8001880:	f07bfe7e 	.word	0xf07bfe7e
 8001884:	bfa5a5da 	.word	0xbfa5a5da
 8001888:	f5c28f5c 	.word	0xf5c28f5c
 800188c:	40652428 	.word	0x40652428

08001890 <adc_to_temp>:
uint8_t adc_to_temp(uint16_t au16_IN){
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
	uint8_t temp;
	temp=(((au16_IN*3.3/4096.0)*100)-27);
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fdb1 	bl	8000404 <__aeabi_i2d>
 80018a2:	a317      	add	r3, pc, #92	; (adr r3, 8001900 <adc_to_temp+0x70>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe fe16 	bl	80004d8 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <adc_to_temp+0x78>)
 80018ba:	f7fe ff37 	bl	800072c <__aeabi_ddiv>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <adc_to_temp+0x7c>)
 80018cc:	f7fe fe04 	bl	80004d8 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <adc_to_temp+0x80>)
 80018de:	f7fe fc43 	bl	8000168 <__aeabi_dsub>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f7ff f8cd 	bl	8000a88 <__aeabi_d2uiz>
 80018ee:	4603      	mov	r3, r0
 80018f0:	73fb      	strb	r3, [r7, #15]
    return temp;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	f3af 8000 	nop.w
 8001900:	66666666 	.word	0x66666666
 8001904:	400a6666 	.word	0x400a6666
 8001908:	40b00000 	.word	0x40b00000
 800190c:	40590000 	.word	0x40590000
 8001910:	403b0000 	.word	0x403b0000
 8001914:	00000000 	.word	0x00000000

08001918 <calculate_volume>:
uint8_t calculate_volume(uint16_t h, uint8_t r){
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	460a      	mov	r2, r1
 8001922:	80fb      	strh	r3, [r7, #6]
 8001924:	4613      	mov	r3, r2
 8001926:	717b      	strb	r3, [r7, #5]
	return (h*r*r*2.14);
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	797a      	ldrb	r2, [r7, #5]
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	797a      	ldrb	r2, [r7, #5]
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fd64 	bl	8000404 <__aeabi_i2d>
 800193c:	a308      	add	r3, pc, #32	; (adr r3, 8001960 <calculate_volume+0x48>)
 800193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001942:	f7fe fdc9 	bl	80004d8 <__aeabi_dmul>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7ff f89b 	bl	8000a88 <__aeabi_d2uiz>
 8001952:	4603      	mov	r3, r0
 8001954:	b2db      	uxtb	r3, r3
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	51eb851f 	.word	0x51eb851f
 8001964:	40011eb8 	.word	0x40011eb8

08001968 <check_temperature>:

TempTypeDef check_temperature(uint8_t temp){
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]

	if(temp>TEMP_MAX){
 8001972:	2246      	movs	r2, #70	; 0x46
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <check_temperature+0x16>
		return OVERTEMPERATURE;
 800197a:	2301      	movs	r3, #1
 800197c:	e006      	b.n	800198c <check_temperature+0x24>
	}
	else if(temp<TEMP_MIN){
 800197e:	2214      	movs	r2, #20
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4293      	cmp	r3, r2
 8001984:	d201      	bcs.n	800198a <check_temperature+0x22>
		return UNDERTEMPERATURE;
 8001986:	2302      	movs	r3, #2
 8001988:	e000      	b.n	800198c <check_temperature+0x24>
	}
	else
		return TEMP_OK;
 800198a:	2300      	movs	r3, #0

}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <check_humidity>:

HUMTypeDef check_humidity(uint8_t hum){
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	71fb      	strb	r3, [r7, #7]

	if(hum>HUM_MAX){
 80019a0:	2250      	movs	r2, #80	; 0x50
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <check_humidity+0x16>
		return OVERHUMIDITY;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e006      	b.n	80019ba <check_humidity+0x24>
	}
	else if(hum<HUM_MIN){
 80019ac:	2228      	movs	r2, #40	; 0x28
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d201      	bcs.n	80019b8 <check_humidity+0x22>
		return UNDERHUMIDITY;
 80019b4:	2302      	movs	r3, #2
 80019b6:	e000      	b.n	80019ba <check_humidity+0x24>
	}
	else
		return HUM_OK;
 80019b8:	2300      	movs	r3, #0

}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <print_error_msg>:

void print_error_msg(TempTypeDef temp, HUMTypeDef hum){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	460a      	mov	r2, r1
 80019ce:	71fb      	strb	r3, [r7, #7]
 80019d0:	4613      	mov	r3, r2
 80019d2:	71bb      	strb	r3, [r7, #6]
	switch(temp){
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d015      	beq.n	8001a06 <print_error_msg+0x42>
 80019da:	2b02      	cmp	r3, #2
 80019dc:	dc24      	bgt.n	8001a28 <print_error_msg+0x64>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d021      	beq.n	8001a26 <print_error_msg+0x62>
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d120      	bne.n	8001a28 <print_error_msg+0x64>
		case OVERTEMPERATURE:
			  lcd_clear();
 80019e6:	f7ff f909 	bl	8000bfc <lcd_clear>
			  lcd_put_cur(0, 0);
 80019ea:	2100      	movs	r1, #0
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff f90f 	bl	8000c10 <lcd_put_cur>
			  lcd_send_string(OVER_TEMP);
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <print_error_msg+0xc0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f966 	bl	8000cc8 <lcd_send_string>
			  HAL_Delay(3000);
 80019fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a00:	f000 f8d0 	bl	8001ba4 <HAL_Delay>
			break;
 8001a04:	e010      	b.n	8001a28 <print_error_msg+0x64>

		case UNDERTEMPERATURE:
			  lcd_clear();
 8001a06:	f7ff f8f9 	bl	8000bfc <lcd_clear>
			  lcd_put_cur(0, 0);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff f8ff 	bl	8000c10 <lcd_put_cur>
			  lcd_send_string(UNDER_TEMP);
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <print_error_msg+0xc4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f956 	bl	8000cc8 <lcd_send_string>
			  HAL_Delay(3000);
 8001a1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a20:	f000 f8c0 	bl	8001ba4 <HAL_Delay>
			break;
 8001a24:	e000      	b.n	8001a28 <print_error_msg+0x64>

		case TEMP_OK:
			break;
 8001a26:	bf00      	nop
	}

	switch(hum){
 8001a28:	79bb      	ldrb	r3, [r7, #6]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d015      	beq.n	8001a5a <print_error_msg+0x96>
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	dc24      	bgt.n	8001a7c <print_error_msg+0xb8>
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d021      	beq.n	8001a7a <print_error_msg+0xb6>
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d120      	bne.n	8001a7c <print_error_msg+0xb8>
		case OVERHUMIDITY:
			  lcd_clear();
 8001a3a:	f7ff f8df 	bl	8000bfc <lcd_clear>
			  lcd_put_cur(0, 0);
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff f8e5 	bl	8000c10 <lcd_put_cur>
			  lcd_send_string(OVER_HUM);
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <print_error_msg+0xc8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f93c 	bl	8000cc8 <lcd_send_string>
			  HAL_Delay(3000);
 8001a50:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a54:	f000 f8a6 	bl	8001ba4 <HAL_Delay>
			break;
 8001a58:	e010      	b.n	8001a7c <print_error_msg+0xb8>

		case UNDERHUMIDITY:
			  lcd_clear();
 8001a5a:	f7ff f8cf 	bl	8000bfc <lcd_clear>
			  lcd_put_cur(0, 0);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff f8d5 	bl	8000c10 <lcd_put_cur>
			  lcd_send_string(UNDER_HUM);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <print_error_msg+0xcc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f92c 	bl	8000cc8 <lcd_send_string>
			  HAL_Delay(3000);
 8001a70:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a74:	f000 f896 	bl	8001ba4 <HAL_Delay>
			break;
 8001a78:	e000      	b.n	8001a7c <print_error_msg+0xb8>

		case HUM_OK:
			break;
 8001a7a:	bf00      	nop
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000004 	.word	0x20000004
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	2000000c 	.word	0x2000000c
 8001a90:	20000010 	.word	0x20000010

08001a94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a94:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a96:	490d      	ldr	r1, [pc, #52]	; (8001acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aac:	4c0a      	ldr	r4, [pc, #40]	; (8001ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aba:	f7ff feaf 	bl	800181c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001abe:	f002 f987 	bl	8003dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ac2:	f7ff f9d9 	bl	8000e78 <main>
  bx lr
 8001ac6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001acc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ad0:	080070bc 	.word	0x080070bc
  ldr r2, =_sbss
 8001ad4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001ad8:	20000370 	.word	0x20000370

08001adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC1_2_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_Init+0x28>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_Init+0x28>)
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af0:	2003      	movs	r0, #3
 8001af2:	f000 fd83 	bl	80025fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af6:	200f      	movs	r0, #15
 8001af8:	f000 f808 	bl	8001b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001afc:	f7ff fccc 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40022000 	.word	0x40022000

08001b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x54>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x58>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fd8d 	bl	800264a <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00e      	b.n	8001b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d80a      	bhi.n	8001b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f000 fd63 	bl	8002612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <HAL_InitTick+0x5c>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000018 	.word	0x20000018
 8001b68:	20000014 	.word	0x20000014

08001b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_IncTick+0x1c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_IncTick+0x20>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <HAL_IncTick+0x20>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000018 	.word	0x20000018
 8001b8c:	2000035c 	.word	0x2000035c

08001b90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <HAL_GetTick+0x10>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	2000035c 	.word	0x2000035c

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffe0 	bl	8001b90 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000018 	.word	0x20000018

08001bec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0be      	b.n	8001d8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fc66 	bl	80014fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fbf1 	bl	8002418 <ADC_ConversionStop_Disable>
 8001c36:	4603      	mov	r3, r0
 8001c38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 8099 	bne.w	8001d7a <HAL_ADC_Init+0x18e>
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 8095 	bne.w	8001d7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c58:	f023 0302 	bic.w	r3, r3, #2
 8001c5c:	f043 0202 	orr.w	r2, r3, #2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7b1b      	ldrb	r3, [r3, #12]
 8001c72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c84:	d003      	beq.n	8001c8e <HAL_ADC_Init+0xa2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d102      	bne.n	8001c94 <HAL_ADC_Init+0xa8>
 8001c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c92:	e000      	b.n	8001c96 <HAL_ADC_Init+0xaa>
 8001c94:	2300      	movs	r3, #0
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7d1b      	ldrb	r3, [r3, #20]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d119      	bne.n	8001cd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7b1b      	ldrb	r3, [r3, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d109      	bne.n	8001cc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	035a      	lsls	r2, r3, #13
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_ADC_Init+0x1a8>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	68b9      	ldr	r1, [r7, #8]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d08:	d003      	beq.n	8001d12 <HAL_ADC_Init+0x126>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d104      	bne.n	8001d1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	051b      	lsls	r3, r3, #20
 8001d1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_ADC_Init+0x1ac>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d10b      	bne.n	8001d58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	f043 0201 	orr.w	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d56:	e018      	b.n	8001d8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	f023 0312 	bic.w	r3, r3, #18
 8001d60:	f043 0210 	orr.w	r2, r3, #16
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d78:	e007      	b.n	8001d8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	f043 0210 	orr.w	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	ffe1f7fd 	.word	0xffe1f7fd
 8001d98:	ff1f0efe 	.word	0xff1f0efe

08001d9c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_Start+0x1a>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e098      	b.n	8001ee8 <HAL_ADC_Start+0x14c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fad0 	bl	8002364 <ADC_Enable>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f040 8087 	bne.w	8001ede <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a41      	ldr	r2, [pc, #260]	; (8001ef0 <HAL_ADC_Start+0x154>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d105      	bne.n	8001dfa <HAL_ADC_Start+0x5e>
 8001dee:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <HAL_ADC_Start+0x158>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d115      	bne.n	8001e26 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d026      	beq.n	8001e62 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e24:	e01d      	b.n	8001e62 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <HAL_ADC_Start+0x158>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_ADC_Start+0xaa>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2b      	ldr	r2, [pc, #172]	; (8001ef0 <HAL_ADC_Start+0x154>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10d      	bne.n	8001e62 <HAL_ADC_Start+0xc6>
 8001e46:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_ADC_Start+0x158>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	f023 0206 	bic.w	r2, r3, #6
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e7a:	e002      	b.n	8001e82 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f06f 0202 	mvn.w	r2, #2
 8001e92:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e9e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ea2:	d113      	bne.n	8001ecc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ea8:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <HAL_ADC_Start+0x154>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d105      	bne.n	8001eba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_ADC_Start+0x158>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d108      	bne.n	8001ecc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	e00c      	b.n	8001ee6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	e003      	b.n	8001ee6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40012800 	.word	0x40012800
 8001ef4:	40012400 	.word	0x40012400

08001ef8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_Stop+0x1a>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e01a      	b.n	8001f48 <HAL_ADC_Stop+0x50>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fa7c 	bl	8002418 <ADC_ConversionStop_Disable>
 8001f20:	4603      	mov	r3, r0
 8001f22:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f66:	f7ff fe13 	bl	8001b90 <HAL_GetTick>
 8001f6a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	f043 0220 	orr.w	r2, r3, #32
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0d3      	b.n	800213a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d131      	bne.n	8002004 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d12a      	bne.n	8002004 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fae:	e021      	b.n	8001ff4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb6:	d01d      	beq.n	8001ff4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_ADC_PollForConversion+0x7e>
 8001fbe:	f7ff fde7 	bl	8001b90 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d212      	bcs.n	8001ff4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10b      	bne.n	8001ff4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f043 0204 	orr.w	r2, r3, #4
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0a2      	b.n	800213a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0d6      	beq.n	8001fb0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002002:	e070      	b.n	80020e6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_ADC_PollForConversion+0x1f4>)
 8002006:	681c      	ldr	r4, [r3, #0]
 8002008:	2002      	movs	r0, #2
 800200a:	f001 f9af 	bl	800336c <HAL_RCCEx_GetPeriphCLKFreq>
 800200e:	4603      	mov	r3, r0
 8002010:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6919      	ldr	r1, [r3, #16]
 800201a:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <HAL_ADC_PollForConversion+0x1f8>)
 800201c:	400b      	ands	r3, r1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d118      	bne.n	8002054 <HAL_ADC_PollForConversion+0x104>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68d9      	ldr	r1, [r3, #12]
 8002028:	4b48      	ldr	r3, [pc, #288]	; (800214c <HAL_ADC_PollForConversion+0x1fc>)
 800202a:	400b      	ands	r3, r1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d111      	bne.n	8002054 <HAL_ADC_PollForConversion+0x104>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6919      	ldr	r1, [r3, #16]
 8002036:	4b46      	ldr	r3, [pc, #280]	; (8002150 <HAL_ADC_PollForConversion+0x200>)
 8002038:	400b      	ands	r3, r1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d108      	bne.n	8002050 <HAL_ADC_PollForConversion+0x100>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68d9      	ldr	r1, [r3, #12]
 8002044:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_ADC_PollForConversion+0x204>)
 8002046:	400b      	ands	r3, r1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_ADC_PollForConversion+0x100>
 800204c:	2314      	movs	r3, #20
 800204e:	e020      	b.n	8002092 <HAL_ADC_PollForConversion+0x142>
 8002050:	2329      	movs	r3, #41	; 0x29
 8002052:	e01e      	b.n	8002092 <HAL_ADC_PollForConversion+0x142>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6919      	ldr	r1, [r3, #16]
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_ADC_PollForConversion+0x200>)
 800205c:	400b      	ands	r3, r1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_ADC_PollForConversion+0x120>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68d9      	ldr	r1, [r3, #12]
 8002068:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <HAL_ADC_PollForConversion+0x204>)
 800206a:	400b      	ands	r3, r1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <HAL_ADC_PollForConversion+0x13c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6919      	ldr	r1, [r3, #16]
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_ADC_PollForConversion+0x208>)
 8002078:	400b      	ands	r3, r1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d108      	bne.n	8002090 <HAL_ADC_PollForConversion+0x140>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68d9      	ldr	r1, [r3, #12]
 8002084:	4b34      	ldr	r3, [pc, #208]	; (8002158 <HAL_ADC_PollForConversion+0x208>)
 8002086:	400b      	ands	r3, r1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_ADC_PollForConversion+0x140>
 800208c:	2354      	movs	r3, #84	; 0x54
 800208e:	e000      	b.n	8002092 <HAL_ADC_PollForConversion+0x142>
 8002090:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002098:	e021      	b.n	80020de <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d01a      	beq.n	80020d8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <HAL_ADC_PollForConversion+0x168>
 80020a8:	f7ff fd72 	bl	8001b90 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d20f      	bcs.n	80020d8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d90b      	bls.n	80020d8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	f043 0204 	orr.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e030      	b.n	800213a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3301      	adds	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d8d9      	bhi.n	800209a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f06f 0212 	mvn.w	r2, #18
 80020ee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002106:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800210a:	d115      	bne.n	8002138 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002110:	2b00      	cmp	r3, #0
 8002112:	d111      	bne.n	8002138 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	f043 0201 	orr.w	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd90      	pop	{r4, r7, pc}
 8002142:	bf00      	nop
 8002144:	20000000 	.word	0x20000000
 8002148:	24924924 	.word	0x24924924
 800214c:	00924924 	.word	0x00924924
 8002150:	12492492 	.word	0x12492492
 8002154:	00492492 	.word	0x00492492
 8002158:	00249249 	.word	0x00249249

0800215c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x20>
 8002190:	2302      	movs	r3, #2
 8002192:	e0dc      	b.n	800234e <HAL_ADC_ConfigChannel+0x1da>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b06      	cmp	r3, #6
 80021a2:	d81c      	bhi.n	80021de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	3b05      	subs	r3, #5
 80021b6:	221f      	movs	r2, #31
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	4019      	ands	r1, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	3b05      	subs	r3, #5
 80021d0:	fa00 f203 	lsl.w	r2, r0, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	635a      	str	r2, [r3, #52]	; 0x34
 80021dc:	e03c      	b.n	8002258 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d81c      	bhi.n	8002220 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	3b23      	subs	r3, #35	; 0x23
 80021f8:	221f      	movs	r2, #31
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	4019      	ands	r1, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b23      	subs	r3, #35	; 0x23
 8002212:	fa00 f203 	lsl.w	r2, r0, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
 800221e:	e01b      	b.n	8002258 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	3b41      	subs	r3, #65	; 0x41
 8002232:	221f      	movs	r2, #31
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	4019      	ands	r1, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b41      	subs	r3, #65	; 0x41
 800224c:	fa00 f203 	lsl.w	r2, r0, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b09      	cmp	r3, #9
 800225e:	d91c      	bls.n	800229a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68d9      	ldr	r1, [r3, #12]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	3b1e      	subs	r3, #30
 8002272:	2207      	movs	r2, #7
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	4019      	ands	r1, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6898      	ldr	r0, [r3, #8]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	3b1e      	subs	r3, #30
 800228c:	fa00 f203 	lsl.w	r2, r0, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	60da      	str	r2, [r3, #12]
 8002298:	e019      	b.n	80022ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6919      	ldr	r1, [r3, #16]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	2207      	movs	r2, #7
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4019      	ands	r1, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	6898      	ldr	r0, [r3, #8]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	fa00 f203 	lsl.w	r2, r0, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d003      	beq.n	80022de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022da:	2b11      	cmp	r3, #17
 80022dc:	d132      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <HAL_ADC_ConfigChannel+0x1e4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d125      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d126      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002304:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b10      	cmp	r3, #16
 800230c:	d11a      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_ADC_ConfigChannel+0x1e8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_ADC_ConfigChannel+0x1ec>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	0c9a      	lsrs	r2, r3, #18
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002324:	e002      	b.n	800232c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3b01      	subs	r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f9      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x1b2>
 8002332:	e007      	b.n	8002344 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f043 0220 	orr.w	r2, r3, #32
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40012400 	.word	0x40012400
 800235c:	20000000 	.word	0x20000000
 8002360:	431bde83 	.word	0x431bde83

08002364 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d040      	beq.n	8002404 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002392:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <ADC_Enable+0xac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <ADC_Enable+0xb0>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	0c9b      	lsrs	r3, r3, #18
 800239e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023a0:	e002      	b.n	80023a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f9      	bne.n	80023a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023ae:	f7ff fbef 	bl	8001b90 <HAL_GetTick>
 80023b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023b4:	e01f      	b.n	80023f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023b6:	f7ff fbeb 	bl	8001b90 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d918      	bls.n	80023f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d011      	beq.n	80023f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	f043 0210 	orr.w	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e007      	b.n	8002406 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d1d8      	bne.n	80023b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000000 	.word	0x20000000
 8002414:	431bde83 	.word	0x431bde83

08002418 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d12e      	bne.n	8002490 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002442:	f7ff fba5 	bl	8001b90 <HAL_GetTick>
 8002446:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002448:	e01b      	b.n	8002482 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800244a:	f7ff fba1 	bl	8001b90 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d914      	bls.n	8002482 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10d      	bne.n	8002482 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	f043 0210 	orr.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e007      	b.n	8002492 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d0dc      	beq.n	800244a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b8:	4013      	ands	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ce:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <__NVIC_GetPriorityGrouping+0x18>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0307 	and.w	r3, r3, #7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	db0a      	blt.n	800252a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	490c      	ldr	r1, [pc, #48]	; (800254c <__NVIC_SetPriority+0x4c>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	0112      	lsls	r2, r2, #4
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	440b      	add	r3, r1
 8002524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002528:	e00a      	b.n	8002540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4908      	ldr	r1, [pc, #32]	; (8002550 <__NVIC_SetPriority+0x50>)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	3b04      	subs	r3, #4
 8002538:	0112      	lsls	r2, r2, #4
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	440b      	add	r3, r1
 800253e:	761a      	strb	r2, [r3, #24]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000e100 	.word	0xe000e100
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f1c3 0307 	rsb	r3, r3, #7
 800256e:	2b04      	cmp	r3, #4
 8002570:	bf28      	it	cs
 8002572:	2304      	movcs	r3, #4
 8002574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3304      	adds	r3, #4
 800257a:	2b06      	cmp	r3, #6
 800257c:	d902      	bls.n	8002584 <NVIC_EncodePriority+0x30>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3b03      	subs	r3, #3
 8002582:	e000      	b.n	8002586 <NVIC_EncodePriority+0x32>
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	401a      	ands	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	43d9      	mvns	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	4313      	orrs	r3, r2
         );
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3724      	adds	r7, #36	; 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c8:	d301      	bcc.n	80025ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00f      	b.n	80025ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <SysTick_Config+0x40>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d6:	210f      	movs	r1, #15
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f7ff ff90 	bl	8002500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <SysTick_Config+0x40>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e6:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <SysTick_Config+0x40>)
 80025e8:	2207      	movs	r2, #7
 80025ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	e000e010 	.word	0xe000e010

080025fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff49 	bl	800249c <__NVIC_SetPriorityGrouping>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002624:	f7ff ff5e 	bl	80024e4 <__NVIC_GetPriorityGrouping>
 8002628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f7ff ff90 	bl	8002554 <NVIC_EncodePriority>
 8002634:	4602      	mov	r2, r0
 8002636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff5f 	bl	8002500 <__NVIC_SetPriority>
}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ffb0 	bl	80025b8 <SysTick_Config>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b08b      	sub	sp, #44	; 0x2c
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002676:	e169      	b.n	800294c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002678:	2201      	movs	r2, #1
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	429a      	cmp	r2, r3
 8002692:	f040 8158 	bne.w	8002946 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a9a      	ldr	r2, [pc, #616]	; (8002904 <HAL_GPIO_Init+0x2a0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d05e      	beq.n	800275e <HAL_GPIO_Init+0xfa>
 80026a0:	4a98      	ldr	r2, [pc, #608]	; (8002904 <HAL_GPIO_Init+0x2a0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d875      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026a6:	4a98      	ldr	r2, [pc, #608]	; (8002908 <HAL_GPIO_Init+0x2a4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d058      	beq.n	800275e <HAL_GPIO_Init+0xfa>
 80026ac:	4a96      	ldr	r2, [pc, #600]	; (8002908 <HAL_GPIO_Init+0x2a4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d86f      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026b2:	4a96      	ldr	r2, [pc, #600]	; (800290c <HAL_GPIO_Init+0x2a8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d052      	beq.n	800275e <HAL_GPIO_Init+0xfa>
 80026b8:	4a94      	ldr	r2, [pc, #592]	; (800290c <HAL_GPIO_Init+0x2a8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d869      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026be:	4a94      	ldr	r2, [pc, #592]	; (8002910 <HAL_GPIO_Init+0x2ac>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d04c      	beq.n	800275e <HAL_GPIO_Init+0xfa>
 80026c4:	4a92      	ldr	r2, [pc, #584]	; (8002910 <HAL_GPIO_Init+0x2ac>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d863      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026ca:	4a92      	ldr	r2, [pc, #584]	; (8002914 <HAL_GPIO_Init+0x2b0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d046      	beq.n	800275e <HAL_GPIO_Init+0xfa>
 80026d0:	4a90      	ldr	r2, [pc, #576]	; (8002914 <HAL_GPIO_Init+0x2b0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d85d      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026d6:	2b12      	cmp	r3, #18
 80026d8:	d82a      	bhi.n	8002730 <HAL_GPIO_Init+0xcc>
 80026da:	2b12      	cmp	r3, #18
 80026dc:	d859      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026de:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <HAL_GPIO_Init+0x80>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	0800275f 	.word	0x0800275f
 80026e8:	08002739 	.word	0x08002739
 80026ec:	0800274b 	.word	0x0800274b
 80026f0:	0800278d 	.word	0x0800278d
 80026f4:	08002793 	.word	0x08002793
 80026f8:	08002793 	.word	0x08002793
 80026fc:	08002793 	.word	0x08002793
 8002700:	08002793 	.word	0x08002793
 8002704:	08002793 	.word	0x08002793
 8002708:	08002793 	.word	0x08002793
 800270c:	08002793 	.word	0x08002793
 8002710:	08002793 	.word	0x08002793
 8002714:	08002793 	.word	0x08002793
 8002718:	08002793 	.word	0x08002793
 800271c:	08002793 	.word	0x08002793
 8002720:	08002793 	.word	0x08002793
 8002724:	08002793 	.word	0x08002793
 8002728:	08002741 	.word	0x08002741
 800272c:	08002755 	.word	0x08002755
 8002730:	4a79      	ldr	r2, [pc, #484]	; (8002918 <HAL_GPIO_Init+0x2b4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002736:	e02c      	b.n	8002792 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	623b      	str	r3, [r7, #32]
          break;
 800273e:	e029      	b.n	8002794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	3304      	adds	r3, #4
 8002746:	623b      	str	r3, [r7, #32]
          break;
 8002748:	e024      	b.n	8002794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	3308      	adds	r3, #8
 8002750:	623b      	str	r3, [r7, #32]
          break;
 8002752:	e01f      	b.n	8002794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	330c      	adds	r3, #12
 800275a:	623b      	str	r3, [r7, #32]
          break;
 800275c:	e01a      	b.n	8002794 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002766:	2304      	movs	r3, #4
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e013      	b.n	8002794 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d105      	bne.n	8002780 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002774:	2308      	movs	r3, #8
 8002776:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	611a      	str	r2, [r3, #16]
          break;
 800277e:	e009      	b.n	8002794 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002780:	2308      	movs	r3, #8
 8002782:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	615a      	str	r2, [r3, #20]
          break;
 800278a:	e003      	b.n	8002794 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
          break;
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x130>
          break;
 8002792:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2bff      	cmp	r3, #255	; 0xff
 8002798:	d801      	bhi.n	800279e <HAL_GPIO_Init+0x13a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	e001      	b.n	80027a2 <HAL_GPIO_Init+0x13e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3304      	adds	r3, #4
 80027a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2bff      	cmp	r3, #255	; 0xff
 80027a8:	d802      	bhi.n	80027b0 <HAL_GPIO_Init+0x14c>
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	e002      	b.n	80027b6 <HAL_GPIO_Init+0x152>
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	3b08      	subs	r3, #8
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	210f      	movs	r1, #15
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	fa01 f303 	lsl.w	r3, r1, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	401a      	ands	r2, r3
 80027c8:	6a39      	ldr	r1, [r7, #32]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	431a      	orrs	r2, r3
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80b1 	beq.w	8002946 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027e4:	4b4d      	ldr	r3, [pc, #308]	; (800291c <HAL_GPIO_Init+0x2b8>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a4c      	ldr	r2, [pc, #304]	; (800291c <HAL_GPIO_Init+0x2b8>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_GPIO_Init+0x2b8>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027fc:	4a48      	ldr	r2, [pc, #288]	; (8002920 <HAL_GPIO_Init+0x2bc>)
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	3302      	adds	r3, #2
 8002804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002808:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	220f      	movs	r2, #15
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a40      	ldr	r2, [pc, #256]	; (8002924 <HAL_GPIO_Init+0x2c0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d013      	beq.n	8002850 <HAL_GPIO_Init+0x1ec>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3f      	ldr	r2, [pc, #252]	; (8002928 <HAL_GPIO_Init+0x2c4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00d      	beq.n	800284c <HAL_GPIO_Init+0x1e8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a3e      	ldr	r2, [pc, #248]	; (800292c <HAL_GPIO_Init+0x2c8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d007      	beq.n	8002848 <HAL_GPIO_Init+0x1e4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a3d      	ldr	r2, [pc, #244]	; (8002930 <HAL_GPIO_Init+0x2cc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_GPIO_Init+0x1e0>
 8002840:	2303      	movs	r3, #3
 8002842:	e006      	b.n	8002852 <HAL_GPIO_Init+0x1ee>
 8002844:	2304      	movs	r3, #4
 8002846:	e004      	b.n	8002852 <HAL_GPIO_Init+0x1ee>
 8002848:	2302      	movs	r3, #2
 800284a:	e002      	b.n	8002852 <HAL_GPIO_Init+0x1ee>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_GPIO_Init+0x1ee>
 8002850:	2300      	movs	r3, #0
 8002852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002854:	f002 0203 	and.w	r2, r2, #3
 8002858:	0092      	lsls	r2, r2, #2
 800285a:	4093      	lsls	r3, r2
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002862:	492f      	ldr	r1, [pc, #188]	; (8002920 <HAL_GPIO_Init+0x2bc>)
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	3302      	adds	r3, #2
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800287c:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	492c      	ldr	r1, [pc, #176]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
 8002888:	e006      	b.n	8002898 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800288a:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	43db      	mvns	r3, r3
 8002892:	4928      	ldr	r1, [pc, #160]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 8002894:	4013      	ands	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028a4:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4922      	ldr	r1, [pc, #136]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	491e      	ldr	r1, [pc, #120]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 80028bc:	4013      	ands	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	4918      	ldr	r1, [pc, #96]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	608b      	str	r3, [r1, #8]
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	4914      	ldr	r1, [pc, #80]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d021      	beq.n	8002938 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	490e      	ldr	r1, [pc, #56]	; (8002934 <HAL_GPIO_Init+0x2d0>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60cb      	str	r3, [r1, #12]
 8002900:	e021      	b.n	8002946 <HAL_GPIO_Init+0x2e2>
 8002902:	bf00      	nop
 8002904:	10320000 	.word	0x10320000
 8002908:	10310000 	.word	0x10310000
 800290c:	10220000 	.word	0x10220000
 8002910:	10210000 	.word	0x10210000
 8002914:	10120000 	.word	0x10120000
 8002918:	10110000 	.word	0x10110000
 800291c:	40021000 	.word	0x40021000
 8002920:	40010000 	.word	0x40010000
 8002924:	40010800 	.word	0x40010800
 8002928:	40010c00 	.word	0x40010c00
 800292c:	40011000 	.word	0x40011000
 8002930:	40011400 	.word	0x40011400
 8002934:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_GPIO_Init+0x304>)
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	43db      	mvns	r3, r3
 8002940:	4909      	ldr	r1, [pc, #36]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002942:	4013      	ands	r3, r2
 8002944:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	3301      	adds	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	f47f ae8e 	bne.w	8002678 <HAL_GPIO_Init+0x14>
  }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	372c      	adds	r7, #44	; 0x2c
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40010400 	.word	0x40010400

0800296c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	887b      	ldrh	r3, [r7, #2]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e001      	b.n	800298e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	807b      	strh	r3, [r7, #2]
 80029a6:	4613      	mov	r3, r2
 80029a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029aa:	787b      	ldrb	r3, [r7, #1]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b0:	887a      	ldrh	r2, [r7, #2]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029b6:	e003      	b.n	80029c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	041a      	lsls	r2, r3, #16
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	611a      	str	r2, [r3, #16]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e272      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8087 	beq.w	8002afa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ec:	4b92      	ldr	r3, [pc, #584]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d00c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029f8:	4b8f      	ldr	r3, [pc, #572]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d112      	bne.n	8002a2a <HAL_RCC_OscConfig+0x5e>
 8002a04:	4b8c      	ldr	r3, [pc, #560]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a10:	d10b      	bne.n	8002a2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a12:	4b89      	ldr	r3, [pc, #548]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d06c      	beq.n	8002af8 <HAL_RCC_OscConfig+0x12c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d168      	bne.n	8002af8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e24c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a32:	d106      	bne.n	8002a42 <HAL_RCC_OscConfig+0x76>
 8002a34:	4b80      	ldr	r3, [pc, #512]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a7f      	ldr	r2, [pc, #508]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	e02e      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd4>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x98>
 8002a4a:	4b7b      	ldr	r3, [pc, #492]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7a      	ldr	r2, [pc, #488]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b78      	ldr	r3, [pc, #480]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a77      	ldr	r2, [pc, #476]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e01d      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd4>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0xbc>
 8002a6e:	4b72      	ldr	r3, [pc, #456]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a71      	ldr	r2, [pc, #452]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6e      	ldr	r2, [pc, #440]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd4>
 8002a88:	4b6b      	ldr	r3, [pc, #428]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a6a      	ldr	r2, [pc, #424]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a67      	ldr	r2, [pc, #412]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f872 	bl	8001b90 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff f86e 	bl	8001b90 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e200      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xe4>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7ff f85e 	bl	8001b90 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7ff f85a 	bl	8001b90 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1ec      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x10c>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b06:	4b4c      	ldr	r3, [pc, #304]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b12:	4b49      	ldr	r3, [pc, #292]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d11c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x18c>
 8002b1e:	4b46      	ldr	r3, [pc, #280]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	4b43      	ldr	r3, [pc, #268]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x176>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1c0      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4939      	ldr	r1, [pc, #228]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	e03a      	b.n	8002bce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7ff f813 	bl	8001b90 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6e:	f7ff f80f 	bl	8001b90 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e1a1      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4927      	ldr	r1, [pc, #156]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	e015      	b.n	8002bce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba2:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <HAL_RCC_OscConfig+0x270>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fff2 	bl	8001b90 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fe ffee 	bl	8001b90 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e180      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d03a      	beq.n	8002c50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d019      	beq.n	8002c16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7fe ffd2 	bl	8001b90 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fe ffce 	bl	8001b90 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e160      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f000 fad8 	bl	80031c4 <RCC_Delay>
 8002c14:	e01c      	b.n	8002c50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1c:	f7fe ffb8 	bl	8001b90 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c22:	e00f      	b.n	8002c44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c24:	f7fe ffb4 	bl	8001b90 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d908      	bls.n	8002c44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e146      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	42420000 	.word	0x42420000
 8002c40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	4b92      	ldr	r3, [pc, #584]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e9      	bne.n	8002c24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a6 	beq.w	8002daa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4b8b      	ldr	r3, [pc, #556]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10d      	bne.n	8002c8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	4b88      	ldr	r3, [pc, #544]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	4a87      	ldr	r2, [pc, #540]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c78:	61d3      	str	r3, [r2, #28]
 8002c7a:	4b85      	ldr	r3, [pc, #532]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	4b82      	ldr	r3, [pc, #520]	; (8002e94 <HAL_RCC_OscConfig+0x4c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d118      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c96:	4b7f      	ldr	r3, [pc, #508]	; (8002e94 <HAL_RCC_OscConfig+0x4c8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7e      	ldr	r2, [pc, #504]	; (8002e94 <HAL_RCC_OscConfig+0x4c8>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe ff75 	bl	8001b90 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7fe ff71 	bl	8001b90 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	; 0x64
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e103      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	4b75      	ldr	r3, [pc, #468]	; (8002e94 <HAL_RCC_OscConfig+0x4c8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x312>
 8002cd0:	4b6f      	ldr	r3, [pc, #444]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4a6e      	ldr	r2, [pc, #440]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	e02d      	b.n	8002d3a <HAL_RCC_OscConfig+0x36e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x334>
 8002ce6:	4b6a      	ldr	r3, [pc, #424]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a69      	ldr	r2, [pc, #420]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	4b67      	ldr	r3, [pc, #412]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a66      	ldr	r2, [pc, #408]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	f023 0304 	bic.w	r3, r3, #4
 8002cfc:	6213      	str	r3, [r2, #32]
 8002cfe:	e01c      	b.n	8002d3a <HAL_RCC_OscConfig+0x36e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d10c      	bne.n	8002d22 <HAL_RCC_OscConfig+0x356>
 8002d08:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a60      	ldr	r2, [pc, #384]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	6213      	str	r3, [r2, #32]
 8002d14:	4b5e      	ldr	r3, [pc, #376]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a5d      	ldr	r2, [pc, #372]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	e00b      	b.n	8002d3a <HAL_RCC_OscConfig+0x36e>
 8002d22:	4b5b      	ldr	r3, [pc, #364]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a5a      	ldr	r2, [pc, #360]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a57      	ldr	r2, [pc, #348]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d42:	f7fe ff25 	bl	8001b90 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7fe ff21 	bl	8001b90 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0b1      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	4b4b      	ldr	r3, [pc, #300]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ee      	beq.n	8002d4a <HAL_RCC_OscConfig+0x37e>
 8002d6c:	e014      	b.n	8002d98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe ff0f 	bl	8001b90 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe ff0b 	bl	8001b90 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e09b      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ee      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d105      	bne.n	8002daa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9e:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	4a3b      	ldr	r2, [pc, #236]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8087 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d061      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d146      	bne.n	8002e56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <HAL_RCC_OscConfig+0x4cc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe fedf 	bl	8001b90 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe fedb 	bl	8001b90 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e06d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de8:	4b29      	ldr	r3, [pc, #164]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d108      	bne.n	8002e10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dfe:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	4921      	ldr	r1, [pc, #132]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e10:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a19      	ldr	r1, [r3, #32]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	430b      	orrs	r3, r1
 8002e22:	491b      	ldr	r1, [pc, #108]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCC_OscConfig+0x4cc>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe feaf 	bl	8001b90 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e36:	f7fe feab 	bl	8001b90 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e03d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x46a>
 8002e54:	e035      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fe98 	bl	8001b90 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe fe94 	bl	8001b90 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e026      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x498>
 8002e82:	e01e      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e019      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40007000 	.word	0x40007000
 8002e98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x500>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0d0      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d910      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b67      	ldr	r3, [pc, #412]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 0207 	bic.w	r2, r3, #7
 8002efa:	4965      	ldr	r1, [pc, #404]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b63      	ldr	r3, [pc, #396]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0b8      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f2c:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a58      	ldr	r2, [pc, #352]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f44:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f50:	4b50      	ldr	r3, [pc, #320]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	494d      	ldr	r1, [pc, #308]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d040      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d115      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e07f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e073      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06b      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b39      	ldr	r3, [pc, #228]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4936      	ldr	r1, [pc, #216]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fde6 	bl	8001b90 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	f7fe fde2 	bl	8001b90 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e053      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 020c 	and.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1eb      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d210      	bcs.n	8003020 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 0207 	bic.w	r2, r3, #7
 8003006:	4922      	ldr	r1, [pc, #136]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e032      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4916      	ldr	r1, [pc, #88]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	490e      	ldr	r1, [pc, #56]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800305e:	f000 f821 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8003062:	4602      	mov	r2, r0
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	490a      	ldr	r1, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x1c8>)
 8003070:	5ccb      	ldrb	r3, [r1, r3]
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	4a09      	ldr	r2, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1cc>)
 8003078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_ClockConfig+0x1d0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fd44 	bl	8001b0c <HAL_InitTick>

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40022000 	.word	0x40022000
 8003094:	40021000 	.word	0x40021000
 8003098:	08006cc4 	.word	0x08006cc4
 800309c:	20000000 	.word	0x20000000
 80030a0:	20000014 	.word	0x20000014

080030a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	b490      	push	{r4, r7}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <HAL_RCC_GetSysClockFreq+0xac>)
 80030ac:	1d3c      	adds	r4, r7, #4
 80030ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030b4:	f240 2301 	movw	r3, #513	; 0x201
 80030b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x40>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x46>
 80030e2:	e02b      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e4:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030e6:	623b      	str	r3, [r7, #32]
      break;
 80030e8:	e02b      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	0c9b      	lsrs	r3, r3, #18
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	3328      	adds	r3, #40	; 0x28
 80030f4:	443b      	add	r3, r7
 80030f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d012      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	0c5b      	lsrs	r3, r3, #17
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	3328      	adds	r3, #40	; 0x28
 8003112:	443b      	add	r3, r7
 8003114:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003118:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb4>)
 800311e:	fb03 f202 	mul.w	r2, r3, r2
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
 800312a:	e004      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	4a0b      	ldr	r2, [pc, #44]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003130:	fb02 f303 	mul.w	r3, r2, r3
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	623b      	str	r3, [r7, #32]
      break;
 800313a:	e002      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb4>)
 800313e:	623b      	str	r3, [r7, #32]
      break;
 8003140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003142:	6a3b      	ldr	r3, [r7, #32]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3728      	adds	r7, #40	; 0x28
 8003148:	46bd      	mov	sp, r7
 800314a:	bc90      	pop	{r4, r7}
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	08006ca4 	.word	0x08006ca4
 8003154:	40021000 	.word	0x40021000
 8003158:	007a1200 	.word	0x007a1200
 800315c:	003d0900 	.word	0x003d0900

08003160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003164:	4b02      	ldr	r3, [pc, #8]	; (8003170 <HAL_RCC_GetHCLKFreq+0x10>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	20000000 	.word	0x20000000

08003174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003178:	f7ff fff2 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	4903      	ldr	r1, [pc, #12]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40021000 	.word	0x40021000
 8003198:	08006cd4 	.word	0x08006cd4

0800319c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031a0:	f7ff ffde 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	0adb      	lsrs	r3, r3, #11
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	08006cd4 	.word	0x08006cd4

080031c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <RCC_Delay+0x34>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <RCC_Delay+0x38>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	0a5b      	lsrs	r3, r3, #9
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031e0:	bf00      	nop
  }
  while (Delay --);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	60fa      	str	r2, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f9      	bne.n	80031e0 <RCC_Delay+0x1c>
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	20000000 	.word	0x20000000
 80031fc:	10624dd3 	.word	0x10624dd3

08003200 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d07d      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800321c:	2300      	movs	r3, #0
 800321e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003220:	4b4f      	ldr	r3, [pc, #316]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10d      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	4b4c      	ldr	r3, [pc, #304]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	4a4b      	ldr	r2, [pc, #300]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003236:	61d3      	str	r3, [r2, #28]
 8003238:	4b49      	ldr	r3, [pc, #292]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003244:	2301      	movs	r3, #1
 8003246:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d118      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003254:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a42      	ldr	r2, [pc, #264]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003260:	f7fe fc96 	bl	8001b90 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	e008      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7fe fc92 	bl	8001b90 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e06d      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	4b3a      	ldr	r3, [pc, #232]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d02e      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d027      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032a4:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b4:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ba:	4a29      	ldr	r2, [pc, #164]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d014      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ca:	f7fe fc61 	bl	8001b90 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe fc5d 	bl	8001b90 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e036      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ee      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f4:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4917      	ldr	r1, [pc, #92]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	4313      	orrs	r3, r2
 8003304:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003316:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	490b      	ldr	r1, [pc, #44]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003342:	4b07      	ldr	r3, [pc, #28]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	4904      	ldr	r1, [pc, #16]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	40007000 	.word	0x40007000
 8003368:	42420440 	.word	0x42420440

0800336c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b08d      	sub	sp, #52	; 0x34
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003374:	4b58      	ldr	r3, [pc, #352]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003376:	f107 040c 	add.w	r4, r7, #12
 800337a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800337c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003380:	f240 2301 	movw	r3, #513	; 0x201
 8003384:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
 800338a:	2300      	movs	r3, #0
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	2300      	movs	r3, #0
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b10      	cmp	r3, #16
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	f200 808e 	bhi.w	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d049      	beq.n	8003442 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d079      	beq.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033b4:	e086      	b.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033bc:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d07f      	beq.n	80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	0c9b      	lsrs	r3, r3, #18
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	3330      	adds	r3, #48	; 0x30
 80033d2:	443b      	add	r3, r7
 80033d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033d8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d017      	beq.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033e4:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0c5b      	lsrs	r3, r3, #17
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	3330      	adds	r3, #48	; 0x30
 80033f0:	443b      	add	r3, r7
 80033f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003402:	4a37      	ldr	r2, [pc, #220]	; (80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	fbb2 f2f3 	udiv	r2, r2, r3
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003412:	e004      	b.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	4a33      	ldr	r2, [pc, #204]	; (80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800341e:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800342a:	d102      	bne.n	8003432 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003430:	e04a      	b.n	80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4a2c      	ldr	r2, [pc, #176]	; (80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003440:	e042      	b.n	80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003452:	d108      	bne.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800345e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
 8003464:	e01f      	b.n	80034a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003470:	d109      	bne.n	8003486 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003472:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800347e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
 8003484:	e00f      	b.n	80034a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003490:	d11c      	bne.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003492:	4b12      	ldr	r3, [pc, #72]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800349e:	f24f 4324 	movw	r3, #62500	; 0xf424
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034a4:	e012      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80034a6:	e011      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80034a8:	f7ff fe78 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	0b9b      	lsrs	r3, r3, #14
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	3301      	adds	r3, #1
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034c2:	e004      	b.n	80034ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80034c4:	bf00      	nop
 80034c6:	e002      	b.n	80034ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80034c8:	bf00      	nop
 80034ca:	e000      	b.n	80034ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80034cc:	bf00      	nop
    }
  }
  return (frequency);
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3734      	adds	r7, #52	; 0x34
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	08006cb4 	.word	0x08006cb4
 80034dc:	40021000 	.word	0x40021000
 80034e0:	007a1200 	.word	0x007a1200
 80034e4:	003d0900 	.word	0x003d0900
 80034e8:	aaaaaaab 	.word	0xaaaaaaab

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e041      	b.n	8003582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe f82e 	bl	8001574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 f93c 	bl	80037a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d001      	beq.n	80035a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e032      	b.n	800360a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a18      	ldr	r2, [pc, #96]	; (8003614 <HAL_TIM_Base_Start+0x88>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_TIM_Base_Start+0x48>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035be:	d009      	beq.n	80035d4 <HAL_TIM_Base_Start+0x48>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a14      	ldr	r2, [pc, #80]	; (8003618 <HAL_TIM_Base_Start+0x8c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_TIM_Base_Start+0x48>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a13      	ldr	r2, [pc, #76]	; (800361c <HAL_TIM_Base_Start+0x90>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d111      	bne.n	80035f8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d010      	beq.n	8003608 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f6:	e007      	b.n	8003608 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800

08003620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIM_ConfigClockSource+0x18>
 8003634:	2302      	movs	r3, #2
 8003636:	e0b3      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x180>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800365e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003670:	d03e      	beq.n	80036f0 <HAL_TIM_ConfigClockSource+0xd0>
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003676:	f200 8087 	bhi.w	8003788 <HAL_TIM_ConfigClockSource+0x168>
 800367a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367e:	f000 8085 	beq.w	800378c <HAL_TIM_ConfigClockSource+0x16c>
 8003682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003686:	d87f      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x168>
 8003688:	2b70      	cmp	r3, #112	; 0x70
 800368a:	d01a      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0xa2>
 800368c:	2b70      	cmp	r3, #112	; 0x70
 800368e:	d87b      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x168>
 8003690:	2b60      	cmp	r3, #96	; 0x60
 8003692:	d050      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0x116>
 8003694:	2b60      	cmp	r3, #96	; 0x60
 8003696:	d877      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x168>
 8003698:	2b50      	cmp	r3, #80	; 0x50
 800369a:	d03c      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0xf6>
 800369c:	2b50      	cmp	r3, #80	; 0x50
 800369e:	d873      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x168>
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d058      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x136>
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d86f      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x168>
 80036a8:	2b30      	cmp	r3, #48	; 0x30
 80036aa:	d064      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x156>
 80036ac:	2b30      	cmp	r3, #48	; 0x30
 80036ae:	d86b      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x168>
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d060      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x156>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d867      	bhi.n	8003788 <HAL_TIM_ConfigClockSource+0x168>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d05c      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x156>
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d05a      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036c0:	e062      	b.n	8003788 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f000 f942 	bl	800395a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	609a      	str	r2, [r3, #8]
      break;
 80036ee:	e04e      	b.n	800378e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f000 f92b 	bl	800395a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003712:	609a      	str	r2, [r3, #8]
      break;
 8003714:	e03b      	b.n	800378e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	461a      	mov	r2, r3
 8003724:	f000 f8a2 	bl	800386c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2150      	movs	r1, #80	; 0x50
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f8f9 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003734:	e02b      	b.n	800378e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6859      	ldr	r1, [r3, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	461a      	mov	r2, r3
 8003744:	f000 f8c0 	bl	80038c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2160      	movs	r1, #96	; 0x60
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f8e9 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003754:	e01b      	b.n	800378e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6859      	ldr	r1, [r3, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	461a      	mov	r2, r3
 8003764:	f000 f882 	bl	800386c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2140      	movs	r1, #64	; 0x40
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f8d9 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 8003774:	e00b      	b.n	800378e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4619      	mov	r1, r3
 8003780:	4610      	mov	r0, r2
 8003782:	f000 f8d0 	bl	8003926 <TIM_ITRx_SetConfig>
        break;
 8003786:	e002      	b.n	800378e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003788:	bf00      	nop
 800378a:	e000      	b.n	800378e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800378c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a29      	ldr	r2, [pc, #164]	; (8003860 <TIM_Base_SetConfig+0xb8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00b      	beq.n	80037d8 <TIM_Base_SetConfig+0x30>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c6:	d007      	beq.n	80037d8 <TIM_Base_SetConfig+0x30>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a26      	ldr	r2, [pc, #152]	; (8003864 <TIM_Base_SetConfig+0xbc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_Base_SetConfig+0x30>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a25      	ldr	r2, [pc, #148]	; (8003868 <TIM_Base_SetConfig+0xc0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d108      	bne.n	80037ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <TIM_Base_SetConfig+0xb8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00b      	beq.n	800380a <TIM_Base_SetConfig+0x62>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f8:	d007      	beq.n	800380a <TIM_Base_SetConfig+0x62>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a19      	ldr	r2, [pc, #100]	; (8003864 <TIM_Base_SetConfig+0xbc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <TIM_Base_SetConfig+0x62>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <TIM_Base_SetConfig+0xc0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d108      	bne.n	800381c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a07      	ldr	r2, [pc, #28]	; (8003860 <TIM_Base_SetConfig+0xb8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d103      	bne.n	8003850 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	615a      	str	r2, [r3, #20]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800

0800386c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f023 0201 	bic.w	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 030a 	bic.w	r3, r3, #10
 80038a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f023 0210 	bic.w	r2, r3, #16
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003904:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	f043 0307 	orr.w	r3, r3, #7
 8003948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800395a:	b480      	push	{r7}
 800395c:	b087      	sub	sp, #28
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	021a      	lsls	r2, r3, #8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	431a      	orrs	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	609a      	str	r2, [r3, #8]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e046      	b.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a16      	ldr	r2, [pc, #88]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00e      	beq.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fc:	d009      	beq.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a10      	ldr	r2, [pc, #64]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d10c      	bne.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800

08003a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e03f      	b.n	8003ae6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fd98 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f905 	bl	8003ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b08a      	sub	sp, #40	; 0x28
 8003af2:	af02      	add	r7, sp, #8
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d17c      	bne.n	8003c08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_UART_Transmit+0x2c>
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e075      	b.n	8003c0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_UART_Transmit+0x3e>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e06e      	b.n	8003c0a <HAL_UART_Transmit+0x11c>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2221      	movs	r2, #33	; 0x21
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b42:	f7fe f825 	bl	8001b90 <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5c:	d108      	bne.n	8003b70 <HAL_UART_Transmit+0x82>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	e003      	b.n	8003b78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b80:	e02a      	b.n	8003bd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f840 	bl	8003c12 <UART_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e036      	b.n	8003c0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10b      	bne.n	8003bba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	e007      	b.n	8003bca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1cf      	bne.n	8003b82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2200      	movs	r2, #0
 8003bea:	2140      	movs	r1, #64	; 0x40
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f810 	bl	8003c12 <UART_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e006      	b.n	8003c0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c22:	e02c      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d028      	beq.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c32:	f7fd ffad 	bl	8001b90 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d21d      	bcs.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c50:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695a      	ldr	r2, [r3, #20]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e00f      	b.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4013      	ands	r3, r2
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	bf0c      	ite	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	2300      	movne	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d0c3      	beq.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ce2:	f023 030c 	bic.w	r3, r3, #12
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	430b      	orrs	r3, r1
 8003cee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a2c      	ldr	r2, [pc, #176]	; (8003dbc <UART_SetConfig+0x114>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d103      	bne.n	8003d18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d10:	f7ff fa44 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	e002      	b.n	8003d1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d18:	f7ff fa2c 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8003d1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009a      	lsls	r2, r3, #2
 8003d28:	441a      	add	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	4a22      	ldr	r2, [pc, #136]	; (8003dc0 <UART_SetConfig+0x118>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	0119      	lsls	r1, r3, #4
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	009a      	lsls	r2, r3, #2
 8003d48:	441a      	add	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <UART_SetConfig+0x118>)
 8003d56:	fba3 0302 	umull	r0, r3, r3, r2
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2064      	movs	r0, #100	; 0x64
 8003d5e:	fb00 f303 	mul.w	r3, r0, r3
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	3332      	adds	r3, #50	; 0x32
 8003d68:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <UART_SetConfig+0x118>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d74:	4419      	add	r1, r3
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009a      	lsls	r2, r3, #2
 8003d80:	441a      	add	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <UART_SetConfig+0x118>)
 8003d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2064      	movs	r0, #100	; 0x64
 8003d96:	fb00 f303 	mul.w	r3, r0, r3
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	3332      	adds	r3, #50	; 0x32
 8003da0:	4a07      	ldr	r2, [pc, #28]	; (8003dc0 <UART_SetConfig+0x118>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	f003 020f 	and.w	r2, r3, #15
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	440a      	add	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	51eb851f 	.word	0x51eb851f

08003dc4 <__errno>:
 8003dc4:	4b01      	ldr	r3, [pc, #4]	; (8003dcc <__errno+0x8>)
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	2000001c 	.word	0x2000001c

08003dd0 <__libc_init_array>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	4d0c      	ldr	r5, [pc, #48]	; (8003e08 <__libc_init_array+0x38>)
 8003dd6:	4c0d      	ldr	r4, [pc, #52]	; (8003e0c <__libc_init_array+0x3c>)
 8003dd8:	1b64      	subs	r4, r4, r5
 8003dda:	10a4      	asrs	r4, r4, #2
 8003ddc:	42a6      	cmp	r6, r4
 8003dde:	d109      	bne.n	8003df4 <__libc_init_array+0x24>
 8003de0:	f002 ff0e 	bl	8006c00 <_init>
 8003de4:	2600      	movs	r6, #0
 8003de6:	4d0a      	ldr	r5, [pc, #40]	; (8003e10 <__libc_init_array+0x40>)
 8003de8:	4c0a      	ldr	r4, [pc, #40]	; (8003e14 <__libc_init_array+0x44>)
 8003dea:	1b64      	subs	r4, r4, r5
 8003dec:	10a4      	asrs	r4, r4, #2
 8003dee:	42a6      	cmp	r6, r4
 8003df0:	d105      	bne.n	8003dfe <__libc_init_array+0x2e>
 8003df2:	bd70      	pop	{r4, r5, r6, pc}
 8003df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df8:	4798      	blx	r3
 8003dfa:	3601      	adds	r6, #1
 8003dfc:	e7ee      	b.n	8003ddc <__libc_init_array+0xc>
 8003dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e02:	4798      	blx	r3
 8003e04:	3601      	adds	r6, #1
 8003e06:	e7f2      	b.n	8003dee <__libc_init_array+0x1e>
 8003e08:	080070b4 	.word	0x080070b4
 8003e0c:	080070b4 	.word	0x080070b4
 8003e10:	080070b4 	.word	0x080070b4
 8003e14:	080070b8 	.word	0x080070b8

08003e18 <memset>:
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4402      	add	r2, r0
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d100      	bne.n	8003e22 <memset+0xa>
 8003e20:	4770      	bx	lr
 8003e22:	f803 1b01 	strb.w	r1, [r3], #1
 8003e26:	e7f9      	b.n	8003e1c <memset+0x4>

08003e28 <__cvt>:
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2e:	461f      	mov	r7, r3
 8003e30:	bfbb      	ittet	lt
 8003e32:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003e36:	461f      	movlt	r7, r3
 8003e38:	2300      	movge	r3, #0
 8003e3a:	232d      	movlt	r3, #45	; 0x2d
 8003e3c:	b088      	sub	sp, #32
 8003e3e:	4614      	mov	r4, r2
 8003e40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003e42:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003e44:	7013      	strb	r3, [r2, #0]
 8003e46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e48:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003e4c:	f023 0820 	bic.w	r8, r3, #32
 8003e50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e54:	d005      	beq.n	8003e62 <__cvt+0x3a>
 8003e56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e5a:	d100      	bne.n	8003e5e <__cvt+0x36>
 8003e5c:	3501      	adds	r5, #1
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e000      	b.n	8003e64 <__cvt+0x3c>
 8003e62:	2303      	movs	r3, #3
 8003e64:	aa07      	add	r2, sp, #28
 8003e66:	9204      	str	r2, [sp, #16]
 8003e68:	aa06      	add	r2, sp, #24
 8003e6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e6e:	e9cd 3500 	strd	r3, r5, [sp]
 8003e72:	4622      	mov	r2, r4
 8003e74:	463b      	mov	r3, r7
 8003e76:	f000 fcf7 	bl	8004868 <_dtoa_r>
 8003e7a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e7e:	4606      	mov	r6, r0
 8003e80:	d102      	bne.n	8003e88 <__cvt+0x60>
 8003e82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e84:	07db      	lsls	r3, r3, #31
 8003e86:	d522      	bpl.n	8003ece <__cvt+0xa6>
 8003e88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e8c:	eb06 0905 	add.w	r9, r6, r5
 8003e90:	d110      	bne.n	8003eb4 <__cvt+0x8c>
 8003e92:	7833      	ldrb	r3, [r6, #0]
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d10a      	bne.n	8003eae <__cvt+0x86>
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	4639      	mov	r1, r7
 8003ea0:	f7fc fd82 	bl	80009a8 <__aeabi_dcmpeq>
 8003ea4:	b918      	cbnz	r0, 8003eae <__cvt+0x86>
 8003ea6:	f1c5 0501 	rsb	r5, r5, #1
 8003eaa:	f8ca 5000 	str.w	r5, [sl]
 8003eae:	f8da 3000 	ldr.w	r3, [sl]
 8003eb2:	4499      	add	r9, r3
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	4620      	mov	r0, r4
 8003eba:	4639      	mov	r1, r7
 8003ebc:	f7fc fd74 	bl	80009a8 <__aeabi_dcmpeq>
 8003ec0:	b108      	cbz	r0, 8003ec6 <__cvt+0x9e>
 8003ec2:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ec6:	2230      	movs	r2, #48	; 0x30
 8003ec8:	9b07      	ldr	r3, [sp, #28]
 8003eca:	454b      	cmp	r3, r9
 8003ecc:	d307      	bcc.n	8003ede <__cvt+0xb6>
 8003ece:	4630      	mov	r0, r6
 8003ed0:	9b07      	ldr	r3, [sp, #28]
 8003ed2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003ed4:	1b9b      	subs	r3, r3, r6
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	b008      	add	sp, #32
 8003eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	9107      	str	r1, [sp, #28]
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e7f0      	b.n	8003ec8 <__cvt+0xa0>

08003ee6 <__exponent>:
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eea:	2900      	cmp	r1, #0
 8003eec:	f803 2b02 	strb.w	r2, [r3], #2
 8003ef0:	bfb6      	itet	lt
 8003ef2:	222d      	movlt	r2, #45	; 0x2d
 8003ef4:	222b      	movge	r2, #43	; 0x2b
 8003ef6:	4249      	neglt	r1, r1
 8003ef8:	2909      	cmp	r1, #9
 8003efa:	7042      	strb	r2, [r0, #1]
 8003efc:	dd2b      	ble.n	8003f56 <__exponent+0x70>
 8003efe:	f10d 0407 	add.w	r4, sp, #7
 8003f02:	46a4      	mov	ip, r4
 8003f04:	270a      	movs	r7, #10
 8003f06:	fb91 f6f7 	sdiv	r6, r1, r7
 8003f0a:	460a      	mov	r2, r1
 8003f0c:	46a6      	mov	lr, r4
 8003f0e:	fb07 1516 	mls	r5, r7, r6, r1
 8003f12:	2a63      	cmp	r2, #99	; 0x63
 8003f14:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003f18:	4631      	mov	r1, r6
 8003f1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003f1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003f22:	dcf0      	bgt.n	8003f06 <__exponent+0x20>
 8003f24:	3130      	adds	r1, #48	; 0x30
 8003f26:	f1ae 0502 	sub.w	r5, lr, #2
 8003f2a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003f2e:	4629      	mov	r1, r5
 8003f30:	1c44      	adds	r4, r0, #1
 8003f32:	4561      	cmp	r1, ip
 8003f34:	d30a      	bcc.n	8003f4c <__exponent+0x66>
 8003f36:	f10d 0209 	add.w	r2, sp, #9
 8003f3a:	eba2 020e 	sub.w	r2, r2, lr
 8003f3e:	4565      	cmp	r5, ip
 8003f40:	bf88      	it	hi
 8003f42:	2200      	movhi	r2, #0
 8003f44:	4413      	add	r3, r2
 8003f46:	1a18      	subs	r0, r3, r0
 8003f48:	b003      	add	sp, #12
 8003f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f50:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003f54:	e7ed      	b.n	8003f32 <__exponent+0x4c>
 8003f56:	2330      	movs	r3, #48	; 0x30
 8003f58:	3130      	adds	r1, #48	; 0x30
 8003f5a:	7083      	strb	r3, [r0, #2]
 8003f5c:	70c1      	strb	r1, [r0, #3]
 8003f5e:	1d03      	adds	r3, r0, #4
 8003f60:	e7f1      	b.n	8003f46 <__exponent+0x60>
	...

08003f64 <_printf_float>:
 8003f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f68:	b091      	sub	sp, #68	; 0x44
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003f70:	4616      	mov	r6, r2
 8003f72:	461f      	mov	r7, r3
 8003f74:	4605      	mov	r5, r0
 8003f76:	f001 fa65 	bl	8005444 <_localeconv_r>
 8003f7a:	6803      	ldr	r3, [r0, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f80:	f7fc f8e6 	bl	8000150 <strlen>
 8003f84:	2300      	movs	r3, #0
 8003f86:	930e      	str	r3, [sp, #56]	; 0x38
 8003f88:	f8d8 3000 	ldr.w	r3, [r8]
 8003f8c:	900a      	str	r0, [sp, #40]	; 0x28
 8003f8e:	3307      	adds	r3, #7
 8003f90:	f023 0307 	bic.w	r3, r3, #7
 8003f94:	f103 0208 	add.w	r2, r3, #8
 8003f98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003f9c:	f8d4 b000 	ldr.w	fp, [r4]
 8003fa0:	f8c8 2000 	str.w	r2, [r8]
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003fac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003fb0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003fb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fba:	4640      	mov	r0, r8
 8003fbc:	4b9c      	ldr	r3, [pc, #624]	; (8004230 <_printf_float+0x2cc>)
 8003fbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fc0:	f7fc fd24 	bl	8000a0c <__aeabi_dcmpun>
 8003fc4:	bb70      	cbnz	r0, 8004024 <_printf_float+0xc0>
 8003fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fca:	4640      	mov	r0, r8
 8003fcc:	4b98      	ldr	r3, [pc, #608]	; (8004230 <_printf_float+0x2cc>)
 8003fce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fd0:	f7fc fcfe 	bl	80009d0 <__aeabi_dcmple>
 8003fd4:	bb30      	cbnz	r0, 8004024 <_printf_float+0xc0>
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4640      	mov	r0, r8
 8003fdc:	4651      	mov	r1, sl
 8003fde:	f7fc fced 	bl	80009bc <__aeabi_dcmplt>
 8003fe2:	b110      	cbz	r0, 8003fea <_printf_float+0x86>
 8003fe4:	232d      	movs	r3, #45	; 0x2d
 8003fe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fea:	4b92      	ldr	r3, [pc, #584]	; (8004234 <_printf_float+0x2d0>)
 8003fec:	4892      	ldr	r0, [pc, #584]	; (8004238 <_printf_float+0x2d4>)
 8003fee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003ff2:	bf94      	ite	ls
 8003ff4:	4698      	movls	r8, r3
 8003ff6:	4680      	movhi	r8, r0
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	f04f 0a00 	mov.w	sl, #0
 8003ffe:	6123      	str	r3, [r4, #16]
 8004000:	f02b 0304 	bic.w	r3, fp, #4
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	4633      	mov	r3, r6
 8004008:	4621      	mov	r1, r4
 800400a:	4628      	mov	r0, r5
 800400c:	9700      	str	r7, [sp, #0]
 800400e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004010:	f000 f9d4 	bl	80043bc <_printf_common>
 8004014:	3001      	adds	r0, #1
 8004016:	f040 8090 	bne.w	800413a <_printf_float+0x1d6>
 800401a:	f04f 30ff 	mov.w	r0, #4294967295
 800401e:	b011      	add	sp, #68	; 0x44
 8004020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004024:	4642      	mov	r2, r8
 8004026:	4653      	mov	r3, sl
 8004028:	4640      	mov	r0, r8
 800402a:	4651      	mov	r1, sl
 800402c:	f7fc fcee 	bl	8000a0c <__aeabi_dcmpun>
 8004030:	b148      	cbz	r0, 8004046 <_printf_float+0xe2>
 8004032:	f1ba 0f00 	cmp.w	sl, #0
 8004036:	bfb8      	it	lt
 8004038:	232d      	movlt	r3, #45	; 0x2d
 800403a:	4880      	ldr	r0, [pc, #512]	; (800423c <_printf_float+0x2d8>)
 800403c:	bfb8      	it	lt
 800403e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004042:	4b7f      	ldr	r3, [pc, #508]	; (8004240 <_printf_float+0x2dc>)
 8004044:	e7d3      	b.n	8003fee <_printf_float+0x8a>
 8004046:	6863      	ldr	r3, [r4, #4]
 8004048:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	d142      	bne.n	80040d6 <_printf_float+0x172>
 8004050:	2306      	movs	r3, #6
 8004052:	6063      	str	r3, [r4, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	9206      	str	r2, [sp, #24]
 8004058:	aa0e      	add	r2, sp, #56	; 0x38
 800405a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800405e:	aa0d      	add	r2, sp, #52	; 0x34
 8004060:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004064:	9203      	str	r2, [sp, #12]
 8004066:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800406a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	6863      	ldr	r3, [r4, #4]
 8004072:	4642      	mov	r2, r8
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	4628      	mov	r0, r5
 8004078:	4653      	mov	r3, sl
 800407a:	910b      	str	r1, [sp, #44]	; 0x2c
 800407c:	f7ff fed4 	bl	8003e28 <__cvt>
 8004080:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004082:	4680      	mov	r8, r0
 8004084:	2947      	cmp	r1, #71	; 0x47
 8004086:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004088:	d108      	bne.n	800409c <_printf_float+0x138>
 800408a:	1cc8      	adds	r0, r1, #3
 800408c:	db02      	blt.n	8004094 <_printf_float+0x130>
 800408e:	6863      	ldr	r3, [r4, #4]
 8004090:	4299      	cmp	r1, r3
 8004092:	dd40      	ble.n	8004116 <_printf_float+0x1b2>
 8004094:	f1a9 0902 	sub.w	r9, r9, #2
 8004098:	fa5f f989 	uxtb.w	r9, r9
 800409c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040a0:	d81f      	bhi.n	80040e2 <_printf_float+0x17e>
 80040a2:	464a      	mov	r2, r9
 80040a4:	3901      	subs	r1, #1
 80040a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040aa:	910d      	str	r1, [sp, #52]	; 0x34
 80040ac:	f7ff ff1b 	bl	8003ee6 <__exponent>
 80040b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040b2:	4682      	mov	sl, r0
 80040b4:	1813      	adds	r3, r2, r0
 80040b6:	2a01      	cmp	r2, #1
 80040b8:	6123      	str	r3, [r4, #16]
 80040ba:	dc02      	bgt.n	80040c2 <_printf_float+0x15e>
 80040bc:	6822      	ldr	r2, [r4, #0]
 80040be:	07d2      	lsls	r2, r2, #31
 80040c0:	d501      	bpl.n	80040c6 <_printf_float+0x162>
 80040c2:	3301      	adds	r3, #1
 80040c4:	6123      	str	r3, [r4, #16]
 80040c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d09b      	beq.n	8004006 <_printf_float+0xa2>
 80040ce:	232d      	movs	r3, #45	; 0x2d
 80040d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d4:	e797      	b.n	8004006 <_printf_float+0xa2>
 80040d6:	2947      	cmp	r1, #71	; 0x47
 80040d8:	d1bc      	bne.n	8004054 <_printf_float+0xf0>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1ba      	bne.n	8004054 <_printf_float+0xf0>
 80040de:	2301      	movs	r3, #1
 80040e0:	e7b7      	b.n	8004052 <_printf_float+0xee>
 80040e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80040e6:	d118      	bne.n	800411a <_printf_float+0x1b6>
 80040e8:	2900      	cmp	r1, #0
 80040ea:	6863      	ldr	r3, [r4, #4]
 80040ec:	dd0b      	ble.n	8004106 <_printf_float+0x1a2>
 80040ee:	6121      	str	r1, [r4, #16]
 80040f0:	b913      	cbnz	r3, 80040f8 <_printf_float+0x194>
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	07d0      	lsls	r0, r2, #31
 80040f6:	d502      	bpl.n	80040fe <_printf_float+0x19a>
 80040f8:	3301      	adds	r3, #1
 80040fa:	440b      	add	r3, r1
 80040fc:	6123      	str	r3, [r4, #16]
 80040fe:	f04f 0a00 	mov.w	sl, #0
 8004102:	65a1      	str	r1, [r4, #88]	; 0x58
 8004104:	e7df      	b.n	80040c6 <_printf_float+0x162>
 8004106:	b913      	cbnz	r3, 800410e <_printf_float+0x1aa>
 8004108:	6822      	ldr	r2, [r4, #0]
 800410a:	07d2      	lsls	r2, r2, #31
 800410c:	d501      	bpl.n	8004112 <_printf_float+0x1ae>
 800410e:	3302      	adds	r3, #2
 8004110:	e7f4      	b.n	80040fc <_printf_float+0x198>
 8004112:	2301      	movs	r3, #1
 8004114:	e7f2      	b.n	80040fc <_printf_float+0x198>
 8004116:	f04f 0967 	mov.w	r9, #103	; 0x67
 800411a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800411c:	4299      	cmp	r1, r3
 800411e:	db05      	blt.n	800412c <_printf_float+0x1c8>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	6121      	str	r1, [r4, #16]
 8004124:	07d8      	lsls	r0, r3, #31
 8004126:	d5ea      	bpl.n	80040fe <_printf_float+0x19a>
 8004128:	1c4b      	adds	r3, r1, #1
 800412a:	e7e7      	b.n	80040fc <_printf_float+0x198>
 800412c:	2900      	cmp	r1, #0
 800412e:	bfcc      	ite	gt
 8004130:	2201      	movgt	r2, #1
 8004132:	f1c1 0202 	rsble	r2, r1, #2
 8004136:	4413      	add	r3, r2
 8004138:	e7e0      	b.n	80040fc <_printf_float+0x198>
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	055a      	lsls	r2, r3, #21
 800413e:	d407      	bmi.n	8004150 <_printf_float+0x1ec>
 8004140:	6923      	ldr	r3, [r4, #16]
 8004142:	4642      	mov	r2, r8
 8004144:	4631      	mov	r1, r6
 8004146:	4628      	mov	r0, r5
 8004148:	47b8      	blx	r7
 800414a:	3001      	adds	r0, #1
 800414c:	d12b      	bne.n	80041a6 <_printf_float+0x242>
 800414e:	e764      	b.n	800401a <_printf_float+0xb6>
 8004150:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004154:	f240 80dd 	bls.w	8004312 <_printf_float+0x3ae>
 8004158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800415c:	2200      	movs	r2, #0
 800415e:	2300      	movs	r3, #0
 8004160:	f7fc fc22 	bl	80009a8 <__aeabi_dcmpeq>
 8004164:	2800      	cmp	r0, #0
 8004166:	d033      	beq.n	80041d0 <_printf_float+0x26c>
 8004168:	2301      	movs	r3, #1
 800416a:	4631      	mov	r1, r6
 800416c:	4628      	mov	r0, r5
 800416e:	4a35      	ldr	r2, [pc, #212]	; (8004244 <_printf_float+0x2e0>)
 8004170:	47b8      	blx	r7
 8004172:	3001      	adds	r0, #1
 8004174:	f43f af51 	beq.w	800401a <_printf_float+0xb6>
 8004178:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800417c:	429a      	cmp	r2, r3
 800417e:	db02      	blt.n	8004186 <_printf_float+0x222>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	07d8      	lsls	r0, r3, #31
 8004184:	d50f      	bpl.n	80041a6 <_printf_float+0x242>
 8004186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800418a:	4631      	mov	r1, r6
 800418c:	4628      	mov	r0, r5
 800418e:	47b8      	blx	r7
 8004190:	3001      	adds	r0, #1
 8004192:	f43f af42 	beq.w	800401a <_printf_float+0xb6>
 8004196:	f04f 0800 	mov.w	r8, #0
 800419a:	f104 091a 	add.w	r9, r4, #26
 800419e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041a0:	3b01      	subs	r3, #1
 80041a2:	4543      	cmp	r3, r8
 80041a4:	dc09      	bgt.n	80041ba <_printf_float+0x256>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	079b      	lsls	r3, r3, #30
 80041aa:	f100 8102 	bmi.w	80043b2 <_printf_float+0x44e>
 80041ae:	68e0      	ldr	r0, [r4, #12]
 80041b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041b2:	4298      	cmp	r0, r3
 80041b4:	bfb8      	it	lt
 80041b6:	4618      	movlt	r0, r3
 80041b8:	e731      	b.n	800401e <_printf_float+0xba>
 80041ba:	2301      	movs	r3, #1
 80041bc:	464a      	mov	r2, r9
 80041be:	4631      	mov	r1, r6
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b8      	blx	r7
 80041c4:	3001      	adds	r0, #1
 80041c6:	f43f af28 	beq.w	800401a <_printf_float+0xb6>
 80041ca:	f108 0801 	add.w	r8, r8, #1
 80041ce:	e7e6      	b.n	800419e <_printf_float+0x23a>
 80041d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dc38      	bgt.n	8004248 <_printf_float+0x2e4>
 80041d6:	2301      	movs	r3, #1
 80041d8:	4631      	mov	r1, r6
 80041da:	4628      	mov	r0, r5
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <_printf_float+0x2e0>)
 80041de:	47b8      	blx	r7
 80041e0:	3001      	adds	r0, #1
 80041e2:	f43f af1a 	beq.w	800401a <_printf_float+0xb6>
 80041e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d102      	bne.n	80041f4 <_printf_float+0x290>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	07d9      	lsls	r1, r3, #31
 80041f2:	d5d8      	bpl.n	80041a6 <_printf_float+0x242>
 80041f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041f8:	4631      	mov	r1, r6
 80041fa:	4628      	mov	r0, r5
 80041fc:	47b8      	blx	r7
 80041fe:	3001      	adds	r0, #1
 8004200:	f43f af0b 	beq.w	800401a <_printf_float+0xb6>
 8004204:	f04f 0900 	mov.w	r9, #0
 8004208:	f104 0a1a 	add.w	sl, r4, #26
 800420c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800420e:	425b      	negs	r3, r3
 8004210:	454b      	cmp	r3, r9
 8004212:	dc01      	bgt.n	8004218 <_printf_float+0x2b4>
 8004214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004216:	e794      	b.n	8004142 <_printf_float+0x1de>
 8004218:	2301      	movs	r3, #1
 800421a:	4652      	mov	r2, sl
 800421c:	4631      	mov	r1, r6
 800421e:	4628      	mov	r0, r5
 8004220:	47b8      	blx	r7
 8004222:	3001      	adds	r0, #1
 8004224:	f43f aef9 	beq.w	800401a <_printf_float+0xb6>
 8004228:	f109 0901 	add.w	r9, r9, #1
 800422c:	e7ee      	b.n	800420c <_printf_float+0x2a8>
 800422e:	bf00      	nop
 8004230:	7fefffff 	.word	0x7fefffff
 8004234:	08006ce0 	.word	0x08006ce0
 8004238:	08006ce4 	.word	0x08006ce4
 800423c:	08006cec 	.word	0x08006cec
 8004240:	08006ce8 	.word	0x08006ce8
 8004244:	08006cf0 	.word	0x08006cf0
 8004248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800424a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800424c:	429a      	cmp	r2, r3
 800424e:	bfa8      	it	ge
 8004250:	461a      	movge	r2, r3
 8004252:	2a00      	cmp	r2, #0
 8004254:	4691      	mov	r9, r2
 8004256:	dc37      	bgt.n	80042c8 <_printf_float+0x364>
 8004258:	f04f 0b00 	mov.w	fp, #0
 800425c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004260:	f104 021a 	add.w	r2, r4, #26
 8004264:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004268:	ebaa 0309 	sub.w	r3, sl, r9
 800426c:	455b      	cmp	r3, fp
 800426e:	dc33      	bgt.n	80042d8 <_printf_float+0x374>
 8004270:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004274:	429a      	cmp	r2, r3
 8004276:	db3b      	blt.n	80042f0 <_printf_float+0x38c>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	07da      	lsls	r2, r3, #31
 800427c:	d438      	bmi.n	80042f0 <_printf_float+0x38c>
 800427e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004280:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004282:	eba3 020a 	sub.w	r2, r3, sl
 8004286:	eba3 0901 	sub.w	r9, r3, r1
 800428a:	4591      	cmp	r9, r2
 800428c:	bfa8      	it	ge
 800428e:	4691      	movge	r9, r2
 8004290:	f1b9 0f00 	cmp.w	r9, #0
 8004294:	dc34      	bgt.n	8004300 <_printf_float+0x39c>
 8004296:	f04f 0800 	mov.w	r8, #0
 800429a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800429e:	f104 0a1a 	add.w	sl, r4, #26
 80042a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	eba3 0309 	sub.w	r3, r3, r9
 80042ac:	4543      	cmp	r3, r8
 80042ae:	f77f af7a 	ble.w	80041a6 <_printf_float+0x242>
 80042b2:	2301      	movs	r3, #1
 80042b4:	4652      	mov	r2, sl
 80042b6:	4631      	mov	r1, r6
 80042b8:	4628      	mov	r0, r5
 80042ba:	47b8      	blx	r7
 80042bc:	3001      	adds	r0, #1
 80042be:	f43f aeac 	beq.w	800401a <_printf_float+0xb6>
 80042c2:	f108 0801 	add.w	r8, r8, #1
 80042c6:	e7ec      	b.n	80042a2 <_printf_float+0x33e>
 80042c8:	4613      	mov	r3, r2
 80042ca:	4631      	mov	r1, r6
 80042cc:	4642      	mov	r2, r8
 80042ce:	4628      	mov	r0, r5
 80042d0:	47b8      	blx	r7
 80042d2:	3001      	adds	r0, #1
 80042d4:	d1c0      	bne.n	8004258 <_printf_float+0x2f4>
 80042d6:	e6a0      	b.n	800401a <_printf_float+0xb6>
 80042d8:	2301      	movs	r3, #1
 80042da:	4631      	mov	r1, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	920b      	str	r2, [sp, #44]	; 0x2c
 80042e0:	47b8      	blx	r7
 80042e2:	3001      	adds	r0, #1
 80042e4:	f43f ae99 	beq.w	800401a <_printf_float+0xb6>
 80042e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042ea:	f10b 0b01 	add.w	fp, fp, #1
 80042ee:	e7b9      	b.n	8004264 <_printf_float+0x300>
 80042f0:	4631      	mov	r1, r6
 80042f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042f6:	4628      	mov	r0, r5
 80042f8:	47b8      	blx	r7
 80042fa:	3001      	adds	r0, #1
 80042fc:	d1bf      	bne.n	800427e <_printf_float+0x31a>
 80042fe:	e68c      	b.n	800401a <_printf_float+0xb6>
 8004300:	464b      	mov	r3, r9
 8004302:	4631      	mov	r1, r6
 8004304:	4628      	mov	r0, r5
 8004306:	eb08 020a 	add.w	r2, r8, sl
 800430a:	47b8      	blx	r7
 800430c:	3001      	adds	r0, #1
 800430e:	d1c2      	bne.n	8004296 <_printf_float+0x332>
 8004310:	e683      	b.n	800401a <_printf_float+0xb6>
 8004312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004314:	2a01      	cmp	r2, #1
 8004316:	dc01      	bgt.n	800431c <_printf_float+0x3b8>
 8004318:	07db      	lsls	r3, r3, #31
 800431a:	d537      	bpl.n	800438c <_printf_float+0x428>
 800431c:	2301      	movs	r3, #1
 800431e:	4642      	mov	r2, r8
 8004320:	4631      	mov	r1, r6
 8004322:	4628      	mov	r0, r5
 8004324:	47b8      	blx	r7
 8004326:	3001      	adds	r0, #1
 8004328:	f43f ae77 	beq.w	800401a <_printf_float+0xb6>
 800432c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004330:	4631      	mov	r1, r6
 8004332:	4628      	mov	r0, r5
 8004334:	47b8      	blx	r7
 8004336:	3001      	adds	r0, #1
 8004338:	f43f ae6f 	beq.w	800401a <_printf_float+0xb6>
 800433c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004340:	2200      	movs	r2, #0
 8004342:	2300      	movs	r3, #0
 8004344:	f7fc fb30 	bl	80009a8 <__aeabi_dcmpeq>
 8004348:	b9d8      	cbnz	r0, 8004382 <_printf_float+0x41e>
 800434a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800434c:	f108 0201 	add.w	r2, r8, #1
 8004350:	3b01      	subs	r3, #1
 8004352:	4631      	mov	r1, r6
 8004354:	4628      	mov	r0, r5
 8004356:	47b8      	blx	r7
 8004358:	3001      	adds	r0, #1
 800435a:	d10e      	bne.n	800437a <_printf_float+0x416>
 800435c:	e65d      	b.n	800401a <_printf_float+0xb6>
 800435e:	2301      	movs	r3, #1
 8004360:	464a      	mov	r2, r9
 8004362:	4631      	mov	r1, r6
 8004364:	4628      	mov	r0, r5
 8004366:	47b8      	blx	r7
 8004368:	3001      	adds	r0, #1
 800436a:	f43f ae56 	beq.w	800401a <_printf_float+0xb6>
 800436e:	f108 0801 	add.w	r8, r8, #1
 8004372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004374:	3b01      	subs	r3, #1
 8004376:	4543      	cmp	r3, r8
 8004378:	dcf1      	bgt.n	800435e <_printf_float+0x3fa>
 800437a:	4653      	mov	r3, sl
 800437c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004380:	e6e0      	b.n	8004144 <_printf_float+0x1e0>
 8004382:	f04f 0800 	mov.w	r8, #0
 8004386:	f104 091a 	add.w	r9, r4, #26
 800438a:	e7f2      	b.n	8004372 <_printf_float+0x40e>
 800438c:	2301      	movs	r3, #1
 800438e:	4642      	mov	r2, r8
 8004390:	e7df      	b.n	8004352 <_printf_float+0x3ee>
 8004392:	2301      	movs	r3, #1
 8004394:	464a      	mov	r2, r9
 8004396:	4631      	mov	r1, r6
 8004398:	4628      	mov	r0, r5
 800439a:	47b8      	blx	r7
 800439c:	3001      	adds	r0, #1
 800439e:	f43f ae3c 	beq.w	800401a <_printf_float+0xb6>
 80043a2:	f108 0801 	add.w	r8, r8, #1
 80043a6:	68e3      	ldr	r3, [r4, #12]
 80043a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80043aa:	1a5b      	subs	r3, r3, r1
 80043ac:	4543      	cmp	r3, r8
 80043ae:	dcf0      	bgt.n	8004392 <_printf_float+0x42e>
 80043b0:	e6fd      	b.n	80041ae <_printf_float+0x24a>
 80043b2:	f04f 0800 	mov.w	r8, #0
 80043b6:	f104 0919 	add.w	r9, r4, #25
 80043ba:	e7f4      	b.n	80043a6 <_printf_float+0x442>

080043bc <_printf_common>:
 80043bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c0:	4616      	mov	r6, r2
 80043c2:	4699      	mov	r9, r3
 80043c4:	688a      	ldr	r2, [r1, #8]
 80043c6:	690b      	ldr	r3, [r1, #16]
 80043c8:	4607      	mov	r7, r0
 80043ca:	4293      	cmp	r3, r2
 80043cc:	bfb8      	it	lt
 80043ce:	4613      	movlt	r3, r2
 80043d0:	6033      	str	r3, [r6, #0]
 80043d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043d6:	460c      	mov	r4, r1
 80043d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043dc:	b10a      	cbz	r2, 80043e2 <_printf_common+0x26>
 80043de:	3301      	adds	r3, #1
 80043e0:	6033      	str	r3, [r6, #0]
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	0699      	lsls	r1, r3, #26
 80043e6:	bf42      	ittt	mi
 80043e8:	6833      	ldrmi	r3, [r6, #0]
 80043ea:	3302      	addmi	r3, #2
 80043ec:	6033      	strmi	r3, [r6, #0]
 80043ee:	6825      	ldr	r5, [r4, #0]
 80043f0:	f015 0506 	ands.w	r5, r5, #6
 80043f4:	d106      	bne.n	8004404 <_printf_common+0x48>
 80043f6:	f104 0a19 	add.w	sl, r4, #25
 80043fa:	68e3      	ldr	r3, [r4, #12]
 80043fc:	6832      	ldr	r2, [r6, #0]
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	42ab      	cmp	r3, r5
 8004402:	dc28      	bgt.n	8004456 <_printf_common+0x9a>
 8004404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004408:	1e13      	subs	r3, r2, #0
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	bf18      	it	ne
 800440e:	2301      	movne	r3, #1
 8004410:	0692      	lsls	r2, r2, #26
 8004412:	d42d      	bmi.n	8004470 <_printf_common+0xb4>
 8004414:	4649      	mov	r1, r9
 8004416:	4638      	mov	r0, r7
 8004418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800441c:	47c0      	blx	r8
 800441e:	3001      	adds	r0, #1
 8004420:	d020      	beq.n	8004464 <_printf_common+0xa8>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	68e5      	ldr	r5, [r4, #12]
 8004426:	f003 0306 	and.w	r3, r3, #6
 800442a:	2b04      	cmp	r3, #4
 800442c:	bf18      	it	ne
 800442e:	2500      	movne	r5, #0
 8004430:	6832      	ldr	r2, [r6, #0]
 8004432:	f04f 0600 	mov.w	r6, #0
 8004436:	68a3      	ldr	r3, [r4, #8]
 8004438:	bf08      	it	eq
 800443a:	1aad      	subeq	r5, r5, r2
 800443c:	6922      	ldr	r2, [r4, #16]
 800443e:	bf08      	it	eq
 8004440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004444:	4293      	cmp	r3, r2
 8004446:	bfc4      	itt	gt
 8004448:	1a9b      	subgt	r3, r3, r2
 800444a:	18ed      	addgt	r5, r5, r3
 800444c:	341a      	adds	r4, #26
 800444e:	42b5      	cmp	r5, r6
 8004450:	d11a      	bne.n	8004488 <_printf_common+0xcc>
 8004452:	2000      	movs	r0, #0
 8004454:	e008      	b.n	8004468 <_printf_common+0xac>
 8004456:	2301      	movs	r3, #1
 8004458:	4652      	mov	r2, sl
 800445a:	4649      	mov	r1, r9
 800445c:	4638      	mov	r0, r7
 800445e:	47c0      	blx	r8
 8004460:	3001      	adds	r0, #1
 8004462:	d103      	bne.n	800446c <_printf_common+0xb0>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	3501      	adds	r5, #1
 800446e:	e7c4      	b.n	80043fa <_printf_common+0x3e>
 8004470:	2030      	movs	r0, #48	; 0x30
 8004472:	18e1      	adds	r1, r4, r3
 8004474:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800447e:	4422      	add	r2, r4
 8004480:	3302      	adds	r3, #2
 8004482:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004486:	e7c5      	b.n	8004414 <_printf_common+0x58>
 8004488:	2301      	movs	r3, #1
 800448a:	4622      	mov	r2, r4
 800448c:	4649      	mov	r1, r9
 800448e:	4638      	mov	r0, r7
 8004490:	47c0      	blx	r8
 8004492:	3001      	adds	r0, #1
 8004494:	d0e6      	beq.n	8004464 <_printf_common+0xa8>
 8004496:	3601      	adds	r6, #1
 8004498:	e7d9      	b.n	800444e <_printf_common+0x92>
	...

0800449c <_printf_i>:
 800449c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	7e0f      	ldrb	r7, [r1, #24]
 80044a2:	4691      	mov	r9, r2
 80044a4:	2f78      	cmp	r7, #120	; 0x78
 80044a6:	4680      	mov	r8, r0
 80044a8:	460c      	mov	r4, r1
 80044aa:	469a      	mov	sl, r3
 80044ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044b2:	d807      	bhi.n	80044c4 <_printf_i+0x28>
 80044b4:	2f62      	cmp	r7, #98	; 0x62
 80044b6:	d80a      	bhi.n	80044ce <_printf_i+0x32>
 80044b8:	2f00      	cmp	r7, #0
 80044ba:	f000 80d9 	beq.w	8004670 <_printf_i+0x1d4>
 80044be:	2f58      	cmp	r7, #88	; 0x58
 80044c0:	f000 80a4 	beq.w	800460c <_printf_i+0x170>
 80044c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044cc:	e03a      	b.n	8004544 <_printf_i+0xa8>
 80044ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044d2:	2b15      	cmp	r3, #21
 80044d4:	d8f6      	bhi.n	80044c4 <_printf_i+0x28>
 80044d6:	a101      	add	r1, pc, #4	; (adr r1, 80044dc <_printf_i+0x40>)
 80044d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004549 	.word	0x08004549
 80044e4:	080044c5 	.word	0x080044c5
 80044e8:	080044c5 	.word	0x080044c5
 80044ec:	080044c5 	.word	0x080044c5
 80044f0:	080044c5 	.word	0x080044c5
 80044f4:	08004549 	.word	0x08004549
 80044f8:	080044c5 	.word	0x080044c5
 80044fc:	080044c5 	.word	0x080044c5
 8004500:	080044c5 	.word	0x080044c5
 8004504:	080044c5 	.word	0x080044c5
 8004508:	08004657 	.word	0x08004657
 800450c:	08004579 	.word	0x08004579
 8004510:	08004639 	.word	0x08004639
 8004514:	080044c5 	.word	0x080044c5
 8004518:	080044c5 	.word	0x080044c5
 800451c:	08004679 	.word	0x08004679
 8004520:	080044c5 	.word	0x080044c5
 8004524:	08004579 	.word	0x08004579
 8004528:	080044c5 	.word	0x080044c5
 800452c:	080044c5 	.word	0x080044c5
 8004530:	08004641 	.word	0x08004641
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	602a      	str	r2, [r5, #0]
 800453c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004544:	2301      	movs	r3, #1
 8004546:	e0a4      	b.n	8004692 <_printf_i+0x1f6>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	6829      	ldr	r1, [r5, #0]
 800454c:	0606      	lsls	r6, r0, #24
 800454e:	f101 0304 	add.w	r3, r1, #4
 8004552:	d50a      	bpl.n	800456a <_printf_i+0xce>
 8004554:	680e      	ldr	r6, [r1, #0]
 8004556:	602b      	str	r3, [r5, #0]
 8004558:	2e00      	cmp	r6, #0
 800455a:	da03      	bge.n	8004564 <_printf_i+0xc8>
 800455c:	232d      	movs	r3, #45	; 0x2d
 800455e:	4276      	negs	r6, r6
 8004560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004564:	230a      	movs	r3, #10
 8004566:	485e      	ldr	r0, [pc, #376]	; (80046e0 <_printf_i+0x244>)
 8004568:	e019      	b.n	800459e <_printf_i+0x102>
 800456a:	680e      	ldr	r6, [r1, #0]
 800456c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	bf18      	it	ne
 8004574:	b236      	sxthne	r6, r6
 8004576:	e7ef      	b.n	8004558 <_printf_i+0xbc>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	6820      	ldr	r0, [r4, #0]
 800457c:	1d19      	adds	r1, r3, #4
 800457e:	6029      	str	r1, [r5, #0]
 8004580:	0601      	lsls	r1, r0, #24
 8004582:	d501      	bpl.n	8004588 <_printf_i+0xec>
 8004584:	681e      	ldr	r6, [r3, #0]
 8004586:	e002      	b.n	800458e <_printf_i+0xf2>
 8004588:	0646      	lsls	r6, r0, #25
 800458a:	d5fb      	bpl.n	8004584 <_printf_i+0xe8>
 800458c:	881e      	ldrh	r6, [r3, #0]
 800458e:	2f6f      	cmp	r7, #111	; 0x6f
 8004590:	bf0c      	ite	eq
 8004592:	2308      	moveq	r3, #8
 8004594:	230a      	movne	r3, #10
 8004596:	4852      	ldr	r0, [pc, #328]	; (80046e0 <_printf_i+0x244>)
 8004598:	2100      	movs	r1, #0
 800459a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800459e:	6865      	ldr	r5, [r4, #4]
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	bfa8      	it	ge
 80045a4:	6821      	ldrge	r1, [r4, #0]
 80045a6:	60a5      	str	r5, [r4, #8]
 80045a8:	bfa4      	itt	ge
 80045aa:	f021 0104 	bicge.w	r1, r1, #4
 80045ae:	6021      	strge	r1, [r4, #0]
 80045b0:	b90e      	cbnz	r6, 80045b6 <_printf_i+0x11a>
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	d04d      	beq.n	8004652 <_printf_i+0x1b6>
 80045b6:	4615      	mov	r5, r2
 80045b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80045bc:	fb03 6711 	mls	r7, r3, r1, r6
 80045c0:	5dc7      	ldrb	r7, [r0, r7]
 80045c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045c6:	4637      	mov	r7, r6
 80045c8:	42bb      	cmp	r3, r7
 80045ca:	460e      	mov	r6, r1
 80045cc:	d9f4      	bls.n	80045b8 <_printf_i+0x11c>
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d10b      	bne.n	80045ea <_printf_i+0x14e>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	07de      	lsls	r6, r3, #31
 80045d6:	d508      	bpl.n	80045ea <_printf_i+0x14e>
 80045d8:	6923      	ldr	r3, [r4, #16]
 80045da:	6861      	ldr	r1, [r4, #4]
 80045dc:	4299      	cmp	r1, r3
 80045de:	bfde      	ittt	le
 80045e0:	2330      	movle	r3, #48	; 0x30
 80045e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045ea:	1b52      	subs	r2, r2, r5
 80045ec:	6122      	str	r2, [r4, #16]
 80045ee:	464b      	mov	r3, r9
 80045f0:	4621      	mov	r1, r4
 80045f2:	4640      	mov	r0, r8
 80045f4:	f8cd a000 	str.w	sl, [sp]
 80045f8:	aa03      	add	r2, sp, #12
 80045fa:	f7ff fedf 	bl	80043bc <_printf_common>
 80045fe:	3001      	adds	r0, #1
 8004600:	d14c      	bne.n	800469c <_printf_i+0x200>
 8004602:	f04f 30ff 	mov.w	r0, #4294967295
 8004606:	b004      	add	sp, #16
 8004608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460c:	4834      	ldr	r0, [pc, #208]	; (80046e0 <_printf_i+0x244>)
 800460e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004612:	6829      	ldr	r1, [r5, #0]
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	f851 6b04 	ldr.w	r6, [r1], #4
 800461a:	6029      	str	r1, [r5, #0]
 800461c:	061d      	lsls	r5, r3, #24
 800461e:	d514      	bpl.n	800464a <_printf_i+0x1ae>
 8004620:	07df      	lsls	r7, r3, #31
 8004622:	bf44      	itt	mi
 8004624:	f043 0320 	orrmi.w	r3, r3, #32
 8004628:	6023      	strmi	r3, [r4, #0]
 800462a:	b91e      	cbnz	r6, 8004634 <_printf_i+0x198>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	f023 0320 	bic.w	r3, r3, #32
 8004632:	6023      	str	r3, [r4, #0]
 8004634:	2310      	movs	r3, #16
 8004636:	e7af      	b.n	8004598 <_printf_i+0xfc>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	f043 0320 	orr.w	r3, r3, #32
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	2378      	movs	r3, #120	; 0x78
 8004642:	4828      	ldr	r0, [pc, #160]	; (80046e4 <_printf_i+0x248>)
 8004644:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004648:	e7e3      	b.n	8004612 <_printf_i+0x176>
 800464a:	0659      	lsls	r1, r3, #25
 800464c:	bf48      	it	mi
 800464e:	b2b6      	uxthmi	r6, r6
 8004650:	e7e6      	b.n	8004620 <_printf_i+0x184>
 8004652:	4615      	mov	r5, r2
 8004654:	e7bb      	b.n	80045ce <_printf_i+0x132>
 8004656:	682b      	ldr	r3, [r5, #0]
 8004658:	6826      	ldr	r6, [r4, #0]
 800465a:	1d18      	adds	r0, r3, #4
 800465c:	6961      	ldr	r1, [r4, #20]
 800465e:	6028      	str	r0, [r5, #0]
 8004660:	0635      	lsls	r5, r6, #24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	d501      	bpl.n	800466a <_printf_i+0x1ce>
 8004666:	6019      	str	r1, [r3, #0]
 8004668:	e002      	b.n	8004670 <_printf_i+0x1d4>
 800466a:	0670      	lsls	r0, r6, #25
 800466c:	d5fb      	bpl.n	8004666 <_printf_i+0x1ca>
 800466e:	8019      	strh	r1, [r3, #0]
 8004670:	2300      	movs	r3, #0
 8004672:	4615      	mov	r5, r2
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	e7ba      	b.n	80045ee <_printf_i+0x152>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	2100      	movs	r1, #0
 800467c:	1d1a      	adds	r2, r3, #4
 800467e:	602a      	str	r2, [r5, #0]
 8004680:	681d      	ldr	r5, [r3, #0]
 8004682:	6862      	ldr	r2, [r4, #4]
 8004684:	4628      	mov	r0, r5
 8004686:	f000 fee9 	bl	800545c <memchr>
 800468a:	b108      	cbz	r0, 8004690 <_printf_i+0x1f4>
 800468c:	1b40      	subs	r0, r0, r5
 800468e:	6060      	str	r0, [r4, #4]
 8004690:	6863      	ldr	r3, [r4, #4]
 8004692:	6123      	str	r3, [r4, #16]
 8004694:	2300      	movs	r3, #0
 8004696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800469a:	e7a8      	b.n	80045ee <_printf_i+0x152>
 800469c:	462a      	mov	r2, r5
 800469e:	4649      	mov	r1, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	6923      	ldr	r3, [r4, #16]
 80046a4:	47d0      	blx	sl
 80046a6:	3001      	adds	r0, #1
 80046a8:	d0ab      	beq.n	8004602 <_printf_i+0x166>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	079b      	lsls	r3, r3, #30
 80046ae:	d413      	bmi.n	80046d8 <_printf_i+0x23c>
 80046b0:	68e0      	ldr	r0, [r4, #12]
 80046b2:	9b03      	ldr	r3, [sp, #12]
 80046b4:	4298      	cmp	r0, r3
 80046b6:	bfb8      	it	lt
 80046b8:	4618      	movlt	r0, r3
 80046ba:	e7a4      	b.n	8004606 <_printf_i+0x16a>
 80046bc:	2301      	movs	r3, #1
 80046be:	4632      	mov	r2, r6
 80046c0:	4649      	mov	r1, r9
 80046c2:	4640      	mov	r0, r8
 80046c4:	47d0      	blx	sl
 80046c6:	3001      	adds	r0, #1
 80046c8:	d09b      	beq.n	8004602 <_printf_i+0x166>
 80046ca:	3501      	adds	r5, #1
 80046cc:	68e3      	ldr	r3, [r4, #12]
 80046ce:	9903      	ldr	r1, [sp, #12]
 80046d0:	1a5b      	subs	r3, r3, r1
 80046d2:	42ab      	cmp	r3, r5
 80046d4:	dcf2      	bgt.n	80046bc <_printf_i+0x220>
 80046d6:	e7eb      	b.n	80046b0 <_printf_i+0x214>
 80046d8:	2500      	movs	r5, #0
 80046da:	f104 0619 	add.w	r6, r4, #25
 80046de:	e7f5      	b.n	80046cc <_printf_i+0x230>
 80046e0:	08006cf2 	.word	0x08006cf2
 80046e4:	08006d03 	.word	0x08006d03

080046e8 <siprintf>:
 80046e8:	b40e      	push	{r1, r2, r3}
 80046ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046ee:	b500      	push	{lr}
 80046f0:	b09c      	sub	sp, #112	; 0x70
 80046f2:	ab1d      	add	r3, sp, #116	; 0x74
 80046f4:	9002      	str	r0, [sp, #8]
 80046f6:	9006      	str	r0, [sp, #24]
 80046f8:	9107      	str	r1, [sp, #28]
 80046fa:	9104      	str	r1, [sp, #16]
 80046fc:	4808      	ldr	r0, [pc, #32]	; (8004720 <siprintf+0x38>)
 80046fe:	4909      	ldr	r1, [pc, #36]	; (8004724 <siprintf+0x3c>)
 8004700:	f853 2b04 	ldr.w	r2, [r3], #4
 8004704:	9105      	str	r1, [sp, #20]
 8004706:	6800      	ldr	r0, [r0, #0]
 8004708:	a902      	add	r1, sp, #8
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	f001 fb90 	bl	8005e30 <_svfiprintf_r>
 8004710:	2200      	movs	r2, #0
 8004712:	9b02      	ldr	r3, [sp, #8]
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	b01c      	add	sp, #112	; 0x70
 8004718:	f85d eb04 	ldr.w	lr, [sp], #4
 800471c:	b003      	add	sp, #12
 800471e:	4770      	bx	lr
 8004720:	2000001c 	.word	0x2000001c
 8004724:	ffff0208 	.word	0xffff0208

08004728 <strncpy>:
 8004728:	4603      	mov	r3, r0
 800472a:	b510      	push	{r4, lr}
 800472c:	3901      	subs	r1, #1
 800472e:	b132      	cbz	r2, 800473e <strncpy+0x16>
 8004730:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004734:	3a01      	subs	r2, #1
 8004736:	f803 4b01 	strb.w	r4, [r3], #1
 800473a:	2c00      	cmp	r4, #0
 800473c:	d1f7      	bne.n	800472e <strncpy+0x6>
 800473e:	2100      	movs	r1, #0
 8004740:	441a      	add	r2, r3
 8004742:	4293      	cmp	r3, r2
 8004744:	d100      	bne.n	8004748 <strncpy+0x20>
 8004746:	bd10      	pop	{r4, pc}
 8004748:	f803 1b01 	strb.w	r1, [r3], #1
 800474c:	e7f9      	b.n	8004742 <strncpy+0x1a>

0800474e <quorem>:
 800474e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004752:	6903      	ldr	r3, [r0, #16]
 8004754:	690c      	ldr	r4, [r1, #16]
 8004756:	4607      	mov	r7, r0
 8004758:	42a3      	cmp	r3, r4
 800475a:	f2c0 8082 	blt.w	8004862 <quorem+0x114>
 800475e:	3c01      	subs	r4, #1
 8004760:	f100 0514 	add.w	r5, r0, #20
 8004764:	f101 0814 	add.w	r8, r1, #20
 8004768:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004772:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004776:	3301      	adds	r3, #1
 8004778:	429a      	cmp	r2, r3
 800477a:	fbb2 f6f3 	udiv	r6, r2, r3
 800477e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004782:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004786:	d331      	bcc.n	80047ec <quorem+0x9e>
 8004788:	f04f 0e00 	mov.w	lr, #0
 800478c:	4640      	mov	r0, r8
 800478e:	46ac      	mov	ip, r5
 8004790:	46f2      	mov	sl, lr
 8004792:	f850 2b04 	ldr.w	r2, [r0], #4
 8004796:	b293      	uxth	r3, r2
 8004798:	fb06 e303 	mla	r3, r6, r3, lr
 800479c:	0c12      	lsrs	r2, r2, #16
 800479e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	fb06 e202 	mla	r2, r6, r2, lr
 80047a8:	ebaa 0303 	sub.w	r3, sl, r3
 80047ac:	f8dc a000 	ldr.w	sl, [ip]
 80047b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80047b4:	fa1f fa8a 	uxth.w	sl, sl
 80047b8:	4453      	add	r3, sl
 80047ba:	f8dc a000 	ldr.w	sl, [ip]
 80047be:	b292      	uxth	r2, r2
 80047c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80047c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047ce:	4581      	cmp	r9, r0
 80047d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80047d4:	f84c 3b04 	str.w	r3, [ip], #4
 80047d8:	d2db      	bcs.n	8004792 <quorem+0x44>
 80047da:	f855 300b 	ldr.w	r3, [r5, fp]
 80047de:	b92b      	cbnz	r3, 80047ec <quorem+0x9e>
 80047e0:	9b01      	ldr	r3, [sp, #4]
 80047e2:	3b04      	subs	r3, #4
 80047e4:	429d      	cmp	r5, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	d32f      	bcc.n	800484a <quorem+0xfc>
 80047ea:	613c      	str	r4, [r7, #16]
 80047ec:	4638      	mov	r0, r7
 80047ee:	f001 f8cf 	bl	8005990 <__mcmp>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	db25      	blt.n	8004842 <quorem+0xf4>
 80047f6:	4628      	mov	r0, r5
 80047f8:	f04f 0c00 	mov.w	ip, #0
 80047fc:	3601      	adds	r6, #1
 80047fe:	f858 1b04 	ldr.w	r1, [r8], #4
 8004802:	f8d0 e000 	ldr.w	lr, [r0]
 8004806:	b28b      	uxth	r3, r1
 8004808:	ebac 0303 	sub.w	r3, ip, r3
 800480c:	fa1f f28e 	uxth.w	r2, lr
 8004810:	4413      	add	r3, r2
 8004812:	0c0a      	lsrs	r2, r1, #16
 8004814:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004818:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800481c:	b29b      	uxth	r3, r3
 800481e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004822:	45c1      	cmp	r9, r8
 8004824:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004828:	f840 3b04 	str.w	r3, [r0], #4
 800482c:	d2e7      	bcs.n	80047fe <quorem+0xb0>
 800482e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004836:	b922      	cbnz	r2, 8004842 <quorem+0xf4>
 8004838:	3b04      	subs	r3, #4
 800483a:	429d      	cmp	r5, r3
 800483c:	461a      	mov	r2, r3
 800483e:	d30a      	bcc.n	8004856 <quorem+0x108>
 8004840:	613c      	str	r4, [r7, #16]
 8004842:	4630      	mov	r0, r6
 8004844:	b003      	add	sp, #12
 8004846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	3b04      	subs	r3, #4
 800484e:	2a00      	cmp	r2, #0
 8004850:	d1cb      	bne.n	80047ea <quorem+0x9c>
 8004852:	3c01      	subs	r4, #1
 8004854:	e7c6      	b.n	80047e4 <quorem+0x96>
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	3b04      	subs	r3, #4
 800485a:	2a00      	cmp	r2, #0
 800485c:	d1f0      	bne.n	8004840 <quorem+0xf2>
 800485e:	3c01      	subs	r4, #1
 8004860:	e7eb      	b.n	800483a <quorem+0xec>
 8004862:	2000      	movs	r0, #0
 8004864:	e7ee      	b.n	8004844 <quorem+0xf6>
	...

08004868 <_dtoa_r>:
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	4616      	mov	r6, r2
 800486e:	461f      	mov	r7, r3
 8004870:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004872:	b099      	sub	sp, #100	; 0x64
 8004874:	4605      	mov	r5, r0
 8004876:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800487a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800487e:	b974      	cbnz	r4, 800489e <_dtoa_r+0x36>
 8004880:	2010      	movs	r0, #16
 8004882:	f000 fde3 	bl	800544c <malloc>
 8004886:	4602      	mov	r2, r0
 8004888:	6268      	str	r0, [r5, #36]	; 0x24
 800488a:	b920      	cbnz	r0, 8004896 <_dtoa_r+0x2e>
 800488c:	21ea      	movs	r1, #234	; 0xea
 800488e:	4ba8      	ldr	r3, [pc, #672]	; (8004b30 <_dtoa_r+0x2c8>)
 8004890:	48a8      	ldr	r0, [pc, #672]	; (8004b34 <_dtoa_r+0x2cc>)
 8004892:	f001 fbdd 	bl	8006050 <__assert_func>
 8004896:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800489a:	6004      	str	r4, [r0, #0]
 800489c:	60c4      	str	r4, [r0, #12]
 800489e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	b151      	cbz	r1, 80048ba <_dtoa_r+0x52>
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	2301      	movs	r3, #1
 80048a8:	4093      	lsls	r3, r2
 80048aa:	604a      	str	r2, [r1, #4]
 80048ac:	608b      	str	r3, [r1, #8]
 80048ae:	4628      	mov	r0, r5
 80048b0:	f000 fe30 	bl	8005514 <_Bfree>
 80048b4:	2200      	movs	r2, #0
 80048b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	1e3b      	subs	r3, r7, #0
 80048bc:	bfaf      	iteee	ge
 80048be:	2300      	movge	r3, #0
 80048c0:	2201      	movlt	r2, #1
 80048c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80048c6:	9305      	strlt	r3, [sp, #20]
 80048c8:	bfa8      	it	ge
 80048ca:	f8c8 3000 	strge.w	r3, [r8]
 80048ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80048d2:	4b99      	ldr	r3, [pc, #612]	; (8004b38 <_dtoa_r+0x2d0>)
 80048d4:	bfb8      	it	lt
 80048d6:	f8c8 2000 	strlt.w	r2, [r8]
 80048da:	ea33 0309 	bics.w	r3, r3, r9
 80048de:	d119      	bne.n	8004914 <_dtoa_r+0xac>
 80048e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80048e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80048ec:	4333      	orrs	r3, r6
 80048ee:	f000 857f 	beq.w	80053f0 <_dtoa_r+0xb88>
 80048f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80048f4:	b953      	cbnz	r3, 800490c <_dtoa_r+0xa4>
 80048f6:	4b91      	ldr	r3, [pc, #580]	; (8004b3c <_dtoa_r+0x2d4>)
 80048f8:	e022      	b.n	8004940 <_dtoa_r+0xd8>
 80048fa:	4b91      	ldr	r3, [pc, #580]	; (8004b40 <_dtoa_r+0x2d8>)
 80048fc:	9303      	str	r3, [sp, #12]
 80048fe:	3308      	adds	r3, #8
 8004900:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	9803      	ldr	r0, [sp, #12]
 8004906:	b019      	add	sp, #100	; 0x64
 8004908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490c:	4b8b      	ldr	r3, [pc, #556]	; (8004b3c <_dtoa_r+0x2d4>)
 800490e:	9303      	str	r3, [sp, #12]
 8004910:	3303      	adds	r3, #3
 8004912:	e7f5      	b.n	8004900 <_dtoa_r+0x98>
 8004914:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004918:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800491c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004920:	2200      	movs	r2, #0
 8004922:	2300      	movs	r3, #0
 8004924:	f7fc f840 	bl	80009a8 <__aeabi_dcmpeq>
 8004928:	4680      	mov	r8, r0
 800492a:	b158      	cbz	r0, 8004944 <_dtoa_r+0xdc>
 800492c:	2301      	movs	r3, #1
 800492e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8558 	beq.w	80053ea <_dtoa_r+0xb82>
 800493a:	4882      	ldr	r0, [pc, #520]	; (8004b44 <_dtoa_r+0x2dc>)
 800493c:	6018      	str	r0, [r3, #0]
 800493e:	1e43      	subs	r3, r0, #1
 8004940:	9303      	str	r3, [sp, #12]
 8004942:	e7df      	b.n	8004904 <_dtoa_r+0x9c>
 8004944:	ab16      	add	r3, sp, #88	; 0x58
 8004946:	9301      	str	r3, [sp, #4]
 8004948:	ab17      	add	r3, sp, #92	; 0x5c
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	4628      	mov	r0, r5
 800494e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004952:	f001 f8c5 	bl	8005ae0 <__d2b>
 8004956:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800495a:	4683      	mov	fp, r0
 800495c:	2c00      	cmp	r4, #0
 800495e:	d07f      	beq.n	8004a60 <_dtoa_r+0x1f8>
 8004960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004966:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800496a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800496e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004972:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004976:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800497a:	2200      	movs	r2, #0
 800497c:	4b72      	ldr	r3, [pc, #456]	; (8004b48 <_dtoa_r+0x2e0>)
 800497e:	f7fb fbf3 	bl	8000168 <__aeabi_dsub>
 8004982:	a365      	add	r3, pc, #404	; (adr r3, 8004b18 <_dtoa_r+0x2b0>)
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f7fb fda6 	bl	80004d8 <__aeabi_dmul>
 800498c:	a364      	add	r3, pc, #400	; (adr r3, 8004b20 <_dtoa_r+0x2b8>)
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f7fb fbeb 	bl	800016c <__adddf3>
 8004996:	4606      	mov	r6, r0
 8004998:	4620      	mov	r0, r4
 800499a:	460f      	mov	r7, r1
 800499c:	f7fb fd32 	bl	8000404 <__aeabi_i2d>
 80049a0:	a361      	add	r3, pc, #388	; (adr r3, 8004b28 <_dtoa_r+0x2c0>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f7fb fd97 	bl	80004d8 <__aeabi_dmul>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4630      	mov	r0, r6
 80049b0:	4639      	mov	r1, r7
 80049b2:	f7fb fbdb 	bl	800016c <__adddf3>
 80049b6:	4606      	mov	r6, r0
 80049b8:	460f      	mov	r7, r1
 80049ba:	f7fc f83d 	bl	8000a38 <__aeabi_d2iz>
 80049be:	2200      	movs	r2, #0
 80049c0:	4682      	mov	sl, r0
 80049c2:	2300      	movs	r3, #0
 80049c4:	4630      	mov	r0, r6
 80049c6:	4639      	mov	r1, r7
 80049c8:	f7fb fff8 	bl	80009bc <__aeabi_dcmplt>
 80049cc:	b148      	cbz	r0, 80049e2 <_dtoa_r+0x17a>
 80049ce:	4650      	mov	r0, sl
 80049d0:	f7fb fd18 	bl	8000404 <__aeabi_i2d>
 80049d4:	4632      	mov	r2, r6
 80049d6:	463b      	mov	r3, r7
 80049d8:	f7fb ffe6 	bl	80009a8 <__aeabi_dcmpeq>
 80049dc:	b908      	cbnz	r0, 80049e2 <_dtoa_r+0x17a>
 80049de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049e2:	f1ba 0f16 	cmp.w	sl, #22
 80049e6:	d858      	bhi.n	8004a9a <_dtoa_r+0x232>
 80049e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049ec:	4b57      	ldr	r3, [pc, #348]	; (8004b4c <_dtoa_r+0x2e4>)
 80049ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f7fb ffe1 	bl	80009bc <__aeabi_dcmplt>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d04f      	beq.n	8004a9e <_dtoa_r+0x236>
 80049fe:	2300      	movs	r3, #0
 8004a00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a04:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004a08:	1b1c      	subs	r4, r3, r4
 8004a0a:	1e63      	subs	r3, r4, #1
 8004a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0e:	bf49      	itett	mi
 8004a10:	f1c4 0301 	rsbmi	r3, r4, #1
 8004a14:	2300      	movpl	r3, #0
 8004a16:	9306      	strmi	r3, [sp, #24]
 8004a18:	2300      	movmi	r3, #0
 8004a1a:	bf54      	ite	pl
 8004a1c:	9306      	strpl	r3, [sp, #24]
 8004a1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004a20:	f1ba 0f00 	cmp.w	sl, #0
 8004a24:	db3d      	blt.n	8004aa2 <_dtoa_r+0x23a>
 8004a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a28:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004a2c:	4453      	add	r3, sl
 8004a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a30:	2300      	movs	r3, #0
 8004a32:	930a      	str	r3, [sp, #40]	; 0x28
 8004a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a36:	2b09      	cmp	r3, #9
 8004a38:	f200 808c 	bhi.w	8004b54 <_dtoa_r+0x2ec>
 8004a3c:	2b05      	cmp	r3, #5
 8004a3e:	bfc4      	itt	gt
 8004a40:	3b04      	subgt	r3, #4
 8004a42:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004a44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a46:	bfc8      	it	gt
 8004a48:	2400      	movgt	r4, #0
 8004a4a:	f1a3 0302 	sub.w	r3, r3, #2
 8004a4e:	bfd8      	it	le
 8004a50:	2401      	movle	r4, #1
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	f200 808a 	bhi.w	8004b6c <_dtoa_r+0x304>
 8004a58:	e8df f003 	tbb	[pc, r3]
 8004a5c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004a60:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004a64:	441c      	add	r4, r3
 8004a66:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	bfc3      	ittte	gt
 8004a6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a72:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004a76:	fa09 f303 	lslgt.w	r3, r9, r3
 8004a7a:	f1c3 0320 	rsble	r3, r3, #32
 8004a7e:	bfc6      	itte	gt
 8004a80:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a84:	4318      	orrgt	r0, r3
 8004a86:	fa06 f003 	lslle.w	r0, r6, r3
 8004a8a:	f7fb fcab 	bl	80003e4 <__aeabi_ui2d>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004a94:	3c01      	subs	r4, #1
 8004a96:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a98:	e76f      	b.n	800497a <_dtoa_r+0x112>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e7b2      	b.n	8004a04 <_dtoa_r+0x19c>
 8004a9e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004aa0:	e7b1      	b.n	8004a06 <_dtoa_r+0x19e>
 8004aa2:	9b06      	ldr	r3, [sp, #24]
 8004aa4:	eba3 030a 	sub.w	r3, r3, sl
 8004aa8:	9306      	str	r3, [sp, #24]
 8004aaa:	f1ca 0300 	rsb	r3, sl, #0
 8004aae:	930a      	str	r3, [sp, #40]	; 0x28
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ab4:	e7be      	b.n	8004a34 <_dtoa_r+0x1cc>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004aba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	dc58      	bgt.n	8004b72 <_dtoa_r+0x30a>
 8004ac0:	f04f 0901 	mov.w	r9, #1
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	f8cd 9020 	str.w	r9, [sp, #32]
 8004aca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ace:	2200      	movs	r2, #0
 8004ad0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ad2:	6042      	str	r2, [r0, #4]
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	f102 0614 	add.w	r6, r2, #20
 8004ada:	429e      	cmp	r6, r3
 8004adc:	6841      	ldr	r1, [r0, #4]
 8004ade:	d94e      	bls.n	8004b7e <_dtoa_r+0x316>
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 fcd7 	bl	8005494 <_Balloc>
 8004ae6:	9003      	str	r0, [sp, #12]
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	d14c      	bne.n	8004b86 <_dtoa_r+0x31e>
 8004aec:	4602      	mov	r2, r0
 8004aee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004af2:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <_dtoa_r+0x2e8>)
 8004af4:	e6cc      	b.n	8004890 <_dtoa_r+0x28>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e7de      	b.n	8004ab8 <_dtoa_r+0x250>
 8004afa:	2300      	movs	r3, #0
 8004afc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004afe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b00:	eb0a 0903 	add.w	r9, sl, r3
 8004b04:	f109 0301 	add.w	r3, r9, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	9308      	str	r3, [sp, #32]
 8004b0c:	bfb8      	it	lt
 8004b0e:	2301      	movlt	r3, #1
 8004b10:	e7dd      	b.n	8004ace <_dtoa_r+0x266>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e7f2      	b.n	8004afc <_dtoa_r+0x294>
 8004b16:	bf00      	nop
 8004b18:	636f4361 	.word	0x636f4361
 8004b1c:	3fd287a7 	.word	0x3fd287a7
 8004b20:	8b60c8b3 	.word	0x8b60c8b3
 8004b24:	3fc68a28 	.word	0x3fc68a28
 8004b28:	509f79fb 	.word	0x509f79fb
 8004b2c:	3fd34413 	.word	0x3fd34413
 8004b30:	08006d21 	.word	0x08006d21
 8004b34:	08006d38 	.word	0x08006d38
 8004b38:	7ff00000 	.word	0x7ff00000
 8004b3c:	08006d1d 	.word	0x08006d1d
 8004b40:	08006d14 	.word	0x08006d14
 8004b44:	08006cf1 	.word	0x08006cf1
 8004b48:	3ff80000 	.word	0x3ff80000
 8004b4c:	08006e28 	.word	0x08006e28
 8004b50:	08006d93 	.word	0x08006d93
 8004b54:	2401      	movs	r4, #1
 8004b56:	2300      	movs	r3, #0
 8004b58:	940b      	str	r4, [sp, #44]	; 0x2c
 8004b5a:	9322      	str	r3, [sp, #136]	; 0x88
 8004b5c:	f04f 39ff 	mov.w	r9, #4294967295
 8004b60:	2200      	movs	r2, #0
 8004b62:	2312      	movs	r3, #18
 8004b64:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b68:	9223      	str	r2, [sp, #140]	; 0x8c
 8004b6a:	e7b0      	b.n	8004ace <_dtoa_r+0x266>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b70:	e7f4      	b.n	8004b5c <_dtoa_r+0x2f4>
 8004b72:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004b76:	464b      	mov	r3, r9
 8004b78:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b7c:	e7a7      	b.n	8004ace <_dtoa_r+0x266>
 8004b7e:	3101      	adds	r1, #1
 8004b80:	6041      	str	r1, [r0, #4]
 8004b82:	0052      	lsls	r2, r2, #1
 8004b84:	e7a7      	b.n	8004ad6 <_dtoa_r+0x26e>
 8004b86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b88:	9a03      	ldr	r2, [sp, #12]
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	9b08      	ldr	r3, [sp, #32]
 8004b8e:	2b0e      	cmp	r3, #14
 8004b90:	f200 80a8 	bhi.w	8004ce4 <_dtoa_r+0x47c>
 8004b94:	2c00      	cmp	r4, #0
 8004b96:	f000 80a5 	beq.w	8004ce4 <_dtoa_r+0x47c>
 8004b9a:	f1ba 0f00 	cmp.w	sl, #0
 8004b9e:	dd34      	ble.n	8004c0a <_dtoa_r+0x3a2>
 8004ba0:	4a9a      	ldr	r2, [pc, #616]	; (8004e0c <_dtoa_r+0x5a4>)
 8004ba2:	f00a 030f 	and.w	r3, sl, #15
 8004ba6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004baa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004bae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004bb6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004bba:	d016      	beq.n	8004bea <_dtoa_r+0x382>
 8004bbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004bc0:	4b93      	ldr	r3, [pc, #588]	; (8004e10 <_dtoa_r+0x5a8>)
 8004bc2:	2703      	movs	r7, #3
 8004bc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004bc8:	f7fb fdb0 	bl	800072c <__aeabi_ddiv>
 8004bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bd0:	f004 040f 	and.w	r4, r4, #15
 8004bd4:	4e8e      	ldr	r6, [pc, #568]	; (8004e10 <_dtoa_r+0x5a8>)
 8004bd6:	b954      	cbnz	r4, 8004bee <_dtoa_r+0x386>
 8004bd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004be0:	f7fb fda4 	bl	800072c <__aeabi_ddiv>
 8004be4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004be8:	e029      	b.n	8004c3e <_dtoa_r+0x3d6>
 8004bea:	2702      	movs	r7, #2
 8004bec:	e7f2      	b.n	8004bd4 <_dtoa_r+0x36c>
 8004bee:	07e1      	lsls	r1, r4, #31
 8004bf0:	d508      	bpl.n	8004c04 <_dtoa_r+0x39c>
 8004bf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bf6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004bfa:	f7fb fc6d 	bl	80004d8 <__aeabi_dmul>
 8004bfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c02:	3701      	adds	r7, #1
 8004c04:	1064      	asrs	r4, r4, #1
 8004c06:	3608      	adds	r6, #8
 8004c08:	e7e5      	b.n	8004bd6 <_dtoa_r+0x36e>
 8004c0a:	f000 80a5 	beq.w	8004d58 <_dtoa_r+0x4f0>
 8004c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c12:	f1ca 0400 	rsb	r4, sl, #0
 8004c16:	4b7d      	ldr	r3, [pc, #500]	; (8004e0c <_dtoa_r+0x5a4>)
 8004c18:	f004 020f 	and.w	r2, r4, #15
 8004c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f7fb fc58 	bl	80004d8 <__aeabi_dmul>
 8004c28:	2702      	movs	r7, #2
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c30:	4e77      	ldr	r6, [pc, #476]	; (8004e10 <_dtoa_r+0x5a8>)
 8004c32:	1124      	asrs	r4, r4, #4
 8004c34:	2c00      	cmp	r4, #0
 8004c36:	f040 8084 	bne.w	8004d42 <_dtoa_r+0x4da>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1d2      	bne.n	8004be4 <_dtoa_r+0x37c>
 8004c3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 808b 	beq.w	8004d5c <_dtoa_r+0x4f4>
 8004c46:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004c4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c52:	2200      	movs	r2, #0
 8004c54:	4b6f      	ldr	r3, [pc, #444]	; (8004e14 <_dtoa_r+0x5ac>)
 8004c56:	f7fb feb1 	bl	80009bc <__aeabi_dcmplt>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d07e      	beq.n	8004d5c <_dtoa_r+0x4f4>
 8004c5e:	9b08      	ldr	r3, [sp, #32]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d07b      	beq.n	8004d5c <_dtoa_r+0x4f4>
 8004c64:	f1b9 0f00 	cmp.w	r9, #0
 8004c68:	dd38      	ble.n	8004cdc <_dtoa_r+0x474>
 8004c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c6e:	2200      	movs	r2, #0
 8004c70:	4b69      	ldr	r3, [pc, #420]	; (8004e18 <_dtoa_r+0x5b0>)
 8004c72:	f7fb fc31 	bl	80004d8 <__aeabi_dmul>
 8004c76:	464c      	mov	r4, r9
 8004c78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c7c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004c80:	3701      	adds	r7, #1
 8004c82:	4638      	mov	r0, r7
 8004c84:	f7fb fbbe 	bl	8000404 <__aeabi_i2d>
 8004c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c8c:	f7fb fc24 	bl	80004d8 <__aeabi_dmul>
 8004c90:	2200      	movs	r2, #0
 8004c92:	4b62      	ldr	r3, [pc, #392]	; (8004e1c <_dtoa_r+0x5b4>)
 8004c94:	f7fb fa6a 	bl	800016c <__adddf3>
 8004c98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004c9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ca0:	9611      	str	r6, [sp, #68]	; 0x44
 8004ca2:	2c00      	cmp	r4, #0
 8004ca4:	d15d      	bne.n	8004d62 <_dtoa_r+0x4fa>
 8004ca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004caa:	2200      	movs	r2, #0
 8004cac:	4b5c      	ldr	r3, [pc, #368]	; (8004e20 <_dtoa_r+0x5b8>)
 8004cae:	f7fb fa5b 	bl	8000168 <__aeabi_dsub>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004cba:	4633      	mov	r3, r6
 8004cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cbe:	f7fb fe9b 	bl	80009f8 <__aeabi_dcmpgt>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	f040 829c 	bne.w	8005200 <_dtoa_r+0x998>
 8004cc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ccc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004cd2:	f7fb fe73 	bl	80009bc <__aeabi_dcmplt>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	f040 8290 	bne.w	80051fc <_dtoa_r+0x994>
 8004cdc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004ce0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f2c0 8152 	blt.w	8004f90 <_dtoa_r+0x728>
 8004cec:	f1ba 0f0e 	cmp.w	sl, #14
 8004cf0:	f300 814e 	bgt.w	8004f90 <_dtoa_r+0x728>
 8004cf4:	4b45      	ldr	r3, [pc, #276]	; (8004e0c <_dtoa_r+0x5a4>)
 8004cf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004cfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cfe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004d02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f280 80db 	bge.w	8004ec0 <_dtoa_r+0x658>
 8004d0a:	9b08      	ldr	r3, [sp, #32]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f300 80d7 	bgt.w	8004ec0 <_dtoa_r+0x658>
 8004d12:	f040 8272 	bne.w	80051fa <_dtoa_r+0x992>
 8004d16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4b40      	ldr	r3, [pc, #256]	; (8004e20 <_dtoa_r+0x5b8>)
 8004d1e:	f7fb fbdb 	bl	80004d8 <__aeabi_dmul>
 8004d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d26:	f7fb fe5d 	bl	80009e4 <__aeabi_dcmpge>
 8004d2a:	9c08      	ldr	r4, [sp, #32]
 8004d2c:	4626      	mov	r6, r4
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	f040 8248 	bne.w	80051c4 <_dtoa_r+0x95c>
 8004d34:	2331      	movs	r3, #49	; 0x31
 8004d36:	9f03      	ldr	r7, [sp, #12]
 8004d38:	f10a 0a01 	add.w	sl, sl, #1
 8004d3c:	f807 3b01 	strb.w	r3, [r7], #1
 8004d40:	e244      	b.n	80051cc <_dtoa_r+0x964>
 8004d42:	07e2      	lsls	r2, r4, #31
 8004d44:	d505      	bpl.n	8004d52 <_dtoa_r+0x4ea>
 8004d46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d4a:	f7fb fbc5 	bl	80004d8 <__aeabi_dmul>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	3701      	adds	r7, #1
 8004d52:	1064      	asrs	r4, r4, #1
 8004d54:	3608      	adds	r6, #8
 8004d56:	e76d      	b.n	8004c34 <_dtoa_r+0x3cc>
 8004d58:	2702      	movs	r7, #2
 8004d5a:	e770      	b.n	8004c3e <_dtoa_r+0x3d6>
 8004d5c:	46d0      	mov	r8, sl
 8004d5e:	9c08      	ldr	r4, [sp, #32]
 8004d60:	e78f      	b.n	8004c82 <_dtoa_r+0x41a>
 8004d62:	9903      	ldr	r1, [sp, #12]
 8004d64:	4b29      	ldr	r3, [pc, #164]	; (8004e0c <_dtoa_r+0x5a4>)
 8004d66:	4421      	add	r1, r4
 8004d68:	9112      	str	r1, [sp, #72]	; 0x48
 8004d6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d70:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004d74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d78:	2900      	cmp	r1, #0
 8004d7a:	d055      	beq.n	8004e28 <_dtoa_r+0x5c0>
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	4929      	ldr	r1, [pc, #164]	; (8004e24 <_dtoa_r+0x5bc>)
 8004d80:	f7fb fcd4 	bl	800072c <__aeabi_ddiv>
 8004d84:	463b      	mov	r3, r7
 8004d86:	4632      	mov	r2, r6
 8004d88:	f7fb f9ee 	bl	8000168 <__aeabi_dsub>
 8004d8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d90:	9f03      	ldr	r7, [sp, #12]
 8004d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d96:	f7fb fe4f 	bl	8000a38 <__aeabi_d2iz>
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	f7fb fb32 	bl	8000404 <__aeabi_i2d>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da8:	f7fb f9de 	bl	8000168 <__aeabi_dsub>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	3430      	adds	r4, #48	; 0x30
 8004db2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004db6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dba:	f807 4b01 	strb.w	r4, [r7], #1
 8004dbe:	f7fb fdfd 	bl	80009bc <__aeabi_dcmplt>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d174      	bne.n	8004eb0 <_dtoa_r+0x648>
 8004dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dca:	2000      	movs	r0, #0
 8004dcc:	4911      	ldr	r1, [pc, #68]	; (8004e14 <_dtoa_r+0x5ac>)
 8004dce:	f7fb f9cb 	bl	8000168 <__aeabi_dsub>
 8004dd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004dd6:	f7fb fdf1 	bl	80009bc <__aeabi_dcmplt>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	f040 80b7 	bne.w	8004f4e <_dtoa_r+0x6e6>
 8004de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004de2:	429f      	cmp	r7, r3
 8004de4:	f43f af7a 	beq.w	8004cdc <_dtoa_r+0x474>
 8004de8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dec:	2200      	movs	r2, #0
 8004dee:	4b0a      	ldr	r3, [pc, #40]	; (8004e18 <_dtoa_r+0x5b0>)
 8004df0:	f7fb fb72 	bl	80004d8 <__aeabi_dmul>
 8004df4:	2200      	movs	r2, #0
 8004df6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <_dtoa_r+0x5b0>)
 8004e00:	f7fb fb6a 	bl	80004d8 <__aeabi_dmul>
 8004e04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e08:	e7c3      	b.n	8004d92 <_dtoa_r+0x52a>
 8004e0a:	bf00      	nop
 8004e0c:	08006e28 	.word	0x08006e28
 8004e10:	08006e00 	.word	0x08006e00
 8004e14:	3ff00000 	.word	0x3ff00000
 8004e18:	40240000 	.word	0x40240000
 8004e1c:	401c0000 	.word	0x401c0000
 8004e20:	40140000 	.word	0x40140000
 8004e24:	3fe00000 	.word	0x3fe00000
 8004e28:	4630      	mov	r0, r6
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	f7fb fb54 	bl	80004d8 <__aeabi_dmul>
 8004e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e36:	9c03      	ldr	r4, [sp, #12]
 8004e38:	9314      	str	r3, [sp, #80]	; 0x50
 8004e3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e3e:	f7fb fdfb 	bl	8000a38 <__aeabi_d2iz>
 8004e42:	9015      	str	r0, [sp, #84]	; 0x54
 8004e44:	f7fb fade 	bl	8000404 <__aeabi_i2d>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e50:	f7fb f98a 	bl	8000168 <__aeabi_dsub>
 8004e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e56:	4606      	mov	r6, r0
 8004e58:	3330      	adds	r3, #48	; 0x30
 8004e5a:	f804 3b01 	strb.w	r3, [r4], #1
 8004e5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e60:	460f      	mov	r7, r1
 8004e62:	429c      	cmp	r4, r3
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	d124      	bne.n	8004eb4 <_dtoa_r+0x64c>
 8004e6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e6e:	4bb0      	ldr	r3, [pc, #704]	; (8005130 <_dtoa_r+0x8c8>)
 8004e70:	f7fb f97c 	bl	800016c <__adddf3>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4630      	mov	r0, r6
 8004e7a:	4639      	mov	r1, r7
 8004e7c:	f7fb fdbc 	bl	80009f8 <__aeabi_dcmpgt>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d163      	bne.n	8004f4c <_dtoa_r+0x6e4>
 8004e84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e88:	2000      	movs	r0, #0
 8004e8a:	49a9      	ldr	r1, [pc, #676]	; (8005130 <_dtoa_r+0x8c8>)
 8004e8c:	f7fb f96c 	bl	8000168 <__aeabi_dsub>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4630      	mov	r0, r6
 8004e96:	4639      	mov	r1, r7
 8004e98:	f7fb fd90 	bl	80009bc <__aeabi_dcmplt>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	f43f af1d 	beq.w	8004cdc <_dtoa_r+0x474>
 8004ea2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004ea4:	1e7b      	subs	r3, r7, #1
 8004ea6:	9314      	str	r3, [sp, #80]	; 0x50
 8004ea8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004eac:	2b30      	cmp	r3, #48	; 0x30
 8004eae:	d0f8      	beq.n	8004ea2 <_dtoa_r+0x63a>
 8004eb0:	46c2      	mov	sl, r8
 8004eb2:	e03b      	b.n	8004f2c <_dtoa_r+0x6c4>
 8004eb4:	4b9f      	ldr	r3, [pc, #636]	; (8005134 <_dtoa_r+0x8cc>)
 8004eb6:	f7fb fb0f 	bl	80004d8 <__aeabi_dmul>
 8004eba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ebe:	e7bc      	b.n	8004e3a <_dtoa_r+0x5d2>
 8004ec0:	9f03      	ldr	r7, [sp, #12]
 8004ec2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004ec6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004eca:	4640      	mov	r0, r8
 8004ecc:	4649      	mov	r1, r9
 8004ece:	f7fb fc2d 	bl	800072c <__aeabi_ddiv>
 8004ed2:	f7fb fdb1 	bl	8000a38 <__aeabi_d2iz>
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	f7fb fa94 	bl	8000404 <__aeabi_i2d>
 8004edc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ee0:	f7fb fafa 	bl	80004d8 <__aeabi_dmul>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4640      	mov	r0, r8
 8004eea:	4649      	mov	r1, r9
 8004eec:	f7fb f93c 	bl	8000168 <__aeabi_dsub>
 8004ef0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004ef4:	f807 6b01 	strb.w	r6, [r7], #1
 8004ef8:	9e03      	ldr	r6, [sp, #12]
 8004efa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004efe:	1bbe      	subs	r6, r7, r6
 8004f00:	45b4      	cmp	ip, r6
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	d136      	bne.n	8004f76 <_dtoa_r+0x70e>
 8004f08:	f7fb f930 	bl	800016c <__adddf3>
 8004f0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f10:	4680      	mov	r8, r0
 8004f12:	4689      	mov	r9, r1
 8004f14:	f7fb fd70 	bl	80009f8 <__aeabi_dcmpgt>
 8004f18:	bb58      	cbnz	r0, 8004f72 <_dtoa_r+0x70a>
 8004f1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f1e:	4640      	mov	r0, r8
 8004f20:	4649      	mov	r1, r9
 8004f22:	f7fb fd41 	bl	80009a8 <__aeabi_dcmpeq>
 8004f26:	b108      	cbz	r0, 8004f2c <_dtoa_r+0x6c4>
 8004f28:	07e1      	lsls	r1, r4, #31
 8004f2a:	d422      	bmi.n	8004f72 <_dtoa_r+0x70a>
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	4659      	mov	r1, fp
 8004f30:	f000 faf0 	bl	8005514 <_Bfree>
 8004f34:	2300      	movs	r3, #0
 8004f36:	703b      	strb	r3, [r7, #0]
 8004f38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004f3a:	f10a 0001 	add.w	r0, sl, #1
 8004f3e:	6018      	str	r0, [r3, #0]
 8004f40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f43f acde 	beq.w	8004904 <_dtoa_r+0x9c>
 8004f48:	601f      	str	r7, [r3, #0]
 8004f4a:	e4db      	b.n	8004904 <_dtoa_r+0x9c>
 8004f4c:	4627      	mov	r7, r4
 8004f4e:	463b      	mov	r3, r7
 8004f50:	461f      	mov	r7, r3
 8004f52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f56:	2a39      	cmp	r2, #57	; 0x39
 8004f58:	d107      	bne.n	8004f6a <_dtoa_r+0x702>
 8004f5a:	9a03      	ldr	r2, [sp, #12]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d1f7      	bne.n	8004f50 <_dtoa_r+0x6e8>
 8004f60:	2230      	movs	r2, #48	; 0x30
 8004f62:	9903      	ldr	r1, [sp, #12]
 8004f64:	f108 0801 	add.w	r8, r8, #1
 8004f68:	700a      	strb	r2, [r1, #0]
 8004f6a:	781a      	ldrb	r2, [r3, #0]
 8004f6c:	3201      	adds	r2, #1
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	e79e      	b.n	8004eb0 <_dtoa_r+0x648>
 8004f72:	46d0      	mov	r8, sl
 8004f74:	e7eb      	b.n	8004f4e <_dtoa_r+0x6e6>
 8004f76:	2200      	movs	r2, #0
 8004f78:	4b6e      	ldr	r3, [pc, #440]	; (8005134 <_dtoa_r+0x8cc>)
 8004f7a:	f7fb faad 	bl	80004d8 <__aeabi_dmul>
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2300      	movs	r3, #0
 8004f82:	4680      	mov	r8, r0
 8004f84:	4689      	mov	r9, r1
 8004f86:	f7fb fd0f 	bl	80009a8 <__aeabi_dcmpeq>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d09b      	beq.n	8004ec6 <_dtoa_r+0x65e>
 8004f8e:	e7cd      	b.n	8004f2c <_dtoa_r+0x6c4>
 8004f90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f92:	2a00      	cmp	r2, #0
 8004f94:	f000 80d0 	beq.w	8005138 <_dtoa_r+0x8d0>
 8004f98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f9a:	2a01      	cmp	r2, #1
 8004f9c:	f300 80ae 	bgt.w	80050fc <_dtoa_r+0x894>
 8004fa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	f000 80a6 	beq.w	80050f4 <_dtoa_r+0x88c>
 8004fa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004fac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004fae:	9f06      	ldr	r7, [sp, #24]
 8004fb0:	9a06      	ldr	r2, [sp, #24]
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	441a      	add	r2, r3
 8004fb6:	9206      	str	r2, [sp, #24]
 8004fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fba:	4628      	mov	r0, r5
 8004fbc:	441a      	add	r2, r3
 8004fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8004fc0:	f000 fb5e 	bl	8005680 <__i2b>
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	2f00      	cmp	r7, #0
 8004fc8:	dd0c      	ble.n	8004fe4 <_dtoa_r+0x77c>
 8004fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dd09      	ble.n	8004fe4 <_dtoa_r+0x77c>
 8004fd0:	42bb      	cmp	r3, r7
 8004fd2:	bfa8      	it	ge
 8004fd4:	463b      	movge	r3, r7
 8004fd6:	9a06      	ldr	r2, [sp, #24]
 8004fd8:	1aff      	subs	r7, r7, r3
 8004fda:	1ad2      	subs	r2, r2, r3
 8004fdc:	9206      	str	r2, [sp, #24]
 8004fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe6:	b1f3      	cbz	r3, 8005026 <_dtoa_r+0x7be>
 8004fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 80a8 	beq.w	8005140 <_dtoa_r+0x8d8>
 8004ff0:	2c00      	cmp	r4, #0
 8004ff2:	dd10      	ble.n	8005016 <_dtoa_r+0x7ae>
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f000 fbff 	bl	80057fc <__pow5mult>
 8004ffe:	465a      	mov	r2, fp
 8005000:	4601      	mov	r1, r0
 8005002:	4606      	mov	r6, r0
 8005004:	4628      	mov	r0, r5
 8005006:	f000 fb51 	bl	80056ac <__multiply>
 800500a:	4680      	mov	r8, r0
 800500c:	4659      	mov	r1, fp
 800500e:	4628      	mov	r0, r5
 8005010:	f000 fa80 	bl	8005514 <_Bfree>
 8005014:	46c3      	mov	fp, r8
 8005016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005018:	1b1a      	subs	r2, r3, r4
 800501a:	d004      	beq.n	8005026 <_dtoa_r+0x7be>
 800501c:	4659      	mov	r1, fp
 800501e:	4628      	mov	r0, r5
 8005020:	f000 fbec 	bl	80057fc <__pow5mult>
 8005024:	4683      	mov	fp, r0
 8005026:	2101      	movs	r1, #1
 8005028:	4628      	mov	r0, r5
 800502a:	f000 fb29 	bl	8005680 <__i2b>
 800502e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005030:	4604      	mov	r4, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	f340 8086 	ble.w	8005144 <_dtoa_r+0x8dc>
 8005038:	461a      	mov	r2, r3
 800503a:	4601      	mov	r1, r0
 800503c:	4628      	mov	r0, r5
 800503e:	f000 fbdd 	bl	80057fc <__pow5mult>
 8005042:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005044:	4604      	mov	r4, r0
 8005046:	2b01      	cmp	r3, #1
 8005048:	dd7f      	ble.n	800514a <_dtoa_r+0x8e2>
 800504a:	f04f 0800 	mov.w	r8, #0
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005054:	6918      	ldr	r0, [r3, #16]
 8005056:	f000 fac5 	bl	80055e4 <__hi0bits>
 800505a:	f1c0 0020 	rsb	r0, r0, #32
 800505e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005060:	4418      	add	r0, r3
 8005062:	f010 001f 	ands.w	r0, r0, #31
 8005066:	f000 8092 	beq.w	800518e <_dtoa_r+0x926>
 800506a:	f1c0 0320 	rsb	r3, r0, #32
 800506e:	2b04      	cmp	r3, #4
 8005070:	f340 808a 	ble.w	8005188 <_dtoa_r+0x920>
 8005074:	f1c0 001c 	rsb	r0, r0, #28
 8005078:	9b06      	ldr	r3, [sp, #24]
 800507a:	4407      	add	r7, r0
 800507c:	4403      	add	r3, r0
 800507e:	9306      	str	r3, [sp, #24]
 8005080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005082:	4403      	add	r3, r0
 8005084:	9309      	str	r3, [sp, #36]	; 0x24
 8005086:	9b06      	ldr	r3, [sp, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	dd05      	ble.n	8005098 <_dtoa_r+0x830>
 800508c:	4659      	mov	r1, fp
 800508e:	461a      	mov	r2, r3
 8005090:	4628      	mov	r0, r5
 8005092:	f000 fc0d 	bl	80058b0 <__lshift>
 8005096:	4683      	mov	fp, r0
 8005098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509a:	2b00      	cmp	r3, #0
 800509c:	dd05      	ble.n	80050aa <_dtoa_r+0x842>
 800509e:	4621      	mov	r1, r4
 80050a0:	461a      	mov	r2, r3
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 fc04 	bl	80058b0 <__lshift>
 80050a8:	4604      	mov	r4, r0
 80050aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d070      	beq.n	8005192 <_dtoa_r+0x92a>
 80050b0:	4621      	mov	r1, r4
 80050b2:	4658      	mov	r0, fp
 80050b4:	f000 fc6c 	bl	8005990 <__mcmp>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	da6a      	bge.n	8005192 <_dtoa_r+0x92a>
 80050bc:	2300      	movs	r3, #0
 80050be:	4659      	mov	r1, fp
 80050c0:	220a      	movs	r2, #10
 80050c2:	4628      	mov	r0, r5
 80050c4:	f000 fa48 	bl	8005558 <__multadd>
 80050c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050ca:	4683      	mov	fp, r0
 80050cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8194 	beq.w	80053fe <_dtoa_r+0xb96>
 80050d6:	4631      	mov	r1, r6
 80050d8:	2300      	movs	r3, #0
 80050da:	220a      	movs	r2, #10
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 fa3b 	bl	8005558 <__multadd>
 80050e2:	f1b9 0f00 	cmp.w	r9, #0
 80050e6:	4606      	mov	r6, r0
 80050e8:	f300 8093 	bgt.w	8005212 <_dtoa_r+0x9aa>
 80050ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	dc57      	bgt.n	80051a2 <_dtoa_r+0x93a>
 80050f2:	e08e      	b.n	8005212 <_dtoa_r+0x9aa>
 80050f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80050f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050fa:	e757      	b.n	8004fac <_dtoa_r+0x744>
 80050fc:	9b08      	ldr	r3, [sp, #32]
 80050fe:	1e5c      	subs	r4, r3, #1
 8005100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005102:	42a3      	cmp	r3, r4
 8005104:	bfb7      	itett	lt
 8005106:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005108:	1b1c      	subge	r4, r3, r4
 800510a:	1ae2      	sublt	r2, r4, r3
 800510c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800510e:	bfbe      	ittt	lt
 8005110:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005112:	189b      	addlt	r3, r3, r2
 8005114:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005116:	9b08      	ldr	r3, [sp, #32]
 8005118:	bfb8      	it	lt
 800511a:	2400      	movlt	r4, #0
 800511c:	2b00      	cmp	r3, #0
 800511e:	bfbb      	ittet	lt
 8005120:	9b06      	ldrlt	r3, [sp, #24]
 8005122:	9a08      	ldrlt	r2, [sp, #32]
 8005124:	9f06      	ldrge	r7, [sp, #24]
 8005126:	1a9f      	sublt	r7, r3, r2
 8005128:	bfac      	ite	ge
 800512a:	9b08      	ldrge	r3, [sp, #32]
 800512c:	2300      	movlt	r3, #0
 800512e:	e73f      	b.n	8004fb0 <_dtoa_r+0x748>
 8005130:	3fe00000 	.word	0x3fe00000
 8005134:	40240000 	.word	0x40240000
 8005138:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800513a:	9f06      	ldr	r7, [sp, #24]
 800513c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800513e:	e742      	b.n	8004fc6 <_dtoa_r+0x75e>
 8005140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005142:	e76b      	b.n	800501c <_dtoa_r+0x7b4>
 8005144:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005146:	2b01      	cmp	r3, #1
 8005148:	dc19      	bgt.n	800517e <_dtoa_r+0x916>
 800514a:	9b04      	ldr	r3, [sp, #16]
 800514c:	b9bb      	cbnz	r3, 800517e <_dtoa_r+0x916>
 800514e:	9b05      	ldr	r3, [sp, #20]
 8005150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005154:	b99b      	cbnz	r3, 800517e <_dtoa_r+0x916>
 8005156:	9b05      	ldr	r3, [sp, #20]
 8005158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800515c:	0d1b      	lsrs	r3, r3, #20
 800515e:	051b      	lsls	r3, r3, #20
 8005160:	b183      	cbz	r3, 8005184 <_dtoa_r+0x91c>
 8005162:	f04f 0801 	mov.w	r8, #1
 8005166:	9b06      	ldr	r3, [sp, #24]
 8005168:	3301      	adds	r3, #1
 800516a:	9306      	str	r3, [sp, #24]
 800516c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516e:	3301      	adds	r3, #1
 8005170:	9309      	str	r3, [sp, #36]	; 0x24
 8005172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005174:	2b00      	cmp	r3, #0
 8005176:	f47f af6a 	bne.w	800504e <_dtoa_r+0x7e6>
 800517a:	2001      	movs	r0, #1
 800517c:	e76f      	b.n	800505e <_dtoa_r+0x7f6>
 800517e:	f04f 0800 	mov.w	r8, #0
 8005182:	e7f6      	b.n	8005172 <_dtoa_r+0x90a>
 8005184:	4698      	mov	r8, r3
 8005186:	e7f4      	b.n	8005172 <_dtoa_r+0x90a>
 8005188:	f43f af7d 	beq.w	8005086 <_dtoa_r+0x81e>
 800518c:	4618      	mov	r0, r3
 800518e:	301c      	adds	r0, #28
 8005190:	e772      	b.n	8005078 <_dtoa_r+0x810>
 8005192:	9b08      	ldr	r3, [sp, #32]
 8005194:	2b00      	cmp	r3, #0
 8005196:	dc36      	bgt.n	8005206 <_dtoa_r+0x99e>
 8005198:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800519a:	2b02      	cmp	r3, #2
 800519c:	dd33      	ble.n	8005206 <_dtoa_r+0x99e>
 800519e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051a2:	f1b9 0f00 	cmp.w	r9, #0
 80051a6:	d10d      	bne.n	80051c4 <_dtoa_r+0x95c>
 80051a8:	4621      	mov	r1, r4
 80051aa:	464b      	mov	r3, r9
 80051ac:	2205      	movs	r2, #5
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 f9d2 	bl	8005558 <__multadd>
 80051b4:	4601      	mov	r1, r0
 80051b6:	4604      	mov	r4, r0
 80051b8:	4658      	mov	r0, fp
 80051ba:	f000 fbe9 	bl	8005990 <__mcmp>
 80051be:	2800      	cmp	r0, #0
 80051c0:	f73f adb8 	bgt.w	8004d34 <_dtoa_r+0x4cc>
 80051c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051c6:	9f03      	ldr	r7, [sp, #12]
 80051c8:	ea6f 0a03 	mvn.w	sl, r3
 80051cc:	f04f 0800 	mov.w	r8, #0
 80051d0:	4621      	mov	r1, r4
 80051d2:	4628      	mov	r0, r5
 80051d4:	f000 f99e 	bl	8005514 <_Bfree>
 80051d8:	2e00      	cmp	r6, #0
 80051da:	f43f aea7 	beq.w	8004f2c <_dtoa_r+0x6c4>
 80051de:	f1b8 0f00 	cmp.w	r8, #0
 80051e2:	d005      	beq.n	80051f0 <_dtoa_r+0x988>
 80051e4:	45b0      	cmp	r8, r6
 80051e6:	d003      	beq.n	80051f0 <_dtoa_r+0x988>
 80051e8:	4641      	mov	r1, r8
 80051ea:	4628      	mov	r0, r5
 80051ec:	f000 f992 	bl	8005514 <_Bfree>
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 f98e 	bl	8005514 <_Bfree>
 80051f8:	e698      	b.n	8004f2c <_dtoa_r+0x6c4>
 80051fa:	2400      	movs	r4, #0
 80051fc:	4626      	mov	r6, r4
 80051fe:	e7e1      	b.n	80051c4 <_dtoa_r+0x95c>
 8005200:	46c2      	mov	sl, r8
 8005202:	4626      	mov	r6, r4
 8005204:	e596      	b.n	8004d34 <_dtoa_r+0x4cc>
 8005206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80fd 	beq.w	800540c <_dtoa_r+0xba4>
 8005212:	2f00      	cmp	r7, #0
 8005214:	dd05      	ble.n	8005222 <_dtoa_r+0x9ba>
 8005216:	4631      	mov	r1, r6
 8005218:	463a      	mov	r2, r7
 800521a:	4628      	mov	r0, r5
 800521c:	f000 fb48 	bl	80058b0 <__lshift>
 8005220:	4606      	mov	r6, r0
 8005222:	f1b8 0f00 	cmp.w	r8, #0
 8005226:	d05c      	beq.n	80052e2 <_dtoa_r+0xa7a>
 8005228:	4628      	mov	r0, r5
 800522a:	6871      	ldr	r1, [r6, #4]
 800522c:	f000 f932 	bl	8005494 <_Balloc>
 8005230:	4607      	mov	r7, r0
 8005232:	b928      	cbnz	r0, 8005240 <_dtoa_r+0x9d8>
 8005234:	4602      	mov	r2, r0
 8005236:	f240 21ea 	movw	r1, #746	; 0x2ea
 800523a:	4b7f      	ldr	r3, [pc, #508]	; (8005438 <_dtoa_r+0xbd0>)
 800523c:	f7ff bb28 	b.w	8004890 <_dtoa_r+0x28>
 8005240:	6932      	ldr	r2, [r6, #16]
 8005242:	f106 010c 	add.w	r1, r6, #12
 8005246:	3202      	adds	r2, #2
 8005248:	0092      	lsls	r2, r2, #2
 800524a:	300c      	adds	r0, #12
 800524c:	f000 f914 	bl	8005478 <memcpy>
 8005250:	2201      	movs	r2, #1
 8005252:	4639      	mov	r1, r7
 8005254:	4628      	mov	r0, r5
 8005256:	f000 fb2b 	bl	80058b0 <__lshift>
 800525a:	46b0      	mov	r8, r6
 800525c:	4606      	mov	r6, r0
 800525e:	9b03      	ldr	r3, [sp, #12]
 8005260:	3301      	adds	r3, #1
 8005262:	9308      	str	r3, [sp, #32]
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	444b      	add	r3, r9
 8005268:	930a      	str	r3, [sp, #40]	; 0x28
 800526a:	9b04      	ldr	r3, [sp, #16]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	9309      	str	r3, [sp, #36]	; 0x24
 8005272:	9b08      	ldr	r3, [sp, #32]
 8005274:	4621      	mov	r1, r4
 8005276:	3b01      	subs	r3, #1
 8005278:	4658      	mov	r0, fp
 800527a:	9304      	str	r3, [sp, #16]
 800527c:	f7ff fa67 	bl	800474e <quorem>
 8005280:	4603      	mov	r3, r0
 8005282:	4641      	mov	r1, r8
 8005284:	3330      	adds	r3, #48	; 0x30
 8005286:	9006      	str	r0, [sp, #24]
 8005288:	4658      	mov	r0, fp
 800528a:	930b      	str	r3, [sp, #44]	; 0x2c
 800528c:	f000 fb80 	bl	8005990 <__mcmp>
 8005290:	4632      	mov	r2, r6
 8005292:	4681      	mov	r9, r0
 8005294:	4621      	mov	r1, r4
 8005296:	4628      	mov	r0, r5
 8005298:	f000 fb96 	bl	80059c8 <__mdiff>
 800529c:	68c2      	ldr	r2, [r0, #12]
 800529e:	4607      	mov	r7, r0
 80052a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052a2:	bb02      	cbnz	r2, 80052e6 <_dtoa_r+0xa7e>
 80052a4:	4601      	mov	r1, r0
 80052a6:	4658      	mov	r0, fp
 80052a8:	f000 fb72 	bl	8005990 <__mcmp>
 80052ac:	4602      	mov	r2, r0
 80052ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052b0:	4639      	mov	r1, r7
 80052b2:	4628      	mov	r0, r5
 80052b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80052b8:	f000 f92c 	bl	8005514 <_Bfree>
 80052bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052c0:	9f08      	ldr	r7, [sp, #32]
 80052c2:	ea43 0102 	orr.w	r1, r3, r2
 80052c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c8:	430b      	orrs	r3, r1
 80052ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052cc:	d10d      	bne.n	80052ea <_dtoa_r+0xa82>
 80052ce:	2b39      	cmp	r3, #57	; 0x39
 80052d0:	d029      	beq.n	8005326 <_dtoa_r+0xabe>
 80052d2:	f1b9 0f00 	cmp.w	r9, #0
 80052d6:	dd01      	ble.n	80052dc <_dtoa_r+0xa74>
 80052d8:	9b06      	ldr	r3, [sp, #24]
 80052da:	3331      	adds	r3, #49	; 0x31
 80052dc:	9a04      	ldr	r2, [sp, #16]
 80052de:	7013      	strb	r3, [r2, #0]
 80052e0:	e776      	b.n	80051d0 <_dtoa_r+0x968>
 80052e2:	4630      	mov	r0, r6
 80052e4:	e7b9      	b.n	800525a <_dtoa_r+0x9f2>
 80052e6:	2201      	movs	r2, #1
 80052e8:	e7e2      	b.n	80052b0 <_dtoa_r+0xa48>
 80052ea:	f1b9 0f00 	cmp.w	r9, #0
 80052ee:	db06      	blt.n	80052fe <_dtoa_r+0xa96>
 80052f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80052f2:	ea41 0909 	orr.w	r9, r1, r9
 80052f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052f8:	ea59 0101 	orrs.w	r1, r9, r1
 80052fc:	d120      	bne.n	8005340 <_dtoa_r+0xad8>
 80052fe:	2a00      	cmp	r2, #0
 8005300:	ddec      	ble.n	80052dc <_dtoa_r+0xa74>
 8005302:	4659      	mov	r1, fp
 8005304:	2201      	movs	r2, #1
 8005306:	4628      	mov	r0, r5
 8005308:	9308      	str	r3, [sp, #32]
 800530a:	f000 fad1 	bl	80058b0 <__lshift>
 800530e:	4621      	mov	r1, r4
 8005310:	4683      	mov	fp, r0
 8005312:	f000 fb3d 	bl	8005990 <__mcmp>
 8005316:	2800      	cmp	r0, #0
 8005318:	9b08      	ldr	r3, [sp, #32]
 800531a:	dc02      	bgt.n	8005322 <_dtoa_r+0xaba>
 800531c:	d1de      	bne.n	80052dc <_dtoa_r+0xa74>
 800531e:	07da      	lsls	r2, r3, #31
 8005320:	d5dc      	bpl.n	80052dc <_dtoa_r+0xa74>
 8005322:	2b39      	cmp	r3, #57	; 0x39
 8005324:	d1d8      	bne.n	80052d8 <_dtoa_r+0xa70>
 8005326:	2339      	movs	r3, #57	; 0x39
 8005328:	9a04      	ldr	r2, [sp, #16]
 800532a:	7013      	strb	r3, [r2, #0]
 800532c:	463b      	mov	r3, r7
 800532e:	461f      	mov	r7, r3
 8005330:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005334:	3b01      	subs	r3, #1
 8005336:	2a39      	cmp	r2, #57	; 0x39
 8005338:	d050      	beq.n	80053dc <_dtoa_r+0xb74>
 800533a:	3201      	adds	r2, #1
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e747      	b.n	80051d0 <_dtoa_r+0x968>
 8005340:	2a00      	cmp	r2, #0
 8005342:	dd03      	ble.n	800534c <_dtoa_r+0xae4>
 8005344:	2b39      	cmp	r3, #57	; 0x39
 8005346:	d0ee      	beq.n	8005326 <_dtoa_r+0xabe>
 8005348:	3301      	adds	r3, #1
 800534a:	e7c7      	b.n	80052dc <_dtoa_r+0xa74>
 800534c:	9a08      	ldr	r2, [sp, #32]
 800534e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005350:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005354:	428a      	cmp	r2, r1
 8005356:	d02a      	beq.n	80053ae <_dtoa_r+0xb46>
 8005358:	4659      	mov	r1, fp
 800535a:	2300      	movs	r3, #0
 800535c:	220a      	movs	r2, #10
 800535e:	4628      	mov	r0, r5
 8005360:	f000 f8fa 	bl	8005558 <__multadd>
 8005364:	45b0      	cmp	r8, r6
 8005366:	4683      	mov	fp, r0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	f04f 020a 	mov.w	r2, #10
 8005370:	4641      	mov	r1, r8
 8005372:	4628      	mov	r0, r5
 8005374:	d107      	bne.n	8005386 <_dtoa_r+0xb1e>
 8005376:	f000 f8ef 	bl	8005558 <__multadd>
 800537a:	4680      	mov	r8, r0
 800537c:	4606      	mov	r6, r0
 800537e:	9b08      	ldr	r3, [sp, #32]
 8005380:	3301      	adds	r3, #1
 8005382:	9308      	str	r3, [sp, #32]
 8005384:	e775      	b.n	8005272 <_dtoa_r+0xa0a>
 8005386:	f000 f8e7 	bl	8005558 <__multadd>
 800538a:	4631      	mov	r1, r6
 800538c:	4680      	mov	r8, r0
 800538e:	2300      	movs	r3, #0
 8005390:	220a      	movs	r2, #10
 8005392:	4628      	mov	r0, r5
 8005394:	f000 f8e0 	bl	8005558 <__multadd>
 8005398:	4606      	mov	r6, r0
 800539a:	e7f0      	b.n	800537e <_dtoa_r+0xb16>
 800539c:	f1b9 0f00 	cmp.w	r9, #0
 80053a0:	bfcc      	ite	gt
 80053a2:	464f      	movgt	r7, r9
 80053a4:	2701      	movle	r7, #1
 80053a6:	f04f 0800 	mov.w	r8, #0
 80053aa:	9a03      	ldr	r2, [sp, #12]
 80053ac:	4417      	add	r7, r2
 80053ae:	4659      	mov	r1, fp
 80053b0:	2201      	movs	r2, #1
 80053b2:	4628      	mov	r0, r5
 80053b4:	9308      	str	r3, [sp, #32]
 80053b6:	f000 fa7b 	bl	80058b0 <__lshift>
 80053ba:	4621      	mov	r1, r4
 80053bc:	4683      	mov	fp, r0
 80053be:	f000 fae7 	bl	8005990 <__mcmp>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	dcb2      	bgt.n	800532c <_dtoa_r+0xac4>
 80053c6:	d102      	bne.n	80053ce <_dtoa_r+0xb66>
 80053c8:	9b08      	ldr	r3, [sp, #32]
 80053ca:	07db      	lsls	r3, r3, #31
 80053cc:	d4ae      	bmi.n	800532c <_dtoa_r+0xac4>
 80053ce:	463b      	mov	r3, r7
 80053d0:	461f      	mov	r7, r3
 80053d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053d6:	2a30      	cmp	r2, #48	; 0x30
 80053d8:	d0fa      	beq.n	80053d0 <_dtoa_r+0xb68>
 80053da:	e6f9      	b.n	80051d0 <_dtoa_r+0x968>
 80053dc:	9a03      	ldr	r2, [sp, #12]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d1a5      	bne.n	800532e <_dtoa_r+0xac6>
 80053e2:	2331      	movs	r3, #49	; 0x31
 80053e4:	f10a 0a01 	add.w	sl, sl, #1
 80053e8:	e779      	b.n	80052de <_dtoa_r+0xa76>
 80053ea:	4b14      	ldr	r3, [pc, #80]	; (800543c <_dtoa_r+0xbd4>)
 80053ec:	f7ff baa8 	b.w	8004940 <_dtoa_r+0xd8>
 80053f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f47f aa81 	bne.w	80048fa <_dtoa_r+0x92>
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <_dtoa_r+0xbd8>)
 80053fa:	f7ff baa1 	b.w	8004940 <_dtoa_r+0xd8>
 80053fe:	f1b9 0f00 	cmp.w	r9, #0
 8005402:	dc03      	bgt.n	800540c <_dtoa_r+0xba4>
 8005404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005406:	2b02      	cmp	r3, #2
 8005408:	f73f aecb 	bgt.w	80051a2 <_dtoa_r+0x93a>
 800540c:	9f03      	ldr	r7, [sp, #12]
 800540e:	4621      	mov	r1, r4
 8005410:	4658      	mov	r0, fp
 8005412:	f7ff f99c 	bl	800474e <quorem>
 8005416:	9a03      	ldr	r2, [sp, #12]
 8005418:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800541c:	f807 3b01 	strb.w	r3, [r7], #1
 8005420:	1aba      	subs	r2, r7, r2
 8005422:	4591      	cmp	r9, r2
 8005424:	ddba      	ble.n	800539c <_dtoa_r+0xb34>
 8005426:	4659      	mov	r1, fp
 8005428:	2300      	movs	r3, #0
 800542a:	220a      	movs	r2, #10
 800542c:	4628      	mov	r0, r5
 800542e:	f000 f893 	bl	8005558 <__multadd>
 8005432:	4683      	mov	fp, r0
 8005434:	e7eb      	b.n	800540e <_dtoa_r+0xba6>
 8005436:	bf00      	nop
 8005438:	08006d93 	.word	0x08006d93
 800543c:	08006cf0 	.word	0x08006cf0
 8005440:	08006d14 	.word	0x08006d14

08005444 <_localeconv_r>:
 8005444:	4800      	ldr	r0, [pc, #0]	; (8005448 <_localeconv_r+0x4>)
 8005446:	4770      	bx	lr
 8005448:	20000170 	.word	0x20000170

0800544c <malloc>:
 800544c:	4b02      	ldr	r3, [pc, #8]	; (8005458 <malloc+0xc>)
 800544e:	4601      	mov	r1, r0
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	f000 bc1d 	b.w	8005c90 <_malloc_r>
 8005456:	bf00      	nop
 8005458:	2000001c 	.word	0x2000001c

0800545c <memchr>:
 800545c:	4603      	mov	r3, r0
 800545e:	b510      	push	{r4, lr}
 8005460:	b2c9      	uxtb	r1, r1
 8005462:	4402      	add	r2, r0
 8005464:	4293      	cmp	r3, r2
 8005466:	4618      	mov	r0, r3
 8005468:	d101      	bne.n	800546e <memchr+0x12>
 800546a:	2000      	movs	r0, #0
 800546c:	e003      	b.n	8005476 <memchr+0x1a>
 800546e:	7804      	ldrb	r4, [r0, #0]
 8005470:	3301      	adds	r3, #1
 8005472:	428c      	cmp	r4, r1
 8005474:	d1f6      	bne.n	8005464 <memchr+0x8>
 8005476:	bd10      	pop	{r4, pc}

08005478 <memcpy>:
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005480:	d100      	bne.n	8005484 <memcpy+0xc>
 8005482:	4770      	bx	lr
 8005484:	b510      	push	{r4, lr}
 8005486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800548a:	4291      	cmp	r1, r2
 800548c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005490:	d1f9      	bne.n	8005486 <memcpy+0xe>
 8005492:	bd10      	pop	{r4, pc}

08005494 <_Balloc>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005498:	4604      	mov	r4, r0
 800549a:	460d      	mov	r5, r1
 800549c:	b976      	cbnz	r6, 80054bc <_Balloc+0x28>
 800549e:	2010      	movs	r0, #16
 80054a0:	f7ff ffd4 	bl	800544c <malloc>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6260      	str	r0, [r4, #36]	; 0x24
 80054a8:	b920      	cbnz	r0, 80054b4 <_Balloc+0x20>
 80054aa:	2166      	movs	r1, #102	; 0x66
 80054ac:	4b17      	ldr	r3, [pc, #92]	; (800550c <_Balloc+0x78>)
 80054ae:	4818      	ldr	r0, [pc, #96]	; (8005510 <_Balloc+0x7c>)
 80054b0:	f000 fdce 	bl	8006050 <__assert_func>
 80054b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054b8:	6006      	str	r6, [r0, #0]
 80054ba:	60c6      	str	r6, [r0, #12]
 80054bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054be:	68f3      	ldr	r3, [r6, #12]
 80054c0:	b183      	cbz	r3, 80054e4 <_Balloc+0x50>
 80054c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054ca:	b9b8      	cbnz	r0, 80054fc <_Balloc+0x68>
 80054cc:	2101      	movs	r1, #1
 80054ce:	fa01 f605 	lsl.w	r6, r1, r5
 80054d2:	1d72      	adds	r2, r6, #5
 80054d4:	4620      	mov	r0, r4
 80054d6:	0092      	lsls	r2, r2, #2
 80054d8:	f000 fb5e 	bl	8005b98 <_calloc_r>
 80054dc:	b160      	cbz	r0, 80054f8 <_Balloc+0x64>
 80054de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054e2:	e00e      	b.n	8005502 <_Balloc+0x6e>
 80054e4:	2221      	movs	r2, #33	; 0x21
 80054e6:	2104      	movs	r1, #4
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 fb55 	bl	8005b98 <_calloc_r>
 80054ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054f0:	60f0      	str	r0, [r6, #12]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e4      	bne.n	80054c2 <_Balloc+0x2e>
 80054f8:	2000      	movs	r0, #0
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
 80054fc:	6802      	ldr	r2, [r0, #0]
 80054fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005502:	2300      	movs	r3, #0
 8005504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005508:	e7f7      	b.n	80054fa <_Balloc+0x66>
 800550a:	bf00      	nop
 800550c:	08006d21 	.word	0x08006d21
 8005510:	08006da4 	.word	0x08006da4

08005514 <_Bfree>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005518:	4605      	mov	r5, r0
 800551a:	460c      	mov	r4, r1
 800551c:	b976      	cbnz	r6, 800553c <_Bfree+0x28>
 800551e:	2010      	movs	r0, #16
 8005520:	f7ff ff94 	bl	800544c <malloc>
 8005524:	4602      	mov	r2, r0
 8005526:	6268      	str	r0, [r5, #36]	; 0x24
 8005528:	b920      	cbnz	r0, 8005534 <_Bfree+0x20>
 800552a:	218a      	movs	r1, #138	; 0x8a
 800552c:	4b08      	ldr	r3, [pc, #32]	; (8005550 <_Bfree+0x3c>)
 800552e:	4809      	ldr	r0, [pc, #36]	; (8005554 <_Bfree+0x40>)
 8005530:	f000 fd8e 	bl	8006050 <__assert_func>
 8005534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005538:	6006      	str	r6, [r0, #0]
 800553a:	60c6      	str	r6, [r0, #12]
 800553c:	b13c      	cbz	r4, 800554e <_Bfree+0x3a>
 800553e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005540:	6862      	ldr	r2, [r4, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005548:	6021      	str	r1, [r4, #0]
 800554a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	08006d21 	.word	0x08006d21
 8005554:	08006da4 	.word	0x08006da4

08005558 <__multadd>:
 8005558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555c:	4607      	mov	r7, r0
 800555e:	460c      	mov	r4, r1
 8005560:	461e      	mov	r6, r3
 8005562:	2000      	movs	r0, #0
 8005564:	690d      	ldr	r5, [r1, #16]
 8005566:	f101 0c14 	add.w	ip, r1, #20
 800556a:	f8dc 3000 	ldr.w	r3, [ip]
 800556e:	3001      	adds	r0, #1
 8005570:	b299      	uxth	r1, r3
 8005572:	fb02 6101 	mla	r1, r2, r1, r6
 8005576:	0c1e      	lsrs	r6, r3, #16
 8005578:	0c0b      	lsrs	r3, r1, #16
 800557a:	fb02 3306 	mla	r3, r2, r6, r3
 800557e:	b289      	uxth	r1, r1
 8005580:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005584:	4285      	cmp	r5, r0
 8005586:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800558a:	f84c 1b04 	str.w	r1, [ip], #4
 800558e:	dcec      	bgt.n	800556a <__multadd+0x12>
 8005590:	b30e      	cbz	r6, 80055d6 <__multadd+0x7e>
 8005592:	68a3      	ldr	r3, [r4, #8]
 8005594:	42ab      	cmp	r3, r5
 8005596:	dc19      	bgt.n	80055cc <__multadd+0x74>
 8005598:	6861      	ldr	r1, [r4, #4]
 800559a:	4638      	mov	r0, r7
 800559c:	3101      	adds	r1, #1
 800559e:	f7ff ff79 	bl	8005494 <_Balloc>
 80055a2:	4680      	mov	r8, r0
 80055a4:	b928      	cbnz	r0, 80055b2 <__multadd+0x5a>
 80055a6:	4602      	mov	r2, r0
 80055a8:	21b5      	movs	r1, #181	; 0xb5
 80055aa:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <__multadd+0x84>)
 80055ac:	480c      	ldr	r0, [pc, #48]	; (80055e0 <__multadd+0x88>)
 80055ae:	f000 fd4f 	bl	8006050 <__assert_func>
 80055b2:	6922      	ldr	r2, [r4, #16]
 80055b4:	f104 010c 	add.w	r1, r4, #12
 80055b8:	3202      	adds	r2, #2
 80055ba:	0092      	lsls	r2, r2, #2
 80055bc:	300c      	adds	r0, #12
 80055be:	f7ff ff5b 	bl	8005478 <memcpy>
 80055c2:	4621      	mov	r1, r4
 80055c4:	4638      	mov	r0, r7
 80055c6:	f7ff ffa5 	bl	8005514 <_Bfree>
 80055ca:	4644      	mov	r4, r8
 80055cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055d0:	3501      	adds	r5, #1
 80055d2:	615e      	str	r6, [r3, #20]
 80055d4:	6125      	str	r5, [r4, #16]
 80055d6:	4620      	mov	r0, r4
 80055d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055dc:	08006d93 	.word	0x08006d93
 80055e0:	08006da4 	.word	0x08006da4

080055e4 <__hi0bits>:
 80055e4:	0c02      	lsrs	r2, r0, #16
 80055e6:	0412      	lsls	r2, r2, #16
 80055e8:	4603      	mov	r3, r0
 80055ea:	b9ca      	cbnz	r2, 8005620 <__hi0bits+0x3c>
 80055ec:	0403      	lsls	r3, r0, #16
 80055ee:	2010      	movs	r0, #16
 80055f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80055f4:	bf04      	itt	eq
 80055f6:	021b      	lsleq	r3, r3, #8
 80055f8:	3008      	addeq	r0, #8
 80055fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80055fe:	bf04      	itt	eq
 8005600:	011b      	lsleq	r3, r3, #4
 8005602:	3004      	addeq	r0, #4
 8005604:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005608:	bf04      	itt	eq
 800560a:	009b      	lsleq	r3, r3, #2
 800560c:	3002      	addeq	r0, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	db05      	blt.n	800561e <__hi0bits+0x3a>
 8005612:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005616:	f100 0001 	add.w	r0, r0, #1
 800561a:	bf08      	it	eq
 800561c:	2020      	moveq	r0, #32
 800561e:	4770      	bx	lr
 8005620:	2000      	movs	r0, #0
 8005622:	e7e5      	b.n	80055f0 <__hi0bits+0xc>

08005624 <__lo0bits>:
 8005624:	6803      	ldr	r3, [r0, #0]
 8005626:	4602      	mov	r2, r0
 8005628:	f013 0007 	ands.w	r0, r3, #7
 800562c:	d00b      	beq.n	8005646 <__lo0bits+0x22>
 800562e:	07d9      	lsls	r1, r3, #31
 8005630:	d421      	bmi.n	8005676 <__lo0bits+0x52>
 8005632:	0798      	lsls	r0, r3, #30
 8005634:	bf49      	itett	mi
 8005636:	085b      	lsrmi	r3, r3, #1
 8005638:	089b      	lsrpl	r3, r3, #2
 800563a:	2001      	movmi	r0, #1
 800563c:	6013      	strmi	r3, [r2, #0]
 800563e:	bf5c      	itt	pl
 8005640:	2002      	movpl	r0, #2
 8005642:	6013      	strpl	r3, [r2, #0]
 8005644:	4770      	bx	lr
 8005646:	b299      	uxth	r1, r3
 8005648:	b909      	cbnz	r1, 800564e <__lo0bits+0x2a>
 800564a:	2010      	movs	r0, #16
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	b2d9      	uxtb	r1, r3
 8005650:	b909      	cbnz	r1, 8005656 <__lo0bits+0x32>
 8005652:	3008      	adds	r0, #8
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	0719      	lsls	r1, r3, #28
 8005658:	bf04      	itt	eq
 800565a:	091b      	lsreq	r3, r3, #4
 800565c:	3004      	addeq	r0, #4
 800565e:	0799      	lsls	r1, r3, #30
 8005660:	bf04      	itt	eq
 8005662:	089b      	lsreq	r3, r3, #2
 8005664:	3002      	addeq	r0, #2
 8005666:	07d9      	lsls	r1, r3, #31
 8005668:	d403      	bmi.n	8005672 <__lo0bits+0x4e>
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	f100 0001 	add.w	r0, r0, #1
 8005670:	d003      	beq.n	800567a <__lo0bits+0x56>
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	4770      	bx	lr
 8005676:	2000      	movs	r0, #0
 8005678:	4770      	bx	lr
 800567a:	2020      	movs	r0, #32
 800567c:	4770      	bx	lr
	...

08005680 <__i2b>:
 8005680:	b510      	push	{r4, lr}
 8005682:	460c      	mov	r4, r1
 8005684:	2101      	movs	r1, #1
 8005686:	f7ff ff05 	bl	8005494 <_Balloc>
 800568a:	4602      	mov	r2, r0
 800568c:	b928      	cbnz	r0, 800569a <__i2b+0x1a>
 800568e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005692:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <__i2b+0x24>)
 8005694:	4804      	ldr	r0, [pc, #16]	; (80056a8 <__i2b+0x28>)
 8005696:	f000 fcdb 	bl	8006050 <__assert_func>
 800569a:	2301      	movs	r3, #1
 800569c:	6144      	str	r4, [r0, #20]
 800569e:	6103      	str	r3, [r0, #16]
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	08006d93 	.word	0x08006d93
 80056a8:	08006da4 	.word	0x08006da4

080056ac <__multiply>:
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	4691      	mov	r9, r2
 80056b2:	690a      	ldr	r2, [r1, #16]
 80056b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80056b8:	460c      	mov	r4, r1
 80056ba:	429a      	cmp	r2, r3
 80056bc:	bfbe      	ittt	lt
 80056be:	460b      	movlt	r3, r1
 80056c0:	464c      	movlt	r4, r9
 80056c2:	4699      	movlt	r9, r3
 80056c4:	6927      	ldr	r7, [r4, #16]
 80056c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80056ca:	68a3      	ldr	r3, [r4, #8]
 80056cc:	6861      	ldr	r1, [r4, #4]
 80056ce:	eb07 060a 	add.w	r6, r7, sl
 80056d2:	42b3      	cmp	r3, r6
 80056d4:	b085      	sub	sp, #20
 80056d6:	bfb8      	it	lt
 80056d8:	3101      	addlt	r1, #1
 80056da:	f7ff fedb 	bl	8005494 <_Balloc>
 80056de:	b930      	cbnz	r0, 80056ee <__multiply+0x42>
 80056e0:	4602      	mov	r2, r0
 80056e2:	f240 115d 	movw	r1, #349	; 0x15d
 80056e6:	4b43      	ldr	r3, [pc, #268]	; (80057f4 <__multiply+0x148>)
 80056e8:	4843      	ldr	r0, [pc, #268]	; (80057f8 <__multiply+0x14c>)
 80056ea:	f000 fcb1 	bl	8006050 <__assert_func>
 80056ee:	f100 0514 	add.w	r5, r0, #20
 80056f2:	462b      	mov	r3, r5
 80056f4:	2200      	movs	r2, #0
 80056f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056fa:	4543      	cmp	r3, r8
 80056fc:	d321      	bcc.n	8005742 <__multiply+0x96>
 80056fe:	f104 0314 	add.w	r3, r4, #20
 8005702:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005706:	f109 0314 	add.w	r3, r9, #20
 800570a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800570e:	9202      	str	r2, [sp, #8]
 8005710:	1b3a      	subs	r2, r7, r4
 8005712:	3a15      	subs	r2, #21
 8005714:	f022 0203 	bic.w	r2, r2, #3
 8005718:	3204      	adds	r2, #4
 800571a:	f104 0115 	add.w	r1, r4, #21
 800571e:	428f      	cmp	r7, r1
 8005720:	bf38      	it	cc
 8005722:	2204      	movcc	r2, #4
 8005724:	9201      	str	r2, [sp, #4]
 8005726:	9a02      	ldr	r2, [sp, #8]
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	429a      	cmp	r2, r3
 800572c:	d80c      	bhi.n	8005748 <__multiply+0x9c>
 800572e:	2e00      	cmp	r6, #0
 8005730:	dd03      	ble.n	800573a <__multiply+0x8e>
 8005732:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005736:	2b00      	cmp	r3, #0
 8005738:	d059      	beq.n	80057ee <__multiply+0x142>
 800573a:	6106      	str	r6, [r0, #16]
 800573c:	b005      	add	sp, #20
 800573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005742:	f843 2b04 	str.w	r2, [r3], #4
 8005746:	e7d8      	b.n	80056fa <__multiply+0x4e>
 8005748:	f8b3 a000 	ldrh.w	sl, [r3]
 800574c:	f1ba 0f00 	cmp.w	sl, #0
 8005750:	d023      	beq.n	800579a <__multiply+0xee>
 8005752:	46a9      	mov	r9, r5
 8005754:	f04f 0c00 	mov.w	ip, #0
 8005758:	f104 0e14 	add.w	lr, r4, #20
 800575c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005760:	f8d9 1000 	ldr.w	r1, [r9]
 8005764:	fa1f fb82 	uxth.w	fp, r2
 8005768:	b289      	uxth	r1, r1
 800576a:	fb0a 110b 	mla	r1, sl, fp, r1
 800576e:	4461      	add	r1, ip
 8005770:	f8d9 c000 	ldr.w	ip, [r9]
 8005774:	0c12      	lsrs	r2, r2, #16
 8005776:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800577a:	fb0a c202 	mla	r2, sl, r2, ip
 800577e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005782:	b289      	uxth	r1, r1
 8005784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005788:	4577      	cmp	r7, lr
 800578a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800578e:	f849 1b04 	str.w	r1, [r9], #4
 8005792:	d8e3      	bhi.n	800575c <__multiply+0xb0>
 8005794:	9a01      	ldr	r2, [sp, #4]
 8005796:	f845 c002 	str.w	ip, [r5, r2]
 800579a:	9a03      	ldr	r2, [sp, #12]
 800579c:	3304      	adds	r3, #4
 800579e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80057a2:	f1b9 0f00 	cmp.w	r9, #0
 80057a6:	d020      	beq.n	80057ea <__multiply+0x13e>
 80057a8:	46ae      	mov	lr, r5
 80057aa:	f04f 0a00 	mov.w	sl, #0
 80057ae:	6829      	ldr	r1, [r5, #0]
 80057b0:	f104 0c14 	add.w	ip, r4, #20
 80057b4:	f8bc b000 	ldrh.w	fp, [ip]
 80057b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80057bc:	b289      	uxth	r1, r1
 80057be:	fb09 220b 	mla	r2, r9, fp, r2
 80057c2:	4492      	add	sl, r2
 80057c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80057c8:	f84e 1b04 	str.w	r1, [lr], #4
 80057cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80057d0:	f8be 1000 	ldrh.w	r1, [lr]
 80057d4:	0c12      	lsrs	r2, r2, #16
 80057d6:	fb09 1102 	mla	r1, r9, r2, r1
 80057da:	4567      	cmp	r7, ip
 80057dc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80057e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80057e4:	d8e6      	bhi.n	80057b4 <__multiply+0x108>
 80057e6:	9a01      	ldr	r2, [sp, #4]
 80057e8:	50a9      	str	r1, [r5, r2]
 80057ea:	3504      	adds	r5, #4
 80057ec:	e79b      	b.n	8005726 <__multiply+0x7a>
 80057ee:	3e01      	subs	r6, #1
 80057f0:	e79d      	b.n	800572e <__multiply+0x82>
 80057f2:	bf00      	nop
 80057f4:	08006d93 	.word	0x08006d93
 80057f8:	08006da4 	.word	0x08006da4

080057fc <__pow5mult>:
 80057fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005800:	4615      	mov	r5, r2
 8005802:	f012 0203 	ands.w	r2, r2, #3
 8005806:	4606      	mov	r6, r0
 8005808:	460f      	mov	r7, r1
 800580a:	d007      	beq.n	800581c <__pow5mult+0x20>
 800580c:	4c25      	ldr	r4, [pc, #148]	; (80058a4 <__pow5mult+0xa8>)
 800580e:	3a01      	subs	r2, #1
 8005810:	2300      	movs	r3, #0
 8005812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005816:	f7ff fe9f 	bl	8005558 <__multadd>
 800581a:	4607      	mov	r7, r0
 800581c:	10ad      	asrs	r5, r5, #2
 800581e:	d03d      	beq.n	800589c <__pow5mult+0xa0>
 8005820:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005822:	b97c      	cbnz	r4, 8005844 <__pow5mult+0x48>
 8005824:	2010      	movs	r0, #16
 8005826:	f7ff fe11 	bl	800544c <malloc>
 800582a:	4602      	mov	r2, r0
 800582c:	6270      	str	r0, [r6, #36]	; 0x24
 800582e:	b928      	cbnz	r0, 800583c <__pow5mult+0x40>
 8005830:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005834:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <__pow5mult+0xac>)
 8005836:	481d      	ldr	r0, [pc, #116]	; (80058ac <__pow5mult+0xb0>)
 8005838:	f000 fc0a 	bl	8006050 <__assert_func>
 800583c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005840:	6004      	str	r4, [r0, #0]
 8005842:	60c4      	str	r4, [r0, #12]
 8005844:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800584c:	b94c      	cbnz	r4, 8005862 <__pow5mult+0x66>
 800584e:	f240 2171 	movw	r1, #625	; 0x271
 8005852:	4630      	mov	r0, r6
 8005854:	f7ff ff14 	bl	8005680 <__i2b>
 8005858:	2300      	movs	r3, #0
 800585a:	4604      	mov	r4, r0
 800585c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005860:	6003      	str	r3, [r0, #0]
 8005862:	f04f 0900 	mov.w	r9, #0
 8005866:	07eb      	lsls	r3, r5, #31
 8005868:	d50a      	bpl.n	8005880 <__pow5mult+0x84>
 800586a:	4639      	mov	r1, r7
 800586c:	4622      	mov	r2, r4
 800586e:	4630      	mov	r0, r6
 8005870:	f7ff ff1c 	bl	80056ac <__multiply>
 8005874:	4680      	mov	r8, r0
 8005876:	4639      	mov	r1, r7
 8005878:	4630      	mov	r0, r6
 800587a:	f7ff fe4b 	bl	8005514 <_Bfree>
 800587e:	4647      	mov	r7, r8
 8005880:	106d      	asrs	r5, r5, #1
 8005882:	d00b      	beq.n	800589c <__pow5mult+0xa0>
 8005884:	6820      	ldr	r0, [r4, #0]
 8005886:	b938      	cbnz	r0, 8005898 <__pow5mult+0x9c>
 8005888:	4622      	mov	r2, r4
 800588a:	4621      	mov	r1, r4
 800588c:	4630      	mov	r0, r6
 800588e:	f7ff ff0d 	bl	80056ac <__multiply>
 8005892:	6020      	str	r0, [r4, #0]
 8005894:	f8c0 9000 	str.w	r9, [r0]
 8005898:	4604      	mov	r4, r0
 800589a:	e7e4      	b.n	8005866 <__pow5mult+0x6a>
 800589c:	4638      	mov	r0, r7
 800589e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058a2:	bf00      	nop
 80058a4:	08006ef0 	.word	0x08006ef0
 80058a8:	08006d21 	.word	0x08006d21
 80058ac:	08006da4 	.word	0x08006da4

080058b0 <__lshift>:
 80058b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	460c      	mov	r4, r1
 80058b6:	4607      	mov	r7, r0
 80058b8:	4691      	mov	r9, r2
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	6849      	ldr	r1, [r1, #4]
 80058be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058c8:	f108 0601 	add.w	r6, r8, #1
 80058cc:	42b3      	cmp	r3, r6
 80058ce:	db0b      	blt.n	80058e8 <__lshift+0x38>
 80058d0:	4638      	mov	r0, r7
 80058d2:	f7ff fddf 	bl	8005494 <_Balloc>
 80058d6:	4605      	mov	r5, r0
 80058d8:	b948      	cbnz	r0, 80058ee <__lshift+0x3e>
 80058da:	4602      	mov	r2, r0
 80058dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80058e0:	4b29      	ldr	r3, [pc, #164]	; (8005988 <__lshift+0xd8>)
 80058e2:	482a      	ldr	r0, [pc, #168]	; (800598c <__lshift+0xdc>)
 80058e4:	f000 fbb4 	bl	8006050 <__assert_func>
 80058e8:	3101      	adds	r1, #1
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	e7ee      	b.n	80058cc <__lshift+0x1c>
 80058ee:	2300      	movs	r3, #0
 80058f0:	f100 0114 	add.w	r1, r0, #20
 80058f4:	f100 0210 	add.w	r2, r0, #16
 80058f8:	4618      	mov	r0, r3
 80058fa:	4553      	cmp	r3, sl
 80058fc:	db37      	blt.n	800596e <__lshift+0xbe>
 80058fe:	6920      	ldr	r0, [r4, #16]
 8005900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005904:	f104 0314 	add.w	r3, r4, #20
 8005908:	f019 091f 	ands.w	r9, r9, #31
 800590c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005910:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005914:	d02f      	beq.n	8005976 <__lshift+0xc6>
 8005916:	468a      	mov	sl, r1
 8005918:	f04f 0c00 	mov.w	ip, #0
 800591c:	f1c9 0e20 	rsb	lr, r9, #32
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	fa02 f209 	lsl.w	r2, r2, r9
 8005926:	ea42 020c 	orr.w	r2, r2, ip
 800592a:	f84a 2b04 	str.w	r2, [sl], #4
 800592e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005932:	4298      	cmp	r0, r3
 8005934:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005938:	d8f2      	bhi.n	8005920 <__lshift+0x70>
 800593a:	1b03      	subs	r3, r0, r4
 800593c:	3b15      	subs	r3, #21
 800593e:	f023 0303 	bic.w	r3, r3, #3
 8005942:	3304      	adds	r3, #4
 8005944:	f104 0215 	add.w	r2, r4, #21
 8005948:	4290      	cmp	r0, r2
 800594a:	bf38      	it	cc
 800594c:	2304      	movcc	r3, #4
 800594e:	f841 c003 	str.w	ip, [r1, r3]
 8005952:	f1bc 0f00 	cmp.w	ip, #0
 8005956:	d001      	beq.n	800595c <__lshift+0xac>
 8005958:	f108 0602 	add.w	r6, r8, #2
 800595c:	3e01      	subs	r6, #1
 800595e:	4638      	mov	r0, r7
 8005960:	4621      	mov	r1, r4
 8005962:	612e      	str	r6, [r5, #16]
 8005964:	f7ff fdd6 	bl	8005514 <_Bfree>
 8005968:	4628      	mov	r0, r5
 800596a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005972:	3301      	adds	r3, #1
 8005974:	e7c1      	b.n	80058fa <__lshift+0x4a>
 8005976:	3904      	subs	r1, #4
 8005978:	f853 2b04 	ldr.w	r2, [r3], #4
 800597c:	4298      	cmp	r0, r3
 800597e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005982:	d8f9      	bhi.n	8005978 <__lshift+0xc8>
 8005984:	e7ea      	b.n	800595c <__lshift+0xac>
 8005986:	bf00      	nop
 8005988:	08006d93 	.word	0x08006d93
 800598c:	08006da4 	.word	0x08006da4

08005990 <__mcmp>:
 8005990:	4603      	mov	r3, r0
 8005992:	690a      	ldr	r2, [r1, #16]
 8005994:	6900      	ldr	r0, [r0, #16]
 8005996:	b530      	push	{r4, r5, lr}
 8005998:	1a80      	subs	r0, r0, r2
 800599a:	d10d      	bne.n	80059b8 <__mcmp+0x28>
 800599c:	3314      	adds	r3, #20
 800599e:	3114      	adds	r1, #20
 80059a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80059a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80059a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80059b0:	4295      	cmp	r5, r2
 80059b2:	d002      	beq.n	80059ba <__mcmp+0x2a>
 80059b4:	d304      	bcc.n	80059c0 <__mcmp+0x30>
 80059b6:	2001      	movs	r0, #1
 80059b8:	bd30      	pop	{r4, r5, pc}
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	d3f4      	bcc.n	80059a8 <__mcmp+0x18>
 80059be:	e7fb      	b.n	80059b8 <__mcmp+0x28>
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	e7f8      	b.n	80059b8 <__mcmp+0x28>
	...

080059c8 <__mdiff>:
 80059c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	460d      	mov	r5, r1
 80059ce:	4607      	mov	r7, r0
 80059d0:	4611      	mov	r1, r2
 80059d2:	4628      	mov	r0, r5
 80059d4:	4614      	mov	r4, r2
 80059d6:	f7ff ffdb 	bl	8005990 <__mcmp>
 80059da:	1e06      	subs	r6, r0, #0
 80059dc:	d111      	bne.n	8005a02 <__mdiff+0x3a>
 80059de:	4631      	mov	r1, r6
 80059e0:	4638      	mov	r0, r7
 80059e2:	f7ff fd57 	bl	8005494 <_Balloc>
 80059e6:	4602      	mov	r2, r0
 80059e8:	b928      	cbnz	r0, 80059f6 <__mdiff+0x2e>
 80059ea:	f240 2132 	movw	r1, #562	; 0x232
 80059ee:	4b3a      	ldr	r3, [pc, #232]	; (8005ad8 <__mdiff+0x110>)
 80059f0:	483a      	ldr	r0, [pc, #232]	; (8005adc <__mdiff+0x114>)
 80059f2:	f000 fb2d 	bl	8006050 <__assert_func>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80059fc:	4610      	mov	r0, r2
 80059fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a02:	bfa4      	itt	ge
 8005a04:	4623      	movge	r3, r4
 8005a06:	462c      	movge	r4, r5
 8005a08:	4638      	mov	r0, r7
 8005a0a:	6861      	ldr	r1, [r4, #4]
 8005a0c:	bfa6      	itte	ge
 8005a0e:	461d      	movge	r5, r3
 8005a10:	2600      	movge	r6, #0
 8005a12:	2601      	movlt	r6, #1
 8005a14:	f7ff fd3e 	bl	8005494 <_Balloc>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	b918      	cbnz	r0, 8005a24 <__mdiff+0x5c>
 8005a1c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a20:	4b2d      	ldr	r3, [pc, #180]	; (8005ad8 <__mdiff+0x110>)
 8005a22:	e7e5      	b.n	80059f0 <__mdiff+0x28>
 8005a24:	f102 0814 	add.w	r8, r2, #20
 8005a28:	46c2      	mov	sl, r8
 8005a2a:	f04f 0c00 	mov.w	ip, #0
 8005a2e:	6927      	ldr	r7, [r4, #16]
 8005a30:	60c6      	str	r6, [r0, #12]
 8005a32:	692e      	ldr	r6, [r5, #16]
 8005a34:	f104 0014 	add.w	r0, r4, #20
 8005a38:	f105 0914 	add.w	r9, r5, #20
 8005a3c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005a40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a44:	3410      	adds	r4, #16
 8005a46:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005a4a:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a4e:	fa1f f18b 	uxth.w	r1, fp
 8005a52:	448c      	add	ip, r1
 8005a54:	b299      	uxth	r1, r3
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	ebac 0101 	sub.w	r1, ip, r1
 8005a5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a60:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005a64:	b289      	uxth	r1, r1
 8005a66:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005a6a:	454e      	cmp	r6, r9
 8005a6c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005a70:	f84a 3b04 	str.w	r3, [sl], #4
 8005a74:	d8e7      	bhi.n	8005a46 <__mdiff+0x7e>
 8005a76:	1b73      	subs	r3, r6, r5
 8005a78:	3b15      	subs	r3, #21
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	3515      	adds	r5, #21
 8005a80:	3304      	adds	r3, #4
 8005a82:	42ae      	cmp	r6, r5
 8005a84:	bf38      	it	cc
 8005a86:	2304      	movcc	r3, #4
 8005a88:	4418      	add	r0, r3
 8005a8a:	4443      	add	r3, r8
 8005a8c:	461e      	mov	r6, r3
 8005a8e:	4605      	mov	r5, r0
 8005a90:	4575      	cmp	r5, lr
 8005a92:	d30e      	bcc.n	8005ab2 <__mdiff+0xea>
 8005a94:	f10e 0103 	add.w	r1, lr, #3
 8005a98:	1a09      	subs	r1, r1, r0
 8005a9a:	f021 0103 	bic.w	r1, r1, #3
 8005a9e:	3803      	subs	r0, #3
 8005aa0:	4586      	cmp	lr, r0
 8005aa2:	bf38      	it	cc
 8005aa4:	2100      	movcc	r1, #0
 8005aa6:	4419      	add	r1, r3
 8005aa8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005aac:	b18b      	cbz	r3, 8005ad2 <__mdiff+0x10a>
 8005aae:	6117      	str	r7, [r2, #16]
 8005ab0:	e7a4      	b.n	80059fc <__mdiff+0x34>
 8005ab2:	f855 8b04 	ldr.w	r8, [r5], #4
 8005ab6:	fa1f f188 	uxth.w	r1, r8
 8005aba:	4461      	add	r1, ip
 8005abc:	140c      	asrs	r4, r1, #16
 8005abe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ac2:	b289      	uxth	r1, r1
 8005ac4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ac8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005acc:	f846 1b04 	str.w	r1, [r6], #4
 8005ad0:	e7de      	b.n	8005a90 <__mdiff+0xc8>
 8005ad2:	3f01      	subs	r7, #1
 8005ad4:	e7e8      	b.n	8005aa8 <__mdiff+0xe0>
 8005ad6:	bf00      	nop
 8005ad8:	08006d93 	.word	0x08006d93
 8005adc:	08006da4 	.word	0x08006da4

08005ae0 <__d2b>:
 8005ae0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005aea:	4690      	mov	r8, r2
 8005aec:	461d      	mov	r5, r3
 8005aee:	f7ff fcd1 	bl	8005494 <_Balloc>
 8005af2:	4604      	mov	r4, r0
 8005af4:	b930      	cbnz	r0, 8005b04 <__d2b+0x24>
 8005af6:	4602      	mov	r2, r0
 8005af8:	f240 310a 	movw	r1, #778	; 0x30a
 8005afc:	4b24      	ldr	r3, [pc, #144]	; (8005b90 <__d2b+0xb0>)
 8005afe:	4825      	ldr	r0, [pc, #148]	; (8005b94 <__d2b+0xb4>)
 8005b00:	f000 faa6 	bl	8006050 <__assert_func>
 8005b04:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005b08:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005b0c:	bb2d      	cbnz	r5, 8005b5a <__d2b+0x7a>
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	f1b8 0300 	subs.w	r3, r8, #0
 8005b14:	d026      	beq.n	8005b64 <__d2b+0x84>
 8005b16:	4668      	mov	r0, sp
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	f7ff fd83 	bl	8005624 <__lo0bits>
 8005b1e:	9900      	ldr	r1, [sp, #0]
 8005b20:	b1f0      	cbz	r0, 8005b60 <__d2b+0x80>
 8005b22:	9a01      	ldr	r2, [sp, #4]
 8005b24:	f1c0 0320 	rsb	r3, r0, #32
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	40c2      	lsrs	r2, r0
 8005b30:	6163      	str	r3, [r4, #20]
 8005b32:	9201      	str	r2, [sp, #4]
 8005b34:	9b01      	ldr	r3, [sp, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf14      	ite	ne
 8005b3a:	2102      	movne	r1, #2
 8005b3c:	2101      	moveq	r1, #1
 8005b3e:	61a3      	str	r3, [r4, #24]
 8005b40:	6121      	str	r1, [r4, #16]
 8005b42:	b1c5      	cbz	r5, 8005b76 <__d2b+0x96>
 8005b44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b48:	4405      	add	r5, r0
 8005b4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b4e:	603d      	str	r5, [r7, #0]
 8005b50:	6030      	str	r0, [r6, #0]
 8005b52:	4620      	mov	r0, r4
 8005b54:	b002      	add	sp, #8
 8005b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b5e:	e7d6      	b.n	8005b0e <__d2b+0x2e>
 8005b60:	6161      	str	r1, [r4, #20]
 8005b62:	e7e7      	b.n	8005b34 <__d2b+0x54>
 8005b64:	a801      	add	r0, sp, #4
 8005b66:	f7ff fd5d 	bl	8005624 <__lo0bits>
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	6121      	str	r1, [r4, #16]
 8005b70:	6163      	str	r3, [r4, #20]
 8005b72:	3020      	adds	r0, #32
 8005b74:	e7e5      	b.n	8005b42 <__d2b+0x62>
 8005b76:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005b7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b7e:	6038      	str	r0, [r7, #0]
 8005b80:	6918      	ldr	r0, [r3, #16]
 8005b82:	f7ff fd2f 	bl	80055e4 <__hi0bits>
 8005b86:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005b8a:	6031      	str	r1, [r6, #0]
 8005b8c:	e7e1      	b.n	8005b52 <__d2b+0x72>
 8005b8e:	bf00      	nop
 8005b90:	08006d93 	.word	0x08006d93
 8005b94:	08006da4 	.word	0x08006da4

08005b98 <_calloc_r>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	fba1 5402 	umull	r5, r4, r1, r2
 8005b9e:	b934      	cbnz	r4, 8005bae <_calloc_r+0x16>
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	f000 f875 	bl	8005c90 <_malloc_r>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	b928      	cbnz	r0, 8005bb6 <_calloc_r+0x1e>
 8005baa:	4630      	mov	r0, r6
 8005bac:	bd70      	pop	{r4, r5, r6, pc}
 8005bae:	220c      	movs	r2, #12
 8005bb0:	2600      	movs	r6, #0
 8005bb2:	6002      	str	r2, [r0, #0]
 8005bb4:	e7f9      	b.n	8005baa <_calloc_r+0x12>
 8005bb6:	462a      	mov	r2, r5
 8005bb8:	4621      	mov	r1, r4
 8005bba:	f7fe f92d 	bl	8003e18 <memset>
 8005bbe:	e7f4      	b.n	8005baa <_calloc_r+0x12>

08005bc0 <_free_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	d040      	beq.n	8005c4a <_free_r+0x8a>
 8005bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bcc:	1f0c      	subs	r4, r1, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bfb8      	it	lt
 8005bd2:	18e4      	addlt	r4, r4, r3
 8005bd4:	f000 fa98 	bl	8006108 <__malloc_lock>
 8005bd8:	4a1c      	ldr	r2, [pc, #112]	; (8005c4c <_free_r+0x8c>)
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	b933      	cbnz	r3, 8005bec <_free_r+0x2c>
 8005bde:	6063      	str	r3, [r4, #4]
 8005be0:	6014      	str	r4, [r2, #0]
 8005be2:	4628      	mov	r0, r5
 8005be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005be8:	f000 ba94 	b.w	8006114 <__malloc_unlock>
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	d908      	bls.n	8005c02 <_free_r+0x42>
 8005bf0:	6820      	ldr	r0, [r4, #0]
 8005bf2:	1821      	adds	r1, r4, r0
 8005bf4:	428b      	cmp	r3, r1
 8005bf6:	bf01      	itttt	eq
 8005bf8:	6819      	ldreq	r1, [r3, #0]
 8005bfa:	685b      	ldreq	r3, [r3, #4]
 8005bfc:	1809      	addeq	r1, r1, r0
 8005bfe:	6021      	streq	r1, [r4, #0]
 8005c00:	e7ed      	b.n	8005bde <_free_r+0x1e>
 8005c02:	461a      	mov	r2, r3
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	b10b      	cbz	r3, 8005c0c <_free_r+0x4c>
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d9fa      	bls.n	8005c02 <_free_r+0x42>
 8005c0c:	6811      	ldr	r1, [r2, #0]
 8005c0e:	1850      	adds	r0, r2, r1
 8005c10:	42a0      	cmp	r0, r4
 8005c12:	d10b      	bne.n	8005c2c <_free_r+0x6c>
 8005c14:	6820      	ldr	r0, [r4, #0]
 8005c16:	4401      	add	r1, r0
 8005c18:	1850      	adds	r0, r2, r1
 8005c1a:	4283      	cmp	r3, r0
 8005c1c:	6011      	str	r1, [r2, #0]
 8005c1e:	d1e0      	bne.n	8005be2 <_free_r+0x22>
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4401      	add	r1, r0
 8005c26:	6011      	str	r1, [r2, #0]
 8005c28:	6053      	str	r3, [r2, #4]
 8005c2a:	e7da      	b.n	8005be2 <_free_r+0x22>
 8005c2c:	d902      	bls.n	8005c34 <_free_r+0x74>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	602b      	str	r3, [r5, #0]
 8005c32:	e7d6      	b.n	8005be2 <_free_r+0x22>
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	1821      	adds	r1, r4, r0
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	bf01      	itttt	eq
 8005c3c:	6819      	ldreq	r1, [r3, #0]
 8005c3e:	685b      	ldreq	r3, [r3, #4]
 8005c40:	1809      	addeq	r1, r1, r0
 8005c42:	6021      	streq	r1, [r4, #0]
 8005c44:	6063      	str	r3, [r4, #4]
 8005c46:	6054      	str	r4, [r2, #4]
 8005c48:	e7cb      	b.n	8005be2 <_free_r+0x22>
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	20000360 	.word	0x20000360

08005c50 <sbrk_aligned>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	4e0e      	ldr	r6, [pc, #56]	; (8005c8c <sbrk_aligned+0x3c>)
 8005c54:	460c      	mov	r4, r1
 8005c56:	6831      	ldr	r1, [r6, #0]
 8005c58:	4605      	mov	r5, r0
 8005c5a:	b911      	cbnz	r1, 8005c62 <sbrk_aligned+0x12>
 8005c5c:	f000 f9e8 	bl	8006030 <_sbrk_r>
 8005c60:	6030      	str	r0, [r6, #0]
 8005c62:	4621      	mov	r1, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 f9e3 	bl	8006030 <_sbrk_r>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	d00a      	beq.n	8005c84 <sbrk_aligned+0x34>
 8005c6e:	1cc4      	adds	r4, r0, #3
 8005c70:	f024 0403 	bic.w	r4, r4, #3
 8005c74:	42a0      	cmp	r0, r4
 8005c76:	d007      	beq.n	8005c88 <sbrk_aligned+0x38>
 8005c78:	1a21      	subs	r1, r4, r0
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f9d8 	bl	8006030 <_sbrk_r>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d101      	bne.n	8005c88 <sbrk_aligned+0x38>
 8005c84:	f04f 34ff 	mov.w	r4, #4294967295
 8005c88:	4620      	mov	r0, r4
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	20000364 	.word	0x20000364

08005c90 <_malloc_r>:
 8005c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c94:	1ccd      	adds	r5, r1, #3
 8005c96:	f025 0503 	bic.w	r5, r5, #3
 8005c9a:	3508      	adds	r5, #8
 8005c9c:	2d0c      	cmp	r5, #12
 8005c9e:	bf38      	it	cc
 8005ca0:	250c      	movcc	r5, #12
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	db01      	blt.n	8005cac <_malloc_r+0x1c>
 8005ca8:	42a9      	cmp	r1, r5
 8005caa:	d905      	bls.n	8005cb8 <_malloc_r+0x28>
 8005cac:	230c      	movs	r3, #12
 8005cae:	2600      	movs	r6, #0
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb8:	4e2e      	ldr	r6, [pc, #184]	; (8005d74 <_malloc_r+0xe4>)
 8005cba:	f000 fa25 	bl	8006108 <__malloc_lock>
 8005cbe:	6833      	ldr	r3, [r6, #0]
 8005cc0:	461c      	mov	r4, r3
 8005cc2:	bb34      	cbnz	r4, 8005d12 <_malloc_r+0x82>
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f7ff ffc2 	bl	8005c50 <sbrk_aligned>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	4604      	mov	r4, r0
 8005cd0:	d14d      	bne.n	8005d6e <_malloc_r+0xde>
 8005cd2:	6834      	ldr	r4, [r6, #0]
 8005cd4:	4626      	mov	r6, r4
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	d140      	bne.n	8005d5c <_malloc_r+0xcc>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4638      	mov	r0, r7
 8005ce0:	eb04 0803 	add.w	r8, r4, r3
 8005ce4:	f000 f9a4 	bl	8006030 <_sbrk_r>
 8005ce8:	4580      	cmp	r8, r0
 8005cea:	d13a      	bne.n	8005d62 <_malloc_r+0xd2>
 8005cec:	6821      	ldr	r1, [r4, #0]
 8005cee:	3503      	adds	r5, #3
 8005cf0:	1a6d      	subs	r5, r5, r1
 8005cf2:	f025 0503 	bic.w	r5, r5, #3
 8005cf6:	3508      	adds	r5, #8
 8005cf8:	2d0c      	cmp	r5, #12
 8005cfa:	bf38      	it	cc
 8005cfc:	250c      	movcc	r5, #12
 8005cfe:	4638      	mov	r0, r7
 8005d00:	4629      	mov	r1, r5
 8005d02:	f7ff ffa5 	bl	8005c50 <sbrk_aligned>
 8005d06:	3001      	adds	r0, #1
 8005d08:	d02b      	beq.n	8005d62 <_malloc_r+0xd2>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	442b      	add	r3, r5
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	e00e      	b.n	8005d30 <_malloc_r+0xa0>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	1b52      	subs	r2, r2, r5
 8005d16:	d41e      	bmi.n	8005d56 <_malloc_r+0xc6>
 8005d18:	2a0b      	cmp	r2, #11
 8005d1a:	d916      	bls.n	8005d4a <_malloc_r+0xba>
 8005d1c:	1961      	adds	r1, r4, r5
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	6025      	str	r5, [r4, #0]
 8005d22:	bf18      	it	ne
 8005d24:	6059      	strne	r1, [r3, #4]
 8005d26:	6863      	ldr	r3, [r4, #4]
 8005d28:	bf08      	it	eq
 8005d2a:	6031      	streq	r1, [r6, #0]
 8005d2c:	5162      	str	r2, [r4, r5]
 8005d2e:	604b      	str	r3, [r1, #4]
 8005d30:	4638      	mov	r0, r7
 8005d32:	f104 060b 	add.w	r6, r4, #11
 8005d36:	f000 f9ed 	bl	8006114 <__malloc_unlock>
 8005d3a:	f026 0607 	bic.w	r6, r6, #7
 8005d3e:	1d23      	adds	r3, r4, #4
 8005d40:	1af2      	subs	r2, r6, r3
 8005d42:	d0b6      	beq.n	8005cb2 <_malloc_r+0x22>
 8005d44:	1b9b      	subs	r3, r3, r6
 8005d46:	50a3      	str	r3, [r4, r2]
 8005d48:	e7b3      	b.n	8005cb2 <_malloc_r+0x22>
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	bf0c      	ite	eq
 8005d50:	6032      	streq	r2, [r6, #0]
 8005d52:	605a      	strne	r2, [r3, #4]
 8005d54:	e7ec      	b.n	8005d30 <_malloc_r+0xa0>
 8005d56:	4623      	mov	r3, r4
 8005d58:	6864      	ldr	r4, [r4, #4]
 8005d5a:	e7b2      	b.n	8005cc2 <_malloc_r+0x32>
 8005d5c:	4634      	mov	r4, r6
 8005d5e:	6876      	ldr	r6, [r6, #4]
 8005d60:	e7b9      	b.n	8005cd6 <_malloc_r+0x46>
 8005d62:	230c      	movs	r3, #12
 8005d64:	4638      	mov	r0, r7
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	f000 f9d4 	bl	8006114 <__malloc_unlock>
 8005d6c:	e7a1      	b.n	8005cb2 <_malloc_r+0x22>
 8005d6e:	6025      	str	r5, [r4, #0]
 8005d70:	e7de      	b.n	8005d30 <_malloc_r+0xa0>
 8005d72:	bf00      	nop
 8005d74:	20000360 	.word	0x20000360

08005d78 <__ssputs_r>:
 8005d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	688e      	ldr	r6, [r1, #8]
 8005d7e:	4682      	mov	sl, r0
 8005d80:	429e      	cmp	r6, r3
 8005d82:	460c      	mov	r4, r1
 8005d84:	4690      	mov	r8, r2
 8005d86:	461f      	mov	r7, r3
 8005d88:	d838      	bhi.n	8005dfc <__ssputs_r+0x84>
 8005d8a:	898a      	ldrh	r2, [r1, #12]
 8005d8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d90:	d032      	beq.n	8005df8 <__ssputs_r+0x80>
 8005d92:	6825      	ldr	r5, [r4, #0]
 8005d94:	6909      	ldr	r1, [r1, #16]
 8005d96:	3301      	adds	r3, #1
 8005d98:	eba5 0901 	sub.w	r9, r5, r1
 8005d9c:	6965      	ldr	r5, [r4, #20]
 8005d9e:	444b      	add	r3, r9
 8005da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005da8:	106d      	asrs	r5, r5, #1
 8005daa:	429d      	cmp	r5, r3
 8005dac:	bf38      	it	cc
 8005dae:	461d      	movcc	r5, r3
 8005db0:	0553      	lsls	r3, r2, #21
 8005db2:	d531      	bpl.n	8005e18 <__ssputs_r+0xa0>
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7ff ff6b 	bl	8005c90 <_malloc_r>
 8005dba:	4606      	mov	r6, r0
 8005dbc:	b950      	cbnz	r0, 8005dd4 <__ssputs_r+0x5c>
 8005dbe:	230c      	movs	r3, #12
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	f8ca 3000 	str.w	r3, [sl]
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dce:	81a3      	strh	r3, [r4, #12]
 8005dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd4:	464a      	mov	r2, r9
 8005dd6:	6921      	ldr	r1, [r4, #16]
 8005dd8:	f7ff fb4e 	bl	8005478 <memcpy>
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	6126      	str	r6, [r4, #16]
 8005dea:	444e      	add	r6, r9
 8005dec:	6026      	str	r6, [r4, #0]
 8005dee:	463e      	mov	r6, r7
 8005df0:	6165      	str	r5, [r4, #20]
 8005df2:	eba5 0509 	sub.w	r5, r5, r9
 8005df6:	60a5      	str	r5, [r4, #8]
 8005df8:	42be      	cmp	r6, r7
 8005dfa:	d900      	bls.n	8005dfe <__ssputs_r+0x86>
 8005dfc:	463e      	mov	r6, r7
 8005dfe:	4632      	mov	r2, r6
 8005e00:	4641      	mov	r1, r8
 8005e02:	6820      	ldr	r0, [r4, #0]
 8005e04:	f000 f966 	bl	80060d4 <memmove>
 8005e08:	68a3      	ldr	r3, [r4, #8]
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	1b9b      	subs	r3, r3, r6
 8005e0e:	60a3      	str	r3, [r4, #8]
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	4433      	add	r3, r6
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	e7db      	b.n	8005dd0 <__ssputs_r+0x58>
 8005e18:	462a      	mov	r2, r5
 8005e1a:	f000 f981 	bl	8006120 <_realloc_r>
 8005e1e:	4606      	mov	r6, r0
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d1e1      	bne.n	8005de8 <__ssputs_r+0x70>
 8005e24:	4650      	mov	r0, sl
 8005e26:	6921      	ldr	r1, [r4, #16]
 8005e28:	f7ff feca 	bl	8005bc0 <_free_r>
 8005e2c:	e7c7      	b.n	8005dbe <__ssputs_r+0x46>
	...

08005e30 <_svfiprintf_r>:
 8005e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	4698      	mov	r8, r3
 8005e36:	898b      	ldrh	r3, [r1, #12]
 8005e38:	4607      	mov	r7, r0
 8005e3a:	061b      	lsls	r3, r3, #24
 8005e3c:	460d      	mov	r5, r1
 8005e3e:	4614      	mov	r4, r2
 8005e40:	b09d      	sub	sp, #116	; 0x74
 8005e42:	d50e      	bpl.n	8005e62 <_svfiprintf_r+0x32>
 8005e44:	690b      	ldr	r3, [r1, #16]
 8005e46:	b963      	cbnz	r3, 8005e62 <_svfiprintf_r+0x32>
 8005e48:	2140      	movs	r1, #64	; 0x40
 8005e4a:	f7ff ff21 	bl	8005c90 <_malloc_r>
 8005e4e:	6028      	str	r0, [r5, #0]
 8005e50:	6128      	str	r0, [r5, #16]
 8005e52:	b920      	cbnz	r0, 8005e5e <_svfiprintf_r+0x2e>
 8005e54:	230c      	movs	r3, #12
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5c:	e0d1      	b.n	8006002 <_svfiprintf_r+0x1d2>
 8005e5e:	2340      	movs	r3, #64	; 0x40
 8005e60:	616b      	str	r3, [r5, #20]
 8005e62:	2300      	movs	r3, #0
 8005e64:	9309      	str	r3, [sp, #36]	; 0x24
 8005e66:	2320      	movs	r3, #32
 8005e68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e6c:	2330      	movs	r3, #48	; 0x30
 8005e6e:	f04f 0901 	mov.w	r9, #1
 8005e72:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800601c <_svfiprintf_r+0x1ec>
 8005e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e7e:	4623      	mov	r3, r4
 8005e80:	469a      	mov	sl, r3
 8005e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e86:	b10a      	cbz	r2, 8005e8c <_svfiprintf_r+0x5c>
 8005e88:	2a25      	cmp	r2, #37	; 0x25
 8005e8a:	d1f9      	bne.n	8005e80 <_svfiprintf_r+0x50>
 8005e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e90:	d00b      	beq.n	8005eaa <_svfiprintf_r+0x7a>
 8005e92:	465b      	mov	r3, fp
 8005e94:	4622      	mov	r2, r4
 8005e96:	4629      	mov	r1, r5
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f7ff ff6d 	bl	8005d78 <__ssputs_r>
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	f000 80aa 	beq.w	8005ff8 <_svfiprintf_r+0x1c8>
 8005ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ea6:	445a      	add	r2, fp
 8005ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8005eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 80a2 	beq.w	8005ff8 <_svfiprintf_r+0x1c8>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ebe:	f10a 0a01 	add.w	sl, sl, #1
 8005ec2:	9304      	str	r3, [sp, #16]
 8005ec4:	9307      	str	r3, [sp, #28]
 8005ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005eca:	931a      	str	r3, [sp, #104]	; 0x68
 8005ecc:	4654      	mov	r4, sl
 8005ece:	2205      	movs	r2, #5
 8005ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed4:	4851      	ldr	r0, [pc, #324]	; (800601c <_svfiprintf_r+0x1ec>)
 8005ed6:	f7ff fac1 	bl	800545c <memchr>
 8005eda:	9a04      	ldr	r2, [sp, #16]
 8005edc:	b9d8      	cbnz	r0, 8005f16 <_svfiprintf_r+0xe6>
 8005ede:	06d0      	lsls	r0, r2, #27
 8005ee0:	bf44      	itt	mi
 8005ee2:	2320      	movmi	r3, #32
 8005ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee8:	0711      	lsls	r1, r2, #28
 8005eea:	bf44      	itt	mi
 8005eec:	232b      	movmi	r3, #43	; 0x2b
 8005eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ef8:	d015      	beq.n	8005f26 <_svfiprintf_r+0xf6>
 8005efa:	4654      	mov	r4, sl
 8005efc:	2000      	movs	r0, #0
 8005efe:	f04f 0c0a 	mov.w	ip, #10
 8005f02:	9a07      	ldr	r2, [sp, #28]
 8005f04:	4621      	mov	r1, r4
 8005f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f0a:	3b30      	subs	r3, #48	; 0x30
 8005f0c:	2b09      	cmp	r3, #9
 8005f0e:	d94e      	bls.n	8005fae <_svfiprintf_r+0x17e>
 8005f10:	b1b0      	cbz	r0, 8005f40 <_svfiprintf_r+0x110>
 8005f12:	9207      	str	r2, [sp, #28]
 8005f14:	e014      	b.n	8005f40 <_svfiprintf_r+0x110>
 8005f16:	eba0 0308 	sub.w	r3, r0, r8
 8005f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	46a2      	mov	sl, r4
 8005f22:	9304      	str	r3, [sp, #16]
 8005f24:	e7d2      	b.n	8005ecc <_svfiprintf_r+0x9c>
 8005f26:	9b03      	ldr	r3, [sp, #12]
 8005f28:	1d19      	adds	r1, r3, #4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	9103      	str	r1, [sp, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bfbb      	ittet	lt
 8005f32:	425b      	neglt	r3, r3
 8005f34:	f042 0202 	orrlt.w	r2, r2, #2
 8005f38:	9307      	strge	r3, [sp, #28]
 8005f3a:	9307      	strlt	r3, [sp, #28]
 8005f3c:	bfb8      	it	lt
 8005f3e:	9204      	strlt	r2, [sp, #16]
 8005f40:	7823      	ldrb	r3, [r4, #0]
 8005f42:	2b2e      	cmp	r3, #46	; 0x2e
 8005f44:	d10c      	bne.n	8005f60 <_svfiprintf_r+0x130>
 8005f46:	7863      	ldrb	r3, [r4, #1]
 8005f48:	2b2a      	cmp	r3, #42	; 0x2a
 8005f4a:	d135      	bne.n	8005fb8 <_svfiprintf_r+0x188>
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	3402      	adds	r4, #2
 8005f50:	1d1a      	adds	r2, r3, #4
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	9203      	str	r2, [sp, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bfb8      	it	lt
 8005f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f5e:	9305      	str	r3, [sp, #20]
 8005f60:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006020 <_svfiprintf_r+0x1f0>
 8005f64:	2203      	movs	r2, #3
 8005f66:	4650      	mov	r0, sl
 8005f68:	7821      	ldrb	r1, [r4, #0]
 8005f6a:	f7ff fa77 	bl	800545c <memchr>
 8005f6e:	b140      	cbz	r0, 8005f82 <_svfiprintf_r+0x152>
 8005f70:	2340      	movs	r3, #64	; 0x40
 8005f72:	eba0 000a 	sub.w	r0, r0, sl
 8005f76:	fa03 f000 	lsl.w	r0, r3, r0
 8005f7a:	9b04      	ldr	r3, [sp, #16]
 8005f7c:	3401      	adds	r4, #1
 8005f7e:	4303      	orrs	r3, r0
 8005f80:	9304      	str	r3, [sp, #16]
 8005f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f86:	2206      	movs	r2, #6
 8005f88:	4826      	ldr	r0, [pc, #152]	; (8006024 <_svfiprintf_r+0x1f4>)
 8005f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f8e:	f7ff fa65 	bl	800545c <memchr>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d038      	beq.n	8006008 <_svfiprintf_r+0x1d8>
 8005f96:	4b24      	ldr	r3, [pc, #144]	; (8006028 <_svfiprintf_r+0x1f8>)
 8005f98:	bb1b      	cbnz	r3, 8005fe2 <_svfiprintf_r+0x1b2>
 8005f9a:	9b03      	ldr	r3, [sp, #12]
 8005f9c:	3307      	adds	r3, #7
 8005f9e:	f023 0307 	bic.w	r3, r3, #7
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	9303      	str	r3, [sp, #12]
 8005fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa8:	4433      	add	r3, r6
 8005faa:	9309      	str	r3, [sp, #36]	; 0x24
 8005fac:	e767      	b.n	8005e7e <_svfiprintf_r+0x4e>
 8005fae:	460c      	mov	r4, r1
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fb6:	e7a5      	b.n	8005f04 <_svfiprintf_r+0xd4>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f04f 0c0a 	mov.w	ip, #10
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	3401      	adds	r4, #1
 8005fc2:	9305      	str	r3, [sp, #20]
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fca:	3a30      	subs	r2, #48	; 0x30
 8005fcc:	2a09      	cmp	r2, #9
 8005fce:	d903      	bls.n	8005fd8 <_svfiprintf_r+0x1a8>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0c5      	beq.n	8005f60 <_svfiprintf_r+0x130>
 8005fd4:	9105      	str	r1, [sp, #20]
 8005fd6:	e7c3      	b.n	8005f60 <_svfiprintf_r+0x130>
 8005fd8:	4604      	mov	r4, r0
 8005fda:	2301      	movs	r3, #1
 8005fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fe0:	e7f0      	b.n	8005fc4 <_svfiprintf_r+0x194>
 8005fe2:	ab03      	add	r3, sp, #12
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	462a      	mov	r2, r5
 8005fe8:	4638      	mov	r0, r7
 8005fea:	4b10      	ldr	r3, [pc, #64]	; (800602c <_svfiprintf_r+0x1fc>)
 8005fec:	a904      	add	r1, sp, #16
 8005fee:	f7fd ffb9 	bl	8003f64 <_printf_float>
 8005ff2:	1c42      	adds	r2, r0, #1
 8005ff4:	4606      	mov	r6, r0
 8005ff6:	d1d6      	bne.n	8005fa6 <_svfiprintf_r+0x176>
 8005ff8:	89ab      	ldrh	r3, [r5, #12]
 8005ffa:	065b      	lsls	r3, r3, #25
 8005ffc:	f53f af2c 	bmi.w	8005e58 <_svfiprintf_r+0x28>
 8006000:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006002:	b01d      	add	sp, #116	; 0x74
 8006004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	ab03      	add	r3, sp, #12
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	462a      	mov	r2, r5
 800600e:	4638      	mov	r0, r7
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <_svfiprintf_r+0x1fc>)
 8006012:	a904      	add	r1, sp, #16
 8006014:	f7fe fa42 	bl	800449c <_printf_i>
 8006018:	e7eb      	b.n	8005ff2 <_svfiprintf_r+0x1c2>
 800601a:	bf00      	nop
 800601c:	08006efc 	.word	0x08006efc
 8006020:	08006f02 	.word	0x08006f02
 8006024:	08006f06 	.word	0x08006f06
 8006028:	08003f65 	.word	0x08003f65
 800602c:	08005d79 	.word	0x08005d79

08006030 <_sbrk_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	2300      	movs	r3, #0
 8006034:	4d05      	ldr	r5, [pc, #20]	; (800604c <_sbrk_r+0x1c>)
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	f7fb fbb8 	bl	80017b0 <_sbrk>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_sbrk_r+0x1a>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_sbrk_r+0x1a>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	20000368 	.word	0x20000368

08006050 <__assert_func>:
 8006050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006052:	4614      	mov	r4, r2
 8006054:	461a      	mov	r2, r3
 8006056:	4b09      	ldr	r3, [pc, #36]	; (800607c <__assert_func+0x2c>)
 8006058:	4605      	mov	r5, r0
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68d8      	ldr	r0, [r3, #12]
 800605e:	b14c      	cbz	r4, 8006074 <__assert_func+0x24>
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <__assert_func+0x30>)
 8006062:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006066:	9100      	str	r1, [sp, #0]
 8006068:	462b      	mov	r3, r5
 800606a:	4906      	ldr	r1, [pc, #24]	; (8006084 <__assert_func+0x34>)
 800606c:	f000 f80e 	bl	800608c <fiprintf>
 8006070:	f000 faaa 	bl	80065c8 <abort>
 8006074:	4b04      	ldr	r3, [pc, #16]	; (8006088 <__assert_func+0x38>)
 8006076:	461c      	mov	r4, r3
 8006078:	e7f3      	b.n	8006062 <__assert_func+0x12>
 800607a:	bf00      	nop
 800607c:	2000001c 	.word	0x2000001c
 8006080:	08006f0d 	.word	0x08006f0d
 8006084:	08006f1a 	.word	0x08006f1a
 8006088:	08006f48 	.word	0x08006f48

0800608c <fiprintf>:
 800608c:	b40e      	push	{r1, r2, r3}
 800608e:	b503      	push	{r0, r1, lr}
 8006090:	4601      	mov	r1, r0
 8006092:	ab03      	add	r3, sp, #12
 8006094:	4805      	ldr	r0, [pc, #20]	; (80060ac <fiprintf+0x20>)
 8006096:	f853 2b04 	ldr.w	r2, [r3], #4
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	f000 f895 	bl	80061cc <_vfiprintf_r>
 80060a2:	b002      	add	sp, #8
 80060a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060a8:	b003      	add	sp, #12
 80060aa:	4770      	bx	lr
 80060ac:	2000001c 	.word	0x2000001c

080060b0 <__ascii_mbtowc>:
 80060b0:	b082      	sub	sp, #8
 80060b2:	b901      	cbnz	r1, 80060b6 <__ascii_mbtowc+0x6>
 80060b4:	a901      	add	r1, sp, #4
 80060b6:	b142      	cbz	r2, 80060ca <__ascii_mbtowc+0x1a>
 80060b8:	b14b      	cbz	r3, 80060ce <__ascii_mbtowc+0x1e>
 80060ba:	7813      	ldrb	r3, [r2, #0]
 80060bc:	600b      	str	r3, [r1, #0]
 80060be:	7812      	ldrb	r2, [r2, #0]
 80060c0:	1e10      	subs	r0, r2, #0
 80060c2:	bf18      	it	ne
 80060c4:	2001      	movne	r0, #1
 80060c6:	b002      	add	sp, #8
 80060c8:	4770      	bx	lr
 80060ca:	4610      	mov	r0, r2
 80060cc:	e7fb      	b.n	80060c6 <__ascii_mbtowc+0x16>
 80060ce:	f06f 0001 	mvn.w	r0, #1
 80060d2:	e7f8      	b.n	80060c6 <__ascii_mbtowc+0x16>

080060d4 <memmove>:
 80060d4:	4288      	cmp	r0, r1
 80060d6:	b510      	push	{r4, lr}
 80060d8:	eb01 0402 	add.w	r4, r1, r2
 80060dc:	d902      	bls.n	80060e4 <memmove+0x10>
 80060de:	4284      	cmp	r4, r0
 80060e0:	4623      	mov	r3, r4
 80060e2:	d807      	bhi.n	80060f4 <memmove+0x20>
 80060e4:	1e43      	subs	r3, r0, #1
 80060e6:	42a1      	cmp	r1, r4
 80060e8:	d008      	beq.n	80060fc <memmove+0x28>
 80060ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060f2:	e7f8      	b.n	80060e6 <memmove+0x12>
 80060f4:	4601      	mov	r1, r0
 80060f6:	4402      	add	r2, r0
 80060f8:	428a      	cmp	r2, r1
 80060fa:	d100      	bne.n	80060fe <memmove+0x2a>
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006106:	e7f7      	b.n	80060f8 <memmove+0x24>

08006108 <__malloc_lock>:
 8006108:	4801      	ldr	r0, [pc, #4]	; (8006110 <__malloc_lock+0x8>)
 800610a:	f000 bc19 	b.w	8006940 <__retarget_lock_acquire_recursive>
 800610e:	bf00      	nop
 8006110:	2000036c 	.word	0x2000036c

08006114 <__malloc_unlock>:
 8006114:	4801      	ldr	r0, [pc, #4]	; (800611c <__malloc_unlock+0x8>)
 8006116:	f000 bc14 	b.w	8006942 <__retarget_lock_release_recursive>
 800611a:	bf00      	nop
 800611c:	2000036c 	.word	0x2000036c

08006120 <_realloc_r>:
 8006120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006124:	4680      	mov	r8, r0
 8006126:	4614      	mov	r4, r2
 8006128:	460e      	mov	r6, r1
 800612a:	b921      	cbnz	r1, 8006136 <_realloc_r+0x16>
 800612c:	4611      	mov	r1, r2
 800612e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006132:	f7ff bdad 	b.w	8005c90 <_malloc_r>
 8006136:	b92a      	cbnz	r2, 8006144 <_realloc_r+0x24>
 8006138:	f7ff fd42 	bl	8005bc0 <_free_r>
 800613c:	4625      	mov	r5, r4
 800613e:	4628      	mov	r0, r5
 8006140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006144:	f000 fc64 	bl	8006a10 <_malloc_usable_size_r>
 8006148:	4284      	cmp	r4, r0
 800614a:	4607      	mov	r7, r0
 800614c:	d802      	bhi.n	8006154 <_realloc_r+0x34>
 800614e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006152:	d812      	bhi.n	800617a <_realloc_r+0x5a>
 8006154:	4621      	mov	r1, r4
 8006156:	4640      	mov	r0, r8
 8006158:	f7ff fd9a 	bl	8005c90 <_malloc_r>
 800615c:	4605      	mov	r5, r0
 800615e:	2800      	cmp	r0, #0
 8006160:	d0ed      	beq.n	800613e <_realloc_r+0x1e>
 8006162:	42bc      	cmp	r4, r7
 8006164:	4622      	mov	r2, r4
 8006166:	4631      	mov	r1, r6
 8006168:	bf28      	it	cs
 800616a:	463a      	movcs	r2, r7
 800616c:	f7ff f984 	bl	8005478 <memcpy>
 8006170:	4631      	mov	r1, r6
 8006172:	4640      	mov	r0, r8
 8006174:	f7ff fd24 	bl	8005bc0 <_free_r>
 8006178:	e7e1      	b.n	800613e <_realloc_r+0x1e>
 800617a:	4635      	mov	r5, r6
 800617c:	e7df      	b.n	800613e <_realloc_r+0x1e>

0800617e <__sfputc_r>:
 800617e:	6893      	ldr	r3, [r2, #8]
 8006180:	b410      	push	{r4}
 8006182:	3b01      	subs	r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	6093      	str	r3, [r2, #8]
 8006188:	da07      	bge.n	800619a <__sfputc_r+0x1c>
 800618a:	6994      	ldr	r4, [r2, #24]
 800618c:	42a3      	cmp	r3, r4
 800618e:	db01      	blt.n	8006194 <__sfputc_r+0x16>
 8006190:	290a      	cmp	r1, #10
 8006192:	d102      	bne.n	800619a <__sfputc_r+0x1c>
 8006194:	bc10      	pop	{r4}
 8006196:	f000 b949 	b.w	800642c <__swbuf_r>
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	1c58      	adds	r0, r3, #1
 800619e:	6010      	str	r0, [r2, #0]
 80061a0:	7019      	strb	r1, [r3, #0]
 80061a2:	4608      	mov	r0, r1
 80061a4:	bc10      	pop	{r4}
 80061a6:	4770      	bx	lr

080061a8 <__sfputs_r>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	4614      	mov	r4, r2
 80061b0:	18d5      	adds	r5, r2, r3
 80061b2:	42ac      	cmp	r4, r5
 80061b4:	d101      	bne.n	80061ba <__sfputs_r+0x12>
 80061b6:	2000      	movs	r0, #0
 80061b8:	e007      	b.n	80061ca <__sfputs_r+0x22>
 80061ba:	463a      	mov	r2, r7
 80061bc:	4630      	mov	r0, r6
 80061be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c2:	f7ff ffdc 	bl	800617e <__sfputc_r>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	d1f3      	bne.n	80061b2 <__sfputs_r+0xa>
 80061ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061cc <_vfiprintf_r>:
 80061cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d0:	460d      	mov	r5, r1
 80061d2:	4614      	mov	r4, r2
 80061d4:	4698      	mov	r8, r3
 80061d6:	4606      	mov	r6, r0
 80061d8:	b09d      	sub	sp, #116	; 0x74
 80061da:	b118      	cbz	r0, 80061e4 <_vfiprintf_r+0x18>
 80061dc:	6983      	ldr	r3, [r0, #24]
 80061de:	b90b      	cbnz	r3, 80061e4 <_vfiprintf_r+0x18>
 80061e0:	f000 fb10 	bl	8006804 <__sinit>
 80061e4:	4b89      	ldr	r3, [pc, #548]	; (800640c <_vfiprintf_r+0x240>)
 80061e6:	429d      	cmp	r5, r3
 80061e8:	d11b      	bne.n	8006222 <_vfiprintf_r+0x56>
 80061ea:	6875      	ldr	r5, [r6, #4]
 80061ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061ee:	07d9      	lsls	r1, r3, #31
 80061f0:	d405      	bmi.n	80061fe <_vfiprintf_r+0x32>
 80061f2:	89ab      	ldrh	r3, [r5, #12]
 80061f4:	059a      	lsls	r2, r3, #22
 80061f6:	d402      	bmi.n	80061fe <_vfiprintf_r+0x32>
 80061f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061fa:	f000 fba1 	bl	8006940 <__retarget_lock_acquire_recursive>
 80061fe:	89ab      	ldrh	r3, [r5, #12]
 8006200:	071b      	lsls	r3, r3, #28
 8006202:	d501      	bpl.n	8006208 <_vfiprintf_r+0x3c>
 8006204:	692b      	ldr	r3, [r5, #16]
 8006206:	b9eb      	cbnz	r3, 8006244 <_vfiprintf_r+0x78>
 8006208:	4629      	mov	r1, r5
 800620a:	4630      	mov	r0, r6
 800620c:	f000 f96e 	bl	80064ec <__swsetup_r>
 8006210:	b1c0      	cbz	r0, 8006244 <_vfiprintf_r+0x78>
 8006212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006214:	07dc      	lsls	r4, r3, #31
 8006216:	d50e      	bpl.n	8006236 <_vfiprintf_r+0x6a>
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	b01d      	add	sp, #116	; 0x74
 800621e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006222:	4b7b      	ldr	r3, [pc, #492]	; (8006410 <_vfiprintf_r+0x244>)
 8006224:	429d      	cmp	r5, r3
 8006226:	d101      	bne.n	800622c <_vfiprintf_r+0x60>
 8006228:	68b5      	ldr	r5, [r6, #8]
 800622a:	e7df      	b.n	80061ec <_vfiprintf_r+0x20>
 800622c:	4b79      	ldr	r3, [pc, #484]	; (8006414 <_vfiprintf_r+0x248>)
 800622e:	429d      	cmp	r5, r3
 8006230:	bf08      	it	eq
 8006232:	68f5      	ldreq	r5, [r6, #12]
 8006234:	e7da      	b.n	80061ec <_vfiprintf_r+0x20>
 8006236:	89ab      	ldrh	r3, [r5, #12]
 8006238:	0598      	lsls	r0, r3, #22
 800623a:	d4ed      	bmi.n	8006218 <_vfiprintf_r+0x4c>
 800623c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800623e:	f000 fb80 	bl	8006942 <__retarget_lock_release_recursive>
 8006242:	e7e9      	b.n	8006218 <_vfiprintf_r+0x4c>
 8006244:	2300      	movs	r3, #0
 8006246:	9309      	str	r3, [sp, #36]	; 0x24
 8006248:	2320      	movs	r3, #32
 800624a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800624e:	2330      	movs	r3, #48	; 0x30
 8006250:	f04f 0901 	mov.w	r9, #1
 8006254:	f8cd 800c 	str.w	r8, [sp, #12]
 8006258:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006418 <_vfiprintf_r+0x24c>
 800625c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006260:	4623      	mov	r3, r4
 8006262:	469a      	mov	sl, r3
 8006264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006268:	b10a      	cbz	r2, 800626e <_vfiprintf_r+0xa2>
 800626a:	2a25      	cmp	r2, #37	; 0x25
 800626c:	d1f9      	bne.n	8006262 <_vfiprintf_r+0x96>
 800626e:	ebba 0b04 	subs.w	fp, sl, r4
 8006272:	d00b      	beq.n	800628c <_vfiprintf_r+0xc0>
 8006274:	465b      	mov	r3, fp
 8006276:	4622      	mov	r2, r4
 8006278:	4629      	mov	r1, r5
 800627a:	4630      	mov	r0, r6
 800627c:	f7ff ff94 	bl	80061a8 <__sfputs_r>
 8006280:	3001      	adds	r0, #1
 8006282:	f000 80aa 	beq.w	80063da <_vfiprintf_r+0x20e>
 8006286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006288:	445a      	add	r2, fp
 800628a:	9209      	str	r2, [sp, #36]	; 0x24
 800628c:	f89a 3000 	ldrb.w	r3, [sl]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80a2 	beq.w	80063da <_vfiprintf_r+0x20e>
 8006296:	2300      	movs	r3, #0
 8006298:	f04f 32ff 	mov.w	r2, #4294967295
 800629c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062a0:	f10a 0a01 	add.w	sl, sl, #1
 80062a4:	9304      	str	r3, [sp, #16]
 80062a6:	9307      	str	r3, [sp, #28]
 80062a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062ac:	931a      	str	r3, [sp, #104]	; 0x68
 80062ae:	4654      	mov	r4, sl
 80062b0:	2205      	movs	r2, #5
 80062b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b6:	4858      	ldr	r0, [pc, #352]	; (8006418 <_vfiprintf_r+0x24c>)
 80062b8:	f7ff f8d0 	bl	800545c <memchr>
 80062bc:	9a04      	ldr	r2, [sp, #16]
 80062be:	b9d8      	cbnz	r0, 80062f8 <_vfiprintf_r+0x12c>
 80062c0:	06d1      	lsls	r1, r2, #27
 80062c2:	bf44      	itt	mi
 80062c4:	2320      	movmi	r3, #32
 80062c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ca:	0713      	lsls	r3, r2, #28
 80062cc:	bf44      	itt	mi
 80062ce:	232b      	movmi	r3, #43	; 0x2b
 80062d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062d4:	f89a 3000 	ldrb.w	r3, [sl]
 80062d8:	2b2a      	cmp	r3, #42	; 0x2a
 80062da:	d015      	beq.n	8006308 <_vfiprintf_r+0x13c>
 80062dc:	4654      	mov	r4, sl
 80062de:	2000      	movs	r0, #0
 80062e0:	f04f 0c0a 	mov.w	ip, #10
 80062e4:	9a07      	ldr	r2, [sp, #28]
 80062e6:	4621      	mov	r1, r4
 80062e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062ec:	3b30      	subs	r3, #48	; 0x30
 80062ee:	2b09      	cmp	r3, #9
 80062f0:	d94e      	bls.n	8006390 <_vfiprintf_r+0x1c4>
 80062f2:	b1b0      	cbz	r0, 8006322 <_vfiprintf_r+0x156>
 80062f4:	9207      	str	r2, [sp, #28]
 80062f6:	e014      	b.n	8006322 <_vfiprintf_r+0x156>
 80062f8:	eba0 0308 	sub.w	r3, r0, r8
 80062fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006300:	4313      	orrs	r3, r2
 8006302:	46a2      	mov	sl, r4
 8006304:	9304      	str	r3, [sp, #16]
 8006306:	e7d2      	b.n	80062ae <_vfiprintf_r+0xe2>
 8006308:	9b03      	ldr	r3, [sp, #12]
 800630a:	1d19      	adds	r1, r3, #4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	9103      	str	r1, [sp, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	bfbb      	ittet	lt
 8006314:	425b      	neglt	r3, r3
 8006316:	f042 0202 	orrlt.w	r2, r2, #2
 800631a:	9307      	strge	r3, [sp, #28]
 800631c:	9307      	strlt	r3, [sp, #28]
 800631e:	bfb8      	it	lt
 8006320:	9204      	strlt	r2, [sp, #16]
 8006322:	7823      	ldrb	r3, [r4, #0]
 8006324:	2b2e      	cmp	r3, #46	; 0x2e
 8006326:	d10c      	bne.n	8006342 <_vfiprintf_r+0x176>
 8006328:	7863      	ldrb	r3, [r4, #1]
 800632a:	2b2a      	cmp	r3, #42	; 0x2a
 800632c:	d135      	bne.n	800639a <_vfiprintf_r+0x1ce>
 800632e:	9b03      	ldr	r3, [sp, #12]
 8006330:	3402      	adds	r4, #2
 8006332:	1d1a      	adds	r2, r3, #4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	9203      	str	r2, [sp, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	bfb8      	it	lt
 800633c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006340:	9305      	str	r3, [sp, #20]
 8006342:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800641c <_vfiprintf_r+0x250>
 8006346:	2203      	movs	r2, #3
 8006348:	4650      	mov	r0, sl
 800634a:	7821      	ldrb	r1, [r4, #0]
 800634c:	f7ff f886 	bl	800545c <memchr>
 8006350:	b140      	cbz	r0, 8006364 <_vfiprintf_r+0x198>
 8006352:	2340      	movs	r3, #64	; 0x40
 8006354:	eba0 000a 	sub.w	r0, r0, sl
 8006358:	fa03 f000 	lsl.w	r0, r3, r0
 800635c:	9b04      	ldr	r3, [sp, #16]
 800635e:	3401      	adds	r4, #1
 8006360:	4303      	orrs	r3, r0
 8006362:	9304      	str	r3, [sp, #16]
 8006364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006368:	2206      	movs	r2, #6
 800636a:	482d      	ldr	r0, [pc, #180]	; (8006420 <_vfiprintf_r+0x254>)
 800636c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006370:	f7ff f874 	bl	800545c <memchr>
 8006374:	2800      	cmp	r0, #0
 8006376:	d03f      	beq.n	80063f8 <_vfiprintf_r+0x22c>
 8006378:	4b2a      	ldr	r3, [pc, #168]	; (8006424 <_vfiprintf_r+0x258>)
 800637a:	bb1b      	cbnz	r3, 80063c4 <_vfiprintf_r+0x1f8>
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	3307      	adds	r3, #7
 8006380:	f023 0307 	bic.w	r3, r3, #7
 8006384:	3308      	adds	r3, #8
 8006386:	9303      	str	r3, [sp, #12]
 8006388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638a:	443b      	add	r3, r7
 800638c:	9309      	str	r3, [sp, #36]	; 0x24
 800638e:	e767      	b.n	8006260 <_vfiprintf_r+0x94>
 8006390:	460c      	mov	r4, r1
 8006392:	2001      	movs	r0, #1
 8006394:	fb0c 3202 	mla	r2, ip, r2, r3
 8006398:	e7a5      	b.n	80062e6 <_vfiprintf_r+0x11a>
 800639a:	2300      	movs	r3, #0
 800639c:	f04f 0c0a 	mov.w	ip, #10
 80063a0:	4619      	mov	r1, r3
 80063a2:	3401      	adds	r4, #1
 80063a4:	9305      	str	r3, [sp, #20]
 80063a6:	4620      	mov	r0, r4
 80063a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ac:	3a30      	subs	r2, #48	; 0x30
 80063ae:	2a09      	cmp	r2, #9
 80063b0:	d903      	bls.n	80063ba <_vfiprintf_r+0x1ee>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0c5      	beq.n	8006342 <_vfiprintf_r+0x176>
 80063b6:	9105      	str	r1, [sp, #20]
 80063b8:	e7c3      	b.n	8006342 <_vfiprintf_r+0x176>
 80063ba:	4604      	mov	r4, r0
 80063bc:	2301      	movs	r3, #1
 80063be:	fb0c 2101 	mla	r1, ip, r1, r2
 80063c2:	e7f0      	b.n	80063a6 <_vfiprintf_r+0x1da>
 80063c4:	ab03      	add	r3, sp, #12
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	462a      	mov	r2, r5
 80063ca:	4630      	mov	r0, r6
 80063cc:	4b16      	ldr	r3, [pc, #88]	; (8006428 <_vfiprintf_r+0x25c>)
 80063ce:	a904      	add	r1, sp, #16
 80063d0:	f7fd fdc8 	bl	8003f64 <_printf_float>
 80063d4:	4607      	mov	r7, r0
 80063d6:	1c78      	adds	r0, r7, #1
 80063d8:	d1d6      	bne.n	8006388 <_vfiprintf_r+0x1bc>
 80063da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063dc:	07d9      	lsls	r1, r3, #31
 80063de:	d405      	bmi.n	80063ec <_vfiprintf_r+0x220>
 80063e0:	89ab      	ldrh	r3, [r5, #12]
 80063e2:	059a      	lsls	r2, r3, #22
 80063e4:	d402      	bmi.n	80063ec <_vfiprintf_r+0x220>
 80063e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063e8:	f000 faab 	bl	8006942 <__retarget_lock_release_recursive>
 80063ec:	89ab      	ldrh	r3, [r5, #12]
 80063ee:	065b      	lsls	r3, r3, #25
 80063f0:	f53f af12 	bmi.w	8006218 <_vfiprintf_r+0x4c>
 80063f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063f6:	e711      	b.n	800621c <_vfiprintf_r+0x50>
 80063f8:	ab03      	add	r3, sp, #12
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	462a      	mov	r2, r5
 80063fe:	4630      	mov	r0, r6
 8006400:	4b09      	ldr	r3, [pc, #36]	; (8006428 <_vfiprintf_r+0x25c>)
 8006402:	a904      	add	r1, sp, #16
 8006404:	f7fe f84a 	bl	800449c <_printf_i>
 8006408:	e7e4      	b.n	80063d4 <_vfiprintf_r+0x208>
 800640a:	bf00      	nop
 800640c:	08007074 	.word	0x08007074
 8006410:	08007094 	.word	0x08007094
 8006414:	08007054 	.word	0x08007054
 8006418:	08006efc 	.word	0x08006efc
 800641c:	08006f02 	.word	0x08006f02
 8006420:	08006f06 	.word	0x08006f06
 8006424:	08003f65 	.word	0x08003f65
 8006428:	080061a9 	.word	0x080061a9

0800642c <__swbuf_r>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	460e      	mov	r6, r1
 8006430:	4614      	mov	r4, r2
 8006432:	4605      	mov	r5, r0
 8006434:	b118      	cbz	r0, 800643e <__swbuf_r+0x12>
 8006436:	6983      	ldr	r3, [r0, #24]
 8006438:	b90b      	cbnz	r3, 800643e <__swbuf_r+0x12>
 800643a:	f000 f9e3 	bl	8006804 <__sinit>
 800643e:	4b21      	ldr	r3, [pc, #132]	; (80064c4 <__swbuf_r+0x98>)
 8006440:	429c      	cmp	r4, r3
 8006442:	d12b      	bne.n	800649c <__swbuf_r+0x70>
 8006444:	686c      	ldr	r4, [r5, #4]
 8006446:	69a3      	ldr	r3, [r4, #24]
 8006448:	60a3      	str	r3, [r4, #8]
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	071a      	lsls	r2, r3, #28
 800644e:	d52f      	bpl.n	80064b0 <__swbuf_r+0x84>
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	b36b      	cbz	r3, 80064b0 <__swbuf_r+0x84>
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	6820      	ldr	r0, [r4, #0]
 8006458:	b2f6      	uxtb	r6, r6
 800645a:	1ac0      	subs	r0, r0, r3
 800645c:	6963      	ldr	r3, [r4, #20]
 800645e:	4637      	mov	r7, r6
 8006460:	4283      	cmp	r3, r0
 8006462:	dc04      	bgt.n	800646e <__swbuf_r+0x42>
 8006464:	4621      	mov	r1, r4
 8006466:	4628      	mov	r0, r5
 8006468:	f000 f938 	bl	80066dc <_fflush_r>
 800646c:	bb30      	cbnz	r0, 80064bc <__swbuf_r+0x90>
 800646e:	68a3      	ldr	r3, [r4, #8]
 8006470:	3001      	adds	r0, #1
 8006472:	3b01      	subs	r3, #1
 8006474:	60a3      	str	r3, [r4, #8]
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	6022      	str	r2, [r4, #0]
 800647c:	701e      	strb	r6, [r3, #0]
 800647e:	6963      	ldr	r3, [r4, #20]
 8006480:	4283      	cmp	r3, r0
 8006482:	d004      	beq.n	800648e <__swbuf_r+0x62>
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	07db      	lsls	r3, r3, #31
 8006488:	d506      	bpl.n	8006498 <__swbuf_r+0x6c>
 800648a:	2e0a      	cmp	r6, #10
 800648c:	d104      	bne.n	8006498 <__swbuf_r+0x6c>
 800648e:	4621      	mov	r1, r4
 8006490:	4628      	mov	r0, r5
 8006492:	f000 f923 	bl	80066dc <_fflush_r>
 8006496:	b988      	cbnz	r0, 80064bc <__swbuf_r+0x90>
 8006498:	4638      	mov	r0, r7
 800649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <__swbuf_r+0x9c>)
 800649e:	429c      	cmp	r4, r3
 80064a0:	d101      	bne.n	80064a6 <__swbuf_r+0x7a>
 80064a2:	68ac      	ldr	r4, [r5, #8]
 80064a4:	e7cf      	b.n	8006446 <__swbuf_r+0x1a>
 80064a6:	4b09      	ldr	r3, [pc, #36]	; (80064cc <__swbuf_r+0xa0>)
 80064a8:	429c      	cmp	r4, r3
 80064aa:	bf08      	it	eq
 80064ac:	68ec      	ldreq	r4, [r5, #12]
 80064ae:	e7ca      	b.n	8006446 <__swbuf_r+0x1a>
 80064b0:	4621      	mov	r1, r4
 80064b2:	4628      	mov	r0, r5
 80064b4:	f000 f81a 	bl	80064ec <__swsetup_r>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d0cb      	beq.n	8006454 <__swbuf_r+0x28>
 80064bc:	f04f 37ff 	mov.w	r7, #4294967295
 80064c0:	e7ea      	b.n	8006498 <__swbuf_r+0x6c>
 80064c2:	bf00      	nop
 80064c4:	08007074 	.word	0x08007074
 80064c8:	08007094 	.word	0x08007094
 80064cc:	08007054 	.word	0x08007054

080064d0 <__ascii_wctomb>:
 80064d0:	4603      	mov	r3, r0
 80064d2:	4608      	mov	r0, r1
 80064d4:	b141      	cbz	r1, 80064e8 <__ascii_wctomb+0x18>
 80064d6:	2aff      	cmp	r2, #255	; 0xff
 80064d8:	d904      	bls.n	80064e4 <__ascii_wctomb+0x14>
 80064da:	228a      	movs	r2, #138	; 0x8a
 80064dc:	f04f 30ff 	mov.w	r0, #4294967295
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	4770      	bx	lr
 80064e4:	2001      	movs	r0, #1
 80064e6:	700a      	strb	r2, [r1, #0]
 80064e8:	4770      	bx	lr
	...

080064ec <__swsetup_r>:
 80064ec:	4b32      	ldr	r3, [pc, #200]	; (80065b8 <__swsetup_r+0xcc>)
 80064ee:	b570      	push	{r4, r5, r6, lr}
 80064f0:	681d      	ldr	r5, [r3, #0]
 80064f2:	4606      	mov	r6, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	b125      	cbz	r5, 8006502 <__swsetup_r+0x16>
 80064f8:	69ab      	ldr	r3, [r5, #24]
 80064fa:	b913      	cbnz	r3, 8006502 <__swsetup_r+0x16>
 80064fc:	4628      	mov	r0, r5
 80064fe:	f000 f981 	bl	8006804 <__sinit>
 8006502:	4b2e      	ldr	r3, [pc, #184]	; (80065bc <__swsetup_r+0xd0>)
 8006504:	429c      	cmp	r4, r3
 8006506:	d10f      	bne.n	8006528 <__swsetup_r+0x3c>
 8006508:	686c      	ldr	r4, [r5, #4]
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006510:	0719      	lsls	r1, r3, #28
 8006512:	d42c      	bmi.n	800656e <__swsetup_r+0x82>
 8006514:	06dd      	lsls	r5, r3, #27
 8006516:	d411      	bmi.n	800653c <__swsetup_r+0x50>
 8006518:	2309      	movs	r3, #9
 800651a:	6033      	str	r3, [r6, #0]
 800651c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	81a3      	strh	r3, [r4, #12]
 8006526:	e03e      	b.n	80065a6 <__swsetup_r+0xba>
 8006528:	4b25      	ldr	r3, [pc, #148]	; (80065c0 <__swsetup_r+0xd4>)
 800652a:	429c      	cmp	r4, r3
 800652c:	d101      	bne.n	8006532 <__swsetup_r+0x46>
 800652e:	68ac      	ldr	r4, [r5, #8]
 8006530:	e7eb      	b.n	800650a <__swsetup_r+0x1e>
 8006532:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <__swsetup_r+0xd8>)
 8006534:	429c      	cmp	r4, r3
 8006536:	bf08      	it	eq
 8006538:	68ec      	ldreq	r4, [r5, #12]
 800653a:	e7e6      	b.n	800650a <__swsetup_r+0x1e>
 800653c:	0758      	lsls	r0, r3, #29
 800653e:	d512      	bpl.n	8006566 <__swsetup_r+0x7a>
 8006540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006542:	b141      	cbz	r1, 8006556 <__swsetup_r+0x6a>
 8006544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006548:	4299      	cmp	r1, r3
 800654a:	d002      	beq.n	8006552 <__swsetup_r+0x66>
 800654c:	4630      	mov	r0, r6
 800654e:	f7ff fb37 	bl	8005bc0 <_free_r>
 8006552:	2300      	movs	r3, #0
 8006554:	6363      	str	r3, [r4, #52]	; 0x34
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	2300      	movs	r3, #0
 8006560:	6063      	str	r3, [r4, #4]
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	f043 0308 	orr.w	r3, r3, #8
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	6923      	ldr	r3, [r4, #16]
 8006570:	b94b      	cbnz	r3, 8006586 <__swsetup_r+0x9a>
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657c:	d003      	beq.n	8006586 <__swsetup_r+0x9a>
 800657e:	4621      	mov	r1, r4
 8006580:	4630      	mov	r0, r6
 8006582:	f000 fa05 	bl	8006990 <__smakebuf_r>
 8006586:	89a0      	ldrh	r0, [r4, #12]
 8006588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800658c:	f010 0301 	ands.w	r3, r0, #1
 8006590:	d00a      	beq.n	80065a8 <__swsetup_r+0xbc>
 8006592:	2300      	movs	r3, #0
 8006594:	60a3      	str	r3, [r4, #8]
 8006596:	6963      	ldr	r3, [r4, #20]
 8006598:	425b      	negs	r3, r3
 800659a:	61a3      	str	r3, [r4, #24]
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	b943      	cbnz	r3, 80065b2 <__swsetup_r+0xc6>
 80065a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065a4:	d1ba      	bne.n	800651c <__swsetup_r+0x30>
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	0781      	lsls	r1, r0, #30
 80065aa:	bf58      	it	pl
 80065ac:	6963      	ldrpl	r3, [r4, #20]
 80065ae:	60a3      	str	r3, [r4, #8]
 80065b0:	e7f4      	b.n	800659c <__swsetup_r+0xb0>
 80065b2:	2000      	movs	r0, #0
 80065b4:	e7f7      	b.n	80065a6 <__swsetup_r+0xba>
 80065b6:	bf00      	nop
 80065b8:	2000001c 	.word	0x2000001c
 80065bc:	08007074 	.word	0x08007074
 80065c0:	08007094 	.word	0x08007094
 80065c4:	08007054 	.word	0x08007054

080065c8 <abort>:
 80065c8:	2006      	movs	r0, #6
 80065ca:	b508      	push	{r3, lr}
 80065cc:	f000 fa50 	bl	8006a70 <raise>
 80065d0:	2001      	movs	r0, #1
 80065d2:	f7fb f87a 	bl	80016ca <_exit>
	...

080065d8 <__sflush_r>:
 80065d8:	898a      	ldrh	r2, [r1, #12]
 80065da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065dc:	4605      	mov	r5, r0
 80065de:	0710      	lsls	r0, r2, #28
 80065e0:	460c      	mov	r4, r1
 80065e2:	d457      	bmi.n	8006694 <__sflush_r+0xbc>
 80065e4:	684b      	ldr	r3, [r1, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	dc04      	bgt.n	80065f4 <__sflush_r+0x1c>
 80065ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dc01      	bgt.n	80065f4 <__sflush_r+0x1c>
 80065f0:	2000      	movs	r0, #0
 80065f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065f6:	2e00      	cmp	r6, #0
 80065f8:	d0fa      	beq.n	80065f0 <__sflush_r+0x18>
 80065fa:	2300      	movs	r3, #0
 80065fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006600:	682f      	ldr	r7, [r5, #0]
 8006602:	602b      	str	r3, [r5, #0]
 8006604:	d032      	beq.n	800666c <__sflush_r+0x94>
 8006606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	075a      	lsls	r2, r3, #29
 800660c:	d505      	bpl.n	800661a <__sflush_r+0x42>
 800660e:	6863      	ldr	r3, [r4, #4]
 8006610:	1ac0      	subs	r0, r0, r3
 8006612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006614:	b10b      	cbz	r3, 800661a <__sflush_r+0x42>
 8006616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006618:	1ac0      	subs	r0, r0, r3
 800661a:	2300      	movs	r3, #0
 800661c:	4602      	mov	r2, r0
 800661e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006620:	4628      	mov	r0, r5
 8006622:	6a21      	ldr	r1, [r4, #32]
 8006624:	47b0      	blx	r6
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	d106      	bne.n	800663a <__sflush_r+0x62>
 800662c:	6829      	ldr	r1, [r5, #0]
 800662e:	291d      	cmp	r1, #29
 8006630:	d82c      	bhi.n	800668c <__sflush_r+0xb4>
 8006632:	4a29      	ldr	r2, [pc, #164]	; (80066d8 <__sflush_r+0x100>)
 8006634:	40ca      	lsrs	r2, r1
 8006636:	07d6      	lsls	r6, r2, #31
 8006638:	d528      	bpl.n	800668c <__sflush_r+0xb4>
 800663a:	2200      	movs	r2, #0
 800663c:	6062      	str	r2, [r4, #4]
 800663e:	6922      	ldr	r2, [r4, #16]
 8006640:	04d9      	lsls	r1, r3, #19
 8006642:	6022      	str	r2, [r4, #0]
 8006644:	d504      	bpl.n	8006650 <__sflush_r+0x78>
 8006646:	1c42      	adds	r2, r0, #1
 8006648:	d101      	bne.n	800664e <__sflush_r+0x76>
 800664a:	682b      	ldr	r3, [r5, #0]
 800664c:	b903      	cbnz	r3, 8006650 <__sflush_r+0x78>
 800664e:	6560      	str	r0, [r4, #84]	; 0x54
 8006650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006652:	602f      	str	r7, [r5, #0]
 8006654:	2900      	cmp	r1, #0
 8006656:	d0cb      	beq.n	80065f0 <__sflush_r+0x18>
 8006658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800665c:	4299      	cmp	r1, r3
 800665e:	d002      	beq.n	8006666 <__sflush_r+0x8e>
 8006660:	4628      	mov	r0, r5
 8006662:	f7ff faad 	bl	8005bc0 <_free_r>
 8006666:	2000      	movs	r0, #0
 8006668:	6360      	str	r0, [r4, #52]	; 0x34
 800666a:	e7c2      	b.n	80065f2 <__sflush_r+0x1a>
 800666c:	6a21      	ldr	r1, [r4, #32]
 800666e:	2301      	movs	r3, #1
 8006670:	4628      	mov	r0, r5
 8006672:	47b0      	blx	r6
 8006674:	1c41      	adds	r1, r0, #1
 8006676:	d1c7      	bne.n	8006608 <__sflush_r+0x30>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0c4      	beq.n	8006608 <__sflush_r+0x30>
 800667e:	2b1d      	cmp	r3, #29
 8006680:	d001      	beq.n	8006686 <__sflush_r+0xae>
 8006682:	2b16      	cmp	r3, #22
 8006684:	d101      	bne.n	800668a <__sflush_r+0xb2>
 8006686:	602f      	str	r7, [r5, #0]
 8006688:	e7b2      	b.n	80065f0 <__sflush_r+0x18>
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	e7ae      	b.n	80065f2 <__sflush_r+0x1a>
 8006694:	690f      	ldr	r7, [r1, #16]
 8006696:	2f00      	cmp	r7, #0
 8006698:	d0aa      	beq.n	80065f0 <__sflush_r+0x18>
 800669a:	0793      	lsls	r3, r2, #30
 800669c:	bf18      	it	ne
 800669e:	2300      	movne	r3, #0
 80066a0:	680e      	ldr	r6, [r1, #0]
 80066a2:	bf08      	it	eq
 80066a4:	694b      	ldreq	r3, [r1, #20]
 80066a6:	1bf6      	subs	r6, r6, r7
 80066a8:	600f      	str	r7, [r1, #0]
 80066aa:	608b      	str	r3, [r1, #8]
 80066ac:	2e00      	cmp	r6, #0
 80066ae:	dd9f      	ble.n	80065f0 <__sflush_r+0x18>
 80066b0:	4633      	mov	r3, r6
 80066b2:	463a      	mov	r2, r7
 80066b4:	4628      	mov	r0, r5
 80066b6:	6a21      	ldr	r1, [r4, #32]
 80066b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80066bc:	47e0      	blx	ip
 80066be:	2800      	cmp	r0, #0
 80066c0:	dc06      	bgt.n	80066d0 <__sflush_r+0xf8>
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295
 80066c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	e790      	b.n	80065f2 <__sflush_r+0x1a>
 80066d0:	4407      	add	r7, r0
 80066d2:	1a36      	subs	r6, r6, r0
 80066d4:	e7ea      	b.n	80066ac <__sflush_r+0xd4>
 80066d6:	bf00      	nop
 80066d8:	20400001 	.word	0x20400001

080066dc <_fflush_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	690b      	ldr	r3, [r1, #16]
 80066e0:	4605      	mov	r5, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	b913      	cbnz	r3, 80066ec <_fflush_r+0x10>
 80066e6:	2500      	movs	r5, #0
 80066e8:	4628      	mov	r0, r5
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	b118      	cbz	r0, 80066f6 <_fflush_r+0x1a>
 80066ee:	6983      	ldr	r3, [r0, #24]
 80066f0:	b90b      	cbnz	r3, 80066f6 <_fflush_r+0x1a>
 80066f2:	f000 f887 	bl	8006804 <__sinit>
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <_fflush_r+0x6c>)
 80066f8:	429c      	cmp	r4, r3
 80066fa:	d11b      	bne.n	8006734 <_fflush_r+0x58>
 80066fc:	686c      	ldr	r4, [r5, #4]
 80066fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0ef      	beq.n	80066e6 <_fflush_r+0xa>
 8006706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006708:	07d0      	lsls	r0, r2, #31
 800670a:	d404      	bmi.n	8006716 <_fflush_r+0x3a>
 800670c:	0599      	lsls	r1, r3, #22
 800670e:	d402      	bmi.n	8006716 <_fflush_r+0x3a>
 8006710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006712:	f000 f915 	bl	8006940 <__retarget_lock_acquire_recursive>
 8006716:	4628      	mov	r0, r5
 8006718:	4621      	mov	r1, r4
 800671a:	f7ff ff5d 	bl	80065d8 <__sflush_r>
 800671e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006720:	4605      	mov	r5, r0
 8006722:	07da      	lsls	r2, r3, #31
 8006724:	d4e0      	bmi.n	80066e8 <_fflush_r+0xc>
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	059b      	lsls	r3, r3, #22
 800672a:	d4dd      	bmi.n	80066e8 <_fflush_r+0xc>
 800672c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800672e:	f000 f908 	bl	8006942 <__retarget_lock_release_recursive>
 8006732:	e7d9      	b.n	80066e8 <_fflush_r+0xc>
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <_fflush_r+0x70>)
 8006736:	429c      	cmp	r4, r3
 8006738:	d101      	bne.n	800673e <_fflush_r+0x62>
 800673a:	68ac      	ldr	r4, [r5, #8]
 800673c:	e7df      	b.n	80066fe <_fflush_r+0x22>
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <_fflush_r+0x74>)
 8006740:	429c      	cmp	r4, r3
 8006742:	bf08      	it	eq
 8006744:	68ec      	ldreq	r4, [r5, #12]
 8006746:	e7da      	b.n	80066fe <_fflush_r+0x22>
 8006748:	08007074 	.word	0x08007074
 800674c:	08007094 	.word	0x08007094
 8006750:	08007054 	.word	0x08007054

08006754 <std>:
 8006754:	2300      	movs	r3, #0
 8006756:	b510      	push	{r4, lr}
 8006758:	4604      	mov	r4, r0
 800675a:	e9c0 3300 	strd	r3, r3, [r0]
 800675e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006762:	6083      	str	r3, [r0, #8]
 8006764:	8181      	strh	r1, [r0, #12]
 8006766:	6643      	str	r3, [r0, #100]	; 0x64
 8006768:	81c2      	strh	r2, [r0, #14]
 800676a:	6183      	str	r3, [r0, #24]
 800676c:	4619      	mov	r1, r3
 800676e:	2208      	movs	r2, #8
 8006770:	305c      	adds	r0, #92	; 0x5c
 8006772:	f7fd fb51 	bl	8003e18 <memset>
 8006776:	4b05      	ldr	r3, [pc, #20]	; (800678c <std+0x38>)
 8006778:	6224      	str	r4, [r4, #32]
 800677a:	6263      	str	r3, [r4, #36]	; 0x24
 800677c:	4b04      	ldr	r3, [pc, #16]	; (8006790 <std+0x3c>)
 800677e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006780:	4b04      	ldr	r3, [pc, #16]	; (8006794 <std+0x40>)
 8006782:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006784:	4b04      	ldr	r3, [pc, #16]	; (8006798 <std+0x44>)
 8006786:	6323      	str	r3, [r4, #48]	; 0x30
 8006788:	bd10      	pop	{r4, pc}
 800678a:	bf00      	nop
 800678c:	08006aa9 	.word	0x08006aa9
 8006790:	08006acb 	.word	0x08006acb
 8006794:	08006b03 	.word	0x08006b03
 8006798:	08006b27 	.word	0x08006b27

0800679c <_cleanup_r>:
 800679c:	4901      	ldr	r1, [pc, #4]	; (80067a4 <_cleanup_r+0x8>)
 800679e:	f000 b8af 	b.w	8006900 <_fwalk_reent>
 80067a2:	bf00      	nop
 80067a4:	080066dd 	.word	0x080066dd

080067a8 <__sfmoreglue>:
 80067a8:	2268      	movs	r2, #104	; 0x68
 80067aa:	b570      	push	{r4, r5, r6, lr}
 80067ac:	1e4d      	subs	r5, r1, #1
 80067ae:	4355      	muls	r5, r2
 80067b0:	460e      	mov	r6, r1
 80067b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067b6:	f7ff fa6b 	bl	8005c90 <_malloc_r>
 80067ba:	4604      	mov	r4, r0
 80067bc:	b140      	cbz	r0, 80067d0 <__sfmoreglue+0x28>
 80067be:	2100      	movs	r1, #0
 80067c0:	e9c0 1600 	strd	r1, r6, [r0]
 80067c4:	300c      	adds	r0, #12
 80067c6:	60a0      	str	r0, [r4, #8]
 80067c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067cc:	f7fd fb24 	bl	8003e18 <memset>
 80067d0:	4620      	mov	r0, r4
 80067d2:	bd70      	pop	{r4, r5, r6, pc}

080067d4 <__sfp_lock_acquire>:
 80067d4:	4801      	ldr	r0, [pc, #4]	; (80067dc <__sfp_lock_acquire+0x8>)
 80067d6:	f000 b8b3 	b.w	8006940 <__retarget_lock_acquire_recursive>
 80067da:	bf00      	nop
 80067dc:	2000036d 	.word	0x2000036d

080067e0 <__sfp_lock_release>:
 80067e0:	4801      	ldr	r0, [pc, #4]	; (80067e8 <__sfp_lock_release+0x8>)
 80067e2:	f000 b8ae 	b.w	8006942 <__retarget_lock_release_recursive>
 80067e6:	bf00      	nop
 80067e8:	2000036d 	.word	0x2000036d

080067ec <__sinit_lock_acquire>:
 80067ec:	4801      	ldr	r0, [pc, #4]	; (80067f4 <__sinit_lock_acquire+0x8>)
 80067ee:	f000 b8a7 	b.w	8006940 <__retarget_lock_acquire_recursive>
 80067f2:	bf00      	nop
 80067f4:	2000036e 	.word	0x2000036e

080067f8 <__sinit_lock_release>:
 80067f8:	4801      	ldr	r0, [pc, #4]	; (8006800 <__sinit_lock_release+0x8>)
 80067fa:	f000 b8a2 	b.w	8006942 <__retarget_lock_release_recursive>
 80067fe:	bf00      	nop
 8006800:	2000036e 	.word	0x2000036e

08006804 <__sinit>:
 8006804:	b510      	push	{r4, lr}
 8006806:	4604      	mov	r4, r0
 8006808:	f7ff fff0 	bl	80067ec <__sinit_lock_acquire>
 800680c:	69a3      	ldr	r3, [r4, #24]
 800680e:	b11b      	cbz	r3, 8006818 <__sinit+0x14>
 8006810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006814:	f7ff bff0 	b.w	80067f8 <__sinit_lock_release>
 8006818:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800681c:	6523      	str	r3, [r4, #80]	; 0x50
 800681e:	4b13      	ldr	r3, [pc, #76]	; (800686c <__sinit+0x68>)
 8006820:	4a13      	ldr	r2, [pc, #76]	; (8006870 <__sinit+0x6c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	62a2      	str	r2, [r4, #40]	; 0x28
 8006826:	42a3      	cmp	r3, r4
 8006828:	bf08      	it	eq
 800682a:	2301      	moveq	r3, #1
 800682c:	4620      	mov	r0, r4
 800682e:	bf08      	it	eq
 8006830:	61a3      	streq	r3, [r4, #24]
 8006832:	f000 f81f 	bl	8006874 <__sfp>
 8006836:	6060      	str	r0, [r4, #4]
 8006838:	4620      	mov	r0, r4
 800683a:	f000 f81b 	bl	8006874 <__sfp>
 800683e:	60a0      	str	r0, [r4, #8]
 8006840:	4620      	mov	r0, r4
 8006842:	f000 f817 	bl	8006874 <__sfp>
 8006846:	2200      	movs	r2, #0
 8006848:	2104      	movs	r1, #4
 800684a:	60e0      	str	r0, [r4, #12]
 800684c:	6860      	ldr	r0, [r4, #4]
 800684e:	f7ff ff81 	bl	8006754 <std>
 8006852:	2201      	movs	r2, #1
 8006854:	2109      	movs	r1, #9
 8006856:	68a0      	ldr	r0, [r4, #8]
 8006858:	f7ff ff7c 	bl	8006754 <std>
 800685c:	2202      	movs	r2, #2
 800685e:	2112      	movs	r1, #18
 8006860:	68e0      	ldr	r0, [r4, #12]
 8006862:	f7ff ff77 	bl	8006754 <std>
 8006866:	2301      	movs	r3, #1
 8006868:	61a3      	str	r3, [r4, #24]
 800686a:	e7d1      	b.n	8006810 <__sinit+0xc>
 800686c:	08006cdc 	.word	0x08006cdc
 8006870:	0800679d 	.word	0x0800679d

08006874 <__sfp>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	4607      	mov	r7, r0
 8006878:	f7ff ffac 	bl	80067d4 <__sfp_lock_acquire>
 800687c:	4b1e      	ldr	r3, [pc, #120]	; (80068f8 <__sfp+0x84>)
 800687e:	681e      	ldr	r6, [r3, #0]
 8006880:	69b3      	ldr	r3, [r6, #24]
 8006882:	b913      	cbnz	r3, 800688a <__sfp+0x16>
 8006884:	4630      	mov	r0, r6
 8006886:	f7ff ffbd 	bl	8006804 <__sinit>
 800688a:	3648      	adds	r6, #72	; 0x48
 800688c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006890:	3b01      	subs	r3, #1
 8006892:	d503      	bpl.n	800689c <__sfp+0x28>
 8006894:	6833      	ldr	r3, [r6, #0]
 8006896:	b30b      	cbz	r3, 80068dc <__sfp+0x68>
 8006898:	6836      	ldr	r6, [r6, #0]
 800689a:	e7f7      	b.n	800688c <__sfp+0x18>
 800689c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068a0:	b9d5      	cbnz	r5, 80068d8 <__sfp+0x64>
 80068a2:	4b16      	ldr	r3, [pc, #88]	; (80068fc <__sfp+0x88>)
 80068a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068a8:	60e3      	str	r3, [r4, #12]
 80068aa:	6665      	str	r5, [r4, #100]	; 0x64
 80068ac:	f000 f847 	bl	800693e <__retarget_lock_init_recursive>
 80068b0:	f7ff ff96 	bl	80067e0 <__sfp_lock_release>
 80068b4:	2208      	movs	r2, #8
 80068b6:	4629      	mov	r1, r5
 80068b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068c0:	6025      	str	r5, [r4, #0]
 80068c2:	61a5      	str	r5, [r4, #24]
 80068c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068c8:	f7fd faa6 	bl	8003e18 <memset>
 80068cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068d4:	4620      	mov	r0, r4
 80068d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068d8:	3468      	adds	r4, #104	; 0x68
 80068da:	e7d9      	b.n	8006890 <__sfp+0x1c>
 80068dc:	2104      	movs	r1, #4
 80068de:	4638      	mov	r0, r7
 80068e0:	f7ff ff62 	bl	80067a8 <__sfmoreglue>
 80068e4:	4604      	mov	r4, r0
 80068e6:	6030      	str	r0, [r6, #0]
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d1d5      	bne.n	8006898 <__sfp+0x24>
 80068ec:	f7ff ff78 	bl	80067e0 <__sfp_lock_release>
 80068f0:	230c      	movs	r3, #12
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	e7ee      	b.n	80068d4 <__sfp+0x60>
 80068f6:	bf00      	nop
 80068f8:	08006cdc 	.word	0x08006cdc
 80068fc:	ffff0001 	.word	0xffff0001

08006900 <_fwalk_reent>:
 8006900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006904:	4606      	mov	r6, r0
 8006906:	4688      	mov	r8, r1
 8006908:	2700      	movs	r7, #0
 800690a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800690e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006912:	f1b9 0901 	subs.w	r9, r9, #1
 8006916:	d505      	bpl.n	8006924 <_fwalk_reent+0x24>
 8006918:	6824      	ldr	r4, [r4, #0]
 800691a:	2c00      	cmp	r4, #0
 800691c:	d1f7      	bne.n	800690e <_fwalk_reent+0xe>
 800691e:	4638      	mov	r0, r7
 8006920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006924:	89ab      	ldrh	r3, [r5, #12]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d907      	bls.n	800693a <_fwalk_reent+0x3a>
 800692a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800692e:	3301      	adds	r3, #1
 8006930:	d003      	beq.n	800693a <_fwalk_reent+0x3a>
 8006932:	4629      	mov	r1, r5
 8006934:	4630      	mov	r0, r6
 8006936:	47c0      	blx	r8
 8006938:	4307      	orrs	r7, r0
 800693a:	3568      	adds	r5, #104	; 0x68
 800693c:	e7e9      	b.n	8006912 <_fwalk_reent+0x12>

0800693e <__retarget_lock_init_recursive>:
 800693e:	4770      	bx	lr

08006940 <__retarget_lock_acquire_recursive>:
 8006940:	4770      	bx	lr

08006942 <__retarget_lock_release_recursive>:
 8006942:	4770      	bx	lr

08006944 <__swhatbuf_r>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	460e      	mov	r6, r1
 8006948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694c:	4614      	mov	r4, r2
 800694e:	2900      	cmp	r1, #0
 8006950:	461d      	mov	r5, r3
 8006952:	b096      	sub	sp, #88	; 0x58
 8006954:	da08      	bge.n	8006968 <__swhatbuf_r+0x24>
 8006956:	2200      	movs	r2, #0
 8006958:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800695c:	602a      	str	r2, [r5, #0]
 800695e:	061a      	lsls	r2, r3, #24
 8006960:	d410      	bmi.n	8006984 <__swhatbuf_r+0x40>
 8006962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006966:	e00e      	b.n	8006986 <__swhatbuf_r+0x42>
 8006968:	466a      	mov	r2, sp
 800696a:	f000 f903 	bl	8006b74 <_fstat_r>
 800696e:	2800      	cmp	r0, #0
 8006970:	dbf1      	blt.n	8006956 <__swhatbuf_r+0x12>
 8006972:	9a01      	ldr	r2, [sp, #4]
 8006974:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006978:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800697c:	425a      	negs	r2, r3
 800697e:	415a      	adcs	r2, r3
 8006980:	602a      	str	r2, [r5, #0]
 8006982:	e7ee      	b.n	8006962 <__swhatbuf_r+0x1e>
 8006984:	2340      	movs	r3, #64	; 0x40
 8006986:	2000      	movs	r0, #0
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	b016      	add	sp, #88	; 0x58
 800698c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006990 <__smakebuf_r>:
 8006990:	898b      	ldrh	r3, [r1, #12]
 8006992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006994:	079d      	lsls	r5, r3, #30
 8006996:	4606      	mov	r6, r0
 8006998:	460c      	mov	r4, r1
 800699a:	d507      	bpl.n	80069ac <__smakebuf_r+0x1c>
 800699c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	2301      	movs	r3, #1
 80069a6:	6163      	str	r3, [r4, #20]
 80069a8:	b002      	add	sp, #8
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	466a      	mov	r2, sp
 80069ae:	ab01      	add	r3, sp, #4
 80069b0:	f7ff ffc8 	bl	8006944 <__swhatbuf_r>
 80069b4:	9900      	ldr	r1, [sp, #0]
 80069b6:	4605      	mov	r5, r0
 80069b8:	4630      	mov	r0, r6
 80069ba:	f7ff f969 	bl	8005c90 <_malloc_r>
 80069be:	b948      	cbnz	r0, 80069d4 <__smakebuf_r+0x44>
 80069c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c4:	059a      	lsls	r2, r3, #22
 80069c6:	d4ef      	bmi.n	80069a8 <__smakebuf_r+0x18>
 80069c8:	f023 0303 	bic.w	r3, r3, #3
 80069cc:	f043 0302 	orr.w	r3, r3, #2
 80069d0:	81a3      	strh	r3, [r4, #12]
 80069d2:	e7e3      	b.n	800699c <__smakebuf_r+0xc>
 80069d4:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <__smakebuf_r+0x7c>)
 80069d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	6020      	str	r0, [r4, #0]
 80069dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e0:	81a3      	strh	r3, [r4, #12]
 80069e2:	9b00      	ldr	r3, [sp, #0]
 80069e4:	6120      	str	r0, [r4, #16]
 80069e6:	6163      	str	r3, [r4, #20]
 80069e8:	9b01      	ldr	r3, [sp, #4]
 80069ea:	b15b      	cbz	r3, 8006a04 <__smakebuf_r+0x74>
 80069ec:	4630      	mov	r0, r6
 80069ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069f2:	f000 f8d1 	bl	8006b98 <_isatty_r>
 80069f6:	b128      	cbz	r0, 8006a04 <__smakebuf_r+0x74>
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	81a3      	strh	r3, [r4, #12]
 8006a04:	89a0      	ldrh	r0, [r4, #12]
 8006a06:	4305      	orrs	r5, r0
 8006a08:	81a5      	strh	r5, [r4, #12]
 8006a0a:	e7cd      	b.n	80069a8 <__smakebuf_r+0x18>
 8006a0c:	0800679d 	.word	0x0800679d

08006a10 <_malloc_usable_size_r>:
 8006a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a14:	1f18      	subs	r0, r3, #4
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bfbc      	itt	lt
 8006a1a:	580b      	ldrlt	r3, [r1, r0]
 8006a1c:	18c0      	addlt	r0, r0, r3
 8006a1e:	4770      	bx	lr

08006a20 <_raise_r>:
 8006a20:	291f      	cmp	r1, #31
 8006a22:	b538      	push	{r3, r4, r5, lr}
 8006a24:	4604      	mov	r4, r0
 8006a26:	460d      	mov	r5, r1
 8006a28:	d904      	bls.n	8006a34 <_raise_r+0x14>
 8006a2a:	2316      	movs	r3, #22
 8006a2c:	6003      	str	r3, [r0, #0]
 8006a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a36:	b112      	cbz	r2, 8006a3e <_raise_r+0x1e>
 8006a38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a3c:	b94b      	cbnz	r3, 8006a52 <_raise_r+0x32>
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 f830 	bl	8006aa4 <_getpid_r>
 8006a44:	462a      	mov	r2, r5
 8006a46:	4601      	mov	r1, r0
 8006a48:	4620      	mov	r0, r4
 8006a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a4e:	f000 b817 	b.w	8006a80 <_kill_r>
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d00a      	beq.n	8006a6c <_raise_r+0x4c>
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	d103      	bne.n	8006a62 <_raise_r+0x42>
 8006a5a:	2316      	movs	r3, #22
 8006a5c:	6003      	str	r3, [r0, #0]
 8006a5e:	2001      	movs	r0, #1
 8006a60:	e7e7      	b.n	8006a32 <_raise_r+0x12>
 8006a62:	2400      	movs	r4, #0
 8006a64:	4628      	mov	r0, r5
 8006a66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a6a:	4798      	blx	r3
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	e7e0      	b.n	8006a32 <_raise_r+0x12>

08006a70 <raise>:
 8006a70:	4b02      	ldr	r3, [pc, #8]	; (8006a7c <raise+0xc>)
 8006a72:	4601      	mov	r1, r0
 8006a74:	6818      	ldr	r0, [r3, #0]
 8006a76:	f7ff bfd3 	b.w	8006a20 <_raise_r>
 8006a7a:	bf00      	nop
 8006a7c:	2000001c 	.word	0x2000001c

08006a80 <_kill_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	2300      	movs	r3, #0
 8006a84:	4d06      	ldr	r5, [pc, #24]	; (8006aa0 <_kill_r+0x20>)
 8006a86:	4604      	mov	r4, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	f7fa fe0c 	bl	80016aa <_kill>
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	d102      	bne.n	8006a9c <_kill_r+0x1c>
 8006a96:	682b      	ldr	r3, [r5, #0]
 8006a98:	b103      	cbz	r3, 8006a9c <_kill_r+0x1c>
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	bd38      	pop	{r3, r4, r5, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000368 	.word	0x20000368

08006aa4 <_getpid_r>:
 8006aa4:	f7fa bdfa 	b.w	800169c <_getpid>

08006aa8 <__sread>:
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	460c      	mov	r4, r1
 8006aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab0:	f000 f894 	bl	8006bdc <_read_r>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	bfab      	itete	ge
 8006ab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aba:	89a3      	ldrhlt	r3, [r4, #12]
 8006abc:	181b      	addge	r3, r3, r0
 8006abe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ac2:	bfac      	ite	ge
 8006ac4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ac6:	81a3      	strhlt	r3, [r4, #12]
 8006ac8:	bd10      	pop	{r4, pc}

08006aca <__swrite>:
 8006aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ace:	461f      	mov	r7, r3
 8006ad0:	898b      	ldrh	r3, [r1, #12]
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	05db      	lsls	r3, r3, #23
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	4616      	mov	r6, r2
 8006ada:	d505      	bpl.n	8006ae8 <__swrite+0x1e>
 8006adc:	2302      	movs	r3, #2
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae4:	f000 f868 	bl	8006bb8 <_lseek_r>
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	4632      	mov	r2, r6
 8006aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006af0:	81a3      	strh	r3, [r4, #12]
 8006af2:	4628      	mov	r0, r5
 8006af4:	463b      	mov	r3, r7
 8006af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006afe:	f000 b817 	b.w	8006b30 <_write_r>

08006b02 <__sseek>:
 8006b02:	b510      	push	{r4, lr}
 8006b04:	460c      	mov	r4, r1
 8006b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b0a:	f000 f855 	bl	8006bb8 <_lseek_r>
 8006b0e:	1c43      	adds	r3, r0, #1
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	bf15      	itete	ne
 8006b14:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b1e:	81a3      	strheq	r3, [r4, #12]
 8006b20:	bf18      	it	ne
 8006b22:	81a3      	strhne	r3, [r4, #12]
 8006b24:	bd10      	pop	{r4, pc}

08006b26 <__sclose>:
 8006b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b2a:	f000 b813 	b.w	8006b54 <_close_r>
	...

08006b30 <_write_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4604      	mov	r4, r0
 8006b34:	4608      	mov	r0, r1
 8006b36:	4611      	mov	r1, r2
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4d05      	ldr	r5, [pc, #20]	; (8006b50 <_write_r+0x20>)
 8006b3c:	602a      	str	r2, [r5, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f7fa fdea 	bl	8001718 <_write>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d102      	bne.n	8006b4e <_write_r+0x1e>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	b103      	cbz	r3, 8006b4e <_write_r+0x1e>
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	20000368 	.word	0x20000368

08006b54 <_close_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	2300      	movs	r3, #0
 8006b58:	4d05      	ldr	r5, [pc, #20]	; (8006b70 <_close_r+0x1c>)
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	602b      	str	r3, [r5, #0]
 8006b60:	f7fa fdf6 	bl	8001750 <_close>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d102      	bne.n	8006b6e <_close_r+0x1a>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	b103      	cbz	r3, 8006b6e <_close_r+0x1a>
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	20000368 	.word	0x20000368

08006b74 <_fstat_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	2300      	movs	r3, #0
 8006b78:	4d06      	ldr	r5, [pc, #24]	; (8006b94 <_fstat_r+0x20>)
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	4611      	mov	r1, r2
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	f7fa fdf0 	bl	8001766 <_fstat>
 8006b86:	1c43      	adds	r3, r0, #1
 8006b88:	d102      	bne.n	8006b90 <_fstat_r+0x1c>
 8006b8a:	682b      	ldr	r3, [r5, #0]
 8006b8c:	b103      	cbz	r3, 8006b90 <_fstat_r+0x1c>
 8006b8e:	6023      	str	r3, [r4, #0]
 8006b90:	bd38      	pop	{r3, r4, r5, pc}
 8006b92:	bf00      	nop
 8006b94:	20000368 	.word	0x20000368

08006b98 <_isatty_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	4d05      	ldr	r5, [pc, #20]	; (8006bb4 <_isatty_r+0x1c>)
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	602b      	str	r3, [r5, #0]
 8006ba4:	f7fa fdee 	bl	8001784 <_isatty>
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	d102      	bne.n	8006bb2 <_isatty_r+0x1a>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	b103      	cbz	r3, 8006bb2 <_isatty_r+0x1a>
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	20000368 	.word	0x20000368

08006bb8 <_lseek_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	4d05      	ldr	r5, [pc, #20]	; (8006bd8 <_lseek_r+0x20>)
 8006bc4:	602a      	str	r2, [r5, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f7fa fde6 	bl	8001798 <_lseek>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d102      	bne.n	8006bd6 <_lseek_r+0x1e>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	b103      	cbz	r3, 8006bd6 <_lseek_r+0x1e>
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	20000368 	.word	0x20000368

08006bdc <_read_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4604      	mov	r4, r0
 8006be0:	4608      	mov	r0, r1
 8006be2:	4611      	mov	r1, r2
 8006be4:	2200      	movs	r2, #0
 8006be6:	4d05      	ldr	r5, [pc, #20]	; (8006bfc <_read_r+0x20>)
 8006be8:	602a      	str	r2, [r5, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f7fa fd77 	bl	80016de <_read>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_read_r+0x1e>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_read_r+0x1e>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	20000368 	.word	0x20000368

08006c00 <_init>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	bf00      	nop
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr

08006c0c <_fini>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	bf00      	nop
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr
