
COMPOSTARIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002dd0  08002dd0  00012dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e60  08002e60  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002e60  08002e60  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e60  08002e60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e64  08002e64  00012e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000070  08002ed8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002ed8  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088fa  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f1  00000000  00000000  00028993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002a188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002ab40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c5f  00000000  00000000  0002b420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a52e  00000000  00000000  0004207f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e97  00000000  00000000  0004c5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca4  00000000  00000000  000d2494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08002db8 	.word	0x08002db8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08002db8 	.word	0x08002db8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <delay+0x2c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800093e:	bf00      	nop
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <delay+0x2c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	429a      	cmp	r2, r3
 800094a:	d3f9      	bcc.n	8000940 <delay+0x14>
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	2000008c 	.word	0x2000008c

0800095c <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	461a      	mov	r2, r3
 800096e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000972:	4820      	ldr	r0, [pc, #128]	; (80009f4 <send_to_lcd+0x98>)
 8000974:	f000 febf 	bl	80016f6 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	08db      	lsrs	r3, r3, #3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	2108      	movs	r1, #8
 8000988:	481a      	ldr	r0, [pc, #104]	; (80009f4 <send_to_lcd+0x98>)
 800098a:	f000 feb4 	bl	80016f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	2110      	movs	r1, #16
 800099e:	4815      	ldr	r0, [pc, #84]	; (80009f4 <send_to_lcd+0x98>)
 80009a0:	f000 fea9 	bl	80016f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	085b      	lsrs	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	2120      	movs	r1, #32
 80009b4:	480f      	ldr	r0, [pc, #60]	; (80009f4 <send_to_lcd+0x98>)
 80009b6:	f000 fe9e 	bl	80016f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	461a      	mov	r2, r3
 80009c4:	2140      	movs	r1, #64	; 0x40
 80009c6:	480b      	ldr	r0, [pc, #44]	; (80009f4 <send_to_lcd+0x98>)
 80009c8:	f000 fe95 	bl	80016f6 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <send_to_lcd+0x98>)
 80009d2:	f000 fe90 	bl	80016f6 <HAL_GPIO_WritePin>
	delay (20);
 80009d6:	2014      	movs	r0, #20
 80009d8:	f7ff ffa8 	bl	800092c <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <send_to_lcd+0x98>)
 80009e2:	f000 fe88 	bl	80016f6 <HAL_GPIO_WritePin>
	delay (20);
 80009e6:	2014      	movs	r0, #20
 80009e8:	f7ff ffa0 	bl	800092c <delay>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40010c00 	.word	0x40010c00

080009f8 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	091b      	lsrs	r3, r3, #4
 8000a06:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ffa5 	bl	800095c <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 030f 	and.w	r3, r3, #15
 8000a18:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff9c 	bl	800095c <send_to_lcd>
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff8b 	bl	800095c <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 030f 	and.w	r3, r3, #15
 8000a4c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	2101      	movs	r1, #1
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff82 	bl	800095c <send_to_lcd>
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <lcd_clear>:

void lcd_clear (void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff ffc7 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(2);
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f000 fba0 	bl	80011b0 <HAL_Delay>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
    switch (row)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <lcd_put_cur+0x18>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d005      	beq.n	8000a96 <lcd_put_cur+0x22>
 8000a8a:	e009      	b.n	8000aa0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a92:	603b      	str	r3, [r7, #0]
            break;
 8000a94:	e004      	b.n	8000aa0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a9c:	603b      	str	r3, [r7, #0]
            break;
 8000a9e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ffa7 	bl	80009f8 <lcd_send_cmd>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <lcd_init>:


void lcd_init (void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ab6:	2032      	movs	r0, #50	; 0x32
 8000ab8:	f000 fb7a 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000abc:	2030      	movs	r0, #48	; 0x30
 8000abe:	f7ff ff9b 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000ac2:	2005      	movs	r0, #5
 8000ac4:	f000 fb74 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ac8:	2030      	movs	r0, #48	; 0x30
 8000aca:	f7ff ff95 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f000 fb6e 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ad4:	2030      	movs	r0, #48	; 0x30
 8000ad6:	f7ff ff8f 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(10);
 8000ada:	200a      	movs	r0, #10
 8000adc:	f000 fb68 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000ae0:	2020      	movs	r0, #32
 8000ae2:	f7ff ff89 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(10);
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f000 fb62 	bl	80011b0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000aec:	2028      	movs	r0, #40	; 0x28
 8000aee:	f7ff ff83 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f000 fb5c 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000af8:	2008      	movs	r0, #8
 8000afa:	f7ff ff7d 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 fb56 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff ff77 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(1);
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 fb50 	bl	80011b0 <HAL_Delay>
	HAL_Delay(1);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f000 fb4d 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000b16:	2006      	movs	r0, #6
 8000b18:	f7ff ff6e 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(1);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 fb47 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000b22:	200c      	movs	r0, #12
 8000b24:	f7ff ff68 	bl	80009f8 <lcd_send_cmd>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000b34:	e006      	b.n	8000b44 <lcd_send_string+0x18>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	1c5a      	adds	r2, r3, #1
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff74 	bl	8000a2c <lcd_send_data>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1f4      	bne.n	8000b36 <lcd_send_string+0xa>
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <measure_distance>:
//uint32_t pMillis;					ORIGINAL
//uint32_t Value1 = 0;				ORIGINAL
//uint32_t Value2 = 0;				ORIGINAL
//uint16_t Distance  = 0;cm			ORIGINAL

uint16_t  measure_distance(TIM_HandleTypeDef htim1){
 8000b58:	b084      	sub	sp, #16
 8000b5a:	b590      	push	{r4, r7, lr}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	f107 0420 	add.w	r4, r7, #32
 8000b64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint32_t pMillis;
uint32_t Value1 = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
uint32_t Value2 = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
uint16_t Distance  = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	80fb      	strh	r3, [r7, #6]

	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7a:	4835      	ldr	r0, [pc, #212]	; (8000c50 <measure_distance+0xf8>)
 8000b7c:	f000 fdbb 	bl	80016f6 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER (&htim1) < 10){// wait for 10 us
 8000b86:	e005      	b.n	8000b94 <measure_distance+0x3c>
	  	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8e:	4830      	ldr	r0, [pc, #192]	; (8000c50 <measure_distance+0xf8>)
 8000b90:	f000 fdb1 	bl	80016f6 <HAL_GPIO_WritePin>
	  while (__HAL_TIM_GET_COUNTER (&htim1) < 10){// wait for 10 us
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b98:	2b09      	cmp	r3, #9
 8000b9a:	d9f5      	bls.n	8000b88 <measure_distance+0x30>
	  }
	  pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000b9c:	f000 fafe 	bl	800119c <HAL_GetTick>
 8000ba0:	6038      	str	r0, [r7, #0]
	      // wait for the echo pin to go high
	  while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick()){
 8000ba2:	e002      	b.n	8000baa <measure_distance+0x52>
	  	  Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
 8000ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba8:	60fb      	str	r3, [r7, #12]
	  while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick()){
 8000baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bae:	4828      	ldr	r0, [pc, #160]	; (8000c50 <measure_distance+0xf8>)
 8000bb0:	f000 fd8a 	bl	80016c8 <HAL_GPIO_ReadPin>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d107      	bne.n	8000bca <measure_distance+0x72>
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f103 040a 	add.w	r4, r3, #10
 8000bc0:	f000 faec 	bl	800119c <HAL_GetTick>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	429c      	cmp	r4, r3
 8000bc8:	d8ec      	bhi.n	8000ba4 <measure_distance+0x4c>
	  }
	  pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000bca:	f000 fae7 	bl	800119c <HAL_GetTick>
 8000bce:	6038      	str	r0, [r7, #0]
	      // wait for the echo pin to go low
	  while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick()){
 8000bd0:	e002      	b.n	8000bd8 <measure_distance+0x80>
	  	  Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	60bb      	str	r3, [r7, #8]
	  while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick()){
 8000bd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bdc:	481c      	ldr	r0, [pc, #112]	; (8000c50 <measure_distance+0xf8>)
 8000bde:	f000 fd73 	bl	80016c8 <HAL_GPIO_ReadPin>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d007      	beq.n	8000bf8 <measure_distance+0xa0>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000bee:	f000 fad5 	bl	800119c <HAL_GetTick>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d8ec      	bhi.n	8000bd2 <measure_distance+0x7a>
	  }
	  Distance = (Value2-Value1)* 0.034/2;
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fbe8 	bl	80003d4 <__aeabi_ui2d>
 8000c04:	a310      	add	r3, pc, #64	; (adr r3, 8000c48 <measure_distance+0xf0>)
 8000c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0a:	f7ff fc5d 	bl	80004c8 <__aeabi_dmul>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	4610      	mov	r0, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 0200 	mov.w	r2, #0
 8000c1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c1e:	f7ff fd7d 	bl	800071c <__aeabi_ddiv>
 8000c22:	4602      	mov	r2, r0
 8000c24:	460b      	mov	r3, r1
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f7ff fe5f 	bl	80008ec <__aeabi_d2uiz>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	80fb      	strh	r3, [r7, #6]

	  return Distance;
 8000c32:	88fb      	ldrh	r3, [r7, #6]

  }
 8000c34:	4618      	mov	r0, r3
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c3e:	b004      	add	sp, #16
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	f3af 8000 	nop.w
 8000c48:	b020c49c 	.word	0xb020c49c
 8000c4c:	3fa16872 	.word	0x3fa16872
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c56:	b08f      	sub	sp, #60	; 0x3c
 8000c58:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5a:	f000 fa47 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5e:	f000 f869 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c62:	f000 f8fd 	bl	8000e60 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c66:	f000 f8ab 	bl	8000dc0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000c6a:	4829      	ldr	r0, [pc, #164]	; (8000d10 <main+0xbc>)
 8000c6c:	f001 f994 	bl	8001f98 <HAL_TIM_Base_Start>

  lcd_init();
 8000c70:	f7ff ff1f 	bl	8000ab2 <lcd_init>
  lcd_put_cur(0, 0);
 8000c74:	2100      	movs	r1, #0
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fefc 	bl	8000a74 <lcd_put_cur>
  lcd_send_string("Hola ");
 8000c7c:	4825      	ldr	r0, [pc, #148]	; (8000d14 <main+0xc0>)
 8000c7e:	f7ff ff55 	bl	8000b2c <lcd_send_string>
  lcd_send_string("WORLD ");
 8000c82:	4825      	ldr	r0, [pc, #148]	; (8000d18 <main+0xc4>)
 8000c84:	f7ff ff52 	bl	8000b2c <lcd_send_string>
  lcd_send_string("FROM");
 8000c88:	4824      	ldr	r0, [pc, #144]	; (8000d1c <main+0xc8>)
 8000c8a:	f7ff ff4f 	bl	8000b2c <lcd_send_string>

  lcd_put_cur(1, 0);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff feef 	bl	8000a74 <lcd_put_cur>
  lcd_send_string("CONTROLLERS TECH");
 8000c96:	4822      	ldr	r0, [pc, #136]	; (8000d20 <main+0xcc>)
 8000c98:	f7ff ff48 	bl	8000b2c <lcd_send_string>
  HAL_Delay(3000);
 8000c9c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ca0:	f000 fa86 	bl	80011b0 <HAL_Delay>
  lcd_clear();
 8000ca4:	f7ff fedc 	bl	8000a60 <lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  distance=measure_distance(htim1);
 8000ca8:	4e19      	ldr	r6, [pc, #100]	; (8000d10 <main+0xbc>)
 8000caa:	466d      	mov	r5, sp
 8000cac:	f106 0410 	add.w	r4, r6, #16
 8000cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cc4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000cc8:	f7ff ff46 	bl	8000b58 <measure_distance>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <main+0xd0>)
 8000cd2:	801a      	strh	r2, [r3, #0]
	  lcd_init();
 8000cd4:	f7ff feed 	bl	8000ab2 <lcd_init>
	  lcd_put_cur(0, 0);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff feca 	bl	8000a74 <lcd_put_cur>
	  lcd_send_string("Distancia ");
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <main+0xd4>)
 8000ce2:	f7ff ff23 	bl	8000b2c <lcd_send_string>
	  sprintf(dist,"%u",distance);
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <main+0xd0>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	490f      	ldr	r1, [pc, #60]	; (8000d2c <main+0xd8>)
 8000cee:	4810      	ldr	r0, [pc, #64]	; (8000d30 <main+0xdc>)
 8000cf0:	f001 fbe8 	bl	80024c4 <siprintf>
	  lcd_put_cur(1, 0);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f7ff febc 	bl	8000a74 <lcd_put_cur>
	  lcd_send_string(dist);
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <main+0xdc>)
 8000cfe:	f7ff ff15 	bl	8000b2c <lcd_send_string>
	  HAL_Delay(3000);
 8000d02:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d06:	f000 fa53 	bl	80011b0 <HAL_Delay>
	  lcd_clear();
 8000d0a:	f7ff fea9 	bl	8000a60 <lcd_clear>
  {
 8000d0e:	e7cb      	b.n	8000ca8 <main+0x54>
 8000d10:	2000008c 	.word	0x2000008c
 8000d14:	08002dd0 	.word	0x08002dd0
 8000d18:	08002dd8 	.word	0x08002dd8
 8000d1c:	08002de0 	.word	0x08002de0
 8000d20:	08002de8 	.word	0x08002de8
 8000d24:	200000d4 	.word	0x200000d4
 8000d28:	08002dfc 	.word	0x08002dfc
 8000d2c:	08002e08 	.word	0x08002e08
 8000d30:	200000d8 	.word	0x200000d8

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b090      	sub	sp, #64	; 0x40
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0318 	add.w	r3, r7, #24
 8000d3e:	2228      	movs	r2, #40	; 0x28
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fbb6 	bl	80024b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d64:	2301      	movs	r3, #1
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d72:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d78:	f107 0318 	add.w	r3, r7, #24
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fcd3 	bl	8001728 <HAL_RCC_OscConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d88:	f000 f8ce 	bl	8000f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d90:	2302      	movs	r3, #2
 8000d92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2102      	movs	r1, #2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 ff40 	bl	8001c2c <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000db2:	f000 f8b9 	bl	8000f28 <Error_Handler>
  }
}
 8000db6:	bf00      	nop
 8000db8:	3740      	adds	r7, #64	; 0x40
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_TIM1_Init+0x98>)
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <MX_TIM1_Init+0x9c>)
 8000de0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_TIM1_Init+0x98>)
 8000de4:	2247      	movs	r2, #71	; 0x47
 8000de6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_TIM1_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_TIM1_Init+0x98>)
 8000df0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000df4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_TIM1_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_TIM1_Init+0x98>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_TIM1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e08:	4813      	ldr	r0, [pc, #76]	; (8000e58 <MX_TIM1_Init+0x98>)
 8000e0a:	f001 f875 	bl	8001ef8 <HAL_TIM_Base_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e14:	f000 f888 	bl	8000f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_TIM1_Init+0x98>)
 8000e26:	f001 f901 	bl	800202c <HAL_TIM_ConfigClockSource>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e30:	f000 f87a 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_TIM1_Init+0x98>)
 8000e42:	f001 faaf 	bl	80023a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e4c:	f000 f86c 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000008c 	.word	0x2000008c
 8000e5c:	40012c00 	.word	0x40012c00

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a29      	ldr	r2, [pc, #164]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000e7a:	f043 0310 	orr.w	r3, r3, #16
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0310 	and.w	r3, r3, #16
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000e92:	f043 0320 	orr.w	r3, r3, #32
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0320 	and.w	r3, r3, #32
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000eaa:	f043 0308 	orr.w	r3, r3, #8
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_GPIO_Init+0xc0>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 8000eda:	4812      	ldr	r0, [pc, #72]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000edc:	f000 fc0b 	bl	80016f6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ee0:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000ee4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480a      	ldr	r0, [pc, #40]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000efa:	f000 fa61 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_GPIO_Init+0xc4>)
 8000f14:	f000 fa54 	bl	80013c0 <HAL_GPIO_Init>

}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010c00 	.word	0x40010c00

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6193      	str	r3, [r2, #24]
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_MspInit+0x5c>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_MspInit+0x60>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_MspInit+0x60>)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010000 	.word	0x40010000

08000f98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_TIM_Base_MspInit+0x34>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_TIM_Base_MspInit+0x38>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <HAL_TIM_Base_MspInit+0x38>)
 8000fb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_TIM_Base_MspInit+0x38>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	40012c00 	.word	0x40012c00
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <HardFault_Handler+0x4>

08000fe6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <MemManage_Handler+0x4>

08000fec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <BusFault_Handler+0x4>

08000ff2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <UsageFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f8aa 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f001 fa02 	bl	8002460 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20005000 	.word	0x20005000
 8001088:	00000400 	.word	0x00000400
 800108c:	200000e8 	.word	0x200000e8
 8001090:	20000100 	.word	0x20000100

08001094 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010c6:	f7ff ffe5 	bl	8001094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ca:	f001 f9cf 	bl	800246c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ce:	f7ff fdc1 	bl	8000c54 <main>
  bx lr
 80010d2:	4770      	bx	lr
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010dc:	08002e68 	.word	0x08002e68
  ldr r2, =_sbss
 80010e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010e4:	20000100 	.word	0x20000100

080010e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_2_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x28>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f92b 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff ff14 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f935 	bl	80013a6 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 f90b 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_IncTick+0x20>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	20000008 	.word	0x20000008
 8001198:	200000ec 	.word	0x200000ec

0800119c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	200000ec 	.word	0x200000ec

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff fff0 	bl	800119c <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffe0 	bl	800119c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff90 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff49 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff5e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffb0 	bl	8001314 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b08b      	sub	sp, #44	; 0x2c
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d2:	e169      	b.n	80016a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d4:	2201      	movs	r2, #1
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 8158 	bne.w	80016a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4a9a      	ldr	r2, [pc, #616]	; (8001660 <HAL_GPIO_Init+0x2a0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d05e      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 80013fc:	4a98      	ldr	r2, [pc, #608]	; (8001660 <HAL_GPIO_Init+0x2a0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d875      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 8001402:	4a98      	ldr	r2, [pc, #608]	; (8001664 <HAL_GPIO_Init+0x2a4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d058      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 8001408:	4a96      	ldr	r2, [pc, #600]	; (8001664 <HAL_GPIO_Init+0x2a4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d86f      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 800140e:	4a96      	ldr	r2, [pc, #600]	; (8001668 <HAL_GPIO_Init+0x2a8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d052      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 8001414:	4a94      	ldr	r2, [pc, #592]	; (8001668 <HAL_GPIO_Init+0x2a8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d869      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 800141a:	4a94      	ldr	r2, [pc, #592]	; (800166c <HAL_GPIO_Init+0x2ac>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d04c      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 8001420:	4a92      	ldr	r2, [pc, #584]	; (800166c <HAL_GPIO_Init+0x2ac>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d863      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 8001426:	4a92      	ldr	r2, [pc, #584]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d046      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
 800142c:	4a90      	ldr	r2, [pc, #576]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d85d      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 8001432:	2b12      	cmp	r3, #18
 8001434:	d82a      	bhi.n	800148c <HAL_GPIO_Init+0xcc>
 8001436:	2b12      	cmp	r3, #18
 8001438:	d859      	bhi.n	80014ee <HAL_GPIO_Init+0x12e>
 800143a:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <HAL_GPIO_Init+0x80>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	080014bb 	.word	0x080014bb
 8001444:	08001495 	.word	0x08001495
 8001448:	080014a7 	.word	0x080014a7
 800144c:	080014e9 	.word	0x080014e9
 8001450:	080014ef 	.word	0x080014ef
 8001454:	080014ef 	.word	0x080014ef
 8001458:	080014ef 	.word	0x080014ef
 800145c:	080014ef 	.word	0x080014ef
 8001460:	080014ef 	.word	0x080014ef
 8001464:	080014ef 	.word	0x080014ef
 8001468:	080014ef 	.word	0x080014ef
 800146c:	080014ef 	.word	0x080014ef
 8001470:	080014ef 	.word	0x080014ef
 8001474:	080014ef 	.word	0x080014ef
 8001478:	080014ef 	.word	0x080014ef
 800147c:	080014ef 	.word	0x080014ef
 8001480:	080014ef 	.word	0x080014ef
 8001484:	0800149d 	.word	0x0800149d
 8001488:	080014b1 	.word	0x080014b1
 800148c:	4a79      	ldr	r2, [pc, #484]	; (8001674 <HAL_GPIO_Init+0x2b4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d013      	beq.n	80014ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001492:	e02c      	b.n	80014ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	623b      	str	r3, [r7, #32]
          break;
 800149a:	e029      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	3304      	adds	r3, #4
 80014a2:	623b      	str	r3, [r7, #32]
          break;
 80014a4:	e024      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	3308      	adds	r3, #8
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e01f      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	330c      	adds	r3, #12
 80014b6:	623b      	str	r3, [r7, #32]
          break;
 80014b8:	e01a      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014c2:	2304      	movs	r3, #4
 80014c4:	623b      	str	r3, [r7, #32]
          break;
 80014c6:	e013      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d0:	2308      	movs	r3, #8
 80014d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	611a      	str	r2, [r3, #16]
          break;
 80014da:	e009      	b.n	80014f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014dc:	2308      	movs	r3, #8
 80014de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	615a      	str	r2, [r3, #20]
          break;
 80014e6:	e003      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x130>
          break;
 80014ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2bff      	cmp	r3, #255	; 0xff
 80014f4:	d801      	bhi.n	80014fa <HAL_GPIO_Init+0x13a>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	e001      	b.n	80014fe <HAL_GPIO_Init+0x13e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2bff      	cmp	r3, #255	; 0xff
 8001504:	d802      	bhi.n	800150c <HAL_GPIO_Init+0x14c>
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	e002      	b.n	8001512 <HAL_GPIO_Init+0x152>
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	3b08      	subs	r3, #8
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	210f      	movs	r1, #15
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	401a      	ands	r2, r3
 8001524:	6a39      	ldr	r1, [r7, #32]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	431a      	orrs	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80b1 	beq.w	80016a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001540:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <HAL_GPIO_Init+0x2b8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_GPIO_Init+0x2b8>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b4a      	ldr	r3, [pc, #296]	; (8001678 <HAL_GPIO_Init+0x2b8>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001558:	4a48      	ldr	r2, [pc, #288]	; (800167c <HAL_GPIO_Init+0x2bc>)
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a40      	ldr	r2, [pc, #256]	; (8001680 <HAL_GPIO_Init+0x2c0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d013      	beq.n	80015ac <HAL_GPIO_Init+0x1ec>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a3f      	ldr	r2, [pc, #252]	; (8001684 <HAL_GPIO_Init+0x2c4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d00d      	beq.n	80015a8 <HAL_GPIO_Init+0x1e8>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a3e      	ldr	r2, [pc, #248]	; (8001688 <HAL_GPIO_Init+0x2c8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d007      	beq.n	80015a4 <HAL_GPIO_Init+0x1e4>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a3d      	ldr	r2, [pc, #244]	; (800168c <HAL_GPIO_Init+0x2cc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d101      	bne.n	80015a0 <HAL_GPIO_Init+0x1e0>
 800159c:	2303      	movs	r3, #3
 800159e:	e006      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a0:	2304      	movs	r3, #4
 80015a2:	e004      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e002      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_GPIO_Init+0x1ee>
 80015ac:	2300      	movs	r3, #0
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015be:	492f      	ldr	r1, [pc, #188]	; (800167c <HAL_GPIO_Init+0x2bc>)
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	492c      	ldr	r1, [pc, #176]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4928      	ldr	r1, [pc, #160]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001600:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	4922      	ldr	r1, [pc, #136]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	491e      	ldr	r1, [pc, #120]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001618:	4013      	ands	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4918      	ldr	r1, [pc, #96]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	4914      	ldr	r1, [pc, #80]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001640:	4013      	ands	r3, r2
 8001642:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d021      	beq.n	8001694 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	490e      	ldr	r1, [pc, #56]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	60cb      	str	r3, [r1, #12]
 800165c:	e021      	b.n	80016a2 <HAL_GPIO_Init+0x2e2>
 800165e:	bf00      	nop
 8001660:	10320000 	.word	0x10320000
 8001664:	10310000 	.word	0x10310000
 8001668:	10220000 	.word	0x10220000
 800166c:	10210000 	.word	0x10210000
 8001670:	10120000 	.word	0x10120000
 8001674:	10110000 	.word	0x10110000
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	40010800 	.word	0x40010800
 8001684:	40010c00 	.word	0x40010c00
 8001688:	40011000 	.word	0x40011000
 800168c:	40011400 	.word	0x40011400
 8001690:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_GPIO_Init+0x304>)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	43db      	mvns	r3, r3
 800169c:	4909      	ldr	r1, [pc, #36]	; (80016c4 <HAL_GPIO_Init+0x304>)
 800169e:	4013      	ands	r3, r2
 80016a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	3301      	adds	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	fa22 f303 	lsr.w	r3, r2, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f47f ae8e 	bne.w	80013d4 <HAL_GPIO_Init+0x14>
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	372c      	adds	r7, #44	; 0x2c
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e001      	b.n	80016ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	807b      	strh	r3, [r7, #2]
 8001702:	4613      	mov	r3, r2
 8001704:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001706:	787b      	ldrb	r3, [r7, #1]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170c:	887a      	ldrh	r2, [r7, #2]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001712:	e003      	b.n	800171c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	041a      	lsls	r2, r3, #16
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	611a      	str	r2, [r3, #16]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
	...

08001728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e272      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8087 	beq.w	8001856 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001748:	4b92      	ldr	r3, [pc, #584]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b04      	cmp	r3, #4
 8001752:	d00c      	beq.n	800176e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001754:	4b8f      	ldr	r3, [pc, #572]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b08      	cmp	r3, #8
 800175e:	d112      	bne.n	8001786 <HAL_RCC_OscConfig+0x5e>
 8001760:	4b8c      	ldr	r3, [pc, #560]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176c:	d10b      	bne.n	8001786 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176e:	4b89      	ldr	r3, [pc, #548]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d06c      	beq.n	8001854 <HAL_RCC_OscConfig+0x12c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d168      	bne.n	8001854 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e24c      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x76>
 8001790:	4b80      	ldr	r3, [pc, #512]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a7f      	ldr	r2, [pc, #508]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e02e      	b.n	80017fc <HAL_RCC_OscConfig+0xd4>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x98>
 80017a6:	4b7b      	ldr	r3, [pc, #492]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a7a      	ldr	r2, [pc, #488]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b78      	ldr	r3, [pc, #480]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a77      	ldr	r2, [pc, #476]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e01d      	b.n	80017fc <HAL_RCC_OscConfig+0xd4>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0xbc>
 80017ca:	4b72      	ldr	r3, [pc, #456]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a71      	ldr	r2, [pc, #452]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b6f      	ldr	r3, [pc, #444]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6e      	ldr	r2, [pc, #440]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0xd4>
 80017e4:	4b6b      	ldr	r3, [pc, #428]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a6a      	ldr	r2, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b68      	ldr	r3, [pc, #416]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a67      	ldr	r2, [pc, #412]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fcca 	bl	800119c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fcc6 	bl	800119c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e200      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b5d      	ldr	r3, [pc, #372]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0xe4>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fcb6 	bl	800119c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fcb2 	bl	800119c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1ec      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x10c>
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d063      	beq.n	800192a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001862:	4b4c      	ldr	r3, [pc, #304]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800186e:	4b49      	ldr	r3, [pc, #292]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b08      	cmp	r3, #8
 8001878:	d11c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x18c>
 800187a:	4b46      	ldr	r3, [pc, #280]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d116      	bne.n	80018b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	4b43      	ldr	r3, [pc, #268]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_RCC_OscConfig+0x176>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e1c0      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4939      	ldr	r1, [pc, #228]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	e03a      	b.n	800192a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018bc:	4b36      	ldr	r3, [pc, #216]	; (8001998 <HAL_RCC_OscConfig+0x270>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff fc6b 	bl	800119c <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fc67 	bl	800119c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1a1      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4927      	ldr	r1, [pc, #156]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e015      	b.n	800192a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <HAL_RCC_OscConfig+0x270>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fc4a 	bl	800119c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff fc46 	bl	800119c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e180      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d03a      	beq.n	80019ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d019      	beq.n	8001972 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_RCC_OscConfig+0x274>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff fc2a 	bl	800119c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff fc26 	bl	800119c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e160      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_RCC_OscConfig+0x26c>)
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800196a:	2001      	movs	r0, #1
 800196c:	f000 faa6 	bl	8001ebc <RCC_Delay>
 8001970:	e01c      	b.n	80019ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_RCC_OscConfig+0x274>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001978:	f7ff fc10 	bl	800119c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197e:	e00f      	b.n	80019a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001980:	f7ff fc0c 	bl	800119c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d908      	bls.n	80019a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e146      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	42420000 	.word	0x42420000
 800199c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a0:	4b92      	ldr	r3, [pc, #584]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e9      	bne.n	8001980 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80a6 	beq.w	8001b06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019be:	4b8b      	ldr	r3, [pc, #556]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10d      	bne.n	80019e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b88      	ldr	r3, [pc, #544]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a87      	ldr	r2, [pc, #540]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b85      	ldr	r3, [pc, #532]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e2:	2301      	movs	r3, #1
 80019e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e6:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <HAL_RCC_OscConfig+0x4c8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d118      	bne.n	8001a24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f2:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x4c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7e      	ldr	r2, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x4c8>)
 80019f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fe:	f7ff fbcd 	bl	800119c <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a06:	f7ff fbc9 	bl	800119c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b64      	cmp	r3, #100	; 0x64
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e103      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	4b75      	ldr	r3, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x4c8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x312>
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4a6e      	ldr	r2, [pc, #440]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6213      	str	r3, [r2, #32]
 8001a38:	e02d      	b.n	8001a96 <HAL_RCC_OscConfig+0x36e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x334>
 8001a42:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a69      	ldr	r2, [pc, #420]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	4b67      	ldr	r3, [pc, #412]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a66      	ldr	r2, [pc, #408]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6213      	str	r3, [r2, #32]
 8001a5a:	e01c      	b.n	8001a96 <HAL_RCC_OscConfig+0x36e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d10c      	bne.n	8001a7e <HAL_RCC_OscConfig+0x356>
 8001a64:	4b61      	ldr	r3, [pc, #388]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a60      	ldr	r2, [pc, #384]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	4b5e      	ldr	r3, [pc, #376]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a5d      	ldr	r2, [pc, #372]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6213      	str	r3, [r2, #32]
 8001a7c:	e00b      	b.n	8001a96 <HAL_RCC_OscConfig+0x36e>
 8001a7e:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a5a      	ldr	r2, [pc, #360]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6213      	str	r3, [r2, #32]
 8001a8a:	4b58      	ldr	r3, [pc, #352]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a57      	ldr	r2, [pc, #348]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	f023 0304 	bic.w	r3, r3, #4
 8001a94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d015      	beq.n	8001aca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fb7d 	bl	800119c <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7ff fb79 	bl	800119c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e0b1      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abc:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ee      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x37e>
 8001ac8:	e014      	b.n	8001af4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aca:	f7ff fb67 	bl	800119c <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff fb63 	bl	800119c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e09b      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae8:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1ee      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d105      	bne.n	8001b06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afa:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a3b      	ldr	r2, [pc, #236]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 8087 	beq.w	8001c1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d061      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d146      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b24:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <HAL_RCC_OscConfig+0x4cc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fb37 	bl	800119c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7ff fb33 	bl	800119c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e06d      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b58:	d108      	bne.n	8001b6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b5a:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	4921      	ldr	r1, [pc, #132]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a19      	ldr	r1, [r3, #32]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	491b      	ldr	r1, [pc, #108]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x4cc>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fb07 	bl	800119c <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b92:	f7ff fb03 	bl	800119c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e03d      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x46a>
 8001bb0:	e035      	b.n	8001c1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_RCC_OscConfig+0x4cc>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff faf0 	bl	800119c <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff faec 	bl	800119c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e026      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x498>
 8001bde:	e01e      	b.n	8001c1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e019      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_OscConfig+0x500>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0d0      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b6a      	ldr	r3, [pc, #424]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d910      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b67      	ldr	r3, [pc, #412]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 0207 	bic.w	r2, r3, #7
 8001c56:	4965      	ldr	r1, [pc, #404]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0b8      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c88:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001caa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	494d      	ldr	r1, [pc, #308]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d040      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d115      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e07f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d107      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e073      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06b      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0a:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f023 0203 	bic.w	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4936      	ldr	r1, [pc, #216]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d1c:	f7ff fa3e 	bl	800119c <HAL_GetTick>
 8001d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d24:	f7ff fa3a 	bl	800119c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e053      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 020c 	and.w	r2, r3, #12
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1eb      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d210      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0207 	bic.w	r2, r3, #7
 8001d62:	4922      	ldr	r1, [pc, #136]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e032      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4916      	ldr	r1, [pc, #88]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	490e      	ldr	r1, [pc, #56]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dba:	f000 f821 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	490a      	ldr	r1, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dcc:	5ccb      	ldrb	r3, [r1, r3]
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1cc>)
 8001dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x1d0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f99c 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40022000 	.word	0x40022000
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08002e1c 	.word	0x08002e1c
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e00:	b490      	push	{r4, r7}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_RCC_GetSysClockFreq+0xac>)
 8001e08:	1d3c      	adds	r4, r7, #4
 8001e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e10:	f240 2301 	movw	r3, #513	; 0x201
 8001e14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d002      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x40>
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x46>
 8001e3e:	e02b      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e40:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e42:	623b      	str	r3, [r7, #32]
      break;
 8001e44:	e02b      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	0c9b      	lsrs	r3, r3, #18
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3328      	adds	r3, #40	; 0x28
 8001e50:	443b      	add	r3, r7
 8001e52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d012      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	0c5b      	lsrs	r3, r3, #17
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	3328      	adds	r3, #40	; 0x28
 8001e6e:	443b      	add	r3, r7
 8001e70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e7a:	fb03 f202 	mul.w	r2, r3, r2
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	e004      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	623b      	str	r3, [r7, #32]
      break;
 8001e96:	e002      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e9a:	623b      	str	r3, [r7, #32]
      break;
 8001e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc90      	pop	{r4, r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	08002e0c 	.word	0x08002e0c
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	007a1200 	.word	0x007a1200
 8001eb8:	003d0900 	.word	0x003d0900

08001ebc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <RCC_Delay+0x34>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <RCC_Delay+0x38>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0a5b      	lsrs	r3, r3, #9
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ed8:	bf00      	nop
  }
  while (Delay --);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	60fa      	str	r2, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f9      	bne.n	8001ed8 <RCC_Delay+0x1c>
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	10624dd3 	.word	0x10624dd3

08001ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e041      	b.n	8001f8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff f83a 	bl	8000f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3304      	adds	r3, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4610      	mov	r0, r2
 8001f38:	f000 f93c 	bl	80021b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d001      	beq.n	8001fb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e032      	b.n	8002016 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a18      	ldr	r2, [pc, #96]	; (8002020 <HAL_TIM_Base_Start+0x88>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00e      	beq.n	8001fe0 <HAL_TIM_Base_Start+0x48>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fca:	d009      	beq.n	8001fe0 <HAL_TIM_Base_Start+0x48>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a14      	ldr	r2, [pc, #80]	; (8002024 <HAL_TIM_Base_Start+0x8c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d004      	beq.n	8001fe0 <HAL_TIM_Base_Start+0x48>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a13      	ldr	r2, [pc, #76]	; (8002028 <HAL_TIM_Base_Start+0x90>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d111      	bne.n	8002004 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d010      	beq.n	8002014 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002002:	e007      	b.n	8002014 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40012c00 	.word	0x40012c00
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800

0800202c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_TIM_ConfigClockSource+0x18>
 8002040:	2302      	movs	r3, #2
 8002042:	e0b3      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x180>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002062:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800206a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207c:	d03e      	beq.n	80020fc <HAL_TIM_ConfigClockSource+0xd0>
 800207e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002082:	f200 8087 	bhi.w	8002194 <HAL_TIM_ConfigClockSource+0x168>
 8002086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208a:	f000 8085 	beq.w	8002198 <HAL_TIM_ConfigClockSource+0x16c>
 800208e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002092:	d87f      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x168>
 8002094:	2b70      	cmp	r3, #112	; 0x70
 8002096:	d01a      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0xa2>
 8002098:	2b70      	cmp	r3, #112	; 0x70
 800209a:	d87b      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x168>
 800209c:	2b60      	cmp	r3, #96	; 0x60
 800209e:	d050      	beq.n	8002142 <HAL_TIM_ConfigClockSource+0x116>
 80020a0:	2b60      	cmp	r3, #96	; 0x60
 80020a2:	d877      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x168>
 80020a4:	2b50      	cmp	r3, #80	; 0x50
 80020a6:	d03c      	beq.n	8002122 <HAL_TIM_ConfigClockSource+0xf6>
 80020a8:	2b50      	cmp	r3, #80	; 0x50
 80020aa:	d873      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x168>
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d058      	beq.n	8002162 <HAL_TIM_ConfigClockSource+0x136>
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d86f      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x168>
 80020b4:	2b30      	cmp	r3, #48	; 0x30
 80020b6:	d064      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x156>
 80020b8:	2b30      	cmp	r3, #48	; 0x30
 80020ba:	d86b      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x168>
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d060      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x156>
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d867      	bhi.n	8002194 <HAL_TIM_ConfigClockSource+0x168>
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d05c      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x156>
 80020c8:	2b10      	cmp	r3, #16
 80020ca:	d05a      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80020cc:	e062      	b.n	8002194 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6899      	ldr	r1, [r3, #8]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f000 f942 	bl	8002366 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	609a      	str	r2, [r3, #8]
      break;
 80020fa:	e04e      	b.n	800219a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6899      	ldr	r1, [r3, #8]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f000 f92b 	bl	8002366 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800211e:	609a      	str	r2, [r3, #8]
      break;
 8002120:	e03b      	b.n	800219a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6859      	ldr	r1, [r3, #4]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	461a      	mov	r2, r3
 8002130:	f000 f8a2 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2150      	movs	r1, #80	; 0x50
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f8f9 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 8002140:	e02b      	b.n	800219a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	461a      	mov	r2, r3
 8002150:	f000 f8c0 	bl	80022d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2160      	movs	r1, #96	; 0x60
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f8e9 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 8002160:	e01b      	b.n	800219a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6859      	ldr	r1, [r3, #4]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	461a      	mov	r2, r3
 8002170:	f000 f882 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2140      	movs	r1, #64	; 0x40
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f8d9 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 8002180:	e00b      	b.n	800219a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	4610      	mov	r0, r2
 800218e:	f000 f8d0 	bl	8002332 <TIM_ITRx_SetConfig>
        break;
 8002192:	e002      	b.n	800219a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002194:	bf00      	nop
 8002196:	e000      	b.n	800219a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002198:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a29      	ldr	r2, [pc, #164]	; (800226c <TIM_Base_SetConfig+0xb8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00b      	beq.n	80021e4 <TIM_Base_SetConfig+0x30>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d2:	d007      	beq.n	80021e4 <TIM_Base_SetConfig+0x30>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a26      	ldr	r2, [pc, #152]	; (8002270 <TIM_Base_SetConfig+0xbc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <TIM_Base_SetConfig+0x30>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a25      	ldr	r2, [pc, #148]	; (8002274 <TIM_Base_SetConfig+0xc0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d108      	bne.n	80021f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	; (800226c <TIM_Base_SetConfig+0xb8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00b      	beq.n	8002216 <TIM_Base_SetConfig+0x62>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002204:	d007      	beq.n	8002216 <TIM_Base_SetConfig+0x62>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <TIM_Base_SetConfig+0xbc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d003      	beq.n	8002216 <TIM_Base_SetConfig+0x62>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a18      	ldr	r2, [pc, #96]	; (8002274 <TIM_Base_SetConfig+0xc0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d108      	bne.n	8002228 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a07      	ldr	r2, [pc, #28]	; (800226c <TIM_Base_SetConfig+0xb8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d103      	bne.n	800225c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	615a      	str	r2, [r3, #20]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	40012c00 	.word	0x40012c00
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800

08002278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f023 0201 	bic.w	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f023 030a 	bic.w	r3, r3, #10
 80022b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	621a      	str	r2, [r3, #32]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f023 0210 	bic.w	r2, r3, #16
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	031b      	lsls	r3, r3, #12
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002310:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	621a      	str	r2, [r3, #32]
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	f043 0307 	orr.w	r3, r3, #7
 8002354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	609a      	str	r2, [r3, #8]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002366:	b480      	push	{r7}
 8002368:	b087      	sub	sp, #28
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002380:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	021a      	lsls	r2, r3, #8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4313      	orrs	r3, r2
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	609a      	str	r2, [r3, #8]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e046      	b.n	800244a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a16      	ldr	r2, [pc, #88]	; (8002454 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00e      	beq.n	800241e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d009      	beq.n	800241e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d004      	beq.n	800241e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a10      	ldr	r2, [pc, #64]	; (800245c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d10c      	bne.n	8002438 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	4313      	orrs	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	40012c00 	.word	0x40012c00
 8002458:	40000400 	.word	0x40000400
 800245c:	40000800 	.word	0x40000800

08002460 <__errno>:
 8002460:	4b01      	ldr	r3, [pc, #4]	; (8002468 <__errno+0x8>)
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	2000000c 	.word	0x2000000c

0800246c <__libc_init_array>:
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	2600      	movs	r6, #0
 8002470:	4d0c      	ldr	r5, [pc, #48]	; (80024a4 <__libc_init_array+0x38>)
 8002472:	4c0d      	ldr	r4, [pc, #52]	; (80024a8 <__libc_init_array+0x3c>)
 8002474:	1b64      	subs	r4, r4, r5
 8002476:	10a4      	asrs	r4, r4, #2
 8002478:	42a6      	cmp	r6, r4
 800247a:	d109      	bne.n	8002490 <__libc_init_array+0x24>
 800247c:	f000 fc9c 	bl	8002db8 <_init>
 8002480:	2600      	movs	r6, #0
 8002482:	4d0a      	ldr	r5, [pc, #40]	; (80024ac <__libc_init_array+0x40>)
 8002484:	4c0a      	ldr	r4, [pc, #40]	; (80024b0 <__libc_init_array+0x44>)
 8002486:	1b64      	subs	r4, r4, r5
 8002488:	10a4      	asrs	r4, r4, #2
 800248a:	42a6      	cmp	r6, r4
 800248c:	d105      	bne.n	800249a <__libc_init_array+0x2e>
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	f855 3b04 	ldr.w	r3, [r5], #4
 8002494:	4798      	blx	r3
 8002496:	3601      	adds	r6, #1
 8002498:	e7ee      	b.n	8002478 <__libc_init_array+0xc>
 800249a:	f855 3b04 	ldr.w	r3, [r5], #4
 800249e:	4798      	blx	r3
 80024a0:	3601      	adds	r6, #1
 80024a2:	e7f2      	b.n	800248a <__libc_init_array+0x1e>
 80024a4:	08002e60 	.word	0x08002e60
 80024a8:	08002e60 	.word	0x08002e60
 80024ac:	08002e60 	.word	0x08002e60
 80024b0:	08002e64 	.word	0x08002e64

080024b4 <memset>:
 80024b4:	4603      	mov	r3, r0
 80024b6:	4402      	add	r2, r0
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d100      	bne.n	80024be <memset+0xa>
 80024bc:	4770      	bx	lr
 80024be:	f803 1b01 	strb.w	r1, [r3], #1
 80024c2:	e7f9      	b.n	80024b8 <memset+0x4>

080024c4 <siprintf>:
 80024c4:	b40e      	push	{r1, r2, r3}
 80024c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024ca:	b500      	push	{lr}
 80024cc:	b09c      	sub	sp, #112	; 0x70
 80024ce:	ab1d      	add	r3, sp, #116	; 0x74
 80024d0:	9002      	str	r0, [sp, #8]
 80024d2:	9006      	str	r0, [sp, #24]
 80024d4:	9107      	str	r1, [sp, #28]
 80024d6:	9104      	str	r1, [sp, #16]
 80024d8:	4808      	ldr	r0, [pc, #32]	; (80024fc <siprintf+0x38>)
 80024da:	4909      	ldr	r1, [pc, #36]	; (8002500 <siprintf+0x3c>)
 80024dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80024e0:	9105      	str	r1, [sp, #20]
 80024e2:	6800      	ldr	r0, [r0, #0]
 80024e4:	a902      	add	r1, sp, #8
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	f000 f868 	bl	80025bc <_svfiprintf_r>
 80024ec:	2200      	movs	r2, #0
 80024ee:	9b02      	ldr	r3, [sp, #8]
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	b01c      	add	sp, #112	; 0x70
 80024f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80024f8:	b003      	add	sp, #12
 80024fa:	4770      	bx	lr
 80024fc:	2000000c 	.word	0x2000000c
 8002500:	ffff0208 	.word	0xffff0208

08002504 <__ssputs_r>:
 8002504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002508:	688e      	ldr	r6, [r1, #8]
 800250a:	4682      	mov	sl, r0
 800250c:	429e      	cmp	r6, r3
 800250e:	460c      	mov	r4, r1
 8002510:	4690      	mov	r8, r2
 8002512:	461f      	mov	r7, r3
 8002514:	d838      	bhi.n	8002588 <__ssputs_r+0x84>
 8002516:	898a      	ldrh	r2, [r1, #12]
 8002518:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800251c:	d032      	beq.n	8002584 <__ssputs_r+0x80>
 800251e:	6825      	ldr	r5, [r4, #0]
 8002520:	6909      	ldr	r1, [r1, #16]
 8002522:	3301      	adds	r3, #1
 8002524:	eba5 0901 	sub.w	r9, r5, r1
 8002528:	6965      	ldr	r5, [r4, #20]
 800252a:	444b      	add	r3, r9
 800252c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002530:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002534:	106d      	asrs	r5, r5, #1
 8002536:	429d      	cmp	r5, r3
 8002538:	bf38      	it	cc
 800253a:	461d      	movcc	r5, r3
 800253c:	0553      	lsls	r3, r2, #21
 800253e:	d531      	bpl.n	80025a4 <__ssputs_r+0xa0>
 8002540:	4629      	mov	r1, r5
 8002542:	f000 fb6f 	bl	8002c24 <_malloc_r>
 8002546:	4606      	mov	r6, r0
 8002548:	b950      	cbnz	r0, 8002560 <__ssputs_r+0x5c>
 800254a:	230c      	movs	r3, #12
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f8ca 3000 	str.w	r3, [sl]
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800255a:	81a3      	strh	r3, [r4, #12]
 800255c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002560:	464a      	mov	r2, r9
 8002562:	6921      	ldr	r1, [r4, #16]
 8002564:	f000 face 	bl	8002b04 <memcpy>
 8002568:	89a3      	ldrh	r3, [r4, #12]
 800256a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800256e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002572:	81a3      	strh	r3, [r4, #12]
 8002574:	6126      	str	r6, [r4, #16]
 8002576:	444e      	add	r6, r9
 8002578:	6026      	str	r6, [r4, #0]
 800257a:	463e      	mov	r6, r7
 800257c:	6165      	str	r5, [r4, #20]
 800257e:	eba5 0509 	sub.w	r5, r5, r9
 8002582:	60a5      	str	r5, [r4, #8]
 8002584:	42be      	cmp	r6, r7
 8002586:	d900      	bls.n	800258a <__ssputs_r+0x86>
 8002588:	463e      	mov	r6, r7
 800258a:	4632      	mov	r2, r6
 800258c:	4641      	mov	r1, r8
 800258e:	6820      	ldr	r0, [r4, #0]
 8002590:	f000 fac6 	bl	8002b20 <memmove>
 8002594:	68a3      	ldr	r3, [r4, #8]
 8002596:	2000      	movs	r0, #0
 8002598:	1b9b      	subs	r3, r3, r6
 800259a:	60a3      	str	r3, [r4, #8]
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	4433      	add	r3, r6
 80025a0:	6023      	str	r3, [r4, #0]
 80025a2:	e7db      	b.n	800255c <__ssputs_r+0x58>
 80025a4:	462a      	mov	r2, r5
 80025a6:	f000 fbb1 	bl	8002d0c <_realloc_r>
 80025aa:	4606      	mov	r6, r0
 80025ac:	2800      	cmp	r0, #0
 80025ae:	d1e1      	bne.n	8002574 <__ssputs_r+0x70>
 80025b0:	4650      	mov	r0, sl
 80025b2:	6921      	ldr	r1, [r4, #16]
 80025b4:	f000 face 	bl	8002b54 <_free_r>
 80025b8:	e7c7      	b.n	800254a <__ssputs_r+0x46>
	...

080025bc <_svfiprintf_r>:
 80025bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c0:	4698      	mov	r8, r3
 80025c2:	898b      	ldrh	r3, [r1, #12]
 80025c4:	4607      	mov	r7, r0
 80025c6:	061b      	lsls	r3, r3, #24
 80025c8:	460d      	mov	r5, r1
 80025ca:	4614      	mov	r4, r2
 80025cc:	b09d      	sub	sp, #116	; 0x74
 80025ce:	d50e      	bpl.n	80025ee <_svfiprintf_r+0x32>
 80025d0:	690b      	ldr	r3, [r1, #16]
 80025d2:	b963      	cbnz	r3, 80025ee <_svfiprintf_r+0x32>
 80025d4:	2140      	movs	r1, #64	; 0x40
 80025d6:	f000 fb25 	bl	8002c24 <_malloc_r>
 80025da:	6028      	str	r0, [r5, #0]
 80025dc:	6128      	str	r0, [r5, #16]
 80025de:	b920      	cbnz	r0, 80025ea <_svfiprintf_r+0x2e>
 80025e0:	230c      	movs	r3, #12
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	e0d1      	b.n	800278e <_svfiprintf_r+0x1d2>
 80025ea:	2340      	movs	r3, #64	; 0x40
 80025ec:	616b      	str	r3, [r5, #20]
 80025ee:	2300      	movs	r3, #0
 80025f0:	9309      	str	r3, [sp, #36]	; 0x24
 80025f2:	2320      	movs	r3, #32
 80025f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025f8:	2330      	movs	r3, #48	; 0x30
 80025fa:	f04f 0901 	mov.w	r9, #1
 80025fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002602:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80027a8 <_svfiprintf_r+0x1ec>
 8002606:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800260a:	4623      	mov	r3, r4
 800260c:	469a      	mov	sl, r3
 800260e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002612:	b10a      	cbz	r2, 8002618 <_svfiprintf_r+0x5c>
 8002614:	2a25      	cmp	r2, #37	; 0x25
 8002616:	d1f9      	bne.n	800260c <_svfiprintf_r+0x50>
 8002618:	ebba 0b04 	subs.w	fp, sl, r4
 800261c:	d00b      	beq.n	8002636 <_svfiprintf_r+0x7a>
 800261e:	465b      	mov	r3, fp
 8002620:	4622      	mov	r2, r4
 8002622:	4629      	mov	r1, r5
 8002624:	4638      	mov	r0, r7
 8002626:	f7ff ff6d 	bl	8002504 <__ssputs_r>
 800262a:	3001      	adds	r0, #1
 800262c:	f000 80aa 	beq.w	8002784 <_svfiprintf_r+0x1c8>
 8002630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002632:	445a      	add	r2, fp
 8002634:	9209      	str	r2, [sp, #36]	; 0x24
 8002636:	f89a 3000 	ldrb.w	r3, [sl]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80a2 	beq.w	8002784 <_svfiprintf_r+0x1c8>
 8002640:	2300      	movs	r3, #0
 8002642:	f04f 32ff 	mov.w	r2, #4294967295
 8002646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800264a:	f10a 0a01 	add.w	sl, sl, #1
 800264e:	9304      	str	r3, [sp, #16]
 8002650:	9307      	str	r3, [sp, #28]
 8002652:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002656:	931a      	str	r3, [sp, #104]	; 0x68
 8002658:	4654      	mov	r4, sl
 800265a:	2205      	movs	r2, #5
 800265c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002660:	4851      	ldr	r0, [pc, #324]	; (80027a8 <_svfiprintf_r+0x1ec>)
 8002662:	f000 fa41 	bl	8002ae8 <memchr>
 8002666:	9a04      	ldr	r2, [sp, #16]
 8002668:	b9d8      	cbnz	r0, 80026a2 <_svfiprintf_r+0xe6>
 800266a:	06d0      	lsls	r0, r2, #27
 800266c:	bf44      	itt	mi
 800266e:	2320      	movmi	r3, #32
 8002670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002674:	0711      	lsls	r1, r2, #28
 8002676:	bf44      	itt	mi
 8002678:	232b      	movmi	r3, #43	; 0x2b
 800267a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800267e:	f89a 3000 	ldrb.w	r3, [sl]
 8002682:	2b2a      	cmp	r3, #42	; 0x2a
 8002684:	d015      	beq.n	80026b2 <_svfiprintf_r+0xf6>
 8002686:	4654      	mov	r4, sl
 8002688:	2000      	movs	r0, #0
 800268a:	f04f 0c0a 	mov.w	ip, #10
 800268e:	9a07      	ldr	r2, [sp, #28]
 8002690:	4621      	mov	r1, r4
 8002692:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002696:	3b30      	subs	r3, #48	; 0x30
 8002698:	2b09      	cmp	r3, #9
 800269a:	d94e      	bls.n	800273a <_svfiprintf_r+0x17e>
 800269c:	b1b0      	cbz	r0, 80026cc <_svfiprintf_r+0x110>
 800269e:	9207      	str	r2, [sp, #28]
 80026a0:	e014      	b.n	80026cc <_svfiprintf_r+0x110>
 80026a2:	eba0 0308 	sub.w	r3, r0, r8
 80026a6:	fa09 f303 	lsl.w	r3, r9, r3
 80026aa:	4313      	orrs	r3, r2
 80026ac:	46a2      	mov	sl, r4
 80026ae:	9304      	str	r3, [sp, #16]
 80026b0:	e7d2      	b.n	8002658 <_svfiprintf_r+0x9c>
 80026b2:	9b03      	ldr	r3, [sp, #12]
 80026b4:	1d19      	adds	r1, r3, #4
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	9103      	str	r1, [sp, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bfbb      	ittet	lt
 80026be:	425b      	neglt	r3, r3
 80026c0:	f042 0202 	orrlt.w	r2, r2, #2
 80026c4:	9307      	strge	r3, [sp, #28]
 80026c6:	9307      	strlt	r3, [sp, #28]
 80026c8:	bfb8      	it	lt
 80026ca:	9204      	strlt	r2, [sp, #16]
 80026cc:	7823      	ldrb	r3, [r4, #0]
 80026ce:	2b2e      	cmp	r3, #46	; 0x2e
 80026d0:	d10c      	bne.n	80026ec <_svfiprintf_r+0x130>
 80026d2:	7863      	ldrb	r3, [r4, #1]
 80026d4:	2b2a      	cmp	r3, #42	; 0x2a
 80026d6:	d135      	bne.n	8002744 <_svfiprintf_r+0x188>
 80026d8:	9b03      	ldr	r3, [sp, #12]
 80026da:	3402      	adds	r4, #2
 80026dc:	1d1a      	adds	r2, r3, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	9203      	str	r2, [sp, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bfb8      	it	lt
 80026e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80026ea:	9305      	str	r3, [sp, #20]
 80026ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80027ac <_svfiprintf_r+0x1f0>
 80026f0:	2203      	movs	r2, #3
 80026f2:	4650      	mov	r0, sl
 80026f4:	7821      	ldrb	r1, [r4, #0]
 80026f6:	f000 f9f7 	bl	8002ae8 <memchr>
 80026fa:	b140      	cbz	r0, 800270e <_svfiprintf_r+0x152>
 80026fc:	2340      	movs	r3, #64	; 0x40
 80026fe:	eba0 000a 	sub.w	r0, r0, sl
 8002702:	fa03 f000 	lsl.w	r0, r3, r0
 8002706:	9b04      	ldr	r3, [sp, #16]
 8002708:	3401      	adds	r4, #1
 800270a:	4303      	orrs	r3, r0
 800270c:	9304      	str	r3, [sp, #16]
 800270e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002712:	2206      	movs	r2, #6
 8002714:	4826      	ldr	r0, [pc, #152]	; (80027b0 <_svfiprintf_r+0x1f4>)
 8002716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800271a:	f000 f9e5 	bl	8002ae8 <memchr>
 800271e:	2800      	cmp	r0, #0
 8002720:	d038      	beq.n	8002794 <_svfiprintf_r+0x1d8>
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <_svfiprintf_r+0x1f8>)
 8002724:	bb1b      	cbnz	r3, 800276e <_svfiprintf_r+0x1b2>
 8002726:	9b03      	ldr	r3, [sp, #12]
 8002728:	3307      	adds	r3, #7
 800272a:	f023 0307 	bic.w	r3, r3, #7
 800272e:	3308      	adds	r3, #8
 8002730:	9303      	str	r3, [sp, #12]
 8002732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002734:	4433      	add	r3, r6
 8002736:	9309      	str	r3, [sp, #36]	; 0x24
 8002738:	e767      	b.n	800260a <_svfiprintf_r+0x4e>
 800273a:	460c      	mov	r4, r1
 800273c:	2001      	movs	r0, #1
 800273e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002742:	e7a5      	b.n	8002690 <_svfiprintf_r+0xd4>
 8002744:	2300      	movs	r3, #0
 8002746:	f04f 0c0a 	mov.w	ip, #10
 800274a:	4619      	mov	r1, r3
 800274c:	3401      	adds	r4, #1
 800274e:	9305      	str	r3, [sp, #20]
 8002750:	4620      	mov	r0, r4
 8002752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002756:	3a30      	subs	r2, #48	; 0x30
 8002758:	2a09      	cmp	r2, #9
 800275a:	d903      	bls.n	8002764 <_svfiprintf_r+0x1a8>
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0c5      	beq.n	80026ec <_svfiprintf_r+0x130>
 8002760:	9105      	str	r1, [sp, #20]
 8002762:	e7c3      	b.n	80026ec <_svfiprintf_r+0x130>
 8002764:	4604      	mov	r4, r0
 8002766:	2301      	movs	r3, #1
 8002768:	fb0c 2101 	mla	r1, ip, r1, r2
 800276c:	e7f0      	b.n	8002750 <_svfiprintf_r+0x194>
 800276e:	ab03      	add	r3, sp, #12
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	462a      	mov	r2, r5
 8002774:	4638      	mov	r0, r7
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <_svfiprintf_r+0x1fc>)
 8002778:	a904      	add	r1, sp, #16
 800277a:	f3af 8000 	nop.w
 800277e:	1c42      	adds	r2, r0, #1
 8002780:	4606      	mov	r6, r0
 8002782:	d1d6      	bne.n	8002732 <_svfiprintf_r+0x176>
 8002784:	89ab      	ldrh	r3, [r5, #12]
 8002786:	065b      	lsls	r3, r3, #25
 8002788:	f53f af2c 	bmi.w	80025e4 <_svfiprintf_r+0x28>
 800278c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800278e:	b01d      	add	sp, #116	; 0x74
 8002790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002794:	ab03      	add	r3, sp, #12
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	462a      	mov	r2, r5
 800279a:	4638      	mov	r0, r7
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <_svfiprintf_r+0x1fc>)
 800279e:	a904      	add	r1, sp, #16
 80027a0:	f000 f87c 	bl	800289c <_printf_i>
 80027a4:	e7eb      	b.n	800277e <_svfiprintf_r+0x1c2>
 80027a6:	bf00      	nop
 80027a8:	08002e2c 	.word	0x08002e2c
 80027ac:	08002e32 	.word	0x08002e32
 80027b0:	08002e36 	.word	0x08002e36
 80027b4:	00000000 	.word	0x00000000
 80027b8:	08002505 	.word	0x08002505

080027bc <_printf_common>:
 80027bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c0:	4616      	mov	r6, r2
 80027c2:	4699      	mov	r9, r3
 80027c4:	688a      	ldr	r2, [r1, #8]
 80027c6:	690b      	ldr	r3, [r1, #16]
 80027c8:	4607      	mov	r7, r0
 80027ca:	4293      	cmp	r3, r2
 80027cc:	bfb8      	it	lt
 80027ce:	4613      	movlt	r3, r2
 80027d0:	6033      	str	r3, [r6, #0]
 80027d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027d6:	460c      	mov	r4, r1
 80027d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027dc:	b10a      	cbz	r2, 80027e2 <_printf_common+0x26>
 80027de:	3301      	adds	r3, #1
 80027e0:	6033      	str	r3, [r6, #0]
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	0699      	lsls	r1, r3, #26
 80027e6:	bf42      	ittt	mi
 80027e8:	6833      	ldrmi	r3, [r6, #0]
 80027ea:	3302      	addmi	r3, #2
 80027ec:	6033      	strmi	r3, [r6, #0]
 80027ee:	6825      	ldr	r5, [r4, #0]
 80027f0:	f015 0506 	ands.w	r5, r5, #6
 80027f4:	d106      	bne.n	8002804 <_printf_common+0x48>
 80027f6:	f104 0a19 	add.w	sl, r4, #25
 80027fa:	68e3      	ldr	r3, [r4, #12]
 80027fc:	6832      	ldr	r2, [r6, #0]
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	42ab      	cmp	r3, r5
 8002802:	dc28      	bgt.n	8002856 <_printf_common+0x9a>
 8002804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002808:	1e13      	subs	r3, r2, #0
 800280a:	6822      	ldr	r2, [r4, #0]
 800280c:	bf18      	it	ne
 800280e:	2301      	movne	r3, #1
 8002810:	0692      	lsls	r2, r2, #26
 8002812:	d42d      	bmi.n	8002870 <_printf_common+0xb4>
 8002814:	4649      	mov	r1, r9
 8002816:	4638      	mov	r0, r7
 8002818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800281c:	47c0      	blx	r8
 800281e:	3001      	adds	r0, #1
 8002820:	d020      	beq.n	8002864 <_printf_common+0xa8>
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	68e5      	ldr	r5, [r4, #12]
 8002826:	f003 0306 	and.w	r3, r3, #6
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf18      	it	ne
 800282e:	2500      	movne	r5, #0
 8002830:	6832      	ldr	r2, [r6, #0]
 8002832:	f04f 0600 	mov.w	r6, #0
 8002836:	68a3      	ldr	r3, [r4, #8]
 8002838:	bf08      	it	eq
 800283a:	1aad      	subeq	r5, r5, r2
 800283c:	6922      	ldr	r2, [r4, #16]
 800283e:	bf08      	it	eq
 8002840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002844:	4293      	cmp	r3, r2
 8002846:	bfc4      	itt	gt
 8002848:	1a9b      	subgt	r3, r3, r2
 800284a:	18ed      	addgt	r5, r5, r3
 800284c:	341a      	adds	r4, #26
 800284e:	42b5      	cmp	r5, r6
 8002850:	d11a      	bne.n	8002888 <_printf_common+0xcc>
 8002852:	2000      	movs	r0, #0
 8002854:	e008      	b.n	8002868 <_printf_common+0xac>
 8002856:	2301      	movs	r3, #1
 8002858:	4652      	mov	r2, sl
 800285a:	4649      	mov	r1, r9
 800285c:	4638      	mov	r0, r7
 800285e:	47c0      	blx	r8
 8002860:	3001      	adds	r0, #1
 8002862:	d103      	bne.n	800286c <_printf_common+0xb0>
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800286c:	3501      	adds	r5, #1
 800286e:	e7c4      	b.n	80027fa <_printf_common+0x3e>
 8002870:	2030      	movs	r0, #48	; 0x30
 8002872:	18e1      	adds	r1, r4, r3
 8002874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800287e:	4422      	add	r2, r4
 8002880:	3302      	adds	r3, #2
 8002882:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002886:	e7c5      	b.n	8002814 <_printf_common+0x58>
 8002888:	2301      	movs	r3, #1
 800288a:	4622      	mov	r2, r4
 800288c:	4649      	mov	r1, r9
 800288e:	4638      	mov	r0, r7
 8002890:	47c0      	blx	r8
 8002892:	3001      	adds	r0, #1
 8002894:	d0e6      	beq.n	8002864 <_printf_common+0xa8>
 8002896:	3601      	adds	r6, #1
 8002898:	e7d9      	b.n	800284e <_printf_common+0x92>
	...

0800289c <_printf_i>:
 800289c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028a0:	7e0f      	ldrb	r7, [r1, #24]
 80028a2:	4691      	mov	r9, r2
 80028a4:	2f78      	cmp	r7, #120	; 0x78
 80028a6:	4680      	mov	r8, r0
 80028a8:	460c      	mov	r4, r1
 80028aa:	469a      	mov	sl, r3
 80028ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028b2:	d807      	bhi.n	80028c4 <_printf_i+0x28>
 80028b4:	2f62      	cmp	r7, #98	; 0x62
 80028b6:	d80a      	bhi.n	80028ce <_printf_i+0x32>
 80028b8:	2f00      	cmp	r7, #0
 80028ba:	f000 80d9 	beq.w	8002a70 <_printf_i+0x1d4>
 80028be:	2f58      	cmp	r7, #88	; 0x58
 80028c0:	f000 80a4 	beq.w	8002a0c <_printf_i+0x170>
 80028c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028cc:	e03a      	b.n	8002944 <_printf_i+0xa8>
 80028ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028d2:	2b15      	cmp	r3, #21
 80028d4:	d8f6      	bhi.n	80028c4 <_printf_i+0x28>
 80028d6:	a101      	add	r1, pc, #4	; (adr r1, 80028dc <_printf_i+0x40>)
 80028d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028dc:	08002935 	.word	0x08002935
 80028e0:	08002949 	.word	0x08002949
 80028e4:	080028c5 	.word	0x080028c5
 80028e8:	080028c5 	.word	0x080028c5
 80028ec:	080028c5 	.word	0x080028c5
 80028f0:	080028c5 	.word	0x080028c5
 80028f4:	08002949 	.word	0x08002949
 80028f8:	080028c5 	.word	0x080028c5
 80028fc:	080028c5 	.word	0x080028c5
 8002900:	080028c5 	.word	0x080028c5
 8002904:	080028c5 	.word	0x080028c5
 8002908:	08002a57 	.word	0x08002a57
 800290c:	08002979 	.word	0x08002979
 8002910:	08002a39 	.word	0x08002a39
 8002914:	080028c5 	.word	0x080028c5
 8002918:	080028c5 	.word	0x080028c5
 800291c:	08002a79 	.word	0x08002a79
 8002920:	080028c5 	.word	0x080028c5
 8002924:	08002979 	.word	0x08002979
 8002928:	080028c5 	.word	0x080028c5
 800292c:	080028c5 	.word	0x080028c5
 8002930:	08002a41 	.word	0x08002a41
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	1d1a      	adds	r2, r3, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	602a      	str	r2, [r5, #0]
 800293c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002944:	2301      	movs	r3, #1
 8002946:	e0a4      	b.n	8002a92 <_printf_i+0x1f6>
 8002948:	6820      	ldr	r0, [r4, #0]
 800294a:	6829      	ldr	r1, [r5, #0]
 800294c:	0606      	lsls	r6, r0, #24
 800294e:	f101 0304 	add.w	r3, r1, #4
 8002952:	d50a      	bpl.n	800296a <_printf_i+0xce>
 8002954:	680e      	ldr	r6, [r1, #0]
 8002956:	602b      	str	r3, [r5, #0]
 8002958:	2e00      	cmp	r6, #0
 800295a:	da03      	bge.n	8002964 <_printf_i+0xc8>
 800295c:	232d      	movs	r3, #45	; 0x2d
 800295e:	4276      	negs	r6, r6
 8002960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002964:	230a      	movs	r3, #10
 8002966:	485e      	ldr	r0, [pc, #376]	; (8002ae0 <_printf_i+0x244>)
 8002968:	e019      	b.n	800299e <_printf_i+0x102>
 800296a:	680e      	ldr	r6, [r1, #0]
 800296c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002970:	602b      	str	r3, [r5, #0]
 8002972:	bf18      	it	ne
 8002974:	b236      	sxthne	r6, r6
 8002976:	e7ef      	b.n	8002958 <_printf_i+0xbc>
 8002978:	682b      	ldr	r3, [r5, #0]
 800297a:	6820      	ldr	r0, [r4, #0]
 800297c:	1d19      	adds	r1, r3, #4
 800297e:	6029      	str	r1, [r5, #0]
 8002980:	0601      	lsls	r1, r0, #24
 8002982:	d501      	bpl.n	8002988 <_printf_i+0xec>
 8002984:	681e      	ldr	r6, [r3, #0]
 8002986:	e002      	b.n	800298e <_printf_i+0xf2>
 8002988:	0646      	lsls	r6, r0, #25
 800298a:	d5fb      	bpl.n	8002984 <_printf_i+0xe8>
 800298c:	881e      	ldrh	r6, [r3, #0]
 800298e:	2f6f      	cmp	r7, #111	; 0x6f
 8002990:	bf0c      	ite	eq
 8002992:	2308      	moveq	r3, #8
 8002994:	230a      	movne	r3, #10
 8002996:	4852      	ldr	r0, [pc, #328]	; (8002ae0 <_printf_i+0x244>)
 8002998:	2100      	movs	r1, #0
 800299a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800299e:	6865      	ldr	r5, [r4, #4]
 80029a0:	2d00      	cmp	r5, #0
 80029a2:	bfa8      	it	ge
 80029a4:	6821      	ldrge	r1, [r4, #0]
 80029a6:	60a5      	str	r5, [r4, #8]
 80029a8:	bfa4      	itt	ge
 80029aa:	f021 0104 	bicge.w	r1, r1, #4
 80029ae:	6021      	strge	r1, [r4, #0]
 80029b0:	b90e      	cbnz	r6, 80029b6 <_printf_i+0x11a>
 80029b2:	2d00      	cmp	r5, #0
 80029b4:	d04d      	beq.n	8002a52 <_printf_i+0x1b6>
 80029b6:	4615      	mov	r5, r2
 80029b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80029bc:	fb03 6711 	mls	r7, r3, r1, r6
 80029c0:	5dc7      	ldrb	r7, [r0, r7]
 80029c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029c6:	4637      	mov	r7, r6
 80029c8:	42bb      	cmp	r3, r7
 80029ca:	460e      	mov	r6, r1
 80029cc:	d9f4      	bls.n	80029b8 <_printf_i+0x11c>
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d10b      	bne.n	80029ea <_printf_i+0x14e>
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	07de      	lsls	r6, r3, #31
 80029d6:	d508      	bpl.n	80029ea <_printf_i+0x14e>
 80029d8:	6923      	ldr	r3, [r4, #16]
 80029da:	6861      	ldr	r1, [r4, #4]
 80029dc:	4299      	cmp	r1, r3
 80029de:	bfde      	ittt	le
 80029e0:	2330      	movle	r3, #48	; 0x30
 80029e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029ea:	1b52      	subs	r2, r2, r5
 80029ec:	6122      	str	r2, [r4, #16]
 80029ee:	464b      	mov	r3, r9
 80029f0:	4621      	mov	r1, r4
 80029f2:	4640      	mov	r0, r8
 80029f4:	f8cd a000 	str.w	sl, [sp]
 80029f8:	aa03      	add	r2, sp, #12
 80029fa:	f7ff fedf 	bl	80027bc <_printf_common>
 80029fe:	3001      	adds	r0, #1
 8002a00:	d14c      	bne.n	8002a9c <_printf_i+0x200>
 8002a02:	f04f 30ff 	mov.w	r0, #4294967295
 8002a06:	b004      	add	sp, #16
 8002a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a0c:	4834      	ldr	r0, [pc, #208]	; (8002ae0 <_printf_i+0x244>)
 8002a0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a12:	6829      	ldr	r1, [r5, #0]
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a1a:	6029      	str	r1, [r5, #0]
 8002a1c:	061d      	lsls	r5, r3, #24
 8002a1e:	d514      	bpl.n	8002a4a <_printf_i+0x1ae>
 8002a20:	07df      	lsls	r7, r3, #31
 8002a22:	bf44      	itt	mi
 8002a24:	f043 0320 	orrmi.w	r3, r3, #32
 8002a28:	6023      	strmi	r3, [r4, #0]
 8002a2a:	b91e      	cbnz	r6, 8002a34 <_printf_i+0x198>
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	f023 0320 	bic.w	r3, r3, #32
 8002a32:	6023      	str	r3, [r4, #0]
 8002a34:	2310      	movs	r3, #16
 8002a36:	e7af      	b.n	8002998 <_printf_i+0xfc>
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	f043 0320 	orr.w	r3, r3, #32
 8002a3e:	6023      	str	r3, [r4, #0]
 8002a40:	2378      	movs	r3, #120	; 0x78
 8002a42:	4828      	ldr	r0, [pc, #160]	; (8002ae4 <_printf_i+0x248>)
 8002a44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a48:	e7e3      	b.n	8002a12 <_printf_i+0x176>
 8002a4a:	0659      	lsls	r1, r3, #25
 8002a4c:	bf48      	it	mi
 8002a4e:	b2b6      	uxthmi	r6, r6
 8002a50:	e7e6      	b.n	8002a20 <_printf_i+0x184>
 8002a52:	4615      	mov	r5, r2
 8002a54:	e7bb      	b.n	80029ce <_printf_i+0x132>
 8002a56:	682b      	ldr	r3, [r5, #0]
 8002a58:	6826      	ldr	r6, [r4, #0]
 8002a5a:	1d18      	adds	r0, r3, #4
 8002a5c:	6961      	ldr	r1, [r4, #20]
 8002a5e:	6028      	str	r0, [r5, #0]
 8002a60:	0635      	lsls	r5, r6, #24
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	d501      	bpl.n	8002a6a <_printf_i+0x1ce>
 8002a66:	6019      	str	r1, [r3, #0]
 8002a68:	e002      	b.n	8002a70 <_printf_i+0x1d4>
 8002a6a:	0670      	lsls	r0, r6, #25
 8002a6c:	d5fb      	bpl.n	8002a66 <_printf_i+0x1ca>
 8002a6e:	8019      	strh	r1, [r3, #0]
 8002a70:	2300      	movs	r3, #0
 8002a72:	4615      	mov	r5, r2
 8002a74:	6123      	str	r3, [r4, #16]
 8002a76:	e7ba      	b.n	80029ee <_printf_i+0x152>
 8002a78:	682b      	ldr	r3, [r5, #0]
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	1d1a      	adds	r2, r3, #4
 8002a7e:	602a      	str	r2, [r5, #0]
 8002a80:	681d      	ldr	r5, [r3, #0]
 8002a82:	6862      	ldr	r2, [r4, #4]
 8002a84:	4628      	mov	r0, r5
 8002a86:	f000 f82f 	bl	8002ae8 <memchr>
 8002a8a:	b108      	cbz	r0, 8002a90 <_printf_i+0x1f4>
 8002a8c:	1b40      	subs	r0, r0, r5
 8002a8e:	6060      	str	r0, [r4, #4]
 8002a90:	6863      	ldr	r3, [r4, #4]
 8002a92:	6123      	str	r3, [r4, #16]
 8002a94:	2300      	movs	r3, #0
 8002a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a9a:	e7a8      	b.n	80029ee <_printf_i+0x152>
 8002a9c:	462a      	mov	r2, r5
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	4640      	mov	r0, r8
 8002aa2:	6923      	ldr	r3, [r4, #16]
 8002aa4:	47d0      	blx	sl
 8002aa6:	3001      	adds	r0, #1
 8002aa8:	d0ab      	beq.n	8002a02 <_printf_i+0x166>
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	079b      	lsls	r3, r3, #30
 8002aae:	d413      	bmi.n	8002ad8 <_printf_i+0x23c>
 8002ab0:	68e0      	ldr	r0, [r4, #12]
 8002ab2:	9b03      	ldr	r3, [sp, #12]
 8002ab4:	4298      	cmp	r0, r3
 8002ab6:	bfb8      	it	lt
 8002ab8:	4618      	movlt	r0, r3
 8002aba:	e7a4      	b.n	8002a06 <_printf_i+0x16a>
 8002abc:	2301      	movs	r3, #1
 8002abe:	4632      	mov	r2, r6
 8002ac0:	4649      	mov	r1, r9
 8002ac2:	4640      	mov	r0, r8
 8002ac4:	47d0      	blx	sl
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	d09b      	beq.n	8002a02 <_printf_i+0x166>
 8002aca:	3501      	adds	r5, #1
 8002acc:	68e3      	ldr	r3, [r4, #12]
 8002ace:	9903      	ldr	r1, [sp, #12]
 8002ad0:	1a5b      	subs	r3, r3, r1
 8002ad2:	42ab      	cmp	r3, r5
 8002ad4:	dcf2      	bgt.n	8002abc <_printf_i+0x220>
 8002ad6:	e7eb      	b.n	8002ab0 <_printf_i+0x214>
 8002ad8:	2500      	movs	r5, #0
 8002ada:	f104 0619 	add.w	r6, r4, #25
 8002ade:	e7f5      	b.n	8002acc <_printf_i+0x230>
 8002ae0:	08002e3d 	.word	0x08002e3d
 8002ae4:	08002e4e 	.word	0x08002e4e

08002ae8 <memchr>:
 8002ae8:	4603      	mov	r3, r0
 8002aea:	b510      	push	{r4, lr}
 8002aec:	b2c9      	uxtb	r1, r1
 8002aee:	4402      	add	r2, r0
 8002af0:	4293      	cmp	r3, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	d101      	bne.n	8002afa <memchr+0x12>
 8002af6:	2000      	movs	r0, #0
 8002af8:	e003      	b.n	8002b02 <memchr+0x1a>
 8002afa:	7804      	ldrb	r4, [r0, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	428c      	cmp	r4, r1
 8002b00:	d1f6      	bne.n	8002af0 <memchr+0x8>
 8002b02:	bd10      	pop	{r4, pc}

08002b04 <memcpy>:
 8002b04:	440a      	add	r2, r1
 8002b06:	4291      	cmp	r1, r2
 8002b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b0c:	d100      	bne.n	8002b10 <memcpy+0xc>
 8002b0e:	4770      	bx	lr
 8002b10:	b510      	push	{r4, lr}
 8002b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b16:	4291      	cmp	r1, r2
 8002b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b1c:	d1f9      	bne.n	8002b12 <memcpy+0xe>
 8002b1e:	bd10      	pop	{r4, pc}

08002b20 <memmove>:
 8002b20:	4288      	cmp	r0, r1
 8002b22:	b510      	push	{r4, lr}
 8002b24:	eb01 0402 	add.w	r4, r1, r2
 8002b28:	d902      	bls.n	8002b30 <memmove+0x10>
 8002b2a:	4284      	cmp	r4, r0
 8002b2c:	4623      	mov	r3, r4
 8002b2e:	d807      	bhi.n	8002b40 <memmove+0x20>
 8002b30:	1e43      	subs	r3, r0, #1
 8002b32:	42a1      	cmp	r1, r4
 8002b34:	d008      	beq.n	8002b48 <memmove+0x28>
 8002b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b3e:	e7f8      	b.n	8002b32 <memmove+0x12>
 8002b40:	4601      	mov	r1, r0
 8002b42:	4402      	add	r2, r0
 8002b44:	428a      	cmp	r2, r1
 8002b46:	d100      	bne.n	8002b4a <memmove+0x2a>
 8002b48:	bd10      	pop	{r4, pc}
 8002b4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b52:	e7f7      	b.n	8002b44 <memmove+0x24>

08002b54 <_free_r>:
 8002b54:	b538      	push	{r3, r4, r5, lr}
 8002b56:	4605      	mov	r5, r0
 8002b58:	2900      	cmp	r1, #0
 8002b5a:	d040      	beq.n	8002bde <_free_r+0x8a>
 8002b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b60:	1f0c      	subs	r4, r1, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bfb8      	it	lt
 8002b66:	18e4      	addlt	r4, r4, r3
 8002b68:	f000 f910 	bl	8002d8c <__malloc_lock>
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <_free_r+0x8c>)
 8002b6e:	6813      	ldr	r3, [r2, #0]
 8002b70:	b933      	cbnz	r3, 8002b80 <_free_r+0x2c>
 8002b72:	6063      	str	r3, [r4, #4]
 8002b74:	6014      	str	r4, [r2, #0]
 8002b76:	4628      	mov	r0, r5
 8002b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b7c:	f000 b90c 	b.w	8002d98 <__malloc_unlock>
 8002b80:	42a3      	cmp	r3, r4
 8002b82:	d908      	bls.n	8002b96 <_free_r+0x42>
 8002b84:	6820      	ldr	r0, [r4, #0]
 8002b86:	1821      	adds	r1, r4, r0
 8002b88:	428b      	cmp	r3, r1
 8002b8a:	bf01      	itttt	eq
 8002b8c:	6819      	ldreq	r1, [r3, #0]
 8002b8e:	685b      	ldreq	r3, [r3, #4]
 8002b90:	1809      	addeq	r1, r1, r0
 8002b92:	6021      	streq	r1, [r4, #0]
 8002b94:	e7ed      	b.n	8002b72 <_free_r+0x1e>
 8002b96:	461a      	mov	r2, r3
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	b10b      	cbz	r3, 8002ba0 <_free_r+0x4c>
 8002b9c:	42a3      	cmp	r3, r4
 8002b9e:	d9fa      	bls.n	8002b96 <_free_r+0x42>
 8002ba0:	6811      	ldr	r1, [r2, #0]
 8002ba2:	1850      	adds	r0, r2, r1
 8002ba4:	42a0      	cmp	r0, r4
 8002ba6:	d10b      	bne.n	8002bc0 <_free_r+0x6c>
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	4401      	add	r1, r0
 8002bac:	1850      	adds	r0, r2, r1
 8002bae:	4283      	cmp	r3, r0
 8002bb0:	6011      	str	r1, [r2, #0]
 8002bb2:	d1e0      	bne.n	8002b76 <_free_r+0x22>
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4401      	add	r1, r0
 8002bba:	6011      	str	r1, [r2, #0]
 8002bbc:	6053      	str	r3, [r2, #4]
 8002bbe:	e7da      	b.n	8002b76 <_free_r+0x22>
 8002bc0:	d902      	bls.n	8002bc8 <_free_r+0x74>
 8002bc2:	230c      	movs	r3, #12
 8002bc4:	602b      	str	r3, [r5, #0]
 8002bc6:	e7d6      	b.n	8002b76 <_free_r+0x22>
 8002bc8:	6820      	ldr	r0, [r4, #0]
 8002bca:	1821      	adds	r1, r4, r0
 8002bcc:	428b      	cmp	r3, r1
 8002bce:	bf01      	itttt	eq
 8002bd0:	6819      	ldreq	r1, [r3, #0]
 8002bd2:	685b      	ldreq	r3, [r3, #4]
 8002bd4:	1809      	addeq	r1, r1, r0
 8002bd6:	6021      	streq	r1, [r4, #0]
 8002bd8:	6063      	str	r3, [r4, #4]
 8002bda:	6054      	str	r4, [r2, #4]
 8002bdc:	e7cb      	b.n	8002b76 <_free_r+0x22>
 8002bde:	bd38      	pop	{r3, r4, r5, pc}
 8002be0:	200000f0 	.word	0x200000f0

08002be4 <sbrk_aligned>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	4e0e      	ldr	r6, [pc, #56]	; (8002c20 <sbrk_aligned+0x3c>)
 8002be8:	460c      	mov	r4, r1
 8002bea:	6831      	ldr	r1, [r6, #0]
 8002bec:	4605      	mov	r5, r0
 8002bee:	b911      	cbnz	r1, 8002bf6 <sbrk_aligned+0x12>
 8002bf0:	f000 f8bc 	bl	8002d6c <_sbrk_r>
 8002bf4:	6030      	str	r0, [r6, #0]
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	f000 f8b7 	bl	8002d6c <_sbrk_r>
 8002bfe:	1c43      	adds	r3, r0, #1
 8002c00:	d00a      	beq.n	8002c18 <sbrk_aligned+0x34>
 8002c02:	1cc4      	adds	r4, r0, #3
 8002c04:	f024 0403 	bic.w	r4, r4, #3
 8002c08:	42a0      	cmp	r0, r4
 8002c0a:	d007      	beq.n	8002c1c <sbrk_aligned+0x38>
 8002c0c:	1a21      	subs	r1, r4, r0
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f000 f8ac 	bl	8002d6c <_sbrk_r>
 8002c14:	3001      	adds	r0, #1
 8002c16:	d101      	bne.n	8002c1c <sbrk_aligned+0x38>
 8002c18:	f04f 34ff 	mov.w	r4, #4294967295
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
 8002c20:	200000f4 	.word	0x200000f4

08002c24 <_malloc_r>:
 8002c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c28:	1ccd      	adds	r5, r1, #3
 8002c2a:	f025 0503 	bic.w	r5, r5, #3
 8002c2e:	3508      	adds	r5, #8
 8002c30:	2d0c      	cmp	r5, #12
 8002c32:	bf38      	it	cc
 8002c34:	250c      	movcc	r5, #12
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	4607      	mov	r7, r0
 8002c3a:	db01      	blt.n	8002c40 <_malloc_r+0x1c>
 8002c3c:	42a9      	cmp	r1, r5
 8002c3e:	d905      	bls.n	8002c4c <_malloc_r+0x28>
 8002c40:	230c      	movs	r3, #12
 8002c42:	2600      	movs	r6, #0
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4630      	mov	r0, r6
 8002c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c4c:	4e2e      	ldr	r6, [pc, #184]	; (8002d08 <_malloc_r+0xe4>)
 8002c4e:	f000 f89d 	bl	8002d8c <__malloc_lock>
 8002c52:	6833      	ldr	r3, [r6, #0]
 8002c54:	461c      	mov	r4, r3
 8002c56:	bb34      	cbnz	r4, 8002ca6 <_malloc_r+0x82>
 8002c58:	4629      	mov	r1, r5
 8002c5a:	4638      	mov	r0, r7
 8002c5c:	f7ff ffc2 	bl	8002be4 <sbrk_aligned>
 8002c60:	1c43      	adds	r3, r0, #1
 8002c62:	4604      	mov	r4, r0
 8002c64:	d14d      	bne.n	8002d02 <_malloc_r+0xde>
 8002c66:	6834      	ldr	r4, [r6, #0]
 8002c68:	4626      	mov	r6, r4
 8002c6a:	2e00      	cmp	r6, #0
 8002c6c:	d140      	bne.n	8002cf0 <_malloc_r+0xcc>
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	4631      	mov	r1, r6
 8002c72:	4638      	mov	r0, r7
 8002c74:	eb04 0803 	add.w	r8, r4, r3
 8002c78:	f000 f878 	bl	8002d6c <_sbrk_r>
 8002c7c:	4580      	cmp	r8, r0
 8002c7e:	d13a      	bne.n	8002cf6 <_malloc_r+0xd2>
 8002c80:	6821      	ldr	r1, [r4, #0]
 8002c82:	3503      	adds	r5, #3
 8002c84:	1a6d      	subs	r5, r5, r1
 8002c86:	f025 0503 	bic.w	r5, r5, #3
 8002c8a:	3508      	adds	r5, #8
 8002c8c:	2d0c      	cmp	r5, #12
 8002c8e:	bf38      	it	cc
 8002c90:	250c      	movcc	r5, #12
 8002c92:	4638      	mov	r0, r7
 8002c94:	4629      	mov	r1, r5
 8002c96:	f7ff ffa5 	bl	8002be4 <sbrk_aligned>
 8002c9a:	3001      	adds	r0, #1
 8002c9c:	d02b      	beq.n	8002cf6 <_malloc_r+0xd2>
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	442b      	add	r3, r5
 8002ca2:	6023      	str	r3, [r4, #0]
 8002ca4:	e00e      	b.n	8002cc4 <_malloc_r+0xa0>
 8002ca6:	6822      	ldr	r2, [r4, #0]
 8002ca8:	1b52      	subs	r2, r2, r5
 8002caa:	d41e      	bmi.n	8002cea <_malloc_r+0xc6>
 8002cac:	2a0b      	cmp	r2, #11
 8002cae:	d916      	bls.n	8002cde <_malloc_r+0xba>
 8002cb0:	1961      	adds	r1, r4, r5
 8002cb2:	42a3      	cmp	r3, r4
 8002cb4:	6025      	str	r5, [r4, #0]
 8002cb6:	bf18      	it	ne
 8002cb8:	6059      	strne	r1, [r3, #4]
 8002cba:	6863      	ldr	r3, [r4, #4]
 8002cbc:	bf08      	it	eq
 8002cbe:	6031      	streq	r1, [r6, #0]
 8002cc0:	5162      	str	r2, [r4, r5]
 8002cc2:	604b      	str	r3, [r1, #4]
 8002cc4:	4638      	mov	r0, r7
 8002cc6:	f104 060b 	add.w	r6, r4, #11
 8002cca:	f000 f865 	bl	8002d98 <__malloc_unlock>
 8002cce:	f026 0607 	bic.w	r6, r6, #7
 8002cd2:	1d23      	adds	r3, r4, #4
 8002cd4:	1af2      	subs	r2, r6, r3
 8002cd6:	d0b6      	beq.n	8002c46 <_malloc_r+0x22>
 8002cd8:	1b9b      	subs	r3, r3, r6
 8002cda:	50a3      	str	r3, [r4, r2]
 8002cdc:	e7b3      	b.n	8002c46 <_malloc_r+0x22>
 8002cde:	6862      	ldr	r2, [r4, #4]
 8002ce0:	42a3      	cmp	r3, r4
 8002ce2:	bf0c      	ite	eq
 8002ce4:	6032      	streq	r2, [r6, #0]
 8002ce6:	605a      	strne	r2, [r3, #4]
 8002ce8:	e7ec      	b.n	8002cc4 <_malloc_r+0xa0>
 8002cea:	4623      	mov	r3, r4
 8002cec:	6864      	ldr	r4, [r4, #4]
 8002cee:	e7b2      	b.n	8002c56 <_malloc_r+0x32>
 8002cf0:	4634      	mov	r4, r6
 8002cf2:	6876      	ldr	r6, [r6, #4]
 8002cf4:	e7b9      	b.n	8002c6a <_malloc_r+0x46>
 8002cf6:	230c      	movs	r3, #12
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	f000 f84c 	bl	8002d98 <__malloc_unlock>
 8002d00:	e7a1      	b.n	8002c46 <_malloc_r+0x22>
 8002d02:	6025      	str	r5, [r4, #0]
 8002d04:	e7de      	b.n	8002cc4 <_malloc_r+0xa0>
 8002d06:	bf00      	nop
 8002d08:	200000f0 	.word	0x200000f0

08002d0c <_realloc_r>:
 8002d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d10:	4680      	mov	r8, r0
 8002d12:	4614      	mov	r4, r2
 8002d14:	460e      	mov	r6, r1
 8002d16:	b921      	cbnz	r1, 8002d22 <_realloc_r+0x16>
 8002d18:	4611      	mov	r1, r2
 8002d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d1e:	f7ff bf81 	b.w	8002c24 <_malloc_r>
 8002d22:	b92a      	cbnz	r2, 8002d30 <_realloc_r+0x24>
 8002d24:	f7ff ff16 	bl	8002b54 <_free_r>
 8002d28:	4625      	mov	r5, r4
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d30:	f000 f838 	bl	8002da4 <_malloc_usable_size_r>
 8002d34:	4284      	cmp	r4, r0
 8002d36:	4607      	mov	r7, r0
 8002d38:	d802      	bhi.n	8002d40 <_realloc_r+0x34>
 8002d3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002d3e:	d812      	bhi.n	8002d66 <_realloc_r+0x5a>
 8002d40:	4621      	mov	r1, r4
 8002d42:	4640      	mov	r0, r8
 8002d44:	f7ff ff6e 	bl	8002c24 <_malloc_r>
 8002d48:	4605      	mov	r5, r0
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d0ed      	beq.n	8002d2a <_realloc_r+0x1e>
 8002d4e:	42bc      	cmp	r4, r7
 8002d50:	4622      	mov	r2, r4
 8002d52:	4631      	mov	r1, r6
 8002d54:	bf28      	it	cs
 8002d56:	463a      	movcs	r2, r7
 8002d58:	f7ff fed4 	bl	8002b04 <memcpy>
 8002d5c:	4631      	mov	r1, r6
 8002d5e:	4640      	mov	r0, r8
 8002d60:	f7ff fef8 	bl	8002b54 <_free_r>
 8002d64:	e7e1      	b.n	8002d2a <_realloc_r+0x1e>
 8002d66:	4635      	mov	r5, r6
 8002d68:	e7df      	b.n	8002d2a <_realloc_r+0x1e>
	...

08002d6c <_sbrk_r>:
 8002d6c:	b538      	push	{r3, r4, r5, lr}
 8002d6e:	2300      	movs	r3, #0
 8002d70:	4d05      	ldr	r5, [pc, #20]	; (8002d88 <_sbrk_r+0x1c>)
 8002d72:	4604      	mov	r4, r0
 8002d74:	4608      	mov	r0, r1
 8002d76:	602b      	str	r3, [r5, #0]
 8002d78:	f7fe f956 	bl	8001028 <_sbrk>
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d102      	bne.n	8002d86 <_sbrk_r+0x1a>
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	b103      	cbz	r3, 8002d86 <_sbrk_r+0x1a>
 8002d84:	6023      	str	r3, [r4, #0]
 8002d86:	bd38      	pop	{r3, r4, r5, pc}
 8002d88:	200000f8 	.word	0x200000f8

08002d8c <__malloc_lock>:
 8002d8c:	4801      	ldr	r0, [pc, #4]	; (8002d94 <__malloc_lock+0x8>)
 8002d8e:	f000 b811 	b.w	8002db4 <__retarget_lock_acquire_recursive>
 8002d92:	bf00      	nop
 8002d94:	200000fc 	.word	0x200000fc

08002d98 <__malloc_unlock>:
 8002d98:	4801      	ldr	r0, [pc, #4]	; (8002da0 <__malloc_unlock+0x8>)
 8002d9a:	f000 b80c 	b.w	8002db6 <__retarget_lock_release_recursive>
 8002d9e:	bf00      	nop
 8002da0:	200000fc 	.word	0x200000fc

08002da4 <_malloc_usable_size_r>:
 8002da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002da8:	1f18      	subs	r0, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bfbc      	itt	lt
 8002dae:	580b      	ldrlt	r3, [r1, r0]
 8002db0:	18c0      	addlt	r0, r0, r3
 8002db2:	4770      	bx	lr

08002db4 <__retarget_lock_acquire_recursive>:
 8002db4:	4770      	bx	lr

08002db6 <__retarget_lock_release_recursive>:
 8002db6:	4770      	bx	lr

08002db8 <_init>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr

08002dc4 <_fini>:
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc6:	bf00      	nop
 8002dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dca:	bc08      	pop	{r3}
 8002dcc:	469e      	mov	lr, r3
 8002dce:	4770      	bx	lr
