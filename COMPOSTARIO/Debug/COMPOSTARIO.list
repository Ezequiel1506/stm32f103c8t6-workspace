
COMPOSTARIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  080071f0  080071f0  000171f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800768c  0800768c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800768c  0800768c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800768c  0800768c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800768c  0800768c  0001768c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001ec  08007880  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08007880  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca38  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021db  00000000  00000000  0002cc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0002ee28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  0002fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001944e  00000000  00000000  00030960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef00  00000000  00000000  00049dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b60  00000000  00000000  00058cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e980e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc0  00000000  00000000  000e9860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	080071d8 	.word	0x080071d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	080071d8 	.word	0x080071d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <delay+0x2c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8001076:	bf00      	nop
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <delay+0x2c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	429a      	cmp	r2, r3
 8001082:	d3f9      	bcc.n	8001078 <delay+0x14>
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	20000238 	.word	0x20000238

08001094 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	4820      	ldr	r0, [pc, #128]	; (800112c <send_to_lcd+0x98>)
 80010ac:	f001 ff61 	bl	8002f72 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	2108      	movs	r1, #8
 80010c0:	481a      	ldr	r0, [pc, #104]	; (800112c <send_to_lcd+0x98>)
 80010c2:	f001 ff56 	bl	8002f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	2110      	movs	r1, #16
 80010d6:	4815      	ldr	r0, [pc, #84]	; (800112c <send_to_lcd+0x98>)
 80010d8:	f001 ff4b 	bl	8002f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	085b      	lsrs	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	2120      	movs	r1, #32
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <send_to_lcd+0x98>)
 80010ee:	f001 ff40 	bl	8002f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <send_to_lcd+0x98>)
 8001100:	f001 ff37 	bl	8002f72 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <send_to_lcd+0x98>)
 800110a:	f001 ff32 	bl	8002f72 <HAL_GPIO_WritePin>
	delay (20);
 800110e:	2014      	movs	r0, #20
 8001110:	f7ff ffa8 	bl	8001064 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <send_to_lcd+0x98>)
 800111a:	f001 ff2a 	bl	8002f72 <HAL_GPIO_WritePin>
	delay (20);
 800111e:	2014      	movs	r0, #20
 8001120:	f7ff ffa0 	bl	8001064 <delay>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40010c00 	.word	0x40010c00

08001130 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ffa5 	bl	8001094 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff9c 	bl	8001094 <send_to_lcd>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2101      	movs	r1, #1
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff8b 	bl	8001094 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2101      	movs	r1, #1
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff82 	bl	8001094 <send_to_lcd>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <lcd_clear>:

void lcd_clear (void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff ffc7 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(2);
 80011a2:	2002      	movs	r0, #2
 80011a4:	f000 ffea 	bl	800217c <HAL_Delay>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    switch (row)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <lcd_put_cur+0x18>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d005      	beq.n	80011ce <lcd_put_cur+0x22>
 80011c2:	e009      	b.n	80011d8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ca:	603b      	str	r3, [r7, #0]
            break;
 80011cc:	e004      	b.n	80011d8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011d4:	603b      	str	r3, [r7, #0]
            break;
 80011d6:	bf00      	nop
    }

    lcd_send_cmd (col);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ffa7 	bl	8001130 <lcd_send_cmd>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <lcd_init>:


void lcd_init (void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80011ee:	2032      	movs	r0, #50	; 0x32
 80011f0:	f000 ffc4 	bl	800217c <HAL_Delay>
	lcd_send_cmd (0x30);
 80011f4:	2030      	movs	r0, #48	; 0x30
 80011f6:	f7ff ff9b 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80011fa:	2005      	movs	r0, #5
 80011fc:	f000 ffbe 	bl	800217c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001200:	2030      	movs	r0, #48	; 0x30
 8001202:	f7ff ff95 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001206:	2001      	movs	r0, #1
 8001208:	f000 ffb8 	bl	800217c <HAL_Delay>
	lcd_send_cmd (0x30);
 800120c:	2030      	movs	r0, #48	; 0x30
 800120e:	f7ff ff8f 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f000 ffb2 	bl	800217c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001218:	2020      	movs	r0, #32
 800121a:	f7ff ff89 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(10);
 800121e:	200a      	movs	r0, #10
 8001220:	f000 ffac 	bl	800217c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001224:	2028      	movs	r0, #40	; 0x28
 8001226:	f7ff ff83 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f000 ffa6 	bl	800217c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001230:	2008      	movs	r0, #8
 8001232:	f7ff ff7d 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f000 ffa0 	bl	800217c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff ff77 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f000 ff9a 	bl	800217c <HAL_Delay>
	HAL_Delay(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f000 ff97 	bl	800217c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800124e:	2006      	movs	r0, #6
 8001250:	f7ff ff6e 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f000 ff91 	bl	800217c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800125a:	200c      	movs	r0, #12
 800125c:	f7ff ff68 	bl	8001130 <lcd_send_cmd>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800126c:	e006      	b.n	800127c <lcd_send_string+0x18>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff74 	bl	8001164 <lcd_send_data>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f4      	bne.n	800126e <lcd_send_string+0xa>
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <measure_distance>:
//uint32_t Value1 = 0;				//ORIGINAL
//uint32_t Value2 = 0;				//ORIGINAL
//uint16_t Distance  = 0;			//ORIGINAL


uint16_t measure_distance() {
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
	uint32_t pMillis = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
	uint32_t Value1 = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
	uint32_t Value2 = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
	uint16_t Distance = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ac:	4838      	ldr	r0, [pc, #224]	; (8001390 <measure_distance+0x100>)
 80012ae:	f001 fe60 	bl	8002f72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b8:	4835      	ldr	r0, [pc, #212]	; (8001390 <measure_distance+0x100>)
 80012ba:	f001 fe5a 	bl	8002f72 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80012be:	4b35      	ldr	r3, [pc, #212]	; (8001394 <measure_distance+0x104>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&timer) < 10);  // wait for 10 us
 80012c6:	bf00      	nop
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <measure_distance+0x104>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	2b09      	cmp	r3, #9
 80012d0:	d9fa      	bls.n	80012c8 <measure_distance+0x38>
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d8:	482d      	ldr	r0, [pc, #180]	; (8001390 <measure_distance+0x100>)
 80012da:	f001 fe4a 	bl	8002f72 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80012de:	f000 ff43 	bl	8002168 <HAL_GetTick>
 80012e2:	60f8      	str	r0, [r7, #12]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&& pMillis + 10 > HAL_GetTick());
 80012e4:	bf00      	nop
 80012e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ea:	4829      	ldr	r0, [pc, #164]	; (8001390 <measure_distance+0x100>)
 80012ec:	f001 fe2a 	bl	8002f44 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d107      	bne.n	8001306 <measure_distance+0x76>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f103 040a 	add.w	r4, r3, #10
 80012fc:	f000 ff34 	bl	8002168 <HAL_GetTick>
 8001300:	4603      	mov	r3, r0
 8001302:	429c      	cmp	r4, r3
 8001304:	d8ef      	bhi.n	80012e6 <measure_distance+0x56>
		Value1 = __HAL_TIM_GET_COUNTER(&timer);
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <measure_distance+0x104>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	60bb      	str	r3, [r7, #8]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800130e:	f000 ff2b 	bl	8002168 <HAL_GetTick>
 8001312:	60f8      	str	r0, [r7, #12]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&& pMillis + 50 > HAL_GetTick());
 8001314:	bf00      	nop
 8001316:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131a:	481d      	ldr	r0, [pc, #116]	; (8001390 <measure_distance+0x100>)
 800131c:	f001 fe12 	bl	8002f44 <HAL_GPIO_ReadPin>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <measure_distance+0xa6>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800132c:	f000 ff1c 	bl	8002168 <HAL_GetTick>
 8001330:	4603      	mov	r3, r0
 8001332:	429c      	cmp	r4, r3
 8001334:	d8ef      	bhi.n	8001316 <measure_distance+0x86>
		Value2 = __HAL_TIM_GET_COUNTER(&timer);
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <measure_distance+0x104>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	607b      	str	r3, [r7, #4]

	Distance = (Value2 - Value1) * 0.034 / 2;
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f84d 	bl	80003e4 <__aeabi_ui2d>
 800134a:	a30f      	add	r3, pc, #60	; (adr r3, 8001388 <measure_distance+0xf8>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff f8c2 	bl	80004d8 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001364:	f7ff f9e2 	bl	800072c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fb8a 	bl	8000a88 <__aeabi_d2uiz>
 8001374:	4603      	mov	r3, r0
 8001376:	807b      	strh	r3, [r7, #2]
	HAL_Delay(50);
 8001378:	2032      	movs	r0, #50	; 0x32
 800137a:	f000 feff 	bl	800217c <HAL_Delay>

	return Distance;
 800137e:	887b      	ldrh	r3, [r7, #2]

}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	b020c49c 	.word	0xb020c49c
 800138c:	3fa16872 	.word	0x3fa16872
 8001390:	40010c00 	.word	0x40010c00
 8001394:	20000238 	.word	0x20000238

08001398 <ADC_Select_CH1>:
HUMTypeDef hum_t;

char AT[20]="temp=\"Ezequiel\"\r\n";


void ADC_Select_CH1 (void){
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <ADC_Select_CH1+0x38>)
 80013ba:	f001 f9c7 	bl	800274c <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 80013c4:	f000 fb30 	bl	8001a28 <Error_Handler>
	  }
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000208 	.word	0x20000208

080013d4 <ADC_Select_CH2>:

void ADC_Select_CH2 (void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_2;
 80013e4:	2302      	movs	r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <ADC_Select_CH2+0x38>)
 80013f6:	f001 f9a9 	bl	800274c <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 8001400:	f000 fb12 	bl	8001a28 <Error_Handler>
	  }
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000208 	.word	0x20000208

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001416:	f000 fe4f 	bl	80020b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141a:	f000 f961 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141e:	f000 fa91 	bl	8001944 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001422:	f000 fa15 	bl	8001850 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001426:	f000 f9b7 	bl	8001798 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800142a:	f000 fa61 	bl	80018f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800142e:	488e      	ldr	r0, [pc, #568]	; (8001668 <main+0x258>)
 8001430:	f002 fb98 	bl	8003b64 <HAL_TIM_Base_Start>


  lcd_init();
 8001434:	f7ff fed9 	bl	80011ea <lcd_init>
  lcd_put_cur(0, 2);
 8001438:	2102      	movs	r1, #2
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff feb6 	bl	80011ac <lcd_put_cur>
  lcd_send_string("COMPOSTARIO!");
 8001440:	488a      	ldr	r0, [pc, #552]	; (800166c <main+0x25c>)
 8001442:	f7ff ff0f 	bl	8001264 <lcd_send_string>
  HAL_Delay(3000);
 8001446:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800144a:	f000 fe97 	bl	800217c <HAL_Delay>
  lcd_clear();
 800144e:	f7ff fea3 	bl	8001198 <lcd_clear>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Leen los ADC
	  ADC_Select_CH1();
 8001452:	f7ff ffa1 	bl	8001398 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8001456:	4886      	ldr	r0, [pc, #536]	; (8001670 <main+0x260>)
 8001458:	f000 ff8c 	bl	8002374 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800145c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001460:	4883      	ldr	r0, [pc, #524]	; (8001670 <main+0x260>)
 8001462:	f001 f861 	bl	8002528 <HAL_ADC_PollForConversion>
	  humidity_adc=HAL_ADC_GetValue(&hadc1);
 8001466:	4882      	ldr	r0, [pc, #520]	; (8001670 <main+0x260>)
 8001468:	f001 f964 	bl	8002734 <HAL_ADC_GetValue>
 800146c:	4603      	mov	r3, r0
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b80      	ldr	r3, [pc, #512]	; (8001674 <main+0x264>)
 8001472:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8001474:	487e      	ldr	r0, [pc, #504]	; (8001670 <main+0x260>)
 8001476:	f001 f82b 	bl	80024d0 <HAL_ADC_Stop>

	  ADC_Select_CH2();
 800147a:	f7ff ffab 	bl	80013d4 <ADC_Select_CH2>
	  HAL_ADC_Start(&hadc1);
 800147e:	487c      	ldr	r0, [pc, #496]	; (8001670 <main+0x260>)
 8001480:	f000 ff78 	bl	8002374 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001484:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001488:	4879      	ldr	r0, [pc, #484]	; (8001670 <main+0x260>)
 800148a:	f001 f84d 	bl	8002528 <HAL_ADC_PollForConversion>
	  temperature_adc=HAL_ADC_GetValue(&hadc1);
 800148e:	4878      	ldr	r0, [pc, #480]	; (8001670 <main+0x260>)
 8001490:	f001 f950 	bl	8002734 <HAL_ADC_GetValue>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b77      	ldr	r3, [pc, #476]	; (8001678 <main+0x268>)
 800149a:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 800149c:	4874      	ldr	r0, [pc, #464]	; (8001670 <main+0x260>)
 800149e:	f001 f817 	bl	80024d0 <HAL_ADC_Stop>
//	  HAL_ADC_Start(&hadc1);
//	  HAL_ADC_PollForConversion(&hadc1, 1000);
//	  sun_adc=HAL_ADC_GetValue(&hadc1);
//	  HAL_ADC_Stop(&hadc1);

	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){
 80014a2:	2140      	movs	r1, #64	; 0x40
 80014a4:	4875      	ldr	r0, [pc, #468]	; (800167c <main+0x26c>)
 80014a6:	f001 fd4d 	bl	8002f44 <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d108      	bne.n	80014c2 <main+0xb2>
		  sun_value=1;
 80014b0:	4b73      	ldr	r3, [pc, #460]	; (8001680 <main+0x270>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
		  strncpy(sun_exposition,"SI",5);
 80014b6:	2205      	movs	r2, #5
 80014b8:	4972      	ldr	r1, [pc, #456]	; (8001684 <main+0x274>)
 80014ba:	4873      	ldr	r0, [pc, #460]	; (8001688 <main+0x278>)
 80014bc:	f003 fc20 	bl	8004d00 <strncpy>
 80014c0:	e007      	b.n	80014d2 <main+0xc2>

	  }
	  else{
		  sun_value=0;
 80014c2:	4b6f      	ldr	r3, [pc, #444]	; (8001680 <main+0x270>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
		  strncpy(sun_exposition,"NO",5);
 80014c8:	2205      	movs	r2, #5
 80014ca:	4970      	ldr	r1, [pc, #448]	; (800168c <main+0x27c>)
 80014cc:	486e      	ldr	r0, [pc, #440]	; (8001688 <main+0x278>)
 80014ce:	f003 fc17 	bl	8004d00 <strncpy>
	  }



	  //Lee el Ultrasonido
	  distance=measure_distance();
 80014d2:	f7ff fedd 	bl	8001290 <measure_distance>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b6d      	ldr	r3, [pc, #436]	; (8001690 <main+0x280>)
 80014dc:	801a      	strh	r2, [r3, #0]
	  volume=calculate_volume(distance,3.5);
 80014de:	4b6c      	ldr	r3, [pc, #432]	; (8001690 <main+0x280>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	496c      	ldr	r1, [pc, #432]	; (8001694 <main+0x284>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fce7 	bl	8001eb8 <calculate_volume>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <main+0x288>)
 80014f0:	701a      	strb	r2, [r3, #0]

	  //Convertir valores de adc a porcentaje de humedad
	  humidity_value = adc_to_hum(humidity_adc);
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <main+0x264>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fc66 	bl	8001dc8 <adc_to_hum>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b66      	ldr	r3, [pc, #408]	; (800169c <main+0x28c>)
 8001502:	701a      	strb	r2, [r3, #0]

	  //Convertir valores de adc a temperatura
	  temperature_value = adc_to_temp(temperature_adc);
 8001504:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <main+0x268>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fc91 	bl	8001e30 <adc_to_temp>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <main+0x290>)
 8001514:	701a      	strb	r2, [r3, #0]

	  //valores int a string
	  sprintf(vol,"%u",volume);
 8001516:	4b60      	ldr	r3, [pc, #384]	; (8001698 <main+0x288>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	4961      	ldr	r1, [pc, #388]	; (80016a4 <main+0x294>)
 800151e:	4862      	ldr	r0, [pc, #392]	; (80016a8 <main+0x298>)
 8001520:	f003 fbce 	bl	8004cc0 <siprintf>
	  sprintf(hum,"%u",humidity_value);
 8001524:	4b5d      	ldr	r3, [pc, #372]	; (800169c <main+0x28c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	495e      	ldr	r1, [pc, #376]	; (80016a4 <main+0x294>)
 800152c:	485f      	ldr	r0, [pc, #380]	; (80016ac <main+0x29c>)
 800152e:	f003 fbc7 	bl	8004cc0 <siprintf>
	  sprintf(temp,"%u",temperature_value);
 8001532:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <main+0x290>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	495a      	ldr	r1, [pc, #360]	; (80016a4 <main+0x294>)
 800153a:	485d      	ldr	r0, [pc, #372]	; (80016b0 <main+0x2a0>)
 800153c:	f003 fbc0 	bl	8004cc0 <siprintf>
	  //sprintf(sun_exposition, "%u",sun_adc);
	  sprintf(msg, "%u,%u,%u,%s\r\n",volume, humidity_value, temperature_value, sun_exposition);
 8001540:	4b55      	ldr	r3, [pc, #340]	; (8001698 <main+0x288>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4b55      	ldr	r3, [pc, #340]	; (800169c <main+0x28c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <main+0x290>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <main+0x278>)
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	9200      	str	r2, [sp, #0]
 8001558:	4603      	mov	r3, r0
 800155a:	460a      	mov	r2, r1
 800155c:	4955      	ldr	r1, [pc, #340]	; (80016b4 <main+0x2a4>)
 800155e:	4856      	ldr	r0, [pc, #344]	; (80016b8 <main+0x2a8>)
 8001560:	f003 fbae 	bl	8004cc0 <siprintf>



	  // Imprimo en pantalla el volumen libre ocupado de la compostera
	  lcd_put_cur(0, 0);
 8001564:	2100      	movs	r1, #0
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff fe20 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("V:");
 800156c:	4853      	ldr	r0, [pc, #332]	; (80016bc <main+0x2ac>)
 800156e:	f7ff fe79 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(0, 2);
 8001572:	2102      	movs	r1, #2
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fe19 	bl	80011ac <lcd_put_cur>
	  lcd_send_string(vol);
 800157a:	484b      	ldr	r0, [pc, #300]	; (80016a8 <main+0x298>)
 800157c:	f7ff fe72 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(0,5);
 8001580:	2105      	movs	r1, #5
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fe12 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("%");
 8001588:	484d      	ldr	r0, [pc, #308]	; (80016c0 <main+0x2b0>)
 800158a:	f7ff fe6b 	bl	8001264 <lcd_send_string>

	  // Imprimo en pantalla la humedad  de la compostera
	  lcd_put_cur(0,8);
 800158e:	2108      	movs	r1, #8
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff fe0b 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("H:");
 8001596:	484b      	ldr	r0, [pc, #300]	; (80016c4 <main+0x2b4>)
 8001598:	f7ff fe64 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(0,10);
 800159c:	210a      	movs	r1, #10
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff fe04 	bl	80011ac <lcd_put_cur>
	  lcd_send_string(hum);
 80015a4:	4841      	ldr	r0, [pc, #260]	; (80016ac <main+0x29c>)
 80015a6:	f7ff fe5d 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(0,13);
 80015aa:	210d      	movs	r1, #13
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fdfd 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("%");
 80015b2:	4843      	ldr	r0, [pc, #268]	; (80016c0 <main+0x2b0>)
 80015b4:	f7ff fe56 	bl	8001264 <lcd_send_string>

	  // Imprimo en pantalla la temperatura  de la compostera
	  lcd_put_cur(1, 0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff fdf6 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("T:");
 80015c0:	4841      	ldr	r0, [pc, #260]	; (80016c8 <main+0x2b8>)
 80015c2:	f7ff fe4f 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(1, 2);
 80015c6:	2102      	movs	r1, #2
 80015c8:	2001      	movs	r0, #1
 80015ca:	f7ff fdef 	bl	80011ac <lcd_put_cur>
	  lcd_send_string(temp);
 80015ce:	4838      	ldr	r0, [pc, #224]	; (80016b0 <main+0x2a0>)
 80015d0:	f7ff fe48 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(1, 5);
 80015d4:	2105      	movs	r1, #5
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff fde8 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("C");
 80015dc:	483b      	ldr	r0, [pc, #236]	; (80016cc <main+0x2bc>)
 80015de:	f7ff fe41 	bl	8001264 <lcd_send_string>

	  // Imprimo en pantalla la exposicion al sol de la compostera
	  lcd_put_cur(1, 8);
 80015e2:	2108      	movs	r1, #8
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fde1 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("S:");
 80015ea:	4839      	ldr	r0, [pc, #228]	; (80016d0 <main+0x2c0>)
 80015ec:	f7ff fe3a 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(1, 10);
 80015f0:	210a      	movs	r1, #10
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff fdda 	bl	80011ac <lcd_put_cur>
	  lcd_send_string(sun_exposition);
 80015f8:	4823      	ldr	r0, [pc, #140]	; (8001688 <main+0x278>)
 80015fa:	f7ff fe33 	bl	8001264 <lcd_send_string>

	  HAL_Delay(5000);
 80015fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8001602:	f000 fdbb 	bl	800217c <HAL_Delay>
	  //Envío por UART
 	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 300);
 8001606:	482c      	ldr	r0, [pc, #176]	; (80016b8 <main+0x2a8>)
 8001608:	f7fe fda2 	bl	8000150 <strlen>
 800160c:	4603      	mov	r3, r0
 800160e:	b29a      	uxth	r2, r3
 8001610:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001614:	4928      	ldr	r1, [pc, #160]	; (80016b8 <main+0x2a8>)
 8001616:	482f      	ldr	r0, [pc, #188]	; (80016d4 <main+0x2c4>)
 8001618:	f002 fd55 	bl	80040c6 <HAL_UART_Transmit>
 	  //HAL_UART_Transmit(&huart1,(uint8_t*)AT, strlen(AT), 300);

	  //Chequeo que los valores esten dentro de los limites
	  temp_t=check_temperature(temperature_value);
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <main+0x290>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fc8d 	bl	8001f40 <check_temperature>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <main+0x2c8>)
 800162c:	701a      	strb	r2, [r3, #0]
	  hum_t=check_humidity(humidity_value);
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <main+0x28c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fc9b 	bl	8001f6e <check_humidity>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <main+0x2cc>)
 800163e:	701a      	strb	r2, [r3, #0]

	  //Si hay valores fuera de los limites, imprimo
	  if(temp_t !=TEMP_OK || hum_t!=HUM_OK){
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <main+0x2c8>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d103      	bne.n	8001650 <main+0x240>
 8001648:	4b24      	ldr	r3, [pc, #144]	; (80016dc <main+0x2cc>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <main+0x250>
		  print_error_msg(temp_t,hum_t);
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <main+0x2c8>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <main+0x2cc>)
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fc9e 	bl	8001f9c <print_error_msg>
	  }
	  lcd_clear();
 8001660:	f7ff fd9a 	bl	8001198 <lcd_clear>
	  ADC_Select_CH1();
 8001664:	e6f5      	b.n	8001452 <main+0x42>
 8001666:	bf00      	nop
 8001668:	20000238 	.word	0x20000238
 800166c:	080071f0 	.word	0x080071f0
 8001670:	20000208 	.word	0x20000208
 8001674:	200002c8 	.word	0x200002c8
 8001678:	200002ca 	.word	0x200002ca
 800167c:	40010800 	.word	0x40010800
 8001680:	200002ce 	.word	0x200002ce
 8001684:	08007200 	.word	0x08007200
 8001688:	200002e8 	.word	0x200002e8
 800168c:	08007204 	.word	0x08007204
 8001690:	200002c4 	.word	0x200002c4
 8001694:	40600000 	.word	0x40600000
 8001698:	200002c6 	.word	0x200002c6
 800169c:	200002cc 	.word	0x200002cc
 80016a0:	200002cd 	.word	0x200002cd
 80016a4:	08007208 	.word	0x08007208
 80016a8:	200002d0 	.word	0x200002d0
 80016ac:	200002e0 	.word	0x200002e0
 80016b0:	200002d8 	.word	0x200002d8
 80016b4:	0800720c 	.word	0x0800720c
 80016b8:	200002f0 	.word	0x200002f0
 80016bc:	0800721c 	.word	0x0800721c
 80016c0:	08007220 	.word	0x08007220
 80016c4:	08007224 	.word	0x08007224
 80016c8:	08007228 	.word	0x08007228
 80016cc:	0800722c 	.word	0x0800722c
 80016d0:	08007230 	.word	0x08007230
 80016d4:	20000280 	.word	0x20000280
 80016d8:	20000354 	.word	0x20000354
 80016dc:	20000355 	.word	0x20000355

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	; 0x50
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ea:	2228      	movs	r2, #40	; 0x28
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fe7e 	bl	80043f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001710:	2301      	movs	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171e:	2301      	movs	r3, #1
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001722:	2302      	movs	r3, #2
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800172c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001730:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fc34 	bl	8002fa4 <HAL_RCC_OscConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001742:	f000 f971 	bl	8001a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001746:	230f      	movs	r3, #15
 8001748:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001756:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2102      	movs	r1, #2
 8001762:	4618      	mov	r0, r3
 8001764:	f001 fea0 	bl	80034a8 <HAL_RCC_ClockConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800176e:	f000 f95b 	bl	8001a28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001772:	2302      	movs	r3, #2
 8001774:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800177a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4618      	mov	r0, r3
 8001780:	f002 f82a 	bl	80037d8 <HAL_RCCEx_PeriphCLKConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800178a:	f000 f94d 	bl	8001a28 <Error_Handler>
  }
}
 800178e:	bf00      	nop
 8001790:	3750      	adds	r7, #80	; 0x50
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <MX_ADC1_Init+0xb0>)
 80017aa:	4a28      	ldr	r2, [pc, #160]	; (800184c <MX_ADC1_Init+0xb4>)
 80017ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <MX_ADC1_Init+0xb0>)
 80017b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <MX_ADC1_Init+0xb0>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <MX_ADC1_Init+0xb0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <MX_ADC1_Init+0xb0>)
 80017c4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <MX_ADC1_Init+0xb0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <MX_ADC1_Init+0xb0>)
 80017d2:	2203      	movs	r2, #3
 80017d4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d6:	481c      	ldr	r0, [pc, #112]	; (8001848 <MX_ADC1_Init+0xb0>)
 80017d8:	f000 fcf4 	bl	80021c4 <HAL_ADC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80017e2:	f000 f921 	bl	8001a28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4814      	ldr	r0, [pc, #80]	; (8001848 <MX_ADC1_Init+0xb0>)
 80017f8:	f000 ffa8 	bl	800274c <HAL_ADC_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001802:	f000 f911 	bl	8001a28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001806:	2302      	movs	r3, #2
 8001808:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800180a:	2302      	movs	r3, #2
 800180c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <MX_ADC1_Init+0xb0>)
 8001814:	f000 ff9a 	bl	800274c <HAL_ADC_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800181e:	f000 f903 	bl	8001a28 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001822:	2303      	movs	r3, #3
 8001824:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001826:	2303      	movs	r3, #3
 8001828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4806      	ldr	r0, [pc, #24]	; (8001848 <MX_ADC1_Init+0xb0>)
 8001830:	f000 ff8c 	bl	800274c <HAL_ADC_ConfigChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800183a:	f000 f8f5 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000208 	.word	0x20000208
 800184c:	40012400 	.word	0x40012400

08001850 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	463b      	mov	r3, r7
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_TIM1_Init+0x98>)
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <MX_TIM1_Init+0x9c>)
 8001870:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_TIM1_Init+0x98>)
 8001874:	2247      	movs	r2, #71	; 0x47
 8001876:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_TIM1_Init+0x98>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_TIM1_Init+0x98>)
 8001880:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001884:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_TIM1_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_TIM1_Init+0x98>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_TIM1_Init+0x98>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001898:	4813      	ldr	r0, [pc, #76]	; (80018e8 <MX_TIM1_Init+0x98>)
 800189a:	f002 f913 	bl	8003ac4 <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018a4:	f000 f8c0 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <MX_TIM1_Init+0x98>)
 80018b6:	f002 f99f 	bl	8003bf8 <HAL_TIM_ConfigClockSource>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018c0:	f000 f8b2 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_TIM1_Init+0x98>)
 80018d2:	f002 fb4d 	bl	8003f70 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018dc:	f000 f8a4 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000238 	.word	0x20000238
 80018ec:	40012c00 	.word	0x40012c00

080018f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_USART1_UART_Init+0x4c>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <MX_USART1_UART_Init+0x50>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <MX_USART1_UART_Init+0x4c>)
 80018fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_USART1_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_USART1_UART_Init+0x4c>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <MX_USART1_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_USART1_UART_Init+0x4c>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <MX_USART1_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_USART1_UART_Init+0x4c>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001926:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_USART1_UART_Init+0x4c>)
 8001928:	f002 fb80 	bl	800402c <HAL_UART_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001932:	f000 f879 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000280 	.word	0x20000280
 8001940:	40013800 	.word	0x40013800

08001944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001958:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <MX_GPIO_Init+0xd8>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a2f      	ldr	r2, [pc, #188]	; (8001a1c <MX_GPIO_Init+0xd8>)
 800195e:	f043 0310 	orr.w	r3, r3, #16
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <MX_GPIO_Init+0xd8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <MX_GPIO_Init+0xd8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a29      	ldr	r2, [pc, #164]	; (8001a1c <MX_GPIO_Init+0xd8>)
 8001976:	f043 0320 	orr.w	r3, r3, #32
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <MX_GPIO_Init+0xd8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <MX_GPIO_Init+0xd8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <MX_GPIO_Init+0xd8>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <MX_GPIO_Init+0xd8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_GPIO_Init+0xd8>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <MX_GPIO_Init+0xd8>)
 80019a6:	f043 0308 	orr.w	r3, r3, #8
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MX_GPIO_Init+0xd8>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 80019be:	4818      	ldr	r0, [pc, #96]	; (8001a20 <MX_GPIO_Init+0xdc>)
 80019c0:	f001 fad7 	bl	8002f72 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019c4:	2340      	movs	r3, #64	; 0x40
 80019c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	4813      	ldr	r0, [pc, #76]	; (8001a24 <MX_GPIO_Init+0xe0>)
 80019d8:	f001 f930 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80019dc:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 80019e0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	f107 0310 	add.w	r3, r7, #16
 80019f2:	4619      	mov	r1, r3
 80019f4:	480a      	ldr	r0, [pc, #40]	; (8001a20 <MX_GPIO_Init+0xdc>)
 80019f6:	f001 f921 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_GPIO_Init+0xdc>)
 8001a10:	f001 f914 	bl	8002c3c <HAL_GPIO_Init>

}
 8001a14:	bf00      	nop
 8001a16:	3720      	adds	r7, #32
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010c00 	.word	0x40010c00
 8001a24:	40010800 	.word	0x40010800

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6193      	str	r3, [r2, #24]
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_MspInit+0x5c>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_MspInit+0x60>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_MspInit+0x60>)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000

08001a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <HAL_ADC_MspInit+0x6c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d121      	bne.n	8001afc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_ADC_MspInit+0x70>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_ADC_MspInit+0x70>)
 8001abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_ADC_MspInit+0x70>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_ADC_MspInit+0x70>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <HAL_ADC_MspInit+0x70>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_ADC_MspInit+0x70>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ae8:	230e      	movs	r3, #14
 8001aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aec:	2303      	movs	r3, #3
 8001aee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_ADC_MspInit+0x74>)
 8001af8:	f001 f8a0 	bl	8002c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40012400 	.word	0x40012400
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010800 	.word	0x40010800

08001b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_TIM_Base_MspInit+0x34>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d10b      	bne.n	8001b3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_TIM_Base_MspInit+0x38>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_TIM_Base_MspInit+0x38>)
 8001b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b2c:	6193      	str	r3, [r2, #24]
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_TIM_Base_MspInit+0x38>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40012c00 	.word	0x40012c00
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <HAL_UART_MspInit+0x8c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d131      	bne.n	8001bd0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_UART_MspInit+0x90>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_UART_MspInit+0x90>)
 8001b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_UART_MspInit+0x90>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_UART_MspInit+0x90>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <HAL_UART_MspInit+0x90>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_UART_MspInit+0x90>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480b      	ldr	r0, [pc, #44]	; (8001be0 <HAL_UART_MspInit+0x94>)
 8001bb2:	f001 f843 	bl	8002c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <HAL_UART_MspInit+0x94>)
 8001bcc:	f001 f836 	bl	8002c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40013800 	.word	0x40013800
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010800 	.word	0x40010800

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <HardFault_Handler+0x4>

08001bf6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <MemManage_Handler+0x4>

08001bfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <BusFault_Handler+0x4>

08001c02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <UsageFault_Handler+0x4>

08001c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 fa88 	bl	8002144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <_kill>:

int _kill(int pid, int sig)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c50:	f002 fba4 	bl	800439c <__errno>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2216      	movs	r2, #22
 8001c58:	601a      	str	r2, [r3, #0]
	return -1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_exit>:

void _exit (int status)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffe7 	bl	8001c46 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c78:	e7fe      	b.n	8001c78 <_exit+0x12>

08001c7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e00a      	b.n	8001ca2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c8c:	f3af 8000 	nop.w
 8001c90:	4601      	mov	r1, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	60ba      	str	r2, [r7, #8]
 8001c98:	b2ca      	uxtb	r2, r1
 8001c9a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	dbf0      	blt.n	8001c8c <_read+0x12>
	}

return len;
 8001caa:	687b      	ldr	r3, [r7, #4]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e009      	b.n	8001cda <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	60ba      	str	r2, [r7, #8]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dbf1      	blt.n	8001cc6 <_write+0x12>
	}
	return len;
 8001ce2:	687b      	ldr	r3, [r7, #4]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_close>:

int _close(int file)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	return -1;
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d12:	605a      	str	r2, [r3, #4]
	return 0;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <_isatty>:

int _isatty(int file)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	return 1;
 8001d28:	2301      	movs	r3, #1
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f002 fb0e 	bl	800439c <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20005000 	.word	0x20005000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	20000358 	.word	0x20000358
 8001db4:	20000370 	.word	0x20000370

08001db8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	0000      	movs	r0, r0
	...

08001dc8 <adc_to_hum>:

uint8_t map(uint16_t au16_IN, uint16_t au16_INmin, uint16_t au16_INmax, uint16_t au16_OUTmin, uint16_t au16_OUTmax){
    return ((((au16_IN - au16_INmin)*(au16_OUTmax - au16_OUTmin))/(au16_INmax - au16_INmin)) + au16_OUTmin);
}

uint8_t adc_to_hum(uint16_t hum){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
	uint8_t var;
	var=-0.026*hum+105;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fb15 	bl	8000404 <__aeabi_i2d>
 8001dda:	a311      	add	r3, pc, #68	; (adr r3, 8001e20 <adc_to_hum+0x58>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fb7a 	bl	80004d8 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <adc_to_hum+0x60>)
 8001df2:	f7fe f9bb 	bl	800016c <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fe43 	bl	8000a88 <__aeabi_d2uiz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	73fb      	strb	r3, [r7, #15]
	if(var>100){
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	2b64      	cmp	r3, #100	; 0x64
 8001e0a:	d901      	bls.n	8001e10 <adc_to_hum+0x48>
		var=100.00;
 8001e0c:	2364      	movs	r3, #100	; 0x64
 8001e0e:	73fb      	strb	r3, [r7, #15]
	}
	return var;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	f3af 8000 	nop.w
 8001e20:	76c8b439 	.word	0x76c8b439
 8001e24:	bf9a9fbe 	.word	0xbf9a9fbe
 8001e28:	405a4000 	.word	0x405a4000
 8001e2c:	00000000 	.word	0x00000000

08001e30 <adc_to_temp>:
uint8_t adc_to_temp(uint16_t au16_IN){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	80fb      	strh	r3, [r7, #6]
	uint8_t temp;
	temp=(((au16_IN*3.3/4096.0)*100)-27);
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fae1 	bl	8000404 <__aeabi_i2d>
 8001e42:	a317      	add	r3, pc, #92	; (adr r3, 8001ea0 <adc_to_temp+0x70>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fb46 	bl	80004d8 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <adc_to_temp+0x78>)
 8001e5a:	f7fe fc67 	bl	800072c <__aeabi_ddiv>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <adc_to_temp+0x7c>)
 8001e6c:	f7fe fb34 	bl	80004d8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <adc_to_temp+0x80>)
 8001e7e:	f7fe f973 	bl	8000168 <__aeabi_dsub>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fdfd 	bl	8000a88 <__aeabi_d2uiz>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	73fb      	strb	r3, [r7, #15]
    return temp;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	66666666 	.word	0x66666666
 8001ea4:	400a6666 	.word	0x400a6666
 8001ea8:	40b00000 	.word	0x40b00000
 8001eac:	40590000 	.word	0x40590000
 8001eb0:	403b0000 	.word	0x403b0000
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <calculate_volume>:
uint8_t calculate_volume(uint16_t h, float r){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	80fb      	strh	r3, [r7, #6]
	float var;
	uint8_t vol;
	var=h*r*r*2.14;
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe ff08 	bl	8000cdc <__aeabi_i2f>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	6839      	ldr	r1, [r7, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe ff57 	bl	8000d84 <__aeabi_fmul>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6839      	ldr	r1, [r7, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe ff52 	bl	8000d84 <__aeabi_fmul>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe faa0 	bl	8000428 <__aeabi_f2d>
 8001ee8:	a311      	add	r3, pc, #68	; (adr r3, 8001f30 <calculate_volume+0x78>)
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	f7fe faf3 	bl	80004d8 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fde5 	bl	8000ac8 <__aeabi_d2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	60fb      	str	r3, [r7, #12]
	vol=var*100/288;
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <calculate_volume+0x80>)
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7fe ff3d 	bl	8000d84 <__aeabi_fmul>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	490b      	ldr	r1, [pc, #44]	; (8001f3c <calculate_volume+0x84>)
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe ffec 	bl	8000eec <__aeabi_fdiv>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f884 	bl	8001024 <__aeabi_f2uiz>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	72fb      	strb	r3, [r7, #11]
	return (vol);
 8001f20:	7afb      	ldrb	r3, [r7, #11]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	f3af 8000 	nop.w
 8001f30:	51eb851f 	.word	0x51eb851f
 8001f34:	40011eb8 	.word	0x40011eb8
 8001f38:	42c80000 	.word	0x42c80000
 8001f3c:	43900000 	.word	0x43900000

08001f40 <check_temperature>:

TempTypeDef check_temperature(uint8_t temp){
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]

	if(temp>TEMP_MAX){
 8001f4a:	2246      	movs	r2, #70	; 0x46
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <check_temperature+0x16>
		return OVERTEMPERATURE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e006      	b.n	8001f64 <check_temperature+0x24>
	}
	else if(temp<TEMP_MIN){
 8001f56:	2214      	movs	r2, #20
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d201      	bcs.n	8001f62 <check_temperature+0x22>
		return UNDERTEMPERATURE;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e000      	b.n	8001f64 <check_temperature+0x24>
	}
	else
		return TEMP_OK;
 8001f62:	2300      	movs	r3, #0

}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <check_humidity>:

HUMTypeDef check_humidity(uint8_t hum){
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]

	if(hum>HUM_MAX){
 8001f78:	2250      	movs	r2, #80	; 0x50
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <check_humidity+0x16>
		return OVERHUMIDITY;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e006      	b.n	8001f92 <check_humidity+0x24>
	}
	else if(hum<HUM_MIN){
 8001f84:	2228      	movs	r2, #40	; 0x28
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d201      	bcs.n	8001f90 <check_humidity+0x22>
		return UNDERHUMIDITY;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e000      	b.n	8001f92 <check_humidity+0x24>
	}
	else
		return HUM_OK;
 8001f90:	2300      	movs	r3, #0

}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <print_error_msg>:

void print_error_msg(TempTypeDef temp, HUMTypeDef hum){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	71bb      	strb	r3, [r7, #6]
	switch(temp){
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d015      	beq.n	8001fde <print_error_msg+0x42>
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	dc24      	bgt.n	8002000 <print_error_msg+0x64>
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d021      	beq.n	8001ffe <print_error_msg+0x62>
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d120      	bne.n	8002000 <print_error_msg+0x64>
		case OVERTEMPERATURE:
			  lcd_clear();
 8001fbe:	f7ff f8eb 	bl	8001198 <lcd_clear>
			  lcd_put_cur(0, 0);
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7ff f8f1 	bl	80011ac <lcd_put_cur>
			  lcd_send_string(OVER_TEMP);
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <print_error_msg+0xc0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f948 	bl	8001264 <lcd_send_string>
			  HAL_Delay(3000);
 8001fd4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fd8:	f000 f8d0 	bl	800217c <HAL_Delay>
			break;
 8001fdc:	e010      	b.n	8002000 <print_error_msg+0x64>

		case UNDERTEMPERATURE:
			  lcd_clear();
 8001fde:	f7ff f8db 	bl	8001198 <lcd_clear>
			  lcd_put_cur(0, 0);
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7ff f8e1 	bl	80011ac <lcd_put_cur>
			  lcd_send_string(UNDER_TEMP);
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <print_error_msg+0xc4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff f938 	bl	8001264 <lcd_send_string>
			  HAL_Delay(3000);
 8001ff4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ff8:	f000 f8c0 	bl	800217c <HAL_Delay>
			break;
 8001ffc:	e000      	b.n	8002000 <print_error_msg+0x64>

		case TEMP_OK:
			break;
 8001ffe:	bf00      	nop
	}

	switch(hum){
 8002000:	79bb      	ldrb	r3, [r7, #6]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d015      	beq.n	8002032 <print_error_msg+0x96>
 8002006:	2b02      	cmp	r3, #2
 8002008:	dc24      	bgt.n	8002054 <print_error_msg+0xb8>
 800200a:	2b00      	cmp	r3, #0
 800200c:	d021      	beq.n	8002052 <print_error_msg+0xb6>
 800200e:	2b01      	cmp	r3, #1
 8002010:	d120      	bne.n	8002054 <print_error_msg+0xb8>
		case OVERHUMIDITY:
			  lcd_clear();
 8002012:	f7ff f8c1 	bl	8001198 <lcd_clear>
			  lcd_put_cur(0, 0);
 8002016:	2100      	movs	r1, #0
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff f8c7 	bl	80011ac <lcd_put_cur>
			  lcd_send_string(OVER_HUM);
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <print_error_msg+0xc8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f91e 	bl	8001264 <lcd_send_string>
			  HAL_Delay(3000);
 8002028:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800202c:	f000 f8a6 	bl	800217c <HAL_Delay>
			break;
 8002030:	e010      	b.n	8002054 <print_error_msg+0xb8>

		case UNDERHUMIDITY:
			  lcd_clear();
 8002032:	f7ff f8b1 	bl	8001198 <lcd_clear>
			  lcd_put_cur(0, 0);
 8002036:	2100      	movs	r1, #0
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff f8b7 	bl	80011ac <lcd_put_cur>
			  lcd_send_string(UNDER_HUM);
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <print_error_msg+0xcc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f90e 	bl	8001264 <lcd_send_string>
			  HAL_Delay(3000);
 8002048:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800204c:	f000 f896 	bl	800217c <HAL_Delay>
			break;
 8002050:	e000      	b.n	8002054 <print_error_msg+0xb8>

		case HUM_OK:
			break;
 8002052:	bf00      	nop
	}
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000004 	.word	0x20000004
 8002060:	20000008 	.word	0x20000008
 8002064:	2000000c 	.word	0x2000000c
 8002068:	20000010 	.word	0x20000010

0800206c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800206e:	490d      	ldr	r1, [pc, #52]	; (80020a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002074:	e002      	b.n	800207c <LoopCopyDataInit>

08002076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207a:	3304      	adds	r3, #4

0800207c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800207c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002080:	d3f9      	bcc.n	8002076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002084:	4c0a      	ldr	r4, [pc, #40]	; (80020b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002088:	e001      	b.n	800208e <LoopFillZerobss>

0800208a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800208c:	3204      	adds	r2, #4

0800208e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002090:	d3fb      	bcc.n	800208a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002092:	f7ff fe91 	bl	8001db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002096:	f002 f987 	bl	80043a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800209a:	f7ff f9b9 	bl	8001410 <main>
  bx lr
 800209e:	4770      	bx	lr
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80020a8:	08007694 	.word	0x08007694
  ldr r2, =_sbss
 80020ac:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80020b0:	20000370 	.word	0x20000370

080020b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC1_2_IRQHandler>
	...

080020b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <HAL_Init+0x28>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <HAL_Init+0x28>)
 80020c2:	f043 0310 	orr.w	r3, r3, #16
 80020c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f000 fd83 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ce:	200f      	movs	r0, #15
 80020d0:	f000 f808 	bl	80020e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d4:	f7ff fcae 	bl	8001a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40022000 	.word	0x40022000

080020e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_InitTick+0x54>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_InitTick+0x58>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fd8d 	bl	8002c22 <HAL_SYSTICK_Config>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e00e      	b.n	8002130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d80a      	bhi.n	800212e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002118:	2200      	movs	r2, #0
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f000 fd63 	bl	8002bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <HAL_InitTick+0x5c>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000000 	.word	0x20000000
 800213c:	20000018 	.word	0x20000018
 8002140:	20000014 	.word	0x20000014

08002144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_IncTick+0x1c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_IncTick+0x20>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a03      	ldr	r2, [pc, #12]	; (8002164 <HAL_IncTick+0x20>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	20000018 	.word	0x20000018
 8002164:	2000035c 	.word	0x2000035c

08002168 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b02      	ldr	r3, [pc, #8]	; (8002178 <HAL_GetTick+0x10>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	2000035c 	.word	0x2000035c

0800217c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff fff0 	bl	8002168 <HAL_GetTick>
 8002188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d005      	beq.n	80021a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_Delay+0x44>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021a2:	bf00      	nop
 80021a4:	f7ff ffe0 	bl	8002168 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d8f7      	bhi.n	80021a4 <HAL_Delay+0x28>
  {
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000018 	.word	0x20000018

080021c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0be      	b.n	8002364 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d109      	bne.n	8002208 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff fc48 	bl	8001a98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fbf1 	bl	80029f0 <ADC_ConversionStop_Disable>
 800220e:	4603      	mov	r3, r0
 8002210:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	f040 8099 	bne.w	8002352 <HAL_ADC_Init+0x18e>
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 8095 	bne.w	8002352 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002230:	f023 0302 	bic.w	r3, r3, #2
 8002234:	f043 0202 	orr.w	r2, r3, #2
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002244:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7b1b      	ldrb	r3, [r3, #12]
 800224a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800224c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	4313      	orrs	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800225c:	d003      	beq.n	8002266 <HAL_ADC_Init+0xa2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <HAL_ADC_Init+0xa8>
 8002266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800226a:	e000      	b.n	800226e <HAL_ADC_Init+0xaa>
 800226c:	2300      	movs	r3, #0
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7d1b      	ldrb	r3, [r3, #20]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d119      	bne.n	80022b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7b1b      	ldrb	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	3b01      	subs	r3, #1
 800228a:	035a      	lsls	r2, r3, #13
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e00b      	b.n	80022b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	f043 0201 	orr.w	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	4b28      	ldr	r3, [pc, #160]	; (800236c <HAL_ADC_Init+0x1a8>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	430b      	orrs	r3, r1
 80022d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e0:	d003      	beq.n	80022ea <HAL_ADC_Init+0x126>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d104      	bne.n	80022f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	051b      	lsls	r3, r3, #20
 80022f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	430a      	orrs	r2, r1
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_ADC_Init+0x1ac>)
 8002310:	4013      	ands	r3, r2
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	429a      	cmp	r2, r3
 8002316:	d10b      	bne.n	8002330 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	f023 0303 	bic.w	r3, r3, #3
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800232e:	e018      	b.n	8002362 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	f023 0312 	bic.w	r3, r3, #18
 8002338:	f043 0210 	orr.w	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002350:	e007      	b.n	8002362 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	f043 0210 	orr.w	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002362:	7dfb      	ldrb	r3, [r7, #23]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	ffe1f7fd 	.word	0xffe1f7fd
 8002370:	ff1f0efe 	.word	0xff1f0efe

08002374 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_ADC_Start+0x1a>
 800238a:	2302      	movs	r3, #2
 800238c:	e098      	b.n	80024c0 <HAL_ADC_Start+0x14c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fad0 	bl	800293c <ADC_Enable>
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 8087 	bne.w	80024b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a41      	ldr	r2, [pc, #260]	; (80024c8 <HAL_ADC_Start+0x154>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d105      	bne.n	80023d2 <HAL_ADC_Start+0x5e>
 80023c6:	4b41      	ldr	r3, [pc, #260]	; (80024cc <HAL_ADC_Start+0x158>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d026      	beq.n	800243a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023fc:	e01d      	b.n	800243a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2f      	ldr	r2, [pc, #188]	; (80024cc <HAL_ADC_Start+0x158>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d004      	beq.n	800241e <HAL_ADC_Start+0xaa>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2b      	ldr	r2, [pc, #172]	; (80024c8 <HAL_ADC_Start+0x154>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d10d      	bne.n	800243a <HAL_ADC_Start+0xc6>
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_ADC_Start+0x158>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002432:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	f023 0206 	bic.w	r2, r3, #6
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
 8002452:	e002      	b.n	800245a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f06f 0202 	mvn.w	r2, #2
 800246a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002476:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800247a:	d113      	bne.n	80024a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002480:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <HAL_ADC_Start+0x154>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d105      	bne.n	8002492 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <HAL_ADC_Start+0x158>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	e00c      	b.n	80024be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e003      	b.n	80024be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40012800 	.word	0x40012800
 80024cc:	40012400 	.word	0x40012400

080024d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_Stop+0x1a>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e01a      	b.n	8002520 <HAL_ADC_Stop+0x50>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa7c 	bl	80029f0 <ADC_ConversionStop_Disable>
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800253e:	f7ff fe13 	bl	8002168 <HAL_GetTick>
 8002542:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0d3      	b.n	8002712 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d131      	bne.n	80025dc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002582:	2b00      	cmp	r3, #0
 8002584:	d12a      	bne.n	80025dc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002586:	e021      	b.n	80025cc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d01d      	beq.n	80025cc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <HAL_ADC_PollForConversion+0x7e>
 8002596:	f7ff fde7 	bl	8002168 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d212      	bcs.n	80025cc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10b      	bne.n	80025cc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0a2      	b.n	8002712 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0d6      	beq.n	8002588 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025da:	e070      	b.n	80026be <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80025dc:	4b4f      	ldr	r3, [pc, #316]	; (800271c <HAL_ADC_PollForConversion+0x1f4>)
 80025de:	681c      	ldr	r4, [r3, #0]
 80025e0:	2002      	movs	r0, #2
 80025e2:	f001 f9af 	bl	8003944 <HAL_RCCEx_GetPeriphCLKFreq>
 80025e6:	4603      	mov	r3, r0
 80025e8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6919      	ldr	r1, [r3, #16]
 80025f2:	4b4b      	ldr	r3, [pc, #300]	; (8002720 <HAL_ADC_PollForConversion+0x1f8>)
 80025f4:	400b      	ands	r3, r1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d118      	bne.n	800262c <HAL_ADC_PollForConversion+0x104>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68d9      	ldr	r1, [r3, #12]
 8002600:	4b48      	ldr	r3, [pc, #288]	; (8002724 <HAL_ADC_PollForConversion+0x1fc>)
 8002602:	400b      	ands	r3, r1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d111      	bne.n	800262c <HAL_ADC_PollForConversion+0x104>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6919      	ldr	r1, [r3, #16]
 800260e:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_ADC_PollForConversion+0x200>)
 8002610:	400b      	ands	r3, r1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d108      	bne.n	8002628 <HAL_ADC_PollForConversion+0x100>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68d9      	ldr	r1, [r3, #12]
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_ADC_PollForConversion+0x204>)
 800261e:	400b      	ands	r3, r1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_ADC_PollForConversion+0x100>
 8002624:	2314      	movs	r3, #20
 8002626:	e020      	b.n	800266a <HAL_ADC_PollForConversion+0x142>
 8002628:	2329      	movs	r3, #41	; 0x29
 800262a:	e01e      	b.n	800266a <HAL_ADC_PollForConversion+0x142>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6919      	ldr	r1, [r3, #16]
 8002632:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_ADC_PollForConversion+0x200>)
 8002634:	400b      	ands	r3, r1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_ADC_PollForConversion+0x120>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68d9      	ldr	r1, [r3, #12]
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_ADC_PollForConversion+0x204>)
 8002642:	400b      	ands	r3, r1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <HAL_ADC_PollForConversion+0x13c>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6919      	ldr	r1, [r3, #16]
 800264e:	4b38      	ldr	r3, [pc, #224]	; (8002730 <HAL_ADC_PollForConversion+0x208>)
 8002650:	400b      	ands	r3, r1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d108      	bne.n	8002668 <HAL_ADC_PollForConversion+0x140>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68d9      	ldr	r1, [r3, #12]
 800265c:	4b34      	ldr	r3, [pc, #208]	; (8002730 <HAL_ADC_PollForConversion+0x208>)
 800265e:	400b      	ands	r3, r1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_ADC_PollForConversion+0x140>
 8002664:	2354      	movs	r3, #84	; 0x54
 8002666:	e000      	b.n	800266a <HAL_ADC_PollForConversion+0x142>
 8002668:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002670:	e021      	b.n	80026b6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d01a      	beq.n	80026b0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_ADC_PollForConversion+0x168>
 8002680:	f7ff fd72 	bl	8002168 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d20f      	bcs.n	80026b0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	429a      	cmp	r2, r3
 8002696:	d90b      	bls.n	80026b0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	f043 0204 	orr.w	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e030      	b.n	8002712 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3301      	adds	r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d8d9      	bhi.n	8002672 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f06f 0212 	mvn.w	r2, #18
 80026c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026e2:	d115      	bne.n	8002710 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d111      	bne.n	8002710 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	20000000 	.word	0x20000000
 8002720:	24924924 	.word	0x24924924
 8002724:	00924924 	.word	0x00924924
 8002728:	12492492 	.word	0x12492492
 800272c:	00492492 	.word	0x00492492
 8002730:	00249249 	.word	0x00249249

08002734 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x20>
 8002768:	2302      	movs	r3, #2
 800276a:	e0dc      	b.n	8002926 <HAL_ADC_ConfigChannel+0x1da>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b06      	cmp	r3, #6
 800277a:	d81c      	bhi.n	80027b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	3b05      	subs	r3, #5
 800278e:	221f      	movs	r2, #31
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	4019      	ands	r1, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b05      	subs	r3, #5
 80027a8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	635a      	str	r2, [r3, #52]	; 0x34
 80027b4:	e03c      	b.n	8002830 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d81c      	bhi.n	80027f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b23      	subs	r3, #35	; 0x23
 80027d0:	221f      	movs	r2, #31
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	4019      	ands	r1, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	3b23      	subs	r3, #35	; 0x23
 80027ea:	fa00 f203 	lsl.w	r2, r0, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
 80027f6:	e01b      	b.n	8002830 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3b41      	subs	r3, #65	; 0x41
 800280a:	221f      	movs	r2, #31
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	4019      	ands	r1, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b41      	subs	r3, #65	; 0x41
 8002824:	fa00 f203 	lsl.w	r2, r0, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b09      	cmp	r3, #9
 8002836:	d91c      	bls.n	8002872 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68d9      	ldr	r1, [r3, #12]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	3b1e      	subs	r3, #30
 800284a:	2207      	movs	r2, #7
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	4019      	ands	r1, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6898      	ldr	r0, [r3, #8]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	3b1e      	subs	r3, #30
 8002864:	fa00 f203 	lsl.w	r2, r0, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	e019      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6919      	ldr	r1, [r3, #16]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	2207      	movs	r2, #7
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	4019      	ands	r1, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6898      	ldr	r0, [r3, #8]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	fa00 f203 	lsl.w	r2, r0, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d003      	beq.n	80028b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028b2:	2b11      	cmp	r3, #17
 80028b4:	d132      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <HAL_ADC_ConfigChannel+0x1e4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d125      	bne.n	800290c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d126      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80028dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d11a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028e6:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_ADC_ConfigChannel+0x1e8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a13      	ldr	r2, [pc, #76]	; (8002938 <HAL_ADC_ConfigChannel+0x1ec>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	0c9a      	lsrs	r2, r3, #18
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028fc:	e002      	b.n	8002904 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3b01      	subs	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f9      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x1b2>
 800290a:	e007      	b.n	800291c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	40012400 	.word	0x40012400
 8002934:	20000000 	.word	0x20000000
 8002938:	431bde83 	.word	0x431bde83

0800293c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b01      	cmp	r3, #1
 8002958:	d040      	beq.n	80029dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800296a:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <ADC_Enable+0xac>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <ADC_Enable+0xb0>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	0c9b      	lsrs	r3, r3, #18
 8002976:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002978:	e002      	b.n	8002980 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	3b01      	subs	r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f9      	bne.n	800297a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002986:	f7ff fbef 	bl	8002168 <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800298c:	e01f      	b.n	80029ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800298e:	f7ff fbeb 	bl	8002168 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d918      	bls.n	80029ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d011      	beq.n	80029ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	f043 0210 	orr.w	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e007      	b.n	80029de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d1d8      	bne.n	800298e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000000 	.word	0x20000000
 80029ec:	431bde83 	.word	0x431bde83

080029f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d12e      	bne.n	8002a68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a1a:	f7ff fba5 	bl	8002168 <HAL_GetTick>
 8002a1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a20:	e01b      	b.n	8002a5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a22:	f7ff fba1 	bl	8002168 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d914      	bls.n	8002a5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10d      	bne.n	8002a5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	f043 0210 	orr.w	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e007      	b.n	8002a6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d0dc      	beq.n	8002a22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db0a      	blt.n	8002b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	490c      	ldr	r1, [pc, #48]	; (8002b24 <__NVIC_SetPriority+0x4c>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b00:	e00a      	b.n	8002b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4908      	ldr	r1, [pc, #32]	; (8002b28 <__NVIC_SetPriority+0x50>)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	761a      	strb	r2, [r3, #24]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000e100 	.word	0xe000e100
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f1c3 0307 	rsb	r3, r3, #7
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	bf28      	it	cs
 8002b4a:	2304      	movcs	r3, #4
 8002b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d902      	bls.n	8002b5c <NVIC_EncodePriority+0x30>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3b03      	subs	r3, #3
 8002b5a:	e000      	b.n	8002b5e <NVIC_EncodePriority+0x32>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	401a      	ands	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	43d9      	mvns	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	4313      	orrs	r3, r2
         );
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba0:	d301      	bcc.n	8002ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00f      	b.n	8002bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <SysTick_Config+0x40>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bae:	210f      	movs	r1, #15
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f7ff ff90 	bl	8002ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <SysTick_Config+0x40>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bbe:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <SysTick_Config+0x40>)
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000e010 	.word	0xe000e010

08002bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff49 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfc:	f7ff ff5e 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7ff ff90 	bl	8002b2c <NVIC_EncodePriority>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff5f 	bl	8002ad8 <__NVIC_SetPriority>
}
 8002c1a:	bf00      	nop
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ffb0 	bl	8002b90 <SysTick_Config>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b08b      	sub	sp, #44	; 0x2c
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c4e:	e169      	b.n	8002f24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c50:	2201      	movs	r2, #1
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	f040 8158 	bne.w	8002f1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4a9a      	ldr	r2, [pc, #616]	; (8002edc <HAL_GPIO_Init+0x2a0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d05e      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
 8002c78:	4a98      	ldr	r2, [pc, #608]	; (8002edc <HAL_GPIO_Init+0x2a0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d875      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002c7e:	4a98      	ldr	r2, [pc, #608]	; (8002ee0 <HAL_GPIO_Init+0x2a4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d058      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
 8002c84:	4a96      	ldr	r2, [pc, #600]	; (8002ee0 <HAL_GPIO_Init+0x2a4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d86f      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002c8a:	4a96      	ldr	r2, [pc, #600]	; (8002ee4 <HAL_GPIO_Init+0x2a8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d052      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
 8002c90:	4a94      	ldr	r2, [pc, #592]	; (8002ee4 <HAL_GPIO_Init+0x2a8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d869      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002c96:	4a94      	ldr	r2, [pc, #592]	; (8002ee8 <HAL_GPIO_Init+0x2ac>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d04c      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
 8002c9c:	4a92      	ldr	r2, [pc, #584]	; (8002ee8 <HAL_GPIO_Init+0x2ac>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d863      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002ca2:	4a92      	ldr	r2, [pc, #584]	; (8002eec <HAL_GPIO_Init+0x2b0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d046      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
 8002ca8:	4a90      	ldr	r2, [pc, #576]	; (8002eec <HAL_GPIO_Init+0x2b0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d85d      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002cae:	2b12      	cmp	r3, #18
 8002cb0:	d82a      	bhi.n	8002d08 <HAL_GPIO_Init+0xcc>
 8002cb2:	2b12      	cmp	r3, #18
 8002cb4:	d859      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <HAL_GPIO_Init+0x80>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002d37 	.word	0x08002d37
 8002cc0:	08002d11 	.word	0x08002d11
 8002cc4:	08002d23 	.word	0x08002d23
 8002cc8:	08002d65 	.word	0x08002d65
 8002ccc:	08002d6b 	.word	0x08002d6b
 8002cd0:	08002d6b 	.word	0x08002d6b
 8002cd4:	08002d6b 	.word	0x08002d6b
 8002cd8:	08002d6b 	.word	0x08002d6b
 8002cdc:	08002d6b 	.word	0x08002d6b
 8002ce0:	08002d6b 	.word	0x08002d6b
 8002ce4:	08002d6b 	.word	0x08002d6b
 8002ce8:	08002d6b 	.word	0x08002d6b
 8002cec:	08002d6b 	.word	0x08002d6b
 8002cf0:	08002d6b 	.word	0x08002d6b
 8002cf4:	08002d6b 	.word	0x08002d6b
 8002cf8:	08002d6b 	.word	0x08002d6b
 8002cfc:	08002d6b 	.word	0x08002d6b
 8002d00:	08002d19 	.word	0x08002d19
 8002d04:	08002d2d 	.word	0x08002d2d
 8002d08:	4a79      	ldr	r2, [pc, #484]	; (8002ef0 <HAL_GPIO_Init+0x2b4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d013      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d0e:	e02c      	b.n	8002d6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	623b      	str	r3, [r7, #32]
          break;
 8002d16:	e029      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	623b      	str	r3, [r7, #32]
          break;
 8002d20:	e024      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	3308      	adds	r3, #8
 8002d28:	623b      	str	r3, [r7, #32]
          break;
 8002d2a:	e01f      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	330c      	adds	r3, #12
 8002d32:	623b      	str	r3, [r7, #32]
          break;
 8002d34:	e01a      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d3e:	2304      	movs	r3, #4
 8002d40:	623b      	str	r3, [r7, #32]
          break;
 8002d42:	e013      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d105      	bne.n	8002d58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	611a      	str	r2, [r3, #16]
          break;
 8002d56:	e009      	b.n	8002d6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d58:	2308      	movs	r3, #8
 8002d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	615a      	str	r2, [r3, #20]
          break;
 8002d62:	e003      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
          break;
 8002d68:	e000      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          break;
 8002d6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2bff      	cmp	r3, #255	; 0xff
 8002d70:	d801      	bhi.n	8002d76 <HAL_GPIO_Init+0x13a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	e001      	b.n	8002d7a <HAL_GPIO_Init+0x13e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2bff      	cmp	r3, #255	; 0xff
 8002d80:	d802      	bhi.n	8002d88 <HAL_GPIO_Init+0x14c>
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	e002      	b.n	8002d8e <HAL_GPIO_Init+0x152>
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3b08      	subs	r3, #8
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	210f      	movs	r1, #15
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	401a      	ands	r2, r3
 8002da0:	6a39      	ldr	r1, [r7, #32]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	431a      	orrs	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80b1 	beq.w	8002f1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	; (8002ef4 <HAL_GPIO_Init+0x2b8>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	4a4c      	ldr	r2, [pc, #304]	; (8002ef4 <HAL_GPIO_Init+0x2b8>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6193      	str	r3, [r2, #24]
 8002dc8:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <HAL_GPIO_Init+0x2b8>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dd4:	4a48      	ldr	r2, [pc, #288]	; (8002ef8 <HAL_GPIO_Init+0x2bc>)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	3302      	adds	r3, #2
 8002ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	220f      	movs	r2, #15
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a40      	ldr	r2, [pc, #256]	; (8002efc <HAL_GPIO_Init+0x2c0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <HAL_GPIO_Init+0x1ec>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3f      	ldr	r2, [pc, #252]	; (8002f00 <HAL_GPIO_Init+0x2c4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00d      	beq.n	8002e24 <HAL_GPIO_Init+0x1e8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a3e      	ldr	r2, [pc, #248]	; (8002f04 <HAL_GPIO_Init+0x2c8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d007      	beq.n	8002e20 <HAL_GPIO_Init+0x1e4>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a3d      	ldr	r2, [pc, #244]	; (8002f08 <HAL_GPIO_Init+0x2cc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_GPIO_Init+0x1e0>
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e006      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	e004      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e002      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	f002 0203 	and.w	r2, r2, #3
 8002e30:	0092      	lsls	r2, r2, #2
 8002e32:	4093      	lsls	r3, r2
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e3a:	492f      	ldr	r1, [pc, #188]	; (8002ef8 <HAL_GPIO_Init+0x2bc>)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	3302      	adds	r3, #2
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e54:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	492c      	ldr	r1, [pc, #176]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
 8002e60:	e006      	b.n	8002e70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	4928      	ldr	r1, [pc, #160]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4922      	ldr	r1, [pc, #136]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	491e      	ldr	r1, [pc, #120]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	4918      	ldr	r1, [pc, #96]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	608b      	str	r3, [r1, #8]
 8002eb0:	e006      	b.n	8002ec0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4914      	ldr	r1, [pc, #80]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d021      	beq.n	8002f10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	490e      	ldr	r1, [pc, #56]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60cb      	str	r3, [r1, #12]
 8002ed8:	e021      	b.n	8002f1e <HAL_GPIO_Init+0x2e2>
 8002eda:	bf00      	nop
 8002edc:	10320000 	.word	0x10320000
 8002ee0:	10310000 	.word	0x10310000
 8002ee4:	10220000 	.word	0x10220000
 8002ee8:	10210000 	.word	0x10210000
 8002eec:	10120000 	.word	0x10120000
 8002ef0:	10110000 	.word	0x10110000
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40010800 	.word	0x40010800
 8002f00:	40010c00 	.word	0x40010c00
 8002f04:	40011000 	.word	0x40011000
 8002f08:	40011400 	.word	0x40011400
 8002f0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	4909      	ldr	r1, [pc, #36]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	3301      	adds	r3, #1
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f47f ae8e 	bne.w	8002c50 <HAL_GPIO_Init+0x14>
  }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	372c      	adds	r7, #44	; 0x2c
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	40010400 	.word	0x40010400

08002f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	e001      	b.n	8002f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	807b      	strh	r3, [r7, #2]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f82:	787b      	ldrb	r3, [r7, #1]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f88:	887a      	ldrh	r2, [r7, #2]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f8e:	e003      	b.n	8002f98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	041a      	lsls	r2, r3, #16
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	611a      	str	r2, [r3, #16]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e272      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8087 	beq.w	80030d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc4:	4b92      	ldr	r3, [pc, #584]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d00c      	beq.n	8002fea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fd0:	4b8f      	ldr	r3, [pc, #572]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d112      	bne.n	8003002 <HAL_RCC_OscConfig+0x5e>
 8002fdc:	4b8c      	ldr	r3, [pc, #560]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d10b      	bne.n	8003002 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fea:	4b89      	ldr	r3, [pc, #548]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d06c      	beq.n	80030d0 <HAL_RCC_OscConfig+0x12c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d168      	bne.n	80030d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e24c      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x76>
 800300c:	4b80      	ldr	r3, [pc, #512]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a7f      	ldr	r2, [pc, #508]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	e02e      	b.n	8003078 <HAL_RCC_OscConfig+0xd4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x98>
 8003022:	4b7b      	ldr	r3, [pc, #492]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7a      	ldr	r2, [pc, #488]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b78      	ldr	r3, [pc, #480]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a77      	ldr	r2, [pc, #476]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e01d      	b.n	8003078 <HAL_RCC_OscConfig+0xd4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0xbc>
 8003046:	4b72      	ldr	r3, [pc, #456]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a71      	ldr	r2, [pc, #452]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 800304c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	4b6f      	ldr	r3, [pc, #444]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6e      	ldr	r2, [pc, #440]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0xd4>
 8003060:	4b6b      	ldr	r3, [pc, #428]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a6a      	ldr	r2, [pc, #424]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b68      	ldr	r3, [pc, #416]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a67      	ldr	r2, [pc, #412]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003076:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7ff f872 	bl	8002168 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003088:	f7ff f86e 	bl	8002168 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e200      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	4b5d      	ldr	r3, [pc, #372]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0xe4>
 80030a6:	e014      	b.n	80030d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7ff f85e 	bl	8002168 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7ff f85a 	bl	8002168 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1ec      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x10c>
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030de:	4b4c      	ldr	r3, [pc, #304]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030ea:	4b49      	ldr	r3, [pc, #292]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d11c      	bne.n	8003130 <HAL_RCC_OscConfig+0x18c>
 80030f6:	4b46      	ldr	r3, [pc, #280]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d116      	bne.n	8003130 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	4b43      	ldr	r3, [pc, #268]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_RCC_OscConfig+0x176>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d001      	beq.n	800311a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e1c0      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4939      	ldr	r1, [pc, #228]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	e03a      	b.n	80031a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003138:	4b36      	ldr	r3, [pc, #216]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7ff f813 	bl	8002168 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003146:	f7ff f80f 	bl	8002168 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e1a1      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4927      	ldr	r1, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317a:	4b26      	ldr	r3, [pc, #152]	; (8003214 <HAL_RCC_OscConfig+0x270>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe fff2 	bl	8002168 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003188:	f7fe ffee 	bl	8002168 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e180      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d03a      	beq.n	8003228 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d019      	beq.n	80031ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ba:	4b17      	ldr	r3, [pc, #92]	; (8003218 <HAL_RCC_OscConfig+0x274>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c0:	f7fe ffd2 	bl	8002168 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fe ffce 	bl	8002168 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e160      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031e6:	2001      	movs	r0, #1
 80031e8:	f000 fad8 	bl	800379c <RCC_Delay>
 80031ec:	e01c      	b.n	8003228 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_RCC_OscConfig+0x274>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f4:	f7fe ffb8 	bl	8002168 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fa:	e00f      	b.n	800321c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fc:	f7fe ffb4 	bl	8002168 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d908      	bls.n	800321c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e146      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000
 8003214:	42420000 	.word	0x42420000
 8003218:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	4b92      	ldr	r3, [pc, #584]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e9      	bne.n	80031fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a6 	beq.w	8003382 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003236:	2300      	movs	r3, #0
 8003238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323a:	4b8b      	ldr	r3, [pc, #556]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	4b88      	ldr	r3, [pc, #544]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	4a87      	ldr	r2, [pc, #540]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	61d3      	str	r3, [r2, #28]
 8003252:	4b85      	ldr	r3, [pc, #532]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003262:	4b82      	ldr	r3, [pc, #520]	; (800346c <HAL_RCC_OscConfig+0x4c8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d118      	bne.n	80032a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326e:	4b7f      	ldr	r3, [pc, #508]	; (800346c <HAL_RCC_OscConfig+0x4c8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7e      	ldr	r2, [pc, #504]	; (800346c <HAL_RCC_OscConfig+0x4c8>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327a:	f7fe ff75 	bl	8002168 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003282:	f7fe ff71 	bl	8002168 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b64      	cmp	r3, #100	; 0x64
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e103      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	4b75      	ldr	r3, [pc, #468]	; (800346c <HAL_RCC_OscConfig+0x4c8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x312>
 80032a8:	4b6f      	ldr	r3, [pc, #444]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	4a6e      	ldr	r2, [pc, #440]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6213      	str	r3, [r2, #32]
 80032b4:	e02d      	b.n	8003312 <HAL_RCC_OscConfig+0x36e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x334>
 80032be:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4a69      	ldr	r2, [pc, #420]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6213      	str	r3, [r2, #32]
 80032ca:	4b67      	ldr	r3, [pc, #412]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	4a66      	ldr	r2, [pc, #408]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	6213      	str	r3, [r2, #32]
 80032d6:	e01c      	b.n	8003312 <HAL_RCC_OscConfig+0x36e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d10c      	bne.n	80032fa <HAL_RCC_OscConfig+0x356>
 80032e0:	4b61      	ldr	r3, [pc, #388]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4a60      	ldr	r2, [pc, #384]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	6213      	str	r3, [r2, #32]
 80032ec:	4b5e      	ldr	r3, [pc, #376]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	4a5d      	ldr	r2, [pc, #372]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6213      	str	r3, [r2, #32]
 80032f8:	e00b      	b.n	8003312 <HAL_RCC_OscConfig+0x36e>
 80032fa:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	4a5a      	ldr	r2, [pc, #360]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	6213      	str	r3, [r2, #32]
 8003306:	4b58      	ldr	r3, [pc, #352]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	4a57      	ldr	r2, [pc, #348]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d015      	beq.n	8003346 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331a:	f7fe ff25 	bl	8002168 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fe ff21 	bl	8002168 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0b1      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0ee      	beq.n	8003322 <HAL_RCC_OscConfig+0x37e>
 8003344:	e014      	b.n	8003370 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003346:	f7fe ff0f 	bl	8002168 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fe ff0b 	bl	8002168 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	; 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e09b      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	4b40      	ldr	r3, [pc, #256]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1ee      	bne.n	800334e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b3c      	ldr	r3, [pc, #240]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	4a3b      	ldr	r2, [pc, #236]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003380:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8087 	beq.w	800349a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800338c:	4b36      	ldr	r3, [pc, #216]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b08      	cmp	r3, #8
 8003396:	d061      	beq.n	800345c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d146      	bne.n	800342e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a0:	4b33      	ldr	r3, [pc, #204]	; (8003470 <HAL_RCC_OscConfig+0x4cc>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a6:	f7fe fedf 	bl	8002168 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ae:	f7fe fedb 	bl	8002168 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e06d      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c0:	4b29      	ldr	r3, [pc, #164]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f0      	bne.n	80033ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d108      	bne.n	80033e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033d6:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4921      	ldr	r1, [pc, #132]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e8:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a19      	ldr	r1, [r3, #32]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	430b      	orrs	r3, r1
 80033fa:	491b      	ldr	r1, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x4cc>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fe feaf 	bl	8002168 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fe feab 	bl	8002168 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e03d      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x46a>
 800342c:	e035      	b.n	800349a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <HAL_RCC_OscConfig+0x4cc>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe fe98 	bl	8002168 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fe fe94 	bl	8002168 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e026      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x498>
 800345a:	e01e      	b.n	800349a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d107      	bne.n	8003474 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e019      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
 8003468:	40021000 	.word	0x40021000
 800346c:	40007000 	.word	0x40007000
 8003470:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_OscConfig+0x500>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	429a      	cmp	r2, r3
 8003486:	d106      	bne.n	8003496 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000

080034a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0d0      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034bc:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d910      	bls.n	80034ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b67      	ldr	r3, [pc, #412]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 0207 	bic.w	r2, r3, #7
 80034d2:	4965      	ldr	r1, [pc, #404]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b63      	ldr	r3, [pc, #396]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0b8      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003504:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4a58      	ldr	r2, [pc, #352]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800350e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800351c:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a52      	ldr	r2, [pc, #328]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003526:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003528:	4b50      	ldr	r3, [pc, #320]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	494d      	ldr	r1, [pc, #308]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d040      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d115      	bne.n	8003586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e07f      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d107      	bne.n	8003576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e073      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06b      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003586:	4b39      	ldr	r3, [pc, #228]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f023 0203 	bic.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4936      	ldr	r1, [pc, #216]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003598:	f7fe fde6 	bl	8002168 <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a0:	f7fe fde2 	bl	8002168 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e053      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	4b2d      	ldr	r3, [pc, #180]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 020c 	and.w	r2, r3, #12
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d1eb      	bne.n	80035a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c8:	4b27      	ldr	r3, [pc, #156]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d210      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 0207 	bic.w	r2, r3, #7
 80035de:	4922      	ldr	r1, [pc, #136]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e032      	b.n	800365e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4916      	ldr	r1, [pc, #88]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	490e      	ldr	r1, [pc, #56]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003636:	f000 f821 	bl	800367c <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	490a      	ldr	r1, [pc, #40]	; (8003670 <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1cc>)
 8003650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_RCC_ClockConfig+0x1d0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fd44 	bl	80020e4 <HAL_InitTick>

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40022000 	.word	0x40022000
 800366c:	40021000 	.word	0x40021000
 8003670:	0800729c 	.word	0x0800729c
 8003674:	20000000 	.word	0x20000000
 8003678:	20000014 	.word	0x20000014

0800367c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800367c:	b490      	push	{r4, r7}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003682:	4b29      	ldr	r3, [pc, #164]	; (8003728 <HAL_RCC_GetSysClockFreq+0xac>)
 8003684:	1d3c      	adds	r4, r7, #4
 8003686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003688:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800368c:	f240 2301 	movw	r3, #513	; 0x201
 8003690:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	2300      	movs	r3, #0
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036a6:	4b21      	ldr	r3, [pc, #132]	; (800372c <HAL_RCC_GetSysClockFreq+0xb0>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d002      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x40>
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x46>
 80036ba:	e02b      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036bc:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036be:	623b      	str	r3, [r7, #32]
      break;
 80036c0:	e02b      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	0c9b      	lsrs	r3, r3, #18
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	3328      	adds	r3, #40	; 0x28
 80036cc:	443b      	add	r3, r7
 80036ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d012      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <HAL_RCC_GetSysClockFreq+0xb0>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	0c5b      	lsrs	r3, r3, #17
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	3328      	adds	r3, #40	; 0x28
 80036ea:	443b      	add	r3, r7
 80036ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	4a0e      	ldr	r2, [pc, #56]	; (8003730 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036f6:	fb03 f202 	mul.w	r2, r3, r2
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
 8003702:	e004      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	4a0b      	ldr	r2, [pc, #44]	; (8003734 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	623b      	str	r3, [r7, #32]
      break;
 8003712:	e002      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003716:	623b      	str	r3, [r7, #32]
      break;
 8003718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371a:	6a3b      	ldr	r3, [r7, #32]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3728      	adds	r7, #40	; 0x28
 8003720:	46bd      	mov	sp, r7
 8003722:	bc90      	pop	{r4, r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	0800727c 	.word	0x0800727c
 800372c:	40021000 	.word	0x40021000
 8003730:	007a1200 	.word	0x007a1200
 8003734:	003d0900 	.word	0x003d0900

08003738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800373c:	4b02      	ldr	r3, [pc, #8]	; (8003748 <HAL_RCC_GetHCLKFreq+0x10>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	20000000 	.word	0x20000000

0800374c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003750:	f7ff fff2 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40021000 	.word	0x40021000
 8003770:	080072ac 	.word	0x080072ac

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003778:	f7ff ffde 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	0adb      	lsrs	r3, r3, #11
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4903      	ldr	r1, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	080072ac 	.word	0x080072ac

0800379c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <RCC_Delay+0x34>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <RCC_Delay+0x38>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0a5b      	lsrs	r3, r3, #9
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037b8:	bf00      	nop
  }
  while (Delay --);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1e5a      	subs	r2, r3, #1
 80037be:	60fa      	str	r2, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f9      	bne.n	80037b8 <RCC_Delay+0x1c>
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	20000000 	.word	0x20000000
 80037d4:	10624dd3 	.word	0x10624dd3

080037d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d07d      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f8:	4b4f      	ldr	r3, [pc, #316]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	4b4c      	ldr	r3, [pc, #304]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	4a4b      	ldr	r2, [pc, #300]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380e:	61d3      	str	r3, [r2, #28]
 8003810:	4b49      	ldr	r3, [pc, #292]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381c:	2301      	movs	r3, #1
 800381e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b46      	ldr	r3, [pc, #280]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d118      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382c:	4b43      	ldr	r3, [pc, #268]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a42      	ldr	r2, [pc, #264]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003838:	f7fe fc96 	bl	8002168 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	e008      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fe fc92 	bl	8002168 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e06d      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b3a      	ldr	r3, [pc, #232]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800385e:	4b36      	ldr	r3, [pc, #216]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003866:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d02e      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	429a      	cmp	r2, r3
 800387a:	d027      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800387c:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003884:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003886:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800388c:	4b2c      	ldr	r3, [pc, #176]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003892:	4a29      	ldr	r2, [pc, #164]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d014      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7fe fc61 	bl	8002168 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a8:	e00a      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fe fc5d 	bl	8002168 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e036      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ee      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4917      	ldr	r1, [pc, #92]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	4a13      	ldr	r2, [pc, #76]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	490b      	ldr	r1, [pc, #44]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4904      	ldr	r1, [pc, #16]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000
 800393c:	40007000 	.word	0x40007000
 8003940:	42420440 	.word	0x42420440

08003944 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b08d      	sub	sp, #52	; 0x34
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800394c:	4b58      	ldr	r3, [pc, #352]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800394e:	f107 040c 	add.w	r4, r7, #12
 8003952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003958:	f240 2301 	movw	r3, #513	; 0x201
 800395c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	2300      	movs	r3, #0
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003966:	2300      	movs	r3, #0
 8003968:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	2300      	movs	r3, #0
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b10      	cmp	r3, #16
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b10      	cmp	r3, #16
 800397c:	f200 808e 	bhi.w	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d049      	beq.n	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d079      	beq.n	8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800398c:	e086      	b.n	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800398e:	4b49      	ldr	r3, [pc, #292]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003994:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d07f      	beq.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	3330      	adds	r3, #48	; 0x30
 80039aa:	443b      	add	r3, r7
 80039ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039b0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d017      	beq.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039bc:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	0c5b      	lsrs	r3, r3, #17
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	3330      	adds	r3, #48	; 0x30
 80039c8:	443b      	add	r3, r7
 80039ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80039da:	4a37      	ldr	r2, [pc, #220]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	fb02 f303 	mul.w	r3, r2, r3
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ea:	e004      	b.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	4a33      	ldr	r2, [pc, #204]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80039f6:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a02:	d102      	bne.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a08:	e04a      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a18:	e042      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003a1a:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2a:	d108      	bne.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3c:	e01f      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a48:	d109      	bne.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003a56:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5c:	e00f      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a68:	d11c      	bne.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003a76:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a7c:	e012      	b.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003a7e:	e011      	b.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a80:	f7ff fe78 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	0b9b      	lsrs	r3, r3, #14
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	3301      	adds	r3, #1
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a9a:	e004      	b.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a9c:	bf00      	nop
 8003a9e:	e002      	b.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003aa0:	bf00      	nop
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003aa4:	bf00      	nop
    }
  }
  return (frequency);
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3734      	adds	r7, #52	; 0x34
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd90      	pop	{r4, r7, pc}
 8003ab0:	0800728c 	.word	0x0800728c
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	007a1200 	.word	0x007a1200
 8003abc:	003d0900 	.word	0x003d0900
 8003ac0:	aaaaaaab 	.word	0xaaaaaaab

08003ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e041      	b.n	8003b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fe f810 	bl	8001b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f000 f93c 	bl	8003d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d001      	beq.n	8003b7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e032      	b.n	8003be2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a18      	ldr	r2, [pc, #96]	; (8003bec <HAL_TIM_Base_Start+0x88>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00e      	beq.n	8003bac <HAL_TIM_Base_Start+0x48>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b96:	d009      	beq.n	8003bac <HAL_TIM_Base_Start+0x48>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <HAL_TIM_Base_Start+0x8c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_TIM_Base_Start+0x48>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <HAL_TIM_Base_Start+0x90>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d111      	bne.n	8003bd0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b06      	cmp	r3, #6
 8003bbc:	d010      	beq.n	8003be0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0201 	orr.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bce:	e007      	b.n	8003be0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800

08003bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIM_ConfigClockSource+0x18>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e0b3      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x180>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c48:	d03e      	beq.n	8003cc8 <HAL_TIM_ConfigClockSource+0xd0>
 8003c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4e:	f200 8087 	bhi.w	8003d60 <HAL_TIM_ConfigClockSource+0x168>
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c56:	f000 8085 	beq.w	8003d64 <HAL_TIM_ConfigClockSource+0x16c>
 8003c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5e:	d87f      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x168>
 8003c60:	2b70      	cmp	r3, #112	; 0x70
 8003c62:	d01a      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0xa2>
 8003c64:	2b70      	cmp	r3, #112	; 0x70
 8003c66:	d87b      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x168>
 8003c68:	2b60      	cmp	r3, #96	; 0x60
 8003c6a:	d050      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x116>
 8003c6c:	2b60      	cmp	r3, #96	; 0x60
 8003c6e:	d877      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x168>
 8003c70:	2b50      	cmp	r3, #80	; 0x50
 8003c72:	d03c      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0xf6>
 8003c74:	2b50      	cmp	r3, #80	; 0x50
 8003c76:	d873      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x168>
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d058      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x136>
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d86f      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x168>
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d064      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x156>
 8003c84:	2b30      	cmp	r3, #48	; 0x30
 8003c86:	d86b      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x168>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d060      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x156>
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d867      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x168>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d05c      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x156>
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d05a      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c98:	e062      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6899      	ldr	r1, [r3, #8]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f000 f942 	bl	8003f32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	609a      	str	r2, [r3, #8]
      break;
 8003cc6:	e04e      	b.n	8003d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6899      	ldr	r1, [r3, #8]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f000 f92b 	bl	8003f32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cea:	609a      	str	r2, [r3, #8]
      break;
 8003cec:	e03b      	b.n	8003d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f000 f8a2 	bl	8003e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2150      	movs	r1, #80	; 0x50
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f8f9 	bl	8003efe <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e02b      	b.n	8003d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 f8c0 	bl	8003ea0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2160      	movs	r1, #96	; 0x60
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f8e9 	bl	8003efe <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e01b      	b.n	8003d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 f882 	bl	8003e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2140      	movs	r1, #64	; 0x40
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f8d9 	bl	8003efe <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e00b      	b.n	8003d66 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f000 f8d0 	bl	8003efe <TIM_ITRx_SetConfig>
        break;
 8003d5e:	e002      	b.n	8003d66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <TIM_Base_SetConfig+0xb8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <TIM_Base_SetConfig+0x30>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9e:	d007      	beq.n	8003db0 <TIM_Base_SetConfig+0x30>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <TIM_Base_SetConfig+0xbc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_Base_SetConfig+0x30>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a25      	ldr	r2, [pc, #148]	; (8003e40 <TIM_Base_SetConfig+0xc0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d108      	bne.n	8003dc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <TIM_Base_SetConfig+0xb8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00b      	beq.n	8003de2 <TIM_Base_SetConfig+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd0:	d007      	beq.n	8003de2 <TIM_Base_SetConfig+0x62>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <TIM_Base_SetConfig+0xbc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <TIM_Base_SetConfig+0x62>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <TIM_Base_SetConfig+0xc0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d108      	bne.n	8003df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <TIM_Base_SetConfig+0xb8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d103      	bne.n	8003e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	615a      	str	r2, [r3, #20]
}
 8003e2e:	bf00      	nop
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800

08003e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f023 0201 	bic.w	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f023 030a 	bic.w	r3, r3, #10
 8003e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f023 0210 	bic.w	r2, r3, #16
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	031b      	lsls	r3, r3, #12
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	621a      	str	r2, [r3, #32]
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b085      	sub	sp, #20
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f043 0307 	orr.w	r3, r3, #7
 8003f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	609a      	str	r2, [r3, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b087      	sub	sp, #28
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	021a      	lsls	r2, r3, #8
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	609a      	str	r2, [r3, #8]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e046      	b.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a16      	ldr	r2, [pc, #88]	; (8004020 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00e      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd4:	d009      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a12      	ldr	r2, [pc, #72]	; (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d004      	beq.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a10      	ldr	r2, [pc, #64]	; (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10c      	bne.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800

0800402c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e03f      	b.n	80040be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fd fd7a 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2224      	movs	r2, #36	; 0x24
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800406e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f905 	bl	8004280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b08a      	sub	sp, #40	; 0x28
 80040ca:	af02      	add	r7, sp, #8
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d17c      	bne.n	80041e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_UART_Transmit+0x2c>
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e075      	b.n	80041e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_UART_Transmit+0x3e>
 8004100:	2302      	movs	r3, #2
 8004102:	e06e      	b.n	80041e2 <HAL_UART_Transmit+0x11c>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2221      	movs	r2, #33	; 0x21
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800411a:	f7fe f825 	bl	8002168 <HAL_GetTick>
 800411e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	88fa      	ldrh	r2, [r7, #6]
 8004124:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	88fa      	ldrh	r2, [r7, #6]
 800412a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004134:	d108      	bne.n	8004148 <HAL_UART_Transmit+0x82>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e003      	b.n	8004150 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004158:	e02a      	b.n	80041b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2200      	movs	r2, #0
 8004162:	2180      	movs	r1, #128	; 0x80
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f840 	bl	80041ea <UART_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e036      	b.n	80041e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10b      	bne.n	8004192 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004188:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	3302      	adds	r3, #2
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	e007      	b.n	80041a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	3301      	adds	r3, #1
 80041a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1cf      	bne.n	800415a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2200      	movs	r2, #0
 80041c2:	2140      	movs	r1, #64	; 0x40
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f810 	bl	80041ea <UART_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e006      	b.n	80041e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fa:	e02c      	b.n	8004256 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d028      	beq.n	8004256 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <UART_WaitOnFlagUntilTimeout+0x30>
 800420a:	f7fd ffad 	bl	8002168 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	429a      	cmp	r2, r3
 8004218:	d21d      	bcs.n	8004256 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004228:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e00f      	b.n	8004276 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4013      	ands	r3, r2
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	429a      	cmp	r2, r3
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	429a      	cmp	r2, r3
 8004272:	d0c3      	beq.n	80041fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042ba:	f023 030c 	bic.w	r3, r3, #12
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <UART_SetConfig+0x114>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d103      	bne.n	80042f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042e8:	f7ff fa44 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	e002      	b.n	80042f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7ff fa2c 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 80042f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009a      	lsls	r2, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	4a22      	ldr	r2, [pc, #136]	; (8004398 <UART_SetConfig+0x118>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	0119      	lsls	r1, r3, #4
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009a      	lsls	r2, r3, #2
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	fbb2 f2f3 	udiv	r2, r2, r3
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <UART_SetConfig+0x118>)
 800432e:	fba3 0302 	umull	r0, r3, r3, r2
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2064      	movs	r0, #100	; 0x64
 8004336:	fb00 f303 	mul.w	r3, r0, r3
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	3332      	adds	r3, #50	; 0x32
 8004340:	4a15      	ldr	r2, [pc, #84]	; (8004398 <UART_SetConfig+0x118>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800434c:	4419      	add	r1, r3
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009a      	lsls	r2, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	fbb2 f2f3 	udiv	r2, r2, r3
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <UART_SetConfig+0x118>)
 8004366:	fba3 0302 	umull	r0, r3, r3, r2
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2064      	movs	r0, #100	; 0x64
 800436e:	fb00 f303 	mul.w	r3, r0, r3
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	3332      	adds	r3, #50	; 0x32
 8004378:	4a07      	ldr	r2, [pc, #28]	; (8004398 <UART_SetConfig+0x118>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	440a      	add	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40013800 	.word	0x40013800
 8004398:	51eb851f 	.word	0x51eb851f

0800439c <__errno>:
 800439c:	4b01      	ldr	r3, [pc, #4]	; (80043a4 <__errno+0x8>)
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	2000001c 	.word	0x2000001c

080043a8 <__libc_init_array>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	2600      	movs	r6, #0
 80043ac:	4d0c      	ldr	r5, [pc, #48]	; (80043e0 <__libc_init_array+0x38>)
 80043ae:	4c0d      	ldr	r4, [pc, #52]	; (80043e4 <__libc_init_array+0x3c>)
 80043b0:	1b64      	subs	r4, r4, r5
 80043b2:	10a4      	asrs	r4, r4, #2
 80043b4:	42a6      	cmp	r6, r4
 80043b6:	d109      	bne.n	80043cc <__libc_init_array+0x24>
 80043b8:	f002 ff0e 	bl	80071d8 <_init>
 80043bc:	2600      	movs	r6, #0
 80043be:	4d0a      	ldr	r5, [pc, #40]	; (80043e8 <__libc_init_array+0x40>)
 80043c0:	4c0a      	ldr	r4, [pc, #40]	; (80043ec <__libc_init_array+0x44>)
 80043c2:	1b64      	subs	r4, r4, r5
 80043c4:	10a4      	asrs	r4, r4, #2
 80043c6:	42a6      	cmp	r6, r4
 80043c8:	d105      	bne.n	80043d6 <__libc_init_array+0x2e>
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d0:	4798      	blx	r3
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7ee      	b.n	80043b4 <__libc_init_array+0xc>
 80043d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043da:	4798      	blx	r3
 80043dc:	3601      	adds	r6, #1
 80043de:	e7f2      	b.n	80043c6 <__libc_init_array+0x1e>
 80043e0:	0800768c 	.word	0x0800768c
 80043e4:	0800768c 	.word	0x0800768c
 80043e8:	0800768c 	.word	0x0800768c
 80043ec:	08007690 	.word	0x08007690

080043f0 <memset>:
 80043f0:	4603      	mov	r3, r0
 80043f2:	4402      	add	r2, r0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d100      	bne.n	80043fa <memset+0xa>
 80043f8:	4770      	bx	lr
 80043fa:	f803 1b01 	strb.w	r1, [r3], #1
 80043fe:	e7f9      	b.n	80043f4 <memset+0x4>

08004400 <__cvt>:
 8004400:	2b00      	cmp	r3, #0
 8004402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004406:	461f      	mov	r7, r3
 8004408:	bfbb      	ittet	lt
 800440a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800440e:	461f      	movlt	r7, r3
 8004410:	2300      	movge	r3, #0
 8004412:	232d      	movlt	r3, #45	; 0x2d
 8004414:	b088      	sub	sp, #32
 8004416:	4614      	mov	r4, r2
 8004418:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800441a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800441c:	7013      	strb	r3, [r2, #0]
 800441e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004420:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004424:	f023 0820 	bic.w	r8, r3, #32
 8004428:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800442c:	d005      	beq.n	800443a <__cvt+0x3a>
 800442e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004432:	d100      	bne.n	8004436 <__cvt+0x36>
 8004434:	3501      	adds	r5, #1
 8004436:	2302      	movs	r3, #2
 8004438:	e000      	b.n	800443c <__cvt+0x3c>
 800443a:	2303      	movs	r3, #3
 800443c:	aa07      	add	r2, sp, #28
 800443e:	9204      	str	r2, [sp, #16]
 8004440:	aa06      	add	r2, sp, #24
 8004442:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004446:	e9cd 3500 	strd	r3, r5, [sp]
 800444a:	4622      	mov	r2, r4
 800444c:	463b      	mov	r3, r7
 800444e:	f000 fcf7 	bl	8004e40 <_dtoa_r>
 8004452:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004456:	4606      	mov	r6, r0
 8004458:	d102      	bne.n	8004460 <__cvt+0x60>
 800445a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800445c:	07db      	lsls	r3, r3, #31
 800445e:	d522      	bpl.n	80044a6 <__cvt+0xa6>
 8004460:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004464:	eb06 0905 	add.w	r9, r6, r5
 8004468:	d110      	bne.n	800448c <__cvt+0x8c>
 800446a:	7833      	ldrb	r3, [r6, #0]
 800446c:	2b30      	cmp	r3, #48	; 0x30
 800446e:	d10a      	bne.n	8004486 <__cvt+0x86>
 8004470:	2200      	movs	r2, #0
 8004472:	2300      	movs	r3, #0
 8004474:	4620      	mov	r0, r4
 8004476:	4639      	mov	r1, r7
 8004478:	f7fc fa96 	bl	80009a8 <__aeabi_dcmpeq>
 800447c:	b918      	cbnz	r0, 8004486 <__cvt+0x86>
 800447e:	f1c5 0501 	rsb	r5, r5, #1
 8004482:	f8ca 5000 	str.w	r5, [sl]
 8004486:	f8da 3000 	ldr.w	r3, [sl]
 800448a:	4499      	add	r9, r3
 800448c:	2200      	movs	r2, #0
 800448e:	2300      	movs	r3, #0
 8004490:	4620      	mov	r0, r4
 8004492:	4639      	mov	r1, r7
 8004494:	f7fc fa88 	bl	80009a8 <__aeabi_dcmpeq>
 8004498:	b108      	cbz	r0, 800449e <__cvt+0x9e>
 800449a:	f8cd 901c 	str.w	r9, [sp, #28]
 800449e:	2230      	movs	r2, #48	; 0x30
 80044a0:	9b07      	ldr	r3, [sp, #28]
 80044a2:	454b      	cmp	r3, r9
 80044a4:	d307      	bcc.n	80044b6 <__cvt+0xb6>
 80044a6:	4630      	mov	r0, r6
 80044a8:	9b07      	ldr	r3, [sp, #28]
 80044aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80044ac:	1b9b      	subs	r3, r3, r6
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	b008      	add	sp, #32
 80044b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b6:	1c59      	adds	r1, r3, #1
 80044b8:	9107      	str	r1, [sp, #28]
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	e7f0      	b.n	80044a0 <__cvt+0xa0>

080044be <__exponent>:
 80044be:	4603      	mov	r3, r0
 80044c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044c2:	2900      	cmp	r1, #0
 80044c4:	f803 2b02 	strb.w	r2, [r3], #2
 80044c8:	bfb6      	itet	lt
 80044ca:	222d      	movlt	r2, #45	; 0x2d
 80044cc:	222b      	movge	r2, #43	; 0x2b
 80044ce:	4249      	neglt	r1, r1
 80044d0:	2909      	cmp	r1, #9
 80044d2:	7042      	strb	r2, [r0, #1]
 80044d4:	dd2b      	ble.n	800452e <__exponent+0x70>
 80044d6:	f10d 0407 	add.w	r4, sp, #7
 80044da:	46a4      	mov	ip, r4
 80044dc:	270a      	movs	r7, #10
 80044de:	fb91 f6f7 	sdiv	r6, r1, r7
 80044e2:	460a      	mov	r2, r1
 80044e4:	46a6      	mov	lr, r4
 80044e6:	fb07 1516 	mls	r5, r7, r6, r1
 80044ea:	2a63      	cmp	r2, #99	; 0x63
 80044ec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80044f0:	4631      	mov	r1, r6
 80044f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80044f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80044fa:	dcf0      	bgt.n	80044de <__exponent+0x20>
 80044fc:	3130      	adds	r1, #48	; 0x30
 80044fe:	f1ae 0502 	sub.w	r5, lr, #2
 8004502:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004506:	4629      	mov	r1, r5
 8004508:	1c44      	adds	r4, r0, #1
 800450a:	4561      	cmp	r1, ip
 800450c:	d30a      	bcc.n	8004524 <__exponent+0x66>
 800450e:	f10d 0209 	add.w	r2, sp, #9
 8004512:	eba2 020e 	sub.w	r2, r2, lr
 8004516:	4565      	cmp	r5, ip
 8004518:	bf88      	it	hi
 800451a:	2200      	movhi	r2, #0
 800451c:	4413      	add	r3, r2
 800451e:	1a18      	subs	r0, r3, r0
 8004520:	b003      	add	sp, #12
 8004522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004524:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004528:	f804 2f01 	strb.w	r2, [r4, #1]!
 800452c:	e7ed      	b.n	800450a <__exponent+0x4c>
 800452e:	2330      	movs	r3, #48	; 0x30
 8004530:	3130      	adds	r1, #48	; 0x30
 8004532:	7083      	strb	r3, [r0, #2]
 8004534:	70c1      	strb	r1, [r0, #3]
 8004536:	1d03      	adds	r3, r0, #4
 8004538:	e7f1      	b.n	800451e <__exponent+0x60>
	...

0800453c <_printf_float>:
 800453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	b091      	sub	sp, #68	; 0x44
 8004542:	460c      	mov	r4, r1
 8004544:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004548:	4616      	mov	r6, r2
 800454a:	461f      	mov	r7, r3
 800454c:	4605      	mov	r5, r0
 800454e:	f001 fa65 	bl	8005a1c <_localeconv_r>
 8004552:	6803      	ldr	r3, [r0, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	9309      	str	r3, [sp, #36]	; 0x24
 8004558:	f7fb fdfa 	bl	8000150 <strlen>
 800455c:	2300      	movs	r3, #0
 800455e:	930e      	str	r3, [sp, #56]	; 0x38
 8004560:	f8d8 3000 	ldr.w	r3, [r8]
 8004564:	900a      	str	r0, [sp, #40]	; 0x28
 8004566:	3307      	adds	r3, #7
 8004568:	f023 0307 	bic.w	r3, r3, #7
 800456c:	f103 0208 	add.w	r2, r3, #8
 8004570:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004574:	f8d4 b000 	ldr.w	fp, [r4]
 8004578:	f8c8 2000 	str.w	r2, [r8]
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004584:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004588:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800458c:	930b      	str	r3, [sp, #44]	; 0x2c
 800458e:	f04f 32ff 	mov.w	r2, #4294967295
 8004592:	4640      	mov	r0, r8
 8004594:	4b9c      	ldr	r3, [pc, #624]	; (8004808 <_printf_float+0x2cc>)
 8004596:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004598:	f7fc fa38 	bl	8000a0c <__aeabi_dcmpun>
 800459c:	bb70      	cbnz	r0, 80045fc <_printf_float+0xc0>
 800459e:	f04f 32ff 	mov.w	r2, #4294967295
 80045a2:	4640      	mov	r0, r8
 80045a4:	4b98      	ldr	r3, [pc, #608]	; (8004808 <_printf_float+0x2cc>)
 80045a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045a8:	f7fc fa12 	bl	80009d0 <__aeabi_dcmple>
 80045ac:	bb30      	cbnz	r0, 80045fc <_printf_float+0xc0>
 80045ae:	2200      	movs	r2, #0
 80045b0:	2300      	movs	r3, #0
 80045b2:	4640      	mov	r0, r8
 80045b4:	4651      	mov	r1, sl
 80045b6:	f7fc fa01 	bl	80009bc <__aeabi_dcmplt>
 80045ba:	b110      	cbz	r0, 80045c2 <_printf_float+0x86>
 80045bc:	232d      	movs	r3, #45	; 0x2d
 80045be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c2:	4b92      	ldr	r3, [pc, #584]	; (800480c <_printf_float+0x2d0>)
 80045c4:	4892      	ldr	r0, [pc, #584]	; (8004810 <_printf_float+0x2d4>)
 80045c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80045ca:	bf94      	ite	ls
 80045cc:	4698      	movls	r8, r3
 80045ce:	4680      	movhi	r8, r0
 80045d0:	2303      	movs	r3, #3
 80045d2:	f04f 0a00 	mov.w	sl, #0
 80045d6:	6123      	str	r3, [r4, #16]
 80045d8:	f02b 0304 	bic.w	r3, fp, #4
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	4633      	mov	r3, r6
 80045e0:	4621      	mov	r1, r4
 80045e2:	4628      	mov	r0, r5
 80045e4:	9700      	str	r7, [sp, #0]
 80045e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80045e8:	f000 f9d4 	bl	8004994 <_printf_common>
 80045ec:	3001      	adds	r0, #1
 80045ee:	f040 8090 	bne.w	8004712 <_printf_float+0x1d6>
 80045f2:	f04f 30ff 	mov.w	r0, #4294967295
 80045f6:	b011      	add	sp, #68	; 0x44
 80045f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fc:	4642      	mov	r2, r8
 80045fe:	4653      	mov	r3, sl
 8004600:	4640      	mov	r0, r8
 8004602:	4651      	mov	r1, sl
 8004604:	f7fc fa02 	bl	8000a0c <__aeabi_dcmpun>
 8004608:	b148      	cbz	r0, 800461e <_printf_float+0xe2>
 800460a:	f1ba 0f00 	cmp.w	sl, #0
 800460e:	bfb8      	it	lt
 8004610:	232d      	movlt	r3, #45	; 0x2d
 8004612:	4880      	ldr	r0, [pc, #512]	; (8004814 <_printf_float+0x2d8>)
 8004614:	bfb8      	it	lt
 8004616:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800461a:	4b7f      	ldr	r3, [pc, #508]	; (8004818 <_printf_float+0x2dc>)
 800461c:	e7d3      	b.n	80045c6 <_printf_float+0x8a>
 800461e:	6863      	ldr	r3, [r4, #4]
 8004620:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	d142      	bne.n	80046ae <_printf_float+0x172>
 8004628:	2306      	movs	r3, #6
 800462a:	6063      	str	r3, [r4, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	9206      	str	r2, [sp, #24]
 8004630:	aa0e      	add	r2, sp, #56	; 0x38
 8004632:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004636:	aa0d      	add	r2, sp, #52	; 0x34
 8004638:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800463c:	9203      	str	r2, [sp, #12]
 800463e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004642:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	6863      	ldr	r3, [r4, #4]
 800464a:	4642      	mov	r2, r8
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	4628      	mov	r0, r5
 8004650:	4653      	mov	r3, sl
 8004652:	910b      	str	r1, [sp, #44]	; 0x2c
 8004654:	f7ff fed4 	bl	8004400 <__cvt>
 8004658:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800465a:	4680      	mov	r8, r0
 800465c:	2947      	cmp	r1, #71	; 0x47
 800465e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004660:	d108      	bne.n	8004674 <_printf_float+0x138>
 8004662:	1cc8      	adds	r0, r1, #3
 8004664:	db02      	blt.n	800466c <_printf_float+0x130>
 8004666:	6863      	ldr	r3, [r4, #4]
 8004668:	4299      	cmp	r1, r3
 800466a:	dd40      	ble.n	80046ee <_printf_float+0x1b2>
 800466c:	f1a9 0902 	sub.w	r9, r9, #2
 8004670:	fa5f f989 	uxtb.w	r9, r9
 8004674:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004678:	d81f      	bhi.n	80046ba <_printf_float+0x17e>
 800467a:	464a      	mov	r2, r9
 800467c:	3901      	subs	r1, #1
 800467e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004682:	910d      	str	r1, [sp, #52]	; 0x34
 8004684:	f7ff ff1b 	bl	80044be <__exponent>
 8004688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800468a:	4682      	mov	sl, r0
 800468c:	1813      	adds	r3, r2, r0
 800468e:	2a01      	cmp	r2, #1
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	dc02      	bgt.n	800469a <_printf_float+0x15e>
 8004694:	6822      	ldr	r2, [r4, #0]
 8004696:	07d2      	lsls	r2, r2, #31
 8004698:	d501      	bpl.n	800469e <_printf_float+0x162>
 800469a:	3301      	adds	r3, #1
 800469c:	6123      	str	r3, [r4, #16]
 800469e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d09b      	beq.n	80045de <_printf_float+0xa2>
 80046a6:	232d      	movs	r3, #45	; 0x2d
 80046a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ac:	e797      	b.n	80045de <_printf_float+0xa2>
 80046ae:	2947      	cmp	r1, #71	; 0x47
 80046b0:	d1bc      	bne.n	800462c <_printf_float+0xf0>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1ba      	bne.n	800462c <_printf_float+0xf0>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e7b7      	b.n	800462a <_printf_float+0xee>
 80046ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80046be:	d118      	bne.n	80046f2 <_printf_float+0x1b6>
 80046c0:	2900      	cmp	r1, #0
 80046c2:	6863      	ldr	r3, [r4, #4]
 80046c4:	dd0b      	ble.n	80046de <_printf_float+0x1a2>
 80046c6:	6121      	str	r1, [r4, #16]
 80046c8:	b913      	cbnz	r3, 80046d0 <_printf_float+0x194>
 80046ca:	6822      	ldr	r2, [r4, #0]
 80046cc:	07d0      	lsls	r0, r2, #31
 80046ce:	d502      	bpl.n	80046d6 <_printf_float+0x19a>
 80046d0:	3301      	adds	r3, #1
 80046d2:	440b      	add	r3, r1
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	f04f 0a00 	mov.w	sl, #0
 80046da:	65a1      	str	r1, [r4, #88]	; 0x58
 80046dc:	e7df      	b.n	800469e <_printf_float+0x162>
 80046de:	b913      	cbnz	r3, 80046e6 <_printf_float+0x1aa>
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	07d2      	lsls	r2, r2, #31
 80046e4:	d501      	bpl.n	80046ea <_printf_float+0x1ae>
 80046e6:	3302      	adds	r3, #2
 80046e8:	e7f4      	b.n	80046d4 <_printf_float+0x198>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e7f2      	b.n	80046d4 <_printf_float+0x198>
 80046ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80046f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046f4:	4299      	cmp	r1, r3
 80046f6:	db05      	blt.n	8004704 <_printf_float+0x1c8>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	6121      	str	r1, [r4, #16]
 80046fc:	07d8      	lsls	r0, r3, #31
 80046fe:	d5ea      	bpl.n	80046d6 <_printf_float+0x19a>
 8004700:	1c4b      	adds	r3, r1, #1
 8004702:	e7e7      	b.n	80046d4 <_printf_float+0x198>
 8004704:	2900      	cmp	r1, #0
 8004706:	bfcc      	ite	gt
 8004708:	2201      	movgt	r2, #1
 800470a:	f1c1 0202 	rsble	r2, r1, #2
 800470e:	4413      	add	r3, r2
 8004710:	e7e0      	b.n	80046d4 <_printf_float+0x198>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	055a      	lsls	r2, r3, #21
 8004716:	d407      	bmi.n	8004728 <_printf_float+0x1ec>
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	4642      	mov	r2, r8
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	d12b      	bne.n	800477e <_printf_float+0x242>
 8004726:	e764      	b.n	80045f2 <_printf_float+0xb6>
 8004728:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800472c:	f240 80dd 	bls.w	80048ea <_printf_float+0x3ae>
 8004730:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004734:	2200      	movs	r2, #0
 8004736:	2300      	movs	r3, #0
 8004738:	f7fc f936 	bl	80009a8 <__aeabi_dcmpeq>
 800473c:	2800      	cmp	r0, #0
 800473e:	d033      	beq.n	80047a8 <_printf_float+0x26c>
 8004740:	2301      	movs	r3, #1
 8004742:	4631      	mov	r1, r6
 8004744:	4628      	mov	r0, r5
 8004746:	4a35      	ldr	r2, [pc, #212]	; (800481c <_printf_float+0x2e0>)
 8004748:	47b8      	blx	r7
 800474a:	3001      	adds	r0, #1
 800474c:	f43f af51 	beq.w	80045f2 <_printf_float+0xb6>
 8004750:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004754:	429a      	cmp	r2, r3
 8004756:	db02      	blt.n	800475e <_printf_float+0x222>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	07d8      	lsls	r0, r3, #31
 800475c:	d50f      	bpl.n	800477e <_printf_float+0x242>
 800475e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004762:	4631      	mov	r1, r6
 8004764:	4628      	mov	r0, r5
 8004766:	47b8      	blx	r7
 8004768:	3001      	adds	r0, #1
 800476a:	f43f af42 	beq.w	80045f2 <_printf_float+0xb6>
 800476e:	f04f 0800 	mov.w	r8, #0
 8004772:	f104 091a 	add.w	r9, r4, #26
 8004776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004778:	3b01      	subs	r3, #1
 800477a:	4543      	cmp	r3, r8
 800477c:	dc09      	bgt.n	8004792 <_printf_float+0x256>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	079b      	lsls	r3, r3, #30
 8004782:	f100 8102 	bmi.w	800498a <_printf_float+0x44e>
 8004786:	68e0      	ldr	r0, [r4, #12]
 8004788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800478a:	4298      	cmp	r0, r3
 800478c:	bfb8      	it	lt
 800478e:	4618      	movlt	r0, r3
 8004790:	e731      	b.n	80045f6 <_printf_float+0xba>
 8004792:	2301      	movs	r3, #1
 8004794:	464a      	mov	r2, r9
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	f43f af28 	beq.w	80045f2 <_printf_float+0xb6>
 80047a2:	f108 0801 	add.w	r8, r8, #1
 80047a6:	e7e6      	b.n	8004776 <_printf_float+0x23a>
 80047a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	dc38      	bgt.n	8004820 <_printf_float+0x2e4>
 80047ae:	2301      	movs	r3, #1
 80047b0:	4631      	mov	r1, r6
 80047b2:	4628      	mov	r0, r5
 80047b4:	4a19      	ldr	r2, [pc, #100]	; (800481c <_printf_float+0x2e0>)
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	f43f af1a 	beq.w	80045f2 <_printf_float+0xb6>
 80047be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d102      	bne.n	80047cc <_printf_float+0x290>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	07d9      	lsls	r1, r3, #31
 80047ca:	d5d8      	bpl.n	800477e <_printf_float+0x242>
 80047cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047d0:	4631      	mov	r1, r6
 80047d2:	4628      	mov	r0, r5
 80047d4:	47b8      	blx	r7
 80047d6:	3001      	adds	r0, #1
 80047d8:	f43f af0b 	beq.w	80045f2 <_printf_float+0xb6>
 80047dc:	f04f 0900 	mov.w	r9, #0
 80047e0:	f104 0a1a 	add.w	sl, r4, #26
 80047e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047e6:	425b      	negs	r3, r3
 80047e8:	454b      	cmp	r3, r9
 80047ea:	dc01      	bgt.n	80047f0 <_printf_float+0x2b4>
 80047ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047ee:	e794      	b.n	800471a <_printf_float+0x1de>
 80047f0:	2301      	movs	r3, #1
 80047f2:	4652      	mov	r2, sl
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	f43f aef9 	beq.w	80045f2 <_printf_float+0xb6>
 8004800:	f109 0901 	add.w	r9, r9, #1
 8004804:	e7ee      	b.n	80047e4 <_printf_float+0x2a8>
 8004806:	bf00      	nop
 8004808:	7fefffff 	.word	0x7fefffff
 800480c:	080072b8 	.word	0x080072b8
 8004810:	080072bc 	.word	0x080072bc
 8004814:	080072c4 	.word	0x080072c4
 8004818:	080072c0 	.word	0x080072c0
 800481c:	080072c8 	.word	0x080072c8
 8004820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004824:	429a      	cmp	r2, r3
 8004826:	bfa8      	it	ge
 8004828:	461a      	movge	r2, r3
 800482a:	2a00      	cmp	r2, #0
 800482c:	4691      	mov	r9, r2
 800482e:	dc37      	bgt.n	80048a0 <_printf_float+0x364>
 8004830:	f04f 0b00 	mov.w	fp, #0
 8004834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004838:	f104 021a 	add.w	r2, r4, #26
 800483c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004840:	ebaa 0309 	sub.w	r3, sl, r9
 8004844:	455b      	cmp	r3, fp
 8004846:	dc33      	bgt.n	80048b0 <_printf_float+0x374>
 8004848:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800484c:	429a      	cmp	r2, r3
 800484e:	db3b      	blt.n	80048c8 <_printf_float+0x38c>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	07da      	lsls	r2, r3, #31
 8004854:	d438      	bmi.n	80048c8 <_printf_float+0x38c>
 8004856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004858:	990d      	ldr	r1, [sp, #52]	; 0x34
 800485a:	eba3 020a 	sub.w	r2, r3, sl
 800485e:	eba3 0901 	sub.w	r9, r3, r1
 8004862:	4591      	cmp	r9, r2
 8004864:	bfa8      	it	ge
 8004866:	4691      	movge	r9, r2
 8004868:	f1b9 0f00 	cmp.w	r9, #0
 800486c:	dc34      	bgt.n	80048d8 <_printf_float+0x39c>
 800486e:	f04f 0800 	mov.w	r8, #0
 8004872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004876:	f104 0a1a 	add.w	sl, r4, #26
 800487a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	eba3 0309 	sub.w	r3, r3, r9
 8004884:	4543      	cmp	r3, r8
 8004886:	f77f af7a 	ble.w	800477e <_printf_float+0x242>
 800488a:	2301      	movs	r3, #1
 800488c:	4652      	mov	r2, sl
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	47b8      	blx	r7
 8004894:	3001      	adds	r0, #1
 8004896:	f43f aeac 	beq.w	80045f2 <_printf_float+0xb6>
 800489a:	f108 0801 	add.w	r8, r8, #1
 800489e:	e7ec      	b.n	800487a <_printf_float+0x33e>
 80048a0:	4613      	mov	r3, r2
 80048a2:	4631      	mov	r1, r6
 80048a4:	4642      	mov	r2, r8
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b8      	blx	r7
 80048aa:	3001      	adds	r0, #1
 80048ac:	d1c0      	bne.n	8004830 <_printf_float+0x2f4>
 80048ae:	e6a0      	b.n	80045f2 <_printf_float+0xb6>
 80048b0:	2301      	movs	r3, #1
 80048b2:	4631      	mov	r1, r6
 80048b4:	4628      	mov	r0, r5
 80048b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80048b8:	47b8      	blx	r7
 80048ba:	3001      	adds	r0, #1
 80048bc:	f43f ae99 	beq.w	80045f2 <_printf_float+0xb6>
 80048c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048c2:	f10b 0b01 	add.w	fp, fp, #1
 80048c6:	e7b9      	b.n	800483c <_printf_float+0x300>
 80048c8:	4631      	mov	r1, r6
 80048ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b8      	blx	r7
 80048d2:	3001      	adds	r0, #1
 80048d4:	d1bf      	bne.n	8004856 <_printf_float+0x31a>
 80048d6:	e68c      	b.n	80045f2 <_printf_float+0xb6>
 80048d8:	464b      	mov	r3, r9
 80048da:	4631      	mov	r1, r6
 80048dc:	4628      	mov	r0, r5
 80048de:	eb08 020a 	add.w	r2, r8, sl
 80048e2:	47b8      	blx	r7
 80048e4:	3001      	adds	r0, #1
 80048e6:	d1c2      	bne.n	800486e <_printf_float+0x332>
 80048e8:	e683      	b.n	80045f2 <_printf_float+0xb6>
 80048ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048ec:	2a01      	cmp	r2, #1
 80048ee:	dc01      	bgt.n	80048f4 <_printf_float+0x3b8>
 80048f0:	07db      	lsls	r3, r3, #31
 80048f2:	d537      	bpl.n	8004964 <_printf_float+0x428>
 80048f4:	2301      	movs	r3, #1
 80048f6:	4642      	mov	r2, r8
 80048f8:	4631      	mov	r1, r6
 80048fa:	4628      	mov	r0, r5
 80048fc:	47b8      	blx	r7
 80048fe:	3001      	adds	r0, #1
 8004900:	f43f ae77 	beq.w	80045f2 <_printf_float+0xb6>
 8004904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	f43f ae6f 	beq.w	80045f2 <_printf_float+0xb6>
 8004914:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004918:	2200      	movs	r2, #0
 800491a:	2300      	movs	r3, #0
 800491c:	f7fc f844 	bl	80009a8 <__aeabi_dcmpeq>
 8004920:	b9d8      	cbnz	r0, 800495a <_printf_float+0x41e>
 8004922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004924:	f108 0201 	add.w	r2, r8, #1
 8004928:	3b01      	subs	r3, #1
 800492a:	4631      	mov	r1, r6
 800492c:	4628      	mov	r0, r5
 800492e:	47b8      	blx	r7
 8004930:	3001      	adds	r0, #1
 8004932:	d10e      	bne.n	8004952 <_printf_float+0x416>
 8004934:	e65d      	b.n	80045f2 <_printf_float+0xb6>
 8004936:	2301      	movs	r3, #1
 8004938:	464a      	mov	r2, r9
 800493a:	4631      	mov	r1, r6
 800493c:	4628      	mov	r0, r5
 800493e:	47b8      	blx	r7
 8004940:	3001      	adds	r0, #1
 8004942:	f43f ae56 	beq.w	80045f2 <_printf_float+0xb6>
 8004946:	f108 0801 	add.w	r8, r8, #1
 800494a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800494c:	3b01      	subs	r3, #1
 800494e:	4543      	cmp	r3, r8
 8004950:	dcf1      	bgt.n	8004936 <_printf_float+0x3fa>
 8004952:	4653      	mov	r3, sl
 8004954:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004958:	e6e0      	b.n	800471c <_printf_float+0x1e0>
 800495a:	f04f 0800 	mov.w	r8, #0
 800495e:	f104 091a 	add.w	r9, r4, #26
 8004962:	e7f2      	b.n	800494a <_printf_float+0x40e>
 8004964:	2301      	movs	r3, #1
 8004966:	4642      	mov	r2, r8
 8004968:	e7df      	b.n	800492a <_printf_float+0x3ee>
 800496a:	2301      	movs	r3, #1
 800496c:	464a      	mov	r2, r9
 800496e:	4631      	mov	r1, r6
 8004970:	4628      	mov	r0, r5
 8004972:	47b8      	blx	r7
 8004974:	3001      	adds	r0, #1
 8004976:	f43f ae3c 	beq.w	80045f2 <_printf_float+0xb6>
 800497a:	f108 0801 	add.w	r8, r8, #1
 800497e:	68e3      	ldr	r3, [r4, #12]
 8004980:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004982:	1a5b      	subs	r3, r3, r1
 8004984:	4543      	cmp	r3, r8
 8004986:	dcf0      	bgt.n	800496a <_printf_float+0x42e>
 8004988:	e6fd      	b.n	8004786 <_printf_float+0x24a>
 800498a:	f04f 0800 	mov.w	r8, #0
 800498e:	f104 0919 	add.w	r9, r4, #25
 8004992:	e7f4      	b.n	800497e <_printf_float+0x442>

08004994 <_printf_common>:
 8004994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	4616      	mov	r6, r2
 800499a:	4699      	mov	r9, r3
 800499c:	688a      	ldr	r2, [r1, #8]
 800499e:	690b      	ldr	r3, [r1, #16]
 80049a0:	4607      	mov	r7, r0
 80049a2:	4293      	cmp	r3, r2
 80049a4:	bfb8      	it	lt
 80049a6:	4613      	movlt	r3, r2
 80049a8:	6033      	str	r3, [r6, #0]
 80049aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049ae:	460c      	mov	r4, r1
 80049b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049b4:	b10a      	cbz	r2, 80049ba <_printf_common+0x26>
 80049b6:	3301      	adds	r3, #1
 80049b8:	6033      	str	r3, [r6, #0]
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	0699      	lsls	r1, r3, #26
 80049be:	bf42      	ittt	mi
 80049c0:	6833      	ldrmi	r3, [r6, #0]
 80049c2:	3302      	addmi	r3, #2
 80049c4:	6033      	strmi	r3, [r6, #0]
 80049c6:	6825      	ldr	r5, [r4, #0]
 80049c8:	f015 0506 	ands.w	r5, r5, #6
 80049cc:	d106      	bne.n	80049dc <_printf_common+0x48>
 80049ce:	f104 0a19 	add.w	sl, r4, #25
 80049d2:	68e3      	ldr	r3, [r4, #12]
 80049d4:	6832      	ldr	r2, [r6, #0]
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	42ab      	cmp	r3, r5
 80049da:	dc28      	bgt.n	8004a2e <_printf_common+0x9a>
 80049dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049e0:	1e13      	subs	r3, r2, #0
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	bf18      	it	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	0692      	lsls	r2, r2, #26
 80049ea:	d42d      	bmi.n	8004a48 <_printf_common+0xb4>
 80049ec:	4649      	mov	r1, r9
 80049ee:	4638      	mov	r0, r7
 80049f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049f4:	47c0      	blx	r8
 80049f6:	3001      	adds	r0, #1
 80049f8:	d020      	beq.n	8004a3c <_printf_common+0xa8>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	68e5      	ldr	r5, [r4, #12]
 80049fe:	f003 0306 	and.w	r3, r3, #6
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	bf18      	it	ne
 8004a06:	2500      	movne	r5, #0
 8004a08:	6832      	ldr	r2, [r6, #0]
 8004a0a:	f04f 0600 	mov.w	r6, #0
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	bf08      	it	eq
 8004a12:	1aad      	subeq	r5, r5, r2
 8004a14:	6922      	ldr	r2, [r4, #16]
 8004a16:	bf08      	it	eq
 8004a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	bfc4      	itt	gt
 8004a20:	1a9b      	subgt	r3, r3, r2
 8004a22:	18ed      	addgt	r5, r5, r3
 8004a24:	341a      	adds	r4, #26
 8004a26:	42b5      	cmp	r5, r6
 8004a28:	d11a      	bne.n	8004a60 <_printf_common+0xcc>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e008      	b.n	8004a40 <_printf_common+0xac>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	4652      	mov	r2, sl
 8004a32:	4649      	mov	r1, r9
 8004a34:	4638      	mov	r0, r7
 8004a36:	47c0      	blx	r8
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d103      	bne.n	8004a44 <_printf_common+0xb0>
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a44:	3501      	adds	r5, #1
 8004a46:	e7c4      	b.n	80049d2 <_printf_common+0x3e>
 8004a48:	2030      	movs	r0, #48	; 0x30
 8004a4a:	18e1      	adds	r1, r4, r3
 8004a4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a56:	4422      	add	r2, r4
 8004a58:	3302      	adds	r3, #2
 8004a5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a5e:	e7c5      	b.n	80049ec <_printf_common+0x58>
 8004a60:	2301      	movs	r3, #1
 8004a62:	4622      	mov	r2, r4
 8004a64:	4649      	mov	r1, r9
 8004a66:	4638      	mov	r0, r7
 8004a68:	47c0      	blx	r8
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d0e6      	beq.n	8004a3c <_printf_common+0xa8>
 8004a6e:	3601      	adds	r6, #1
 8004a70:	e7d9      	b.n	8004a26 <_printf_common+0x92>
	...

08004a74 <_printf_i>:
 8004a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a78:	7e0f      	ldrb	r7, [r1, #24]
 8004a7a:	4691      	mov	r9, r2
 8004a7c:	2f78      	cmp	r7, #120	; 0x78
 8004a7e:	4680      	mov	r8, r0
 8004a80:	460c      	mov	r4, r1
 8004a82:	469a      	mov	sl, r3
 8004a84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a8a:	d807      	bhi.n	8004a9c <_printf_i+0x28>
 8004a8c:	2f62      	cmp	r7, #98	; 0x62
 8004a8e:	d80a      	bhi.n	8004aa6 <_printf_i+0x32>
 8004a90:	2f00      	cmp	r7, #0
 8004a92:	f000 80d9 	beq.w	8004c48 <_printf_i+0x1d4>
 8004a96:	2f58      	cmp	r7, #88	; 0x58
 8004a98:	f000 80a4 	beq.w	8004be4 <_printf_i+0x170>
 8004a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004aa4:	e03a      	b.n	8004b1c <_printf_i+0xa8>
 8004aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aaa:	2b15      	cmp	r3, #21
 8004aac:	d8f6      	bhi.n	8004a9c <_printf_i+0x28>
 8004aae:	a101      	add	r1, pc, #4	; (adr r1, 8004ab4 <_printf_i+0x40>)
 8004ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ab4:	08004b0d 	.word	0x08004b0d
 8004ab8:	08004b21 	.word	0x08004b21
 8004abc:	08004a9d 	.word	0x08004a9d
 8004ac0:	08004a9d 	.word	0x08004a9d
 8004ac4:	08004a9d 	.word	0x08004a9d
 8004ac8:	08004a9d 	.word	0x08004a9d
 8004acc:	08004b21 	.word	0x08004b21
 8004ad0:	08004a9d 	.word	0x08004a9d
 8004ad4:	08004a9d 	.word	0x08004a9d
 8004ad8:	08004a9d 	.word	0x08004a9d
 8004adc:	08004a9d 	.word	0x08004a9d
 8004ae0:	08004c2f 	.word	0x08004c2f
 8004ae4:	08004b51 	.word	0x08004b51
 8004ae8:	08004c11 	.word	0x08004c11
 8004aec:	08004a9d 	.word	0x08004a9d
 8004af0:	08004a9d 	.word	0x08004a9d
 8004af4:	08004c51 	.word	0x08004c51
 8004af8:	08004a9d 	.word	0x08004a9d
 8004afc:	08004b51 	.word	0x08004b51
 8004b00:	08004a9d 	.word	0x08004a9d
 8004b04:	08004a9d 	.word	0x08004a9d
 8004b08:	08004c19 	.word	0x08004c19
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	1d1a      	adds	r2, r3, #4
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	602a      	str	r2, [r5, #0]
 8004b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0a4      	b.n	8004c6a <_printf_i+0x1f6>
 8004b20:	6820      	ldr	r0, [r4, #0]
 8004b22:	6829      	ldr	r1, [r5, #0]
 8004b24:	0606      	lsls	r6, r0, #24
 8004b26:	f101 0304 	add.w	r3, r1, #4
 8004b2a:	d50a      	bpl.n	8004b42 <_printf_i+0xce>
 8004b2c:	680e      	ldr	r6, [r1, #0]
 8004b2e:	602b      	str	r3, [r5, #0]
 8004b30:	2e00      	cmp	r6, #0
 8004b32:	da03      	bge.n	8004b3c <_printf_i+0xc8>
 8004b34:	232d      	movs	r3, #45	; 0x2d
 8004b36:	4276      	negs	r6, r6
 8004b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b3c:	230a      	movs	r3, #10
 8004b3e:	485e      	ldr	r0, [pc, #376]	; (8004cb8 <_printf_i+0x244>)
 8004b40:	e019      	b.n	8004b76 <_printf_i+0x102>
 8004b42:	680e      	ldr	r6, [r1, #0]
 8004b44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b48:	602b      	str	r3, [r5, #0]
 8004b4a:	bf18      	it	ne
 8004b4c:	b236      	sxthne	r6, r6
 8004b4e:	e7ef      	b.n	8004b30 <_printf_i+0xbc>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	6820      	ldr	r0, [r4, #0]
 8004b54:	1d19      	adds	r1, r3, #4
 8004b56:	6029      	str	r1, [r5, #0]
 8004b58:	0601      	lsls	r1, r0, #24
 8004b5a:	d501      	bpl.n	8004b60 <_printf_i+0xec>
 8004b5c:	681e      	ldr	r6, [r3, #0]
 8004b5e:	e002      	b.n	8004b66 <_printf_i+0xf2>
 8004b60:	0646      	lsls	r6, r0, #25
 8004b62:	d5fb      	bpl.n	8004b5c <_printf_i+0xe8>
 8004b64:	881e      	ldrh	r6, [r3, #0]
 8004b66:	2f6f      	cmp	r7, #111	; 0x6f
 8004b68:	bf0c      	ite	eq
 8004b6a:	2308      	moveq	r3, #8
 8004b6c:	230a      	movne	r3, #10
 8004b6e:	4852      	ldr	r0, [pc, #328]	; (8004cb8 <_printf_i+0x244>)
 8004b70:	2100      	movs	r1, #0
 8004b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b76:	6865      	ldr	r5, [r4, #4]
 8004b78:	2d00      	cmp	r5, #0
 8004b7a:	bfa8      	it	ge
 8004b7c:	6821      	ldrge	r1, [r4, #0]
 8004b7e:	60a5      	str	r5, [r4, #8]
 8004b80:	bfa4      	itt	ge
 8004b82:	f021 0104 	bicge.w	r1, r1, #4
 8004b86:	6021      	strge	r1, [r4, #0]
 8004b88:	b90e      	cbnz	r6, 8004b8e <_printf_i+0x11a>
 8004b8a:	2d00      	cmp	r5, #0
 8004b8c:	d04d      	beq.n	8004c2a <_printf_i+0x1b6>
 8004b8e:	4615      	mov	r5, r2
 8004b90:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b94:	fb03 6711 	mls	r7, r3, r1, r6
 8004b98:	5dc7      	ldrb	r7, [r0, r7]
 8004b9a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b9e:	4637      	mov	r7, r6
 8004ba0:	42bb      	cmp	r3, r7
 8004ba2:	460e      	mov	r6, r1
 8004ba4:	d9f4      	bls.n	8004b90 <_printf_i+0x11c>
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d10b      	bne.n	8004bc2 <_printf_i+0x14e>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	07de      	lsls	r6, r3, #31
 8004bae:	d508      	bpl.n	8004bc2 <_printf_i+0x14e>
 8004bb0:	6923      	ldr	r3, [r4, #16]
 8004bb2:	6861      	ldr	r1, [r4, #4]
 8004bb4:	4299      	cmp	r1, r3
 8004bb6:	bfde      	ittt	le
 8004bb8:	2330      	movle	r3, #48	; 0x30
 8004bba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bbe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bc2:	1b52      	subs	r2, r2, r5
 8004bc4:	6122      	str	r2, [r4, #16]
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	4621      	mov	r1, r4
 8004bca:	4640      	mov	r0, r8
 8004bcc:	f8cd a000 	str.w	sl, [sp]
 8004bd0:	aa03      	add	r2, sp, #12
 8004bd2:	f7ff fedf 	bl	8004994 <_printf_common>
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d14c      	bne.n	8004c74 <_printf_i+0x200>
 8004bda:	f04f 30ff 	mov.w	r0, #4294967295
 8004bde:	b004      	add	sp, #16
 8004be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be4:	4834      	ldr	r0, [pc, #208]	; (8004cb8 <_printf_i+0x244>)
 8004be6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bea:	6829      	ldr	r1, [r5, #0]
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bf2:	6029      	str	r1, [r5, #0]
 8004bf4:	061d      	lsls	r5, r3, #24
 8004bf6:	d514      	bpl.n	8004c22 <_printf_i+0x1ae>
 8004bf8:	07df      	lsls	r7, r3, #31
 8004bfa:	bf44      	itt	mi
 8004bfc:	f043 0320 	orrmi.w	r3, r3, #32
 8004c00:	6023      	strmi	r3, [r4, #0]
 8004c02:	b91e      	cbnz	r6, 8004c0c <_printf_i+0x198>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	f023 0320 	bic.w	r3, r3, #32
 8004c0a:	6023      	str	r3, [r4, #0]
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	e7af      	b.n	8004b70 <_printf_i+0xfc>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	f043 0320 	orr.w	r3, r3, #32
 8004c16:	6023      	str	r3, [r4, #0]
 8004c18:	2378      	movs	r3, #120	; 0x78
 8004c1a:	4828      	ldr	r0, [pc, #160]	; (8004cbc <_printf_i+0x248>)
 8004c1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c20:	e7e3      	b.n	8004bea <_printf_i+0x176>
 8004c22:	0659      	lsls	r1, r3, #25
 8004c24:	bf48      	it	mi
 8004c26:	b2b6      	uxthmi	r6, r6
 8004c28:	e7e6      	b.n	8004bf8 <_printf_i+0x184>
 8004c2a:	4615      	mov	r5, r2
 8004c2c:	e7bb      	b.n	8004ba6 <_printf_i+0x132>
 8004c2e:	682b      	ldr	r3, [r5, #0]
 8004c30:	6826      	ldr	r6, [r4, #0]
 8004c32:	1d18      	adds	r0, r3, #4
 8004c34:	6961      	ldr	r1, [r4, #20]
 8004c36:	6028      	str	r0, [r5, #0]
 8004c38:	0635      	lsls	r5, r6, #24
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	d501      	bpl.n	8004c42 <_printf_i+0x1ce>
 8004c3e:	6019      	str	r1, [r3, #0]
 8004c40:	e002      	b.n	8004c48 <_printf_i+0x1d4>
 8004c42:	0670      	lsls	r0, r6, #25
 8004c44:	d5fb      	bpl.n	8004c3e <_printf_i+0x1ca>
 8004c46:	8019      	strh	r1, [r3, #0]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4615      	mov	r5, r2
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	e7ba      	b.n	8004bc6 <_printf_i+0x152>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	2100      	movs	r1, #0
 8004c54:	1d1a      	adds	r2, r3, #4
 8004c56:	602a      	str	r2, [r5, #0]
 8004c58:	681d      	ldr	r5, [r3, #0]
 8004c5a:	6862      	ldr	r2, [r4, #4]
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 fee9 	bl	8005a34 <memchr>
 8004c62:	b108      	cbz	r0, 8004c68 <_printf_i+0x1f4>
 8004c64:	1b40      	subs	r0, r0, r5
 8004c66:	6060      	str	r0, [r4, #4]
 8004c68:	6863      	ldr	r3, [r4, #4]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c72:	e7a8      	b.n	8004bc6 <_printf_i+0x152>
 8004c74:	462a      	mov	r2, r5
 8004c76:	4649      	mov	r1, r9
 8004c78:	4640      	mov	r0, r8
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	47d0      	blx	sl
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d0ab      	beq.n	8004bda <_printf_i+0x166>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	079b      	lsls	r3, r3, #30
 8004c86:	d413      	bmi.n	8004cb0 <_printf_i+0x23c>
 8004c88:	68e0      	ldr	r0, [r4, #12]
 8004c8a:	9b03      	ldr	r3, [sp, #12]
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	bfb8      	it	lt
 8004c90:	4618      	movlt	r0, r3
 8004c92:	e7a4      	b.n	8004bde <_printf_i+0x16a>
 8004c94:	2301      	movs	r3, #1
 8004c96:	4632      	mov	r2, r6
 8004c98:	4649      	mov	r1, r9
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	47d0      	blx	sl
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d09b      	beq.n	8004bda <_printf_i+0x166>
 8004ca2:	3501      	adds	r5, #1
 8004ca4:	68e3      	ldr	r3, [r4, #12]
 8004ca6:	9903      	ldr	r1, [sp, #12]
 8004ca8:	1a5b      	subs	r3, r3, r1
 8004caa:	42ab      	cmp	r3, r5
 8004cac:	dcf2      	bgt.n	8004c94 <_printf_i+0x220>
 8004cae:	e7eb      	b.n	8004c88 <_printf_i+0x214>
 8004cb0:	2500      	movs	r5, #0
 8004cb2:	f104 0619 	add.w	r6, r4, #25
 8004cb6:	e7f5      	b.n	8004ca4 <_printf_i+0x230>
 8004cb8:	080072ca 	.word	0x080072ca
 8004cbc:	080072db 	.word	0x080072db

08004cc0 <siprintf>:
 8004cc0:	b40e      	push	{r1, r2, r3}
 8004cc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cc6:	b500      	push	{lr}
 8004cc8:	b09c      	sub	sp, #112	; 0x70
 8004cca:	ab1d      	add	r3, sp, #116	; 0x74
 8004ccc:	9002      	str	r0, [sp, #8]
 8004cce:	9006      	str	r0, [sp, #24]
 8004cd0:	9107      	str	r1, [sp, #28]
 8004cd2:	9104      	str	r1, [sp, #16]
 8004cd4:	4808      	ldr	r0, [pc, #32]	; (8004cf8 <siprintf+0x38>)
 8004cd6:	4909      	ldr	r1, [pc, #36]	; (8004cfc <siprintf+0x3c>)
 8004cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cdc:	9105      	str	r1, [sp, #20]
 8004cde:	6800      	ldr	r0, [r0, #0]
 8004ce0:	a902      	add	r1, sp, #8
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	f001 fb90 	bl	8006408 <_svfiprintf_r>
 8004ce8:	2200      	movs	r2, #0
 8004cea:	9b02      	ldr	r3, [sp, #8]
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	b01c      	add	sp, #112	; 0x70
 8004cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cf4:	b003      	add	sp, #12
 8004cf6:	4770      	bx	lr
 8004cf8:	2000001c 	.word	0x2000001c
 8004cfc:	ffff0208 	.word	0xffff0208

08004d00 <strncpy>:
 8004d00:	4603      	mov	r3, r0
 8004d02:	b510      	push	{r4, lr}
 8004d04:	3901      	subs	r1, #1
 8004d06:	b132      	cbz	r2, 8004d16 <strncpy+0x16>
 8004d08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	f803 4b01 	strb.w	r4, [r3], #1
 8004d12:	2c00      	cmp	r4, #0
 8004d14:	d1f7      	bne.n	8004d06 <strncpy+0x6>
 8004d16:	2100      	movs	r1, #0
 8004d18:	441a      	add	r2, r3
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d100      	bne.n	8004d20 <strncpy+0x20>
 8004d1e:	bd10      	pop	{r4, pc}
 8004d20:	f803 1b01 	strb.w	r1, [r3], #1
 8004d24:	e7f9      	b.n	8004d1a <strncpy+0x1a>

08004d26 <quorem>:
 8004d26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	6903      	ldr	r3, [r0, #16]
 8004d2c:	690c      	ldr	r4, [r1, #16]
 8004d2e:	4607      	mov	r7, r0
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	f2c0 8082 	blt.w	8004e3a <quorem+0x114>
 8004d36:	3c01      	subs	r4, #1
 8004d38:	f100 0514 	add.w	r5, r0, #20
 8004d3c:	f101 0814 	add.w	r8, r1, #20
 8004d40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d44:	9301      	str	r3, [sp, #4]
 8004d46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	429a      	cmp	r2, r3
 8004d52:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d56:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d5a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d5e:	d331      	bcc.n	8004dc4 <quorem+0x9e>
 8004d60:	f04f 0e00 	mov.w	lr, #0
 8004d64:	4640      	mov	r0, r8
 8004d66:	46ac      	mov	ip, r5
 8004d68:	46f2      	mov	sl, lr
 8004d6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d6e:	b293      	uxth	r3, r2
 8004d70:	fb06 e303 	mla	r3, r6, r3, lr
 8004d74:	0c12      	lsrs	r2, r2, #16
 8004d76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	fb06 e202 	mla	r2, r6, r2, lr
 8004d80:	ebaa 0303 	sub.w	r3, sl, r3
 8004d84:	f8dc a000 	ldr.w	sl, [ip]
 8004d88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d8c:	fa1f fa8a 	uxth.w	sl, sl
 8004d90:	4453      	add	r3, sl
 8004d92:	f8dc a000 	ldr.w	sl, [ip]
 8004d96:	b292      	uxth	r2, r2
 8004d98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004da6:	4581      	cmp	r9, r0
 8004da8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004dac:	f84c 3b04 	str.w	r3, [ip], #4
 8004db0:	d2db      	bcs.n	8004d6a <quorem+0x44>
 8004db2:	f855 300b 	ldr.w	r3, [r5, fp]
 8004db6:	b92b      	cbnz	r3, 8004dc4 <quorem+0x9e>
 8004db8:	9b01      	ldr	r3, [sp, #4]
 8004dba:	3b04      	subs	r3, #4
 8004dbc:	429d      	cmp	r5, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	d32f      	bcc.n	8004e22 <quorem+0xfc>
 8004dc2:	613c      	str	r4, [r7, #16]
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	f001 f8cf 	bl	8005f68 <__mcmp>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	db25      	blt.n	8004e1a <quorem+0xf4>
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f04f 0c00 	mov.w	ip, #0
 8004dd4:	3601      	adds	r6, #1
 8004dd6:	f858 1b04 	ldr.w	r1, [r8], #4
 8004dda:	f8d0 e000 	ldr.w	lr, [r0]
 8004dde:	b28b      	uxth	r3, r1
 8004de0:	ebac 0303 	sub.w	r3, ip, r3
 8004de4:	fa1f f28e 	uxth.w	r2, lr
 8004de8:	4413      	add	r3, r2
 8004dea:	0c0a      	lsrs	r2, r1, #16
 8004dec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004df0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dfa:	45c1      	cmp	r9, r8
 8004dfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e00:	f840 3b04 	str.w	r3, [r0], #4
 8004e04:	d2e7      	bcs.n	8004dd6 <quorem+0xb0>
 8004e06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e0e:	b922      	cbnz	r2, 8004e1a <quorem+0xf4>
 8004e10:	3b04      	subs	r3, #4
 8004e12:	429d      	cmp	r5, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	d30a      	bcc.n	8004e2e <quorem+0x108>
 8004e18:	613c      	str	r4, [r7, #16]
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	b003      	add	sp, #12
 8004e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	3b04      	subs	r3, #4
 8004e26:	2a00      	cmp	r2, #0
 8004e28:	d1cb      	bne.n	8004dc2 <quorem+0x9c>
 8004e2a:	3c01      	subs	r4, #1
 8004e2c:	e7c6      	b.n	8004dbc <quorem+0x96>
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	3b04      	subs	r3, #4
 8004e32:	2a00      	cmp	r2, #0
 8004e34:	d1f0      	bne.n	8004e18 <quorem+0xf2>
 8004e36:	3c01      	subs	r4, #1
 8004e38:	e7eb      	b.n	8004e12 <quorem+0xec>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	e7ee      	b.n	8004e1c <quorem+0xf6>
	...

08004e40 <_dtoa_r>:
 8004e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e44:	4616      	mov	r6, r2
 8004e46:	461f      	mov	r7, r3
 8004e48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004e4a:	b099      	sub	sp, #100	; 0x64
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e52:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004e56:	b974      	cbnz	r4, 8004e76 <_dtoa_r+0x36>
 8004e58:	2010      	movs	r0, #16
 8004e5a:	f000 fde3 	bl	8005a24 <malloc>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6268      	str	r0, [r5, #36]	; 0x24
 8004e62:	b920      	cbnz	r0, 8004e6e <_dtoa_r+0x2e>
 8004e64:	21ea      	movs	r1, #234	; 0xea
 8004e66:	4ba8      	ldr	r3, [pc, #672]	; (8005108 <_dtoa_r+0x2c8>)
 8004e68:	48a8      	ldr	r0, [pc, #672]	; (800510c <_dtoa_r+0x2cc>)
 8004e6a:	f001 fbdd 	bl	8006628 <__assert_func>
 8004e6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e72:	6004      	str	r4, [r0, #0]
 8004e74:	60c4      	str	r4, [r0, #12]
 8004e76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	b151      	cbz	r1, 8004e92 <_dtoa_r+0x52>
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4093      	lsls	r3, r2
 8004e82:	604a      	str	r2, [r1, #4]
 8004e84:	608b      	str	r3, [r1, #8]
 8004e86:	4628      	mov	r0, r5
 8004e88:	f000 fe30 	bl	8005aec <_Bfree>
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	1e3b      	subs	r3, r7, #0
 8004e94:	bfaf      	iteee	ge
 8004e96:	2300      	movge	r3, #0
 8004e98:	2201      	movlt	r2, #1
 8004e9a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e9e:	9305      	strlt	r3, [sp, #20]
 8004ea0:	bfa8      	it	ge
 8004ea2:	f8c8 3000 	strge.w	r3, [r8]
 8004ea6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004eaa:	4b99      	ldr	r3, [pc, #612]	; (8005110 <_dtoa_r+0x2d0>)
 8004eac:	bfb8      	it	lt
 8004eae:	f8c8 2000 	strlt.w	r2, [r8]
 8004eb2:	ea33 0309 	bics.w	r3, r3, r9
 8004eb6:	d119      	bne.n	8004eec <_dtoa_r+0xac>
 8004eb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ebc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ec4:	4333      	orrs	r3, r6
 8004ec6:	f000 857f 	beq.w	80059c8 <_dtoa_r+0xb88>
 8004eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ecc:	b953      	cbnz	r3, 8004ee4 <_dtoa_r+0xa4>
 8004ece:	4b91      	ldr	r3, [pc, #580]	; (8005114 <_dtoa_r+0x2d4>)
 8004ed0:	e022      	b.n	8004f18 <_dtoa_r+0xd8>
 8004ed2:	4b91      	ldr	r3, [pc, #580]	; (8005118 <_dtoa_r+0x2d8>)
 8004ed4:	9303      	str	r3, [sp, #12]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	9803      	ldr	r0, [sp, #12]
 8004ede:	b019      	add	sp, #100	; 0x64
 8004ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee4:	4b8b      	ldr	r3, [pc, #556]	; (8005114 <_dtoa_r+0x2d4>)
 8004ee6:	9303      	str	r3, [sp, #12]
 8004ee8:	3303      	adds	r3, #3
 8004eea:	e7f5      	b.n	8004ed8 <_dtoa_r+0x98>
 8004eec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004ef0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004ef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2300      	movs	r3, #0
 8004efc:	f7fb fd54 	bl	80009a8 <__aeabi_dcmpeq>
 8004f00:	4680      	mov	r8, r0
 8004f02:	b158      	cbz	r0, 8004f1c <_dtoa_r+0xdc>
 8004f04:	2301      	movs	r3, #1
 8004f06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8558 	beq.w	80059c2 <_dtoa_r+0xb82>
 8004f12:	4882      	ldr	r0, [pc, #520]	; (800511c <_dtoa_r+0x2dc>)
 8004f14:	6018      	str	r0, [r3, #0]
 8004f16:	1e43      	subs	r3, r0, #1
 8004f18:	9303      	str	r3, [sp, #12]
 8004f1a:	e7df      	b.n	8004edc <_dtoa_r+0x9c>
 8004f1c:	ab16      	add	r3, sp, #88	; 0x58
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	ab17      	add	r3, sp, #92	; 0x5c
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	4628      	mov	r0, r5
 8004f26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f2a:	f001 f8c5 	bl	80060b8 <__d2b>
 8004f2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f32:	4683      	mov	fp, r0
 8004f34:	2c00      	cmp	r4, #0
 8004f36:	d07f      	beq.n	8005038 <_dtoa_r+0x1f8>
 8004f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f3e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004f4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004f4e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004f52:	2200      	movs	r2, #0
 8004f54:	4b72      	ldr	r3, [pc, #456]	; (8005120 <_dtoa_r+0x2e0>)
 8004f56:	f7fb f907 	bl	8000168 <__aeabi_dsub>
 8004f5a:	a365      	add	r3, pc, #404	; (adr r3, 80050f0 <_dtoa_r+0x2b0>)
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f7fb faba 	bl	80004d8 <__aeabi_dmul>
 8004f64:	a364      	add	r3, pc, #400	; (adr r3, 80050f8 <_dtoa_r+0x2b8>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb f8ff 	bl	800016c <__adddf3>
 8004f6e:	4606      	mov	r6, r0
 8004f70:	4620      	mov	r0, r4
 8004f72:	460f      	mov	r7, r1
 8004f74:	f7fb fa46 	bl	8000404 <__aeabi_i2d>
 8004f78:	a361      	add	r3, pc, #388	; (adr r3, 8005100 <_dtoa_r+0x2c0>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f7fb faab 	bl	80004d8 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4630      	mov	r0, r6
 8004f88:	4639      	mov	r1, r7
 8004f8a:	f7fb f8ef 	bl	800016c <__adddf3>
 8004f8e:	4606      	mov	r6, r0
 8004f90:	460f      	mov	r7, r1
 8004f92:	f7fb fd51 	bl	8000a38 <__aeabi_d2iz>
 8004f96:	2200      	movs	r2, #0
 8004f98:	4682      	mov	sl, r0
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb fd0c 	bl	80009bc <__aeabi_dcmplt>
 8004fa4:	b148      	cbz	r0, 8004fba <_dtoa_r+0x17a>
 8004fa6:	4650      	mov	r0, sl
 8004fa8:	f7fb fa2c 	bl	8000404 <__aeabi_i2d>
 8004fac:	4632      	mov	r2, r6
 8004fae:	463b      	mov	r3, r7
 8004fb0:	f7fb fcfa 	bl	80009a8 <__aeabi_dcmpeq>
 8004fb4:	b908      	cbnz	r0, 8004fba <_dtoa_r+0x17a>
 8004fb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fba:	f1ba 0f16 	cmp.w	sl, #22
 8004fbe:	d858      	bhi.n	8005072 <_dtoa_r+0x232>
 8004fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fc4:	4b57      	ldr	r3, [pc, #348]	; (8005124 <_dtoa_r+0x2e4>)
 8004fc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	f7fb fcf5 	bl	80009bc <__aeabi_dcmplt>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	d04f      	beq.n	8005076 <_dtoa_r+0x236>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fde:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004fe0:	1b1c      	subs	r4, r3, r4
 8004fe2:	1e63      	subs	r3, r4, #1
 8004fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe6:	bf49      	itett	mi
 8004fe8:	f1c4 0301 	rsbmi	r3, r4, #1
 8004fec:	2300      	movpl	r3, #0
 8004fee:	9306      	strmi	r3, [sp, #24]
 8004ff0:	2300      	movmi	r3, #0
 8004ff2:	bf54      	ite	pl
 8004ff4:	9306      	strpl	r3, [sp, #24]
 8004ff6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004ff8:	f1ba 0f00 	cmp.w	sl, #0
 8004ffc:	db3d      	blt.n	800507a <_dtoa_r+0x23a>
 8004ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005000:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005004:	4453      	add	r3, sl
 8005006:	9309      	str	r3, [sp, #36]	; 0x24
 8005008:	2300      	movs	r3, #0
 800500a:	930a      	str	r3, [sp, #40]	; 0x28
 800500c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800500e:	2b09      	cmp	r3, #9
 8005010:	f200 808c 	bhi.w	800512c <_dtoa_r+0x2ec>
 8005014:	2b05      	cmp	r3, #5
 8005016:	bfc4      	itt	gt
 8005018:	3b04      	subgt	r3, #4
 800501a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800501c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800501e:	bfc8      	it	gt
 8005020:	2400      	movgt	r4, #0
 8005022:	f1a3 0302 	sub.w	r3, r3, #2
 8005026:	bfd8      	it	le
 8005028:	2401      	movle	r4, #1
 800502a:	2b03      	cmp	r3, #3
 800502c:	f200 808a 	bhi.w	8005144 <_dtoa_r+0x304>
 8005030:	e8df f003 	tbb	[pc, r3]
 8005034:	5b4d4f2d 	.word	0x5b4d4f2d
 8005038:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800503c:	441c      	add	r4, r3
 800503e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005042:	2b20      	cmp	r3, #32
 8005044:	bfc3      	ittte	gt
 8005046:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800504a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800504e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005052:	f1c3 0320 	rsble	r3, r3, #32
 8005056:	bfc6      	itte	gt
 8005058:	fa26 f000 	lsrgt.w	r0, r6, r0
 800505c:	4318      	orrgt	r0, r3
 800505e:	fa06 f003 	lslle.w	r0, r6, r3
 8005062:	f7fb f9bf 	bl	80003e4 <__aeabi_ui2d>
 8005066:	2301      	movs	r3, #1
 8005068:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800506c:	3c01      	subs	r4, #1
 800506e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005070:	e76f      	b.n	8004f52 <_dtoa_r+0x112>
 8005072:	2301      	movs	r3, #1
 8005074:	e7b2      	b.n	8004fdc <_dtoa_r+0x19c>
 8005076:	900f      	str	r0, [sp, #60]	; 0x3c
 8005078:	e7b1      	b.n	8004fde <_dtoa_r+0x19e>
 800507a:	9b06      	ldr	r3, [sp, #24]
 800507c:	eba3 030a 	sub.w	r3, r3, sl
 8005080:	9306      	str	r3, [sp, #24]
 8005082:	f1ca 0300 	rsb	r3, sl, #0
 8005086:	930a      	str	r3, [sp, #40]	; 0x28
 8005088:	2300      	movs	r3, #0
 800508a:	930e      	str	r3, [sp, #56]	; 0x38
 800508c:	e7be      	b.n	800500c <_dtoa_r+0x1cc>
 800508e:	2300      	movs	r3, #0
 8005090:	930b      	str	r3, [sp, #44]	; 0x2c
 8005092:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005094:	2b00      	cmp	r3, #0
 8005096:	dc58      	bgt.n	800514a <_dtoa_r+0x30a>
 8005098:	f04f 0901 	mov.w	r9, #1
 800509c:	464b      	mov	r3, r9
 800509e:	f8cd 9020 	str.w	r9, [sp, #32]
 80050a2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80050a6:	2200      	movs	r2, #0
 80050a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80050aa:	6042      	str	r2, [r0, #4]
 80050ac:	2204      	movs	r2, #4
 80050ae:	f102 0614 	add.w	r6, r2, #20
 80050b2:	429e      	cmp	r6, r3
 80050b4:	6841      	ldr	r1, [r0, #4]
 80050b6:	d94e      	bls.n	8005156 <_dtoa_r+0x316>
 80050b8:	4628      	mov	r0, r5
 80050ba:	f000 fcd7 	bl	8005a6c <_Balloc>
 80050be:	9003      	str	r0, [sp, #12]
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d14c      	bne.n	800515e <_dtoa_r+0x31e>
 80050c4:	4602      	mov	r2, r0
 80050c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050ca:	4b17      	ldr	r3, [pc, #92]	; (8005128 <_dtoa_r+0x2e8>)
 80050cc:	e6cc      	b.n	8004e68 <_dtoa_r+0x28>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e7de      	b.n	8005090 <_dtoa_r+0x250>
 80050d2:	2300      	movs	r3, #0
 80050d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80050d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050d8:	eb0a 0903 	add.w	r9, sl, r3
 80050dc:	f109 0301 	add.w	r3, r9, #1
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	9308      	str	r3, [sp, #32]
 80050e4:	bfb8      	it	lt
 80050e6:	2301      	movlt	r3, #1
 80050e8:	e7dd      	b.n	80050a6 <_dtoa_r+0x266>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e7f2      	b.n	80050d4 <_dtoa_r+0x294>
 80050ee:	bf00      	nop
 80050f0:	636f4361 	.word	0x636f4361
 80050f4:	3fd287a7 	.word	0x3fd287a7
 80050f8:	8b60c8b3 	.word	0x8b60c8b3
 80050fc:	3fc68a28 	.word	0x3fc68a28
 8005100:	509f79fb 	.word	0x509f79fb
 8005104:	3fd34413 	.word	0x3fd34413
 8005108:	080072f9 	.word	0x080072f9
 800510c:	08007310 	.word	0x08007310
 8005110:	7ff00000 	.word	0x7ff00000
 8005114:	080072f5 	.word	0x080072f5
 8005118:	080072ec 	.word	0x080072ec
 800511c:	080072c9 	.word	0x080072c9
 8005120:	3ff80000 	.word	0x3ff80000
 8005124:	08007400 	.word	0x08007400
 8005128:	0800736b 	.word	0x0800736b
 800512c:	2401      	movs	r4, #1
 800512e:	2300      	movs	r3, #0
 8005130:	940b      	str	r4, [sp, #44]	; 0x2c
 8005132:	9322      	str	r3, [sp, #136]	; 0x88
 8005134:	f04f 39ff 	mov.w	r9, #4294967295
 8005138:	2200      	movs	r2, #0
 800513a:	2312      	movs	r3, #18
 800513c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005140:	9223      	str	r2, [sp, #140]	; 0x8c
 8005142:	e7b0      	b.n	80050a6 <_dtoa_r+0x266>
 8005144:	2301      	movs	r3, #1
 8005146:	930b      	str	r3, [sp, #44]	; 0x2c
 8005148:	e7f4      	b.n	8005134 <_dtoa_r+0x2f4>
 800514a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800514e:	464b      	mov	r3, r9
 8005150:	f8cd 9020 	str.w	r9, [sp, #32]
 8005154:	e7a7      	b.n	80050a6 <_dtoa_r+0x266>
 8005156:	3101      	adds	r1, #1
 8005158:	6041      	str	r1, [r0, #4]
 800515a:	0052      	lsls	r2, r2, #1
 800515c:	e7a7      	b.n	80050ae <_dtoa_r+0x26e>
 800515e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005160:	9a03      	ldr	r2, [sp, #12]
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	9b08      	ldr	r3, [sp, #32]
 8005166:	2b0e      	cmp	r3, #14
 8005168:	f200 80a8 	bhi.w	80052bc <_dtoa_r+0x47c>
 800516c:	2c00      	cmp	r4, #0
 800516e:	f000 80a5 	beq.w	80052bc <_dtoa_r+0x47c>
 8005172:	f1ba 0f00 	cmp.w	sl, #0
 8005176:	dd34      	ble.n	80051e2 <_dtoa_r+0x3a2>
 8005178:	4a9a      	ldr	r2, [pc, #616]	; (80053e4 <_dtoa_r+0x5a4>)
 800517a:	f00a 030f 	and.w	r3, sl, #15
 800517e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005182:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005186:	e9d3 3400 	ldrd	r3, r4, [r3]
 800518a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800518e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005192:	d016      	beq.n	80051c2 <_dtoa_r+0x382>
 8005194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005198:	4b93      	ldr	r3, [pc, #588]	; (80053e8 <_dtoa_r+0x5a8>)
 800519a:	2703      	movs	r7, #3
 800519c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051a0:	f7fb fac4 	bl	800072c <__aeabi_ddiv>
 80051a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051a8:	f004 040f 	and.w	r4, r4, #15
 80051ac:	4e8e      	ldr	r6, [pc, #568]	; (80053e8 <_dtoa_r+0x5a8>)
 80051ae:	b954      	cbnz	r4, 80051c6 <_dtoa_r+0x386>
 80051b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051b8:	f7fb fab8 	bl	800072c <__aeabi_ddiv>
 80051bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051c0:	e029      	b.n	8005216 <_dtoa_r+0x3d6>
 80051c2:	2702      	movs	r7, #2
 80051c4:	e7f2      	b.n	80051ac <_dtoa_r+0x36c>
 80051c6:	07e1      	lsls	r1, r4, #31
 80051c8:	d508      	bpl.n	80051dc <_dtoa_r+0x39c>
 80051ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051d2:	f7fb f981 	bl	80004d8 <__aeabi_dmul>
 80051d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051da:	3701      	adds	r7, #1
 80051dc:	1064      	asrs	r4, r4, #1
 80051de:	3608      	adds	r6, #8
 80051e0:	e7e5      	b.n	80051ae <_dtoa_r+0x36e>
 80051e2:	f000 80a5 	beq.w	8005330 <_dtoa_r+0x4f0>
 80051e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051ea:	f1ca 0400 	rsb	r4, sl, #0
 80051ee:	4b7d      	ldr	r3, [pc, #500]	; (80053e4 <_dtoa_r+0x5a4>)
 80051f0:	f004 020f 	and.w	r2, r4, #15
 80051f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f7fb f96c 	bl	80004d8 <__aeabi_dmul>
 8005200:	2702      	movs	r7, #2
 8005202:	2300      	movs	r3, #0
 8005204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005208:	4e77      	ldr	r6, [pc, #476]	; (80053e8 <_dtoa_r+0x5a8>)
 800520a:	1124      	asrs	r4, r4, #4
 800520c:	2c00      	cmp	r4, #0
 800520e:	f040 8084 	bne.w	800531a <_dtoa_r+0x4da>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1d2      	bne.n	80051bc <_dtoa_r+0x37c>
 8005216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 808b 	beq.w	8005334 <_dtoa_r+0x4f4>
 800521e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005222:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005226:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800522a:	2200      	movs	r2, #0
 800522c:	4b6f      	ldr	r3, [pc, #444]	; (80053ec <_dtoa_r+0x5ac>)
 800522e:	f7fb fbc5 	bl	80009bc <__aeabi_dcmplt>
 8005232:	2800      	cmp	r0, #0
 8005234:	d07e      	beq.n	8005334 <_dtoa_r+0x4f4>
 8005236:	9b08      	ldr	r3, [sp, #32]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d07b      	beq.n	8005334 <_dtoa_r+0x4f4>
 800523c:	f1b9 0f00 	cmp.w	r9, #0
 8005240:	dd38      	ble.n	80052b4 <_dtoa_r+0x474>
 8005242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005246:	2200      	movs	r2, #0
 8005248:	4b69      	ldr	r3, [pc, #420]	; (80053f0 <_dtoa_r+0x5b0>)
 800524a:	f7fb f945 	bl	80004d8 <__aeabi_dmul>
 800524e:	464c      	mov	r4, r9
 8005250:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005254:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005258:	3701      	adds	r7, #1
 800525a:	4638      	mov	r0, r7
 800525c:	f7fb f8d2 	bl	8000404 <__aeabi_i2d>
 8005260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005264:	f7fb f938 	bl	80004d8 <__aeabi_dmul>
 8005268:	2200      	movs	r2, #0
 800526a:	4b62      	ldr	r3, [pc, #392]	; (80053f4 <_dtoa_r+0x5b4>)
 800526c:	f7fa ff7e 	bl	800016c <__adddf3>
 8005270:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005274:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005278:	9611      	str	r6, [sp, #68]	; 0x44
 800527a:	2c00      	cmp	r4, #0
 800527c:	d15d      	bne.n	800533a <_dtoa_r+0x4fa>
 800527e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005282:	2200      	movs	r2, #0
 8005284:	4b5c      	ldr	r3, [pc, #368]	; (80053f8 <_dtoa_r+0x5b8>)
 8005286:	f7fa ff6f 	bl	8000168 <__aeabi_dsub>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005292:	4633      	mov	r3, r6
 8005294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005296:	f7fb fbaf 	bl	80009f8 <__aeabi_dcmpgt>
 800529a:	2800      	cmp	r0, #0
 800529c:	f040 829c 	bne.w	80057d8 <_dtoa_r+0x998>
 80052a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80052aa:	f7fb fb87 	bl	80009bc <__aeabi_dcmplt>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	f040 8290 	bne.w	80057d4 <_dtoa_r+0x994>
 80052b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80052b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f2c0 8152 	blt.w	8005568 <_dtoa_r+0x728>
 80052c4:	f1ba 0f0e 	cmp.w	sl, #14
 80052c8:	f300 814e 	bgt.w	8005568 <_dtoa_r+0x728>
 80052cc:	4b45      	ldr	r3, [pc, #276]	; (80053e4 <_dtoa_r+0x5a4>)
 80052ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80052da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f280 80db 	bge.w	8005498 <_dtoa_r+0x658>
 80052e2:	9b08      	ldr	r3, [sp, #32]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f300 80d7 	bgt.w	8005498 <_dtoa_r+0x658>
 80052ea:	f040 8272 	bne.w	80057d2 <_dtoa_r+0x992>
 80052ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052f2:	2200      	movs	r2, #0
 80052f4:	4b40      	ldr	r3, [pc, #256]	; (80053f8 <_dtoa_r+0x5b8>)
 80052f6:	f7fb f8ef 	bl	80004d8 <__aeabi_dmul>
 80052fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052fe:	f7fb fb71 	bl	80009e4 <__aeabi_dcmpge>
 8005302:	9c08      	ldr	r4, [sp, #32]
 8005304:	4626      	mov	r6, r4
 8005306:	2800      	cmp	r0, #0
 8005308:	f040 8248 	bne.w	800579c <_dtoa_r+0x95c>
 800530c:	2331      	movs	r3, #49	; 0x31
 800530e:	9f03      	ldr	r7, [sp, #12]
 8005310:	f10a 0a01 	add.w	sl, sl, #1
 8005314:	f807 3b01 	strb.w	r3, [r7], #1
 8005318:	e244      	b.n	80057a4 <_dtoa_r+0x964>
 800531a:	07e2      	lsls	r2, r4, #31
 800531c:	d505      	bpl.n	800532a <_dtoa_r+0x4ea>
 800531e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005322:	f7fb f8d9 	bl	80004d8 <__aeabi_dmul>
 8005326:	2301      	movs	r3, #1
 8005328:	3701      	adds	r7, #1
 800532a:	1064      	asrs	r4, r4, #1
 800532c:	3608      	adds	r6, #8
 800532e:	e76d      	b.n	800520c <_dtoa_r+0x3cc>
 8005330:	2702      	movs	r7, #2
 8005332:	e770      	b.n	8005216 <_dtoa_r+0x3d6>
 8005334:	46d0      	mov	r8, sl
 8005336:	9c08      	ldr	r4, [sp, #32]
 8005338:	e78f      	b.n	800525a <_dtoa_r+0x41a>
 800533a:	9903      	ldr	r1, [sp, #12]
 800533c:	4b29      	ldr	r3, [pc, #164]	; (80053e4 <_dtoa_r+0x5a4>)
 800533e:	4421      	add	r1, r4
 8005340:	9112      	str	r1, [sp, #72]	; 0x48
 8005342:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005348:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800534c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005350:	2900      	cmp	r1, #0
 8005352:	d055      	beq.n	8005400 <_dtoa_r+0x5c0>
 8005354:	2000      	movs	r0, #0
 8005356:	4929      	ldr	r1, [pc, #164]	; (80053fc <_dtoa_r+0x5bc>)
 8005358:	f7fb f9e8 	bl	800072c <__aeabi_ddiv>
 800535c:	463b      	mov	r3, r7
 800535e:	4632      	mov	r2, r6
 8005360:	f7fa ff02 	bl	8000168 <__aeabi_dsub>
 8005364:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005368:	9f03      	ldr	r7, [sp, #12]
 800536a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800536e:	f7fb fb63 	bl	8000a38 <__aeabi_d2iz>
 8005372:	4604      	mov	r4, r0
 8005374:	f7fb f846 	bl	8000404 <__aeabi_i2d>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005380:	f7fa fef2 	bl	8000168 <__aeabi_dsub>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	3430      	adds	r4, #48	; 0x30
 800538a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800538e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005392:	f807 4b01 	strb.w	r4, [r7], #1
 8005396:	f7fb fb11 	bl	80009bc <__aeabi_dcmplt>
 800539a:	2800      	cmp	r0, #0
 800539c:	d174      	bne.n	8005488 <_dtoa_r+0x648>
 800539e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053a2:	2000      	movs	r0, #0
 80053a4:	4911      	ldr	r1, [pc, #68]	; (80053ec <_dtoa_r+0x5ac>)
 80053a6:	f7fa fedf 	bl	8000168 <__aeabi_dsub>
 80053aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053ae:	f7fb fb05 	bl	80009bc <__aeabi_dcmplt>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	f040 80b7 	bne.w	8005526 <_dtoa_r+0x6e6>
 80053b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053ba:	429f      	cmp	r7, r3
 80053bc:	f43f af7a 	beq.w	80052b4 <_dtoa_r+0x474>
 80053c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053c4:	2200      	movs	r2, #0
 80053c6:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <_dtoa_r+0x5b0>)
 80053c8:	f7fb f886 	bl	80004d8 <__aeabi_dmul>
 80053cc:	2200      	movs	r2, #0
 80053ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <_dtoa_r+0x5b0>)
 80053d8:	f7fb f87e 	bl	80004d8 <__aeabi_dmul>
 80053dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053e0:	e7c3      	b.n	800536a <_dtoa_r+0x52a>
 80053e2:	bf00      	nop
 80053e4:	08007400 	.word	0x08007400
 80053e8:	080073d8 	.word	0x080073d8
 80053ec:	3ff00000 	.word	0x3ff00000
 80053f0:	40240000 	.word	0x40240000
 80053f4:	401c0000 	.word	0x401c0000
 80053f8:	40140000 	.word	0x40140000
 80053fc:	3fe00000 	.word	0x3fe00000
 8005400:	4630      	mov	r0, r6
 8005402:	4639      	mov	r1, r7
 8005404:	f7fb f868 	bl	80004d8 <__aeabi_dmul>
 8005408:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800540a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800540e:	9c03      	ldr	r4, [sp, #12]
 8005410:	9314      	str	r3, [sp, #80]	; 0x50
 8005412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005416:	f7fb fb0f 	bl	8000a38 <__aeabi_d2iz>
 800541a:	9015      	str	r0, [sp, #84]	; 0x54
 800541c:	f7fa fff2 	bl	8000404 <__aeabi_i2d>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005428:	f7fa fe9e 	bl	8000168 <__aeabi_dsub>
 800542c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800542e:	4606      	mov	r6, r0
 8005430:	3330      	adds	r3, #48	; 0x30
 8005432:	f804 3b01 	strb.w	r3, [r4], #1
 8005436:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005438:	460f      	mov	r7, r1
 800543a:	429c      	cmp	r4, r3
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	d124      	bne.n	800548c <_dtoa_r+0x64c>
 8005442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005446:	4bb0      	ldr	r3, [pc, #704]	; (8005708 <_dtoa_r+0x8c8>)
 8005448:	f7fa fe90 	bl	800016c <__adddf3>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fb fad0 	bl	80009f8 <__aeabi_dcmpgt>
 8005458:	2800      	cmp	r0, #0
 800545a:	d163      	bne.n	8005524 <_dtoa_r+0x6e4>
 800545c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005460:	2000      	movs	r0, #0
 8005462:	49a9      	ldr	r1, [pc, #676]	; (8005708 <_dtoa_r+0x8c8>)
 8005464:	f7fa fe80 	bl	8000168 <__aeabi_dsub>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4630      	mov	r0, r6
 800546e:	4639      	mov	r1, r7
 8005470:	f7fb faa4 	bl	80009bc <__aeabi_dcmplt>
 8005474:	2800      	cmp	r0, #0
 8005476:	f43f af1d 	beq.w	80052b4 <_dtoa_r+0x474>
 800547a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800547c:	1e7b      	subs	r3, r7, #1
 800547e:	9314      	str	r3, [sp, #80]	; 0x50
 8005480:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005484:	2b30      	cmp	r3, #48	; 0x30
 8005486:	d0f8      	beq.n	800547a <_dtoa_r+0x63a>
 8005488:	46c2      	mov	sl, r8
 800548a:	e03b      	b.n	8005504 <_dtoa_r+0x6c4>
 800548c:	4b9f      	ldr	r3, [pc, #636]	; (800570c <_dtoa_r+0x8cc>)
 800548e:	f7fb f823 	bl	80004d8 <__aeabi_dmul>
 8005492:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005496:	e7bc      	b.n	8005412 <_dtoa_r+0x5d2>
 8005498:	9f03      	ldr	r7, [sp, #12]
 800549a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800549e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054a2:	4640      	mov	r0, r8
 80054a4:	4649      	mov	r1, r9
 80054a6:	f7fb f941 	bl	800072c <__aeabi_ddiv>
 80054aa:	f7fb fac5 	bl	8000a38 <__aeabi_d2iz>
 80054ae:	4604      	mov	r4, r0
 80054b0:	f7fa ffa8 	bl	8000404 <__aeabi_i2d>
 80054b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054b8:	f7fb f80e 	bl	80004d8 <__aeabi_dmul>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4640      	mov	r0, r8
 80054c2:	4649      	mov	r1, r9
 80054c4:	f7fa fe50 	bl	8000168 <__aeabi_dsub>
 80054c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80054cc:	f807 6b01 	strb.w	r6, [r7], #1
 80054d0:	9e03      	ldr	r6, [sp, #12]
 80054d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80054d6:	1bbe      	subs	r6, r7, r6
 80054d8:	45b4      	cmp	ip, r6
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	d136      	bne.n	800554e <_dtoa_r+0x70e>
 80054e0:	f7fa fe44 	bl	800016c <__adddf3>
 80054e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054e8:	4680      	mov	r8, r0
 80054ea:	4689      	mov	r9, r1
 80054ec:	f7fb fa84 	bl	80009f8 <__aeabi_dcmpgt>
 80054f0:	bb58      	cbnz	r0, 800554a <_dtoa_r+0x70a>
 80054f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054f6:	4640      	mov	r0, r8
 80054f8:	4649      	mov	r1, r9
 80054fa:	f7fb fa55 	bl	80009a8 <__aeabi_dcmpeq>
 80054fe:	b108      	cbz	r0, 8005504 <_dtoa_r+0x6c4>
 8005500:	07e1      	lsls	r1, r4, #31
 8005502:	d422      	bmi.n	800554a <_dtoa_r+0x70a>
 8005504:	4628      	mov	r0, r5
 8005506:	4659      	mov	r1, fp
 8005508:	f000 faf0 	bl	8005aec <_Bfree>
 800550c:	2300      	movs	r3, #0
 800550e:	703b      	strb	r3, [r7, #0]
 8005510:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005512:	f10a 0001 	add.w	r0, sl, #1
 8005516:	6018      	str	r0, [r3, #0]
 8005518:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800551a:	2b00      	cmp	r3, #0
 800551c:	f43f acde 	beq.w	8004edc <_dtoa_r+0x9c>
 8005520:	601f      	str	r7, [r3, #0]
 8005522:	e4db      	b.n	8004edc <_dtoa_r+0x9c>
 8005524:	4627      	mov	r7, r4
 8005526:	463b      	mov	r3, r7
 8005528:	461f      	mov	r7, r3
 800552a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800552e:	2a39      	cmp	r2, #57	; 0x39
 8005530:	d107      	bne.n	8005542 <_dtoa_r+0x702>
 8005532:	9a03      	ldr	r2, [sp, #12]
 8005534:	429a      	cmp	r2, r3
 8005536:	d1f7      	bne.n	8005528 <_dtoa_r+0x6e8>
 8005538:	2230      	movs	r2, #48	; 0x30
 800553a:	9903      	ldr	r1, [sp, #12]
 800553c:	f108 0801 	add.w	r8, r8, #1
 8005540:	700a      	strb	r2, [r1, #0]
 8005542:	781a      	ldrb	r2, [r3, #0]
 8005544:	3201      	adds	r2, #1
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	e79e      	b.n	8005488 <_dtoa_r+0x648>
 800554a:	46d0      	mov	r8, sl
 800554c:	e7eb      	b.n	8005526 <_dtoa_r+0x6e6>
 800554e:	2200      	movs	r2, #0
 8005550:	4b6e      	ldr	r3, [pc, #440]	; (800570c <_dtoa_r+0x8cc>)
 8005552:	f7fa ffc1 	bl	80004d8 <__aeabi_dmul>
 8005556:	2200      	movs	r2, #0
 8005558:	2300      	movs	r3, #0
 800555a:	4680      	mov	r8, r0
 800555c:	4689      	mov	r9, r1
 800555e:	f7fb fa23 	bl	80009a8 <__aeabi_dcmpeq>
 8005562:	2800      	cmp	r0, #0
 8005564:	d09b      	beq.n	800549e <_dtoa_r+0x65e>
 8005566:	e7cd      	b.n	8005504 <_dtoa_r+0x6c4>
 8005568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800556a:	2a00      	cmp	r2, #0
 800556c:	f000 80d0 	beq.w	8005710 <_dtoa_r+0x8d0>
 8005570:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005572:	2a01      	cmp	r2, #1
 8005574:	f300 80ae 	bgt.w	80056d4 <_dtoa_r+0x894>
 8005578:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800557a:	2a00      	cmp	r2, #0
 800557c:	f000 80a6 	beq.w	80056cc <_dtoa_r+0x88c>
 8005580:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005584:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005586:	9f06      	ldr	r7, [sp, #24]
 8005588:	9a06      	ldr	r2, [sp, #24]
 800558a:	2101      	movs	r1, #1
 800558c:	441a      	add	r2, r3
 800558e:	9206      	str	r2, [sp, #24]
 8005590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005592:	4628      	mov	r0, r5
 8005594:	441a      	add	r2, r3
 8005596:	9209      	str	r2, [sp, #36]	; 0x24
 8005598:	f000 fb5e 	bl	8005c58 <__i2b>
 800559c:	4606      	mov	r6, r0
 800559e:	2f00      	cmp	r7, #0
 80055a0:	dd0c      	ble.n	80055bc <_dtoa_r+0x77c>
 80055a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	dd09      	ble.n	80055bc <_dtoa_r+0x77c>
 80055a8:	42bb      	cmp	r3, r7
 80055aa:	bfa8      	it	ge
 80055ac:	463b      	movge	r3, r7
 80055ae:	9a06      	ldr	r2, [sp, #24]
 80055b0:	1aff      	subs	r7, r7, r3
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	9206      	str	r2, [sp, #24]
 80055b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	9309      	str	r3, [sp, #36]	; 0x24
 80055bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055be:	b1f3      	cbz	r3, 80055fe <_dtoa_r+0x7be>
 80055c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 80a8 	beq.w	8005718 <_dtoa_r+0x8d8>
 80055c8:	2c00      	cmp	r4, #0
 80055ca:	dd10      	ble.n	80055ee <_dtoa_r+0x7ae>
 80055cc:	4631      	mov	r1, r6
 80055ce:	4622      	mov	r2, r4
 80055d0:	4628      	mov	r0, r5
 80055d2:	f000 fbff 	bl	8005dd4 <__pow5mult>
 80055d6:	465a      	mov	r2, fp
 80055d8:	4601      	mov	r1, r0
 80055da:	4606      	mov	r6, r0
 80055dc:	4628      	mov	r0, r5
 80055de:	f000 fb51 	bl	8005c84 <__multiply>
 80055e2:	4680      	mov	r8, r0
 80055e4:	4659      	mov	r1, fp
 80055e6:	4628      	mov	r0, r5
 80055e8:	f000 fa80 	bl	8005aec <_Bfree>
 80055ec:	46c3      	mov	fp, r8
 80055ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f0:	1b1a      	subs	r2, r3, r4
 80055f2:	d004      	beq.n	80055fe <_dtoa_r+0x7be>
 80055f4:	4659      	mov	r1, fp
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 fbec 	bl	8005dd4 <__pow5mult>
 80055fc:	4683      	mov	fp, r0
 80055fe:	2101      	movs	r1, #1
 8005600:	4628      	mov	r0, r5
 8005602:	f000 fb29 	bl	8005c58 <__i2b>
 8005606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005608:	4604      	mov	r4, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	f340 8086 	ble.w	800571c <_dtoa_r+0x8dc>
 8005610:	461a      	mov	r2, r3
 8005612:	4601      	mov	r1, r0
 8005614:	4628      	mov	r0, r5
 8005616:	f000 fbdd 	bl	8005dd4 <__pow5mult>
 800561a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800561c:	4604      	mov	r4, r0
 800561e:	2b01      	cmp	r3, #1
 8005620:	dd7f      	ble.n	8005722 <_dtoa_r+0x8e2>
 8005622:	f04f 0800 	mov.w	r8, #0
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800562c:	6918      	ldr	r0, [r3, #16]
 800562e:	f000 fac5 	bl	8005bbc <__hi0bits>
 8005632:	f1c0 0020 	rsb	r0, r0, #32
 8005636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005638:	4418      	add	r0, r3
 800563a:	f010 001f 	ands.w	r0, r0, #31
 800563e:	f000 8092 	beq.w	8005766 <_dtoa_r+0x926>
 8005642:	f1c0 0320 	rsb	r3, r0, #32
 8005646:	2b04      	cmp	r3, #4
 8005648:	f340 808a 	ble.w	8005760 <_dtoa_r+0x920>
 800564c:	f1c0 001c 	rsb	r0, r0, #28
 8005650:	9b06      	ldr	r3, [sp, #24]
 8005652:	4407      	add	r7, r0
 8005654:	4403      	add	r3, r0
 8005656:	9306      	str	r3, [sp, #24]
 8005658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565a:	4403      	add	r3, r0
 800565c:	9309      	str	r3, [sp, #36]	; 0x24
 800565e:	9b06      	ldr	r3, [sp, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	dd05      	ble.n	8005670 <_dtoa_r+0x830>
 8005664:	4659      	mov	r1, fp
 8005666:	461a      	mov	r2, r3
 8005668:	4628      	mov	r0, r5
 800566a:	f000 fc0d 	bl	8005e88 <__lshift>
 800566e:	4683      	mov	fp, r0
 8005670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005672:	2b00      	cmp	r3, #0
 8005674:	dd05      	ble.n	8005682 <_dtoa_r+0x842>
 8005676:	4621      	mov	r1, r4
 8005678:	461a      	mov	r2, r3
 800567a:	4628      	mov	r0, r5
 800567c:	f000 fc04 	bl	8005e88 <__lshift>
 8005680:	4604      	mov	r4, r0
 8005682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d070      	beq.n	800576a <_dtoa_r+0x92a>
 8005688:	4621      	mov	r1, r4
 800568a:	4658      	mov	r0, fp
 800568c:	f000 fc6c 	bl	8005f68 <__mcmp>
 8005690:	2800      	cmp	r0, #0
 8005692:	da6a      	bge.n	800576a <_dtoa_r+0x92a>
 8005694:	2300      	movs	r3, #0
 8005696:	4659      	mov	r1, fp
 8005698:	220a      	movs	r2, #10
 800569a:	4628      	mov	r0, r5
 800569c:	f000 fa48 	bl	8005b30 <__multadd>
 80056a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056a2:	4683      	mov	fp, r0
 80056a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8194 	beq.w	80059d6 <_dtoa_r+0xb96>
 80056ae:	4631      	mov	r1, r6
 80056b0:	2300      	movs	r3, #0
 80056b2:	220a      	movs	r2, #10
 80056b4:	4628      	mov	r0, r5
 80056b6:	f000 fa3b 	bl	8005b30 <__multadd>
 80056ba:	f1b9 0f00 	cmp.w	r9, #0
 80056be:	4606      	mov	r6, r0
 80056c0:	f300 8093 	bgt.w	80057ea <_dtoa_r+0x9aa>
 80056c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	dc57      	bgt.n	800577a <_dtoa_r+0x93a>
 80056ca:	e08e      	b.n	80057ea <_dtoa_r+0x9aa>
 80056cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056d2:	e757      	b.n	8005584 <_dtoa_r+0x744>
 80056d4:	9b08      	ldr	r3, [sp, #32]
 80056d6:	1e5c      	subs	r4, r3, #1
 80056d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056da:	42a3      	cmp	r3, r4
 80056dc:	bfb7      	itett	lt
 80056de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80056e0:	1b1c      	subge	r4, r3, r4
 80056e2:	1ae2      	sublt	r2, r4, r3
 80056e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80056e6:	bfbe      	ittt	lt
 80056e8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80056ea:	189b      	addlt	r3, r3, r2
 80056ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80056ee:	9b08      	ldr	r3, [sp, #32]
 80056f0:	bfb8      	it	lt
 80056f2:	2400      	movlt	r4, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bfbb      	ittet	lt
 80056f8:	9b06      	ldrlt	r3, [sp, #24]
 80056fa:	9a08      	ldrlt	r2, [sp, #32]
 80056fc:	9f06      	ldrge	r7, [sp, #24]
 80056fe:	1a9f      	sublt	r7, r3, r2
 8005700:	bfac      	ite	ge
 8005702:	9b08      	ldrge	r3, [sp, #32]
 8005704:	2300      	movlt	r3, #0
 8005706:	e73f      	b.n	8005588 <_dtoa_r+0x748>
 8005708:	3fe00000 	.word	0x3fe00000
 800570c:	40240000 	.word	0x40240000
 8005710:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005712:	9f06      	ldr	r7, [sp, #24]
 8005714:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005716:	e742      	b.n	800559e <_dtoa_r+0x75e>
 8005718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800571a:	e76b      	b.n	80055f4 <_dtoa_r+0x7b4>
 800571c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800571e:	2b01      	cmp	r3, #1
 8005720:	dc19      	bgt.n	8005756 <_dtoa_r+0x916>
 8005722:	9b04      	ldr	r3, [sp, #16]
 8005724:	b9bb      	cbnz	r3, 8005756 <_dtoa_r+0x916>
 8005726:	9b05      	ldr	r3, [sp, #20]
 8005728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800572c:	b99b      	cbnz	r3, 8005756 <_dtoa_r+0x916>
 800572e:	9b05      	ldr	r3, [sp, #20]
 8005730:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005734:	0d1b      	lsrs	r3, r3, #20
 8005736:	051b      	lsls	r3, r3, #20
 8005738:	b183      	cbz	r3, 800575c <_dtoa_r+0x91c>
 800573a:	f04f 0801 	mov.w	r8, #1
 800573e:	9b06      	ldr	r3, [sp, #24]
 8005740:	3301      	adds	r3, #1
 8005742:	9306      	str	r3, [sp, #24]
 8005744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005746:	3301      	adds	r3, #1
 8005748:	9309      	str	r3, [sp, #36]	; 0x24
 800574a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800574c:	2b00      	cmp	r3, #0
 800574e:	f47f af6a 	bne.w	8005626 <_dtoa_r+0x7e6>
 8005752:	2001      	movs	r0, #1
 8005754:	e76f      	b.n	8005636 <_dtoa_r+0x7f6>
 8005756:	f04f 0800 	mov.w	r8, #0
 800575a:	e7f6      	b.n	800574a <_dtoa_r+0x90a>
 800575c:	4698      	mov	r8, r3
 800575e:	e7f4      	b.n	800574a <_dtoa_r+0x90a>
 8005760:	f43f af7d 	beq.w	800565e <_dtoa_r+0x81e>
 8005764:	4618      	mov	r0, r3
 8005766:	301c      	adds	r0, #28
 8005768:	e772      	b.n	8005650 <_dtoa_r+0x810>
 800576a:	9b08      	ldr	r3, [sp, #32]
 800576c:	2b00      	cmp	r3, #0
 800576e:	dc36      	bgt.n	80057de <_dtoa_r+0x99e>
 8005770:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005772:	2b02      	cmp	r3, #2
 8005774:	dd33      	ble.n	80057de <_dtoa_r+0x99e>
 8005776:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800577a:	f1b9 0f00 	cmp.w	r9, #0
 800577e:	d10d      	bne.n	800579c <_dtoa_r+0x95c>
 8005780:	4621      	mov	r1, r4
 8005782:	464b      	mov	r3, r9
 8005784:	2205      	movs	r2, #5
 8005786:	4628      	mov	r0, r5
 8005788:	f000 f9d2 	bl	8005b30 <__multadd>
 800578c:	4601      	mov	r1, r0
 800578e:	4604      	mov	r4, r0
 8005790:	4658      	mov	r0, fp
 8005792:	f000 fbe9 	bl	8005f68 <__mcmp>
 8005796:	2800      	cmp	r0, #0
 8005798:	f73f adb8 	bgt.w	800530c <_dtoa_r+0x4cc>
 800579c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800579e:	9f03      	ldr	r7, [sp, #12]
 80057a0:	ea6f 0a03 	mvn.w	sl, r3
 80057a4:	f04f 0800 	mov.w	r8, #0
 80057a8:	4621      	mov	r1, r4
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 f99e 	bl	8005aec <_Bfree>
 80057b0:	2e00      	cmp	r6, #0
 80057b2:	f43f aea7 	beq.w	8005504 <_dtoa_r+0x6c4>
 80057b6:	f1b8 0f00 	cmp.w	r8, #0
 80057ba:	d005      	beq.n	80057c8 <_dtoa_r+0x988>
 80057bc:	45b0      	cmp	r8, r6
 80057be:	d003      	beq.n	80057c8 <_dtoa_r+0x988>
 80057c0:	4641      	mov	r1, r8
 80057c2:	4628      	mov	r0, r5
 80057c4:	f000 f992 	bl	8005aec <_Bfree>
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	f000 f98e 	bl	8005aec <_Bfree>
 80057d0:	e698      	b.n	8005504 <_dtoa_r+0x6c4>
 80057d2:	2400      	movs	r4, #0
 80057d4:	4626      	mov	r6, r4
 80057d6:	e7e1      	b.n	800579c <_dtoa_r+0x95c>
 80057d8:	46c2      	mov	sl, r8
 80057da:	4626      	mov	r6, r4
 80057dc:	e596      	b.n	800530c <_dtoa_r+0x4cc>
 80057de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80fd 	beq.w	80059e4 <_dtoa_r+0xba4>
 80057ea:	2f00      	cmp	r7, #0
 80057ec:	dd05      	ble.n	80057fa <_dtoa_r+0x9ba>
 80057ee:	4631      	mov	r1, r6
 80057f0:	463a      	mov	r2, r7
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 fb48 	bl	8005e88 <__lshift>
 80057f8:	4606      	mov	r6, r0
 80057fa:	f1b8 0f00 	cmp.w	r8, #0
 80057fe:	d05c      	beq.n	80058ba <_dtoa_r+0xa7a>
 8005800:	4628      	mov	r0, r5
 8005802:	6871      	ldr	r1, [r6, #4]
 8005804:	f000 f932 	bl	8005a6c <_Balloc>
 8005808:	4607      	mov	r7, r0
 800580a:	b928      	cbnz	r0, 8005818 <_dtoa_r+0x9d8>
 800580c:	4602      	mov	r2, r0
 800580e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005812:	4b7f      	ldr	r3, [pc, #508]	; (8005a10 <_dtoa_r+0xbd0>)
 8005814:	f7ff bb28 	b.w	8004e68 <_dtoa_r+0x28>
 8005818:	6932      	ldr	r2, [r6, #16]
 800581a:	f106 010c 	add.w	r1, r6, #12
 800581e:	3202      	adds	r2, #2
 8005820:	0092      	lsls	r2, r2, #2
 8005822:	300c      	adds	r0, #12
 8005824:	f000 f914 	bl	8005a50 <memcpy>
 8005828:	2201      	movs	r2, #1
 800582a:	4639      	mov	r1, r7
 800582c:	4628      	mov	r0, r5
 800582e:	f000 fb2b 	bl	8005e88 <__lshift>
 8005832:	46b0      	mov	r8, r6
 8005834:	4606      	mov	r6, r0
 8005836:	9b03      	ldr	r3, [sp, #12]
 8005838:	3301      	adds	r3, #1
 800583a:	9308      	str	r3, [sp, #32]
 800583c:	9b03      	ldr	r3, [sp, #12]
 800583e:	444b      	add	r3, r9
 8005840:	930a      	str	r3, [sp, #40]	; 0x28
 8005842:	9b04      	ldr	r3, [sp, #16]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	9309      	str	r3, [sp, #36]	; 0x24
 800584a:	9b08      	ldr	r3, [sp, #32]
 800584c:	4621      	mov	r1, r4
 800584e:	3b01      	subs	r3, #1
 8005850:	4658      	mov	r0, fp
 8005852:	9304      	str	r3, [sp, #16]
 8005854:	f7ff fa67 	bl	8004d26 <quorem>
 8005858:	4603      	mov	r3, r0
 800585a:	4641      	mov	r1, r8
 800585c:	3330      	adds	r3, #48	; 0x30
 800585e:	9006      	str	r0, [sp, #24]
 8005860:	4658      	mov	r0, fp
 8005862:	930b      	str	r3, [sp, #44]	; 0x2c
 8005864:	f000 fb80 	bl	8005f68 <__mcmp>
 8005868:	4632      	mov	r2, r6
 800586a:	4681      	mov	r9, r0
 800586c:	4621      	mov	r1, r4
 800586e:	4628      	mov	r0, r5
 8005870:	f000 fb96 	bl	8005fa0 <__mdiff>
 8005874:	68c2      	ldr	r2, [r0, #12]
 8005876:	4607      	mov	r7, r0
 8005878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800587a:	bb02      	cbnz	r2, 80058be <_dtoa_r+0xa7e>
 800587c:	4601      	mov	r1, r0
 800587e:	4658      	mov	r0, fp
 8005880:	f000 fb72 	bl	8005f68 <__mcmp>
 8005884:	4602      	mov	r2, r0
 8005886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005888:	4639      	mov	r1, r7
 800588a:	4628      	mov	r0, r5
 800588c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005890:	f000 f92c 	bl	8005aec <_Bfree>
 8005894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005898:	9f08      	ldr	r7, [sp, #32]
 800589a:	ea43 0102 	orr.w	r1, r3, r2
 800589e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a0:	430b      	orrs	r3, r1
 80058a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058a4:	d10d      	bne.n	80058c2 <_dtoa_r+0xa82>
 80058a6:	2b39      	cmp	r3, #57	; 0x39
 80058a8:	d029      	beq.n	80058fe <_dtoa_r+0xabe>
 80058aa:	f1b9 0f00 	cmp.w	r9, #0
 80058ae:	dd01      	ble.n	80058b4 <_dtoa_r+0xa74>
 80058b0:	9b06      	ldr	r3, [sp, #24]
 80058b2:	3331      	adds	r3, #49	; 0x31
 80058b4:	9a04      	ldr	r2, [sp, #16]
 80058b6:	7013      	strb	r3, [r2, #0]
 80058b8:	e776      	b.n	80057a8 <_dtoa_r+0x968>
 80058ba:	4630      	mov	r0, r6
 80058bc:	e7b9      	b.n	8005832 <_dtoa_r+0x9f2>
 80058be:	2201      	movs	r2, #1
 80058c0:	e7e2      	b.n	8005888 <_dtoa_r+0xa48>
 80058c2:	f1b9 0f00 	cmp.w	r9, #0
 80058c6:	db06      	blt.n	80058d6 <_dtoa_r+0xa96>
 80058c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80058ca:	ea41 0909 	orr.w	r9, r1, r9
 80058ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058d0:	ea59 0101 	orrs.w	r1, r9, r1
 80058d4:	d120      	bne.n	8005918 <_dtoa_r+0xad8>
 80058d6:	2a00      	cmp	r2, #0
 80058d8:	ddec      	ble.n	80058b4 <_dtoa_r+0xa74>
 80058da:	4659      	mov	r1, fp
 80058dc:	2201      	movs	r2, #1
 80058de:	4628      	mov	r0, r5
 80058e0:	9308      	str	r3, [sp, #32]
 80058e2:	f000 fad1 	bl	8005e88 <__lshift>
 80058e6:	4621      	mov	r1, r4
 80058e8:	4683      	mov	fp, r0
 80058ea:	f000 fb3d 	bl	8005f68 <__mcmp>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	9b08      	ldr	r3, [sp, #32]
 80058f2:	dc02      	bgt.n	80058fa <_dtoa_r+0xaba>
 80058f4:	d1de      	bne.n	80058b4 <_dtoa_r+0xa74>
 80058f6:	07da      	lsls	r2, r3, #31
 80058f8:	d5dc      	bpl.n	80058b4 <_dtoa_r+0xa74>
 80058fa:	2b39      	cmp	r3, #57	; 0x39
 80058fc:	d1d8      	bne.n	80058b0 <_dtoa_r+0xa70>
 80058fe:	2339      	movs	r3, #57	; 0x39
 8005900:	9a04      	ldr	r2, [sp, #16]
 8005902:	7013      	strb	r3, [r2, #0]
 8005904:	463b      	mov	r3, r7
 8005906:	461f      	mov	r7, r3
 8005908:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800590c:	3b01      	subs	r3, #1
 800590e:	2a39      	cmp	r2, #57	; 0x39
 8005910:	d050      	beq.n	80059b4 <_dtoa_r+0xb74>
 8005912:	3201      	adds	r2, #1
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	e747      	b.n	80057a8 <_dtoa_r+0x968>
 8005918:	2a00      	cmp	r2, #0
 800591a:	dd03      	ble.n	8005924 <_dtoa_r+0xae4>
 800591c:	2b39      	cmp	r3, #57	; 0x39
 800591e:	d0ee      	beq.n	80058fe <_dtoa_r+0xabe>
 8005920:	3301      	adds	r3, #1
 8005922:	e7c7      	b.n	80058b4 <_dtoa_r+0xa74>
 8005924:	9a08      	ldr	r2, [sp, #32]
 8005926:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005928:	f802 3c01 	strb.w	r3, [r2, #-1]
 800592c:	428a      	cmp	r2, r1
 800592e:	d02a      	beq.n	8005986 <_dtoa_r+0xb46>
 8005930:	4659      	mov	r1, fp
 8005932:	2300      	movs	r3, #0
 8005934:	220a      	movs	r2, #10
 8005936:	4628      	mov	r0, r5
 8005938:	f000 f8fa 	bl	8005b30 <__multadd>
 800593c:	45b0      	cmp	r8, r6
 800593e:	4683      	mov	fp, r0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	f04f 020a 	mov.w	r2, #10
 8005948:	4641      	mov	r1, r8
 800594a:	4628      	mov	r0, r5
 800594c:	d107      	bne.n	800595e <_dtoa_r+0xb1e>
 800594e:	f000 f8ef 	bl	8005b30 <__multadd>
 8005952:	4680      	mov	r8, r0
 8005954:	4606      	mov	r6, r0
 8005956:	9b08      	ldr	r3, [sp, #32]
 8005958:	3301      	adds	r3, #1
 800595a:	9308      	str	r3, [sp, #32]
 800595c:	e775      	b.n	800584a <_dtoa_r+0xa0a>
 800595e:	f000 f8e7 	bl	8005b30 <__multadd>
 8005962:	4631      	mov	r1, r6
 8005964:	4680      	mov	r8, r0
 8005966:	2300      	movs	r3, #0
 8005968:	220a      	movs	r2, #10
 800596a:	4628      	mov	r0, r5
 800596c:	f000 f8e0 	bl	8005b30 <__multadd>
 8005970:	4606      	mov	r6, r0
 8005972:	e7f0      	b.n	8005956 <_dtoa_r+0xb16>
 8005974:	f1b9 0f00 	cmp.w	r9, #0
 8005978:	bfcc      	ite	gt
 800597a:	464f      	movgt	r7, r9
 800597c:	2701      	movle	r7, #1
 800597e:	f04f 0800 	mov.w	r8, #0
 8005982:	9a03      	ldr	r2, [sp, #12]
 8005984:	4417      	add	r7, r2
 8005986:	4659      	mov	r1, fp
 8005988:	2201      	movs	r2, #1
 800598a:	4628      	mov	r0, r5
 800598c:	9308      	str	r3, [sp, #32]
 800598e:	f000 fa7b 	bl	8005e88 <__lshift>
 8005992:	4621      	mov	r1, r4
 8005994:	4683      	mov	fp, r0
 8005996:	f000 fae7 	bl	8005f68 <__mcmp>
 800599a:	2800      	cmp	r0, #0
 800599c:	dcb2      	bgt.n	8005904 <_dtoa_r+0xac4>
 800599e:	d102      	bne.n	80059a6 <_dtoa_r+0xb66>
 80059a0:	9b08      	ldr	r3, [sp, #32]
 80059a2:	07db      	lsls	r3, r3, #31
 80059a4:	d4ae      	bmi.n	8005904 <_dtoa_r+0xac4>
 80059a6:	463b      	mov	r3, r7
 80059a8:	461f      	mov	r7, r3
 80059aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059ae:	2a30      	cmp	r2, #48	; 0x30
 80059b0:	d0fa      	beq.n	80059a8 <_dtoa_r+0xb68>
 80059b2:	e6f9      	b.n	80057a8 <_dtoa_r+0x968>
 80059b4:	9a03      	ldr	r2, [sp, #12]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d1a5      	bne.n	8005906 <_dtoa_r+0xac6>
 80059ba:	2331      	movs	r3, #49	; 0x31
 80059bc:	f10a 0a01 	add.w	sl, sl, #1
 80059c0:	e779      	b.n	80058b6 <_dtoa_r+0xa76>
 80059c2:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <_dtoa_r+0xbd4>)
 80059c4:	f7ff baa8 	b.w	8004f18 <_dtoa_r+0xd8>
 80059c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f47f aa81 	bne.w	8004ed2 <_dtoa_r+0x92>
 80059d0:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <_dtoa_r+0xbd8>)
 80059d2:	f7ff baa1 	b.w	8004f18 <_dtoa_r+0xd8>
 80059d6:	f1b9 0f00 	cmp.w	r9, #0
 80059da:	dc03      	bgt.n	80059e4 <_dtoa_r+0xba4>
 80059dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059de:	2b02      	cmp	r3, #2
 80059e0:	f73f aecb 	bgt.w	800577a <_dtoa_r+0x93a>
 80059e4:	9f03      	ldr	r7, [sp, #12]
 80059e6:	4621      	mov	r1, r4
 80059e8:	4658      	mov	r0, fp
 80059ea:	f7ff f99c 	bl	8004d26 <quorem>
 80059ee:	9a03      	ldr	r2, [sp, #12]
 80059f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80059f4:	f807 3b01 	strb.w	r3, [r7], #1
 80059f8:	1aba      	subs	r2, r7, r2
 80059fa:	4591      	cmp	r9, r2
 80059fc:	ddba      	ble.n	8005974 <_dtoa_r+0xb34>
 80059fe:	4659      	mov	r1, fp
 8005a00:	2300      	movs	r3, #0
 8005a02:	220a      	movs	r2, #10
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 f893 	bl	8005b30 <__multadd>
 8005a0a:	4683      	mov	fp, r0
 8005a0c:	e7eb      	b.n	80059e6 <_dtoa_r+0xba6>
 8005a0e:	bf00      	nop
 8005a10:	0800736b 	.word	0x0800736b
 8005a14:	080072c8 	.word	0x080072c8
 8005a18:	080072ec 	.word	0x080072ec

08005a1c <_localeconv_r>:
 8005a1c:	4800      	ldr	r0, [pc, #0]	; (8005a20 <_localeconv_r+0x4>)
 8005a1e:	4770      	bx	lr
 8005a20:	20000170 	.word	0x20000170

08005a24 <malloc>:
 8005a24:	4b02      	ldr	r3, [pc, #8]	; (8005a30 <malloc+0xc>)
 8005a26:	4601      	mov	r1, r0
 8005a28:	6818      	ldr	r0, [r3, #0]
 8005a2a:	f000 bc1d 	b.w	8006268 <_malloc_r>
 8005a2e:	bf00      	nop
 8005a30:	2000001c 	.word	0x2000001c

08005a34 <memchr>:
 8005a34:	4603      	mov	r3, r0
 8005a36:	b510      	push	{r4, lr}
 8005a38:	b2c9      	uxtb	r1, r1
 8005a3a:	4402      	add	r2, r0
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	d101      	bne.n	8005a46 <memchr+0x12>
 8005a42:	2000      	movs	r0, #0
 8005a44:	e003      	b.n	8005a4e <memchr+0x1a>
 8005a46:	7804      	ldrb	r4, [r0, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	428c      	cmp	r4, r1
 8005a4c:	d1f6      	bne.n	8005a3c <memchr+0x8>
 8005a4e:	bd10      	pop	{r4, pc}

08005a50 <memcpy>:
 8005a50:	440a      	add	r2, r1
 8005a52:	4291      	cmp	r1, r2
 8005a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a58:	d100      	bne.n	8005a5c <memcpy+0xc>
 8005a5a:	4770      	bx	lr
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a62:	4291      	cmp	r1, r2
 8005a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a68:	d1f9      	bne.n	8005a5e <memcpy+0xe>
 8005a6a:	bd10      	pop	{r4, pc}

08005a6c <_Balloc>:
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a70:	4604      	mov	r4, r0
 8005a72:	460d      	mov	r5, r1
 8005a74:	b976      	cbnz	r6, 8005a94 <_Balloc+0x28>
 8005a76:	2010      	movs	r0, #16
 8005a78:	f7ff ffd4 	bl	8005a24 <malloc>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6260      	str	r0, [r4, #36]	; 0x24
 8005a80:	b920      	cbnz	r0, 8005a8c <_Balloc+0x20>
 8005a82:	2166      	movs	r1, #102	; 0x66
 8005a84:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <_Balloc+0x78>)
 8005a86:	4818      	ldr	r0, [pc, #96]	; (8005ae8 <_Balloc+0x7c>)
 8005a88:	f000 fdce 	bl	8006628 <__assert_func>
 8005a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a90:	6006      	str	r6, [r0, #0]
 8005a92:	60c6      	str	r6, [r0, #12]
 8005a94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a96:	68f3      	ldr	r3, [r6, #12]
 8005a98:	b183      	cbz	r3, 8005abc <_Balloc+0x50>
 8005a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aa2:	b9b8      	cbnz	r0, 8005ad4 <_Balloc+0x68>
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	fa01 f605 	lsl.w	r6, r1, r5
 8005aaa:	1d72      	adds	r2, r6, #5
 8005aac:	4620      	mov	r0, r4
 8005aae:	0092      	lsls	r2, r2, #2
 8005ab0:	f000 fb5e 	bl	8006170 <_calloc_r>
 8005ab4:	b160      	cbz	r0, 8005ad0 <_Balloc+0x64>
 8005ab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005aba:	e00e      	b.n	8005ada <_Balloc+0x6e>
 8005abc:	2221      	movs	r2, #33	; 0x21
 8005abe:	2104      	movs	r1, #4
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 fb55 	bl	8006170 <_calloc_r>
 8005ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ac8:	60f0      	str	r0, [r6, #12]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e4      	bne.n	8005a9a <_Balloc+0x2e>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	6802      	ldr	r2, [r0, #0]
 8005ad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ada:	2300      	movs	r3, #0
 8005adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ae0:	e7f7      	b.n	8005ad2 <_Balloc+0x66>
 8005ae2:	bf00      	nop
 8005ae4:	080072f9 	.word	0x080072f9
 8005ae8:	0800737c 	.word	0x0800737c

08005aec <_Bfree>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005af0:	4605      	mov	r5, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	b976      	cbnz	r6, 8005b14 <_Bfree+0x28>
 8005af6:	2010      	movs	r0, #16
 8005af8:	f7ff ff94 	bl	8005a24 <malloc>
 8005afc:	4602      	mov	r2, r0
 8005afe:	6268      	str	r0, [r5, #36]	; 0x24
 8005b00:	b920      	cbnz	r0, 8005b0c <_Bfree+0x20>
 8005b02:	218a      	movs	r1, #138	; 0x8a
 8005b04:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <_Bfree+0x3c>)
 8005b06:	4809      	ldr	r0, [pc, #36]	; (8005b2c <_Bfree+0x40>)
 8005b08:	f000 fd8e 	bl	8006628 <__assert_func>
 8005b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b10:	6006      	str	r6, [r0, #0]
 8005b12:	60c6      	str	r6, [r0, #12]
 8005b14:	b13c      	cbz	r4, 8005b26 <_Bfree+0x3a>
 8005b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b18:	6862      	ldr	r2, [r4, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b20:	6021      	str	r1, [r4, #0]
 8005b22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	080072f9 	.word	0x080072f9
 8005b2c:	0800737c 	.word	0x0800737c

08005b30 <__multadd>:
 8005b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b34:	4607      	mov	r7, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	461e      	mov	r6, r3
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	690d      	ldr	r5, [r1, #16]
 8005b3e:	f101 0c14 	add.w	ip, r1, #20
 8005b42:	f8dc 3000 	ldr.w	r3, [ip]
 8005b46:	3001      	adds	r0, #1
 8005b48:	b299      	uxth	r1, r3
 8005b4a:	fb02 6101 	mla	r1, r2, r1, r6
 8005b4e:	0c1e      	lsrs	r6, r3, #16
 8005b50:	0c0b      	lsrs	r3, r1, #16
 8005b52:	fb02 3306 	mla	r3, r2, r6, r3
 8005b56:	b289      	uxth	r1, r1
 8005b58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b5c:	4285      	cmp	r5, r0
 8005b5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b62:	f84c 1b04 	str.w	r1, [ip], #4
 8005b66:	dcec      	bgt.n	8005b42 <__multadd+0x12>
 8005b68:	b30e      	cbz	r6, 8005bae <__multadd+0x7e>
 8005b6a:	68a3      	ldr	r3, [r4, #8]
 8005b6c:	42ab      	cmp	r3, r5
 8005b6e:	dc19      	bgt.n	8005ba4 <__multadd+0x74>
 8005b70:	6861      	ldr	r1, [r4, #4]
 8005b72:	4638      	mov	r0, r7
 8005b74:	3101      	adds	r1, #1
 8005b76:	f7ff ff79 	bl	8005a6c <_Balloc>
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	b928      	cbnz	r0, 8005b8a <__multadd+0x5a>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	21b5      	movs	r1, #181	; 0xb5
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <__multadd+0x84>)
 8005b84:	480c      	ldr	r0, [pc, #48]	; (8005bb8 <__multadd+0x88>)
 8005b86:	f000 fd4f 	bl	8006628 <__assert_func>
 8005b8a:	6922      	ldr	r2, [r4, #16]
 8005b8c:	f104 010c 	add.w	r1, r4, #12
 8005b90:	3202      	adds	r2, #2
 8005b92:	0092      	lsls	r2, r2, #2
 8005b94:	300c      	adds	r0, #12
 8005b96:	f7ff ff5b 	bl	8005a50 <memcpy>
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	f7ff ffa5 	bl	8005aec <_Bfree>
 8005ba2:	4644      	mov	r4, r8
 8005ba4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ba8:	3501      	adds	r5, #1
 8005baa:	615e      	str	r6, [r3, #20]
 8005bac:	6125      	str	r5, [r4, #16]
 8005bae:	4620      	mov	r0, r4
 8005bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb4:	0800736b 	.word	0x0800736b
 8005bb8:	0800737c 	.word	0x0800737c

08005bbc <__hi0bits>:
 8005bbc:	0c02      	lsrs	r2, r0, #16
 8005bbe:	0412      	lsls	r2, r2, #16
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	b9ca      	cbnz	r2, 8005bf8 <__hi0bits+0x3c>
 8005bc4:	0403      	lsls	r3, r0, #16
 8005bc6:	2010      	movs	r0, #16
 8005bc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005bcc:	bf04      	itt	eq
 8005bce:	021b      	lsleq	r3, r3, #8
 8005bd0:	3008      	addeq	r0, #8
 8005bd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005bd6:	bf04      	itt	eq
 8005bd8:	011b      	lsleq	r3, r3, #4
 8005bda:	3004      	addeq	r0, #4
 8005bdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005be0:	bf04      	itt	eq
 8005be2:	009b      	lsleq	r3, r3, #2
 8005be4:	3002      	addeq	r0, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	db05      	blt.n	8005bf6 <__hi0bits+0x3a>
 8005bea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005bee:	f100 0001 	add.w	r0, r0, #1
 8005bf2:	bf08      	it	eq
 8005bf4:	2020      	moveq	r0, #32
 8005bf6:	4770      	bx	lr
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e7e5      	b.n	8005bc8 <__hi0bits+0xc>

08005bfc <__lo0bits>:
 8005bfc:	6803      	ldr	r3, [r0, #0]
 8005bfe:	4602      	mov	r2, r0
 8005c00:	f013 0007 	ands.w	r0, r3, #7
 8005c04:	d00b      	beq.n	8005c1e <__lo0bits+0x22>
 8005c06:	07d9      	lsls	r1, r3, #31
 8005c08:	d421      	bmi.n	8005c4e <__lo0bits+0x52>
 8005c0a:	0798      	lsls	r0, r3, #30
 8005c0c:	bf49      	itett	mi
 8005c0e:	085b      	lsrmi	r3, r3, #1
 8005c10:	089b      	lsrpl	r3, r3, #2
 8005c12:	2001      	movmi	r0, #1
 8005c14:	6013      	strmi	r3, [r2, #0]
 8005c16:	bf5c      	itt	pl
 8005c18:	2002      	movpl	r0, #2
 8005c1a:	6013      	strpl	r3, [r2, #0]
 8005c1c:	4770      	bx	lr
 8005c1e:	b299      	uxth	r1, r3
 8005c20:	b909      	cbnz	r1, 8005c26 <__lo0bits+0x2a>
 8005c22:	2010      	movs	r0, #16
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	b2d9      	uxtb	r1, r3
 8005c28:	b909      	cbnz	r1, 8005c2e <__lo0bits+0x32>
 8005c2a:	3008      	adds	r0, #8
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	0719      	lsls	r1, r3, #28
 8005c30:	bf04      	itt	eq
 8005c32:	091b      	lsreq	r3, r3, #4
 8005c34:	3004      	addeq	r0, #4
 8005c36:	0799      	lsls	r1, r3, #30
 8005c38:	bf04      	itt	eq
 8005c3a:	089b      	lsreq	r3, r3, #2
 8005c3c:	3002      	addeq	r0, #2
 8005c3e:	07d9      	lsls	r1, r3, #31
 8005c40:	d403      	bmi.n	8005c4a <__lo0bits+0x4e>
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	f100 0001 	add.w	r0, r0, #1
 8005c48:	d003      	beq.n	8005c52 <__lo0bits+0x56>
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	4770      	bx	lr
 8005c4e:	2000      	movs	r0, #0
 8005c50:	4770      	bx	lr
 8005c52:	2020      	movs	r0, #32
 8005c54:	4770      	bx	lr
	...

08005c58 <__i2b>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	f7ff ff05 	bl	8005a6c <_Balloc>
 8005c62:	4602      	mov	r2, r0
 8005c64:	b928      	cbnz	r0, 8005c72 <__i2b+0x1a>
 8005c66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c6a:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <__i2b+0x24>)
 8005c6c:	4804      	ldr	r0, [pc, #16]	; (8005c80 <__i2b+0x28>)
 8005c6e:	f000 fcdb 	bl	8006628 <__assert_func>
 8005c72:	2301      	movs	r3, #1
 8005c74:	6144      	str	r4, [r0, #20]
 8005c76:	6103      	str	r3, [r0, #16]
 8005c78:	bd10      	pop	{r4, pc}
 8005c7a:	bf00      	nop
 8005c7c:	0800736b 	.word	0x0800736b
 8005c80:	0800737c 	.word	0x0800737c

08005c84 <__multiply>:
 8005c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c88:	4691      	mov	r9, r2
 8005c8a:	690a      	ldr	r2, [r1, #16]
 8005c8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c90:	460c      	mov	r4, r1
 8005c92:	429a      	cmp	r2, r3
 8005c94:	bfbe      	ittt	lt
 8005c96:	460b      	movlt	r3, r1
 8005c98:	464c      	movlt	r4, r9
 8005c9a:	4699      	movlt	r9, r3
 8005c9c:	6927      	ldr	r7, [r4, #16]
 8005c9e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ca2:	68a3      	ldr	r3, [r4, #8]
 8005ca4:	6861      	ldr	r1, [r4, #4]
 8005ca6:	eb07 060a 	add.w	r6, r7, sl
 8005caa:	42b3      	cmp	r3, r6
 8005cac:	b085      	sub	sp, #20
 8005cae:	bfb8      	it	lt
 8005cb0:	3101      	addlt	r1, #1
 8005cb2:	f7ff fedb 	bl	8005a6c <_Balloc>
 8005cb6:	b930      	cbnz	r0, 8005cc6 <__multiply+0x42>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	f240 115d 	movw	r1, #349	; 0x15d
 8005cbe:	4b43      	ldr	r3, [pc, #268]	; (8005dcc <__multiply+0x148>)
 8005cc0:	4843      	ldr	r0, [pc, #268]	; (8005dd0 <__multiply+0x14c>)
 8005cc2:	f000 fcb1 	bl	8006628 <__assert_func>
 8005cc6:	f100 0514 	add.w	r5, r0, #20
 8005cca:	462b      	mov	r3, r5
 8005ccc:	2200      	movs	r2, #0
 8005cce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cd2:	4543      	cmp	r3, r8
 8005cd4:	d321      	bcc.n	8005d1a <__multiply+0x96>
 8005cd6:	f104 0314 	add.w	r3, r4, #20
 8005cda:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005cde:	f109 0314 	add.w	r3, r9, #20
 8005ce2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ce6:	9202      	str	r2, [sp, #8]
 8005ce8:	1b3a      	subs	r2, r7, r4
 8005cea:	3a15      	subs	r2, #21
 8005cec:	f022 0203 	bic.w	r2, r2, #3
 8005cf0:	3204      	adds	r2, #4
 8005cf2:	f104 0115 	add.w	r1, r4, #21
 8005cf6:	428f      	cmp	r7, r1
 8005cf8:	bf38      	it	cc
 8005cfa:	2204      	movcc	r2, #4
 8005cfc:	9201      	str	r2, [sp, #4]
 8005cfe:	9a02      	ldr	r2, [sp, #8]
 8005d00:	9303      	str	r3, [sp, #12]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d80c      	bhi.n	8005d20 <__multiply+0x9c>
 8005d06:	2e00      	cmp	r6, #0
 8005d08:	dd03      	ble.n	8005d12 <__multiply+0x8e>
 8005d0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d059      	beq.n	8005dc6 <__multiply+0x142>
 8005d12:	6106      	str	r6, [r0, #16]
 8005d14:	b005      	add	sp, #20
 8005d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1a:	f843 2b04 	str.w	r2, [r3], #4
 8005d1e:	e7d8      	b.n	8005cd2 <__multiply+0x4e>
 8005d20:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d24:	f1ba 0f00 	cmp.w	sl, #0
 8005d28:	d023      	beq.n	8005d72 <__multiply+0xee>
 8005d2a:	46a9      	mov	r9, r5
 8005d2c:	f04f 0c00 	mov.w	ip, #0
 8005d30:	f104 0e14 	add.w	lr, r4, #20
 8005d34:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d38:	f8d9 1000 	ldr.w	r1, [r9]
 8005d3c:	fa1f fb82 	uxth.w	fp, r2
 8005d40:	b289      	uxth	r1, r1
 8005d42:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d46:	4461      	add	r1, ip
 8005d48:	f8d9 c000 	ldr.w	ip, [r9]
 8005d4c:	0c12      	lsrs	r2, r2, #16
 8005d4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d52:	fb0a c202 	mla	r2, sl, r2, ip
 8005d56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d5a:	b289      	uxth	r1, r1
 8005d5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d60:	4577      	cmp	r7, lr
 8005d62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d66:	f849 1b04 	str.w	r1, [r9], #4
 8005d6a:	d8e3      	bhi.n	8005d34 <__multiply+0xb0>
 8005d6c:	9a01      	ldr	r2, [sp, #4]
 8005d6e:	f845 c002 	str.w	ip, [r5, r2]
 8005d72:	9a03      	ldr	r2, [sp, #12]
 8005d74:	3304      	adds	r3, #4
 8005d76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d7a:	f1b9 0f00 	cmp.w	r9, #0
 8005d7e:	d020      	beq.n	8005dc2 <__multiply+0x13e>
 8005d80:	46ae      	mov	lr, r5
 8005d82:	f04f 0a00 	mov.w	sl, #0
 8005d86:	6829      	ldr	r1, [r5, #0]
 8005d88:	f104 0c14 	add.w	ip, r4, #20
 8005d8c:	f8bc b000 	ldrh.w	fp, [ip]
 8005d90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d94:	b289      	uxth	r1, r1
 8005d96:	fb09 220b 	mla	r2, r9, fp, r2
 8005d9a:	4492      	add	sl, r2
 8005d9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005da0:	f84e 1b04 	str.w	r1, [lr], #4
 8005da4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005da8:	f8be 1000 	ldrh.w	r1, [lr]
 8005dac:	0c12      	lsrs	r2, r2, #16
 8005dae:	fb09 1102 	mla	r1, r9, r2, r1
 8005db2:	4567      	cmp	r7, ip
 8005db4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005db8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005dbc:	d8e6      	bhi.n	8005d8c <__multiply+0x108>
 8005dbe:	9a01      	ldr	r2, [sp, #4]
 8005dc0:	50a9      	str	r1, [r5, r2]
 8005dc2:	3504      	adds	r5, #4
 8005dc4:	e79b      	b.n	8005cfe <__multiply+0x7a>
 8005dc6:	3e01      	subs	r6, #1
 8005dc8:	e79d      	b.n	8005d06 <__multiply+0x82>
 8005dca:	bf00      	nop
 8005dcc:	0800736b 	.word	0x0800736b
 8005dd0:	0800737c 	.word	0x0800737c

08005dd4 <__pow5mult>:
 8005dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd8:	4615      	mov	r5, r2
 8005dda:	f012 0203 	ands.w	r2, r2, #3
 8005dde:	4606      	mov	r6, r0
 8005de0:	460f      	mov	r7, r1
 8005de2:	d007      	beq.n	8005df4 <__pow5mult+0x20>
 8005de4:	4c25      	ldr	r4, [pc, #148]	; (8005e7c <__pow5mult+0xa8>)
 8005de6:	3a01      	subs	r2, #1
 8005de8:	2300      	movs	r3, #0
 8005dea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dee:	f7ff fe9f 	bl	8005b30 <__multadd>
 8005df2:	4607      	mov	r7, r0
 8005df4:	10ad      	asrs	r5, r5, #2
 8005df6:	d03d      	beq.n	8005e74 <__pow5mult+0xa0>
 8005df8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dfa:	b97c      	cbnz	r4, 8005e1c <__pow5mult+0x48>
 8005dfc:	2010      	movs	r0, #16
 8005dfe:	f7ff fe11 	bl	8005a24 <malloc>
 8005e02:	4602      	mov	r2, r0
 8005e04:	6270      	str	r0, [r6, #36]	; 0x24
 8005e06:	b928      	cbnz	r0, 8005e14 <__pow5mult+0x40>
 8005e08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e0c:	4b1c      	ldr	r3, [pc, #112]	; (8005e80 <__pow5mult+0xac>)
 8005e0e:	481d      	ldr	r0, [pc, #116]	; (8005e84 <__pow5mult+0xb0>)
 8005e10:	f000 fc0a 	bl	8006628 <__assert_func>
 8005e14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e18:	6004      	str	r4, [r0, #0]
 8005e1a:	60c4      	str	r4, [r0, #12]
 8005e1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e24:	b94c      	cbnz	r4, 8005e3a <__pow5mult+0x66>
 8005e26:	f240 2171 	movw	r1, #625	; 0x271
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f7ff ff14 	bl	8005c58 <__i2b>
 8005e30:	2300      	movs	r3, #0
 8005e32:	4604      	mov	r4, r0
 8005e34:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e38:	6003      	str	r3, [r0, #0]
 8005e3a:	f04f 0900 	mov.w	r9, #0
 8005e3e:	07eb      	lsls	r3, r5, #31
 8005e40:	d50a      	bpl.n	8005e58 <__pow5mult+0x84>
 8005e42:	4639      	mov	r1, r7
 8005e44:	4622      	mov	r2, r4
 8005e46:	4630      	mov	r0, r6
 8005e48:	f7ff ff1c 	bl	8005c84 <__multiply>
 8005e4c:	4680      	mov	r8, r0
 8005e4e:	4639      	mov	r1, r7
 8005e50:	4630      	mov	r0, r6
 8005e52:	f7ff fe4b 	bl	8005aec <_Bfree>
 8005e56:	4647      	mov	r7, r8
 8005e58:	106d      	asrs	r5, r5, #1
 8005e5a:	d00b      	beq.n	8005e74 <__pow5mult+0xa0>
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	b938      	cbnz	r0, 8005e70 <__pow5mult+0x9c>
 8005e60:	4622      	mov	r2, r4
 8005e62:	4621      	mov	r1, r4
 8005e64:	4630      	mov	r0, r6
 8005e66:	f7ff ff0d 	bl	8005c84 <__multiply>
 8005e6a:	6020      	str	r0, [r4, #0]
 8005e6c:	f8c0 9000 	str.w	r9, [r0]
 8005e70:	4604      	mov	r4, r0
 8005e72:	e7e4      	b.n	8005e3e <__pow5mult+0x6a>
 8005e74:	4638      	mov	r0, r7
 8005e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7a:	bf00      	nop
 8005e7c:	080074c8 	.word	0x080074c8
 8005e80:	080072f9 	.word	0x080072f9
 8005e84:	0800737c 	.word	0x0800737c

08005e88 <__lshift>:
 8005e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	4607      	mov	r7, r0
 8005e90:	4691      	mov	r9, r2
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	6849      	ldr	r1, [r1, #4]
 8005e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ea0:	f108 0601 	add.w	r6, r8, #1
 8005ea4:	42b3      	cmp	r3, r6
 8005ea6:	db0b      	blt.n	8005ec0 <__lshift+0x38>
 8005ea8:	4638      	mov	r0, r7
 8005eaa:	f7ff fddf 	bl	8005a6c <_Balloc>
 8005eae:	4605      	mov	r5, r0
 8005eb0:	b948      	cbnz	r0, 8005ec6 <__lshift+0x3e>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005eb8:	4b29      	ldr	r3, [pc, #164]	; (8005f60 <__lshift+0xd8>)
 8005eba:	482a      	ldr	r0, [pc, #168]	; (8005f64 <__lshift+0xdc>)
 8005ebc:	f000 fbb4 	bl	8006628 <__assert_func>
 8005ec0:	3101      	adds	r1, #1
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	e7ee      	b.n	8005ea4 <__lshift+0x1c>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f100 0114 	add.w	r1, r0, #20
 8005ecc:	f100 0210 	add.w	r2, r0, #16
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	4553      	cmp	r3, sl
 8005ed4:	db37      	blt.n	8005f46 <__lshift+0xbe>
 8005ed6:	6920      	ldr	r0, [r4, #16]
 8005ed8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005edc:	f104 0314 	add.w	r3, r4, #20
 8005ee0:	f019 091f 	ands.w	r9, r9, #31
 8005ee4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ee8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005eec:	d02f      	beq.n	8005f4e <__lshift+0xc6>
 8005eee:	468a      	mov	sl, r1
 8005ef0:	f04f 0c00 	mov.w	ip, #0
 8005ef4:	f1c9 0e20 	rsb	lr, r9, #32
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	fa02 f209 	lsl.w	r2, r2, r9
 8005efe:	ea42 020c 	orr.w	r2, r2, ip
 8005f02:	f84a 2b04 	str.w	r2, [sl], #4
 8005f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f0a:	4298      	cmp	r0, r3
 8005f0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005f10:	d8f2      	bhi.n	8005ef8 <__lshift+0x70>
 8005f12:	1b03      	subs	r3, r0, r4
 8005f14:	3b15      	subs	r3, #21
 8005f16:	f023 0303 	bic.w	r3, r3, #3
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	f104 0215 	add.w	r2, r4, #21
 8005f20:	4290      	cmp	r0, r2
 8005f22:	bf38      	it	cc
 8005f24:	2304      	movcc	r3, #4
 8005f26:	f841 c003 	str.w	ip, [r1, r3]
 8005f2a:	f1bc 0f00 	cmp.w	ip, #0
 8005f2e:	d001      	beq.n	8005f34 <__lshift+0xac>
 8005f30:	f108 0602 	add.w	r6, r8, #2
 8005f34:	3e01      	subs	r6, #1
 8005f36:	4638      	mov	r0, r7
 8005f38:	4621      	mov	r1, r4
 8005f3a:	612e      	str	r6, [r5, #16]
 8005f3c:	f7ff fdd6 	bl	8005aec <_Bfree>
 8005f40:	4628      	mov	r0, r5
 8005f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f46:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	e7c1      	b.n	8005ed2 <__lshift+0x4a>
 8005f4e:	3904      	subs	r1, #4
 8005f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f54:	4298      	cmp	r0, r3
 8005f56:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f5a:	d8f9      	bhi.n	8005f50 <__lshift+0xc8>
 8005f5c:	e7ea      	b.n	8005f34 <__lshift+0xac>
 8005f5e:	bf00      	nop
 8005f60:	0800736b 	.word	0x0800736b
 8005f64:	0800737c 	.word	0x0800737c

08005f68 <__mcmp>:
 8005f68:	4603      	mov	r3, r0
 8005f6a:	690a      	ldr	r2, [r1, #16]
 8005f6c:	6900      	ldr	r0, [r0, #16]
 8005f6e:	b530      	push	{r4, r5, lr}
 8005f70:	1a80      	subs	r0, r0, r2
 8005f72:	d10d      	bne.n	8005f90 <__mcmp+0x28>
 8005f74:	3314      	adds	r3, #20
 8005f76:	3114      	adds	r1, #20
 8005f78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f88:	4295      	cmp	r5, r2
 8005f8a:	d002      	beq.n	8005f92 <__mcmp+0x2a>
 8005f8c:	d304      	bcc.n	8005f98 <__mcmp+0x30>
 8005f8e:	2001      	movs	r0, #1
 8005f90:	bd30      	pop	{r4, r5, pc}
 8005f92:	42a3      	cmp	r3, r4
 8005f94:	d3f4      	bcc.n	8005f80 <__mcmp+0x18>
 8005f96:	e7fb      	b.n	8005f90 <__mcmp+0x28>
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9c:	e7f8      	b.n	8005f90 <__mcmp+0x28>
	...

08005fa0 <__mdiff>:
 8005fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	460d      	mov	r5, r1
 8005fa6:	4607      	mov	r7, r0
 8005fa8:	4611      	mov	r1, r2
 8005faa:	4628      	mov	r0, r5
 8005fac:	4614      	mov	r4, r2
 8005fae:	f7ff ffdb 	bl	8005f68 <__mcmp>
 8005fb2:	1e06      	subs	r6, r0, #0
 8005fb4:	d111      	bne.n	8005fda <__mdiff+0x3a>
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f7ff fd57 	bl	8005a6c <_Balloc>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	b928      	cbnz	r0, 8005fce <__mdiff+0x2e>
 8005fc2:	f240 2132 	movw	r1, #562	; 0x232
 8005fc6:	4b3a      	ldr	r3, [pc, #232]	; (80060b0 <__mdiff+0x110>)
 8005fc8:	483a      	ldr	r0, [pc, #232]	; (80060b4 <__mdiff+0x114>)
 8005fca:	f000 fb2d 	bl	8006628 <__assert_func>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fda:	bfa4      	itt	ge
 8005fdc:	4623      	movge	r3, r4
 8005fde:	462c      	movge	r4, r5
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	6861      	ldr	r1, [r4, #4]
 8005fe4:	bfa6      	itte	ge
 8005fe6:	461d      	movge	r5, r3
 8005fe8:	2600      	movge	r6, #0
 8005fea:	2601      	movlt	r6, #1
 8005fec:	f7ff fd3e 	bl	8005a6c <_Balloc>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	b918      	cbnz	r0, 8005ffc <__mdiff+0x5c>
 8005ff4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ff8:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <__mdiff+0x110>)
 8005ffa:	e7e5      	b.n	8005fc8 <__mdiff+0x28>
 8005ffc:	f102 0814 	add.w	r8, r2, #20
 8006000:	46c2      	mov	sl, r8
 8006002:	f04f 0c00 	mov.w	ip, #0
 8006006:	6927      	ldr	r7, [r4, #16]
 8006008:	60c6      	str	r6, [r0, #12]
 800600a:	692e      	ldr	r6, [r5, #16]
 800600c:	f104 0014 	add.w	r0, r4, #20
 8006010:	f105 0914 	add.w	r9, r5, #20
 8006014:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006018:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800601c:	3410      	adds	r4, #16
 800601e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006022:	f859 3b04 	ldr.w	r3, [r9], #4
 8006026:	fa1f f18b 	uxth.w	r1, fp
 800602a:	448c      	add	ip, r1
 800602c:	b299      	uxth	r1, r3
 800602e:	0c1b      	lsrs	r3, r3, #16
 8006030:	ebac 0101 	sub.w	r1, ip, r1
 8006034:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006038:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800603c:	b289      	uxth	r1, r1
 800603e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006042:	454e      	cmp	r6, r9
 8006044:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006048:	f84a 3b04 	str.w	r3, [sl], #4
 800604c:	d8e7      	bhi.n	800601e <__mdiff+0x7e>
 800604e:	1b73      	subs	r3, r6, r5
 8006050:	3b15      	subs	r3, #21
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	3515      	adds	r5, #21
 8006058:	3304      	adds	r3, #4
 800605a:	42ae      	cmp	r6, r5
 800605c:	bf38      	it	cc
 800605e:	2304      	movcc	r3, #4
 8006060:	4418      	add	r0, r3
 8006062:	4443      	add	r3, r8
 8006064:	461e      	mov	r6, r3
 8006066:	4605      	mov	r5, r0
 8006068:	4575      	cmp	r5, lr
 800606a:	d30e      	bcc.n	800608a <__mdiff+0xea>
 800606c:	f10e 0103 	add.w	r1, lr, #3
 8006070:	1a09      	subs	r1, r1, r0
 8006072:	f021 0103 	bic.w	r1, r1, #3
 8006076:	3803      	subs	r0, #3
 8006078:	4586      	cmp	lr, r0
 800607a:	bf38      	it	cc
 800607c:	2100      	movcc	r1, #0
 800607e:	4419      	add	r1, r3
 8006080:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006084:	b18b      	cbz	r3, 80060aa <__mdiff+0x10a>
 8006086:	6117      	str	r7, [r2, #16]
 8006088:	e7a4      	b.n	8005fd4 <__mdiff+0x34>
 800608a:	f855 8b04 	ldr.w	r8, [r5], #4
 800608e:	fa1f f188 	uxth.w	r1, r8
 8006092:	4461      	add	r1, ip
 8006094:	140c      	asrs	r4, r1, #16
 8006096:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800609a:	b289      	uxth	r1, r1
 800609c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80060a0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80060a4:	f846 1b04 	str.w	r1, [r6], #4
 80060a8:	e7de      	b.n	8006068 <__mdiff+0xc8>
 80060aa:	3f01      	subs	r7, #1
 80060ac:	e7e8      	b.n	8006080 <__mdiff+0xe0>
 80060ae:	bf00      	nop
 80060b0:	0800736b 	.word	0x0800736b
 80060b4:	0800737c 	.word	0x0800737c

080060b8 <__d2b>:
 80060b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060bc:	2101      	movs	r1, #1
 80060be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80060c2:	4690      	mov	r8, r2
 80060c4:	461d      	mov	r5, r3
 80060c6:	f7ff fcd1 	bl	8005a6c <_Balloc>
 80060ca:	4604      	mov	r4, r0
 80060cc:	b930      	cbnz	r0, 80060dc <__d2b+0x24>
 80060ce:	4602      	mov	r2, r0
 80060d0:	f240 310a 	movw	r1, #778	; 0x30a
 80060d4:	4b24      	ldr	r3, [pc, #144]	; (8006168 <__d2b+0xb0>)
 80060d6:	4825      	ldr	r0, [pc, #148]	; (800616c <__d2b+0xb4>)
 80060d8:	f000 faa6 	bl	8006628 <__assert_func>
 80060dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80060e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80060e4:	bb2d      	cbnz	r5, 8006132 <__d2b+0x7a>
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	f1b8 0300 	subs.w	r3, r8, #0
 80060ec:	d026      	beq.n	800613c <__d2b+0x84>
 80060ee:	4668      	mov	r0, sp
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	f7ff fd83 	bl	8005bfc <__lo0bits>
 80060f6:	9900      	ldr	r1, [sp, #0]
 80060f8:	b1f0      	cbz	r0, 8006138 <__d2b+0x80>
 80060fa:	9a01      	ldr	r2, [sp, #4]
 80060fc:	f1c0 0320 	rsb	r3, r0, #32
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	430b      	orrs	r3, r1
 8006106:	40c2      	lsrs	r2, r0
 8006108:	6163      	str	r3, [r4, #20]
 800610a:	9201      	str	r2, [sp, #4]
 800610c:	9b01      	ldr	r3, [sp, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	bf14      	ite	ne
 8006112:	2102      	movne	r1, #2
 8006114:	2101      	moveq	r1, #1
 8006116:	61a3      	str	r3, [r4, #24]
 8006118:	6121      	str	r1, [r4, #16]
 800611a:	b1c5      	cbz	r5, 800614e <__d2b+0x96>
 800611c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006120:	4405      	add	r5, r0
 8006122:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006126:	603d      	str	r5, [r7, #0]
 8006128:	6030      	str	r0, [r6, #0]
 800612a:	4620      	mov	r0, r4
 800612c:	b002      	add	sp, #8
 800612e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006136:	e7d6      	b.n	80060e6 <__d2b+0x2e>
 8006138:	6161      	str	r1, [r4, #20]
 800613a:	e7e7      	b.n	800610c <__d2b+0x54>
 800613c:	a801      	add	r0, sp, #4
 800613e:	f7ff fd5d 	bl	8005bfc <__lo0bits>
 8006142:	2101      	movs	r1, #1
 8006144:	9b01      	ldr	r3, [sp, #4]
 8006146:	6121      	str	r1, [r4, #16]
 8006148:	6163      	str	r3, [r4, #20]
 800614a:	3020      	adds	r0, #32
 800614c:	e7e5      	b.n	800611a <__d2b+0x62>
 800614e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006152:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006156:	6038      	str	r0, [r7, #0]
 8006158:	6918      	ldr	r0, [r3, #16]
 800615a:	f7ff fd2f 	bl	8005bbc <__hi0bits>
 800615e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006162:	6031      	str	r1, [r6, #0]
 8006164:	e7e1      	b.n	800612a <__d2b+0x72>
 8006166:	bf00      	nop
 8006168:	0800736b 	.word	0x0800736b
 800616c:	0800737c 	.word	0x0800737c

08006170 <_calloc_r>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	fba1 5402 	umull	r5, r4, r1, r2
 8006176:	b934      	cbnz	r4, 8006186 <_calloc_r+0x16>
 8006178:	4629      	mov	r1, r5
 800617a:	f000 f875 	bl	8006268 <_malloc_r>
 800617e:	4606      	mov	r6, r0
 8006180:	b928      	cbnz	r0, 800618e <_calloc_r+0x1e>
 8006182:	4630      	mov	r0, r6
 8006184:	bd70      	pop	{r4, r5, r6, pc}
 8006186:	220c      	movs	r2, #12
 8006188:	2600      	movs	r6, #0
 800618a:	6002      	str	r2, [r0, #0]
 800618c:	e7f9      	b.n	8006182 <_calloc_r+0x12>
 800618e:	462a      	mov	r2, r5
 8006190:	4621      	mov	r1, r4
 8006192:	f7fe f92d 	bl	80043f0 <memset>
 8006196:	e7f4      	b.n	8006182 <_calloc_r+0x12>

08006198 <_free_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4605      	mov	r5, r0
 800619c:	2900      	cmp	r1, #0
 800619e:	d040      	beq.n	8006222 <_free_r+0x8a>
 80061a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a4:	1f0c      	subs	r4, r1, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bfb8      	it	lt
 80061aa:	18e4      	addlt	r4, r4, r3
 80061ac:	f000 fa98 	bl	80066e0 <__malloc_lock>
 80061b0:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <_free_r+0x8c>)
 80061b2:	6813      	ldr	r3, [r2, #0]
 80061b4:	b933      	cbnz	r3, 80061c4 <_free_r+0x2c>
 80061b6:	6063      	str	r3, [r4, #4]
 80061b8:	6014      	str	r4, [r2, #0]
 80061ba:	4628      	mov	r0, r5
 80061bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061c0:	f000 ba94 	b.w	80066ec <__malloc_unlock>
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	d908      	bls.n	80061da <_free_r+0x42>
 80061c8:	6820      	ldr	r0, [r4, #0]
 80061ca:	1821      	adds	r1, r4, r0
 80061cc:	428b      	cmp	r3, r1
 80061ce:	bf01      	itttt	eq
 80061d0:	6819      	ldreq	r1, [r3, #0]
 80061d2:	685b      	ldreq	r3, [r3, #4]
 80061d4:	1809      	addeq	r1, r1, r0
 80061d6:	6021      	streq	r1, [r4, #0]
 80061d8:	e7ed      	b.n	80061b6 <_free_r+0x1e>
 80061da:	461a      	mov	r2, r3
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	b10b      	cbz	r3, 80061e4 <_free_r+0x4c>
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	d9fa      	bls.n	80061da <_free_r+0x42>
 80061e4:	6811      	ldr	r1, [r2, #0]
 80061e6:	1850      	adds	r0, r2, r1
 80061e8:	42a0      	cmp	r0, r4
 80061ea:	d10b      	bne.n	8006204 <_free_r+0x6c>
 80061ec:	6820      	ldr	r0, [r4, #0]
 80061ee:	4401      	add	r1, r0
 80061f0:	1850      	adds	r0, r2, r1
 80061f2:	4283      	cmp	r3, r0
 80061f4:	6011      	str	r1, [r2, #0]
 80061f6:	d1e0      	bne.n	80061ba <_free_r+0x22>
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	4401      	add	r1, r0
 80061fe:	6011      	str	r1, [r2, #0]
 8006200:	6053      	str	r3, [r2, #4]
 8006202:	e7da      	b.n	80061ba <_free_r+0x22>
 8006204:	d902      	bls.n	800620c <_free_r+0x74>
 8006206:	230c      	movs	r3, #12
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	e7d6      	b.n	80061ba <_free_r+0x22>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	1821      	adds	r1, r4, r0
 8006210:	428b      	cmp	r3, r1
 8006212:	bf01      	itttt	eq
 8006214:	6819      	ldreq	r1, [r3, #0]
 8006216:	685b      	ldreq	r3, [r3, #4]
 8006218:	1809      	addeq	r1, r1, r0
 800621a:	6021      	streq	r1, [r4, #0]
 800621c:	6063      	str	r3, [r4, #4]
 800621e:	6054      	str	r4, [r2, #4]
 8006220:	e7cb      	b.n	80061ba <_free_r+0x22>
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	20000360 	.word	0x20000360

08006228 <sbrk_aligned>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	4e0e      	ldr	r6, [pc, #56]	; (8006264 <sbrk_aligned+0x3c>)
 800622c:	460c      	mov	r4, r1
 800622e:	6831      	ldr	r1, [r6, #0]
 8006230:	4605      	mov	r5, r0
 8006232:	b911      	cbnz	r1, 800623a <sbrk_aligned+0x12>
 8006234:	f000 f9e8 	bl	8006608 <_sbrk_r>
 8006238:	6030      	str	r0, [r6, #0]
 800623a:	4621      	mov	r1, r4
 800623c:	4628      	mov	r0, r5
 800623e:	f000 f9e3 	bl	8006608 <_sbrk_r>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d00a      	beq.n	800625c <sbrk_aligned+0x34>
 8006246:	1cc4      	adds	r4, r0, #3
 8006248:	f024 0403 	bic.w	r4, r4, #3
 800624c:	42a0      	cmp	r0, r4
 800624e:	d007      	beq.n	8006260 <sbrk_aligned+0x38>
 8006250:	1a21      	subs	r1, r4, r0
 8006252:	4628      	mov	r0, r5
 8006254:	f000 f9d8 	bl	8006608 <_sbrk_r>
 8006258:	3001      	adds	r0, #1
 800625a:	d101      	bne.n	8006260 <sbrk_aligned+0x38>
 800625c:	f04f 34ff 	mov.w	r4, #4294967295
 8006260:	4620      	mov	r0, r4
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	20000364 	.word	0x20000364

08006268 <_malloc_r>:
 8006268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626c:	1ccd      	adds	r5, r1, #3
 800626e:	f025 0503 	bic.w	r5, r5, #3
 8006272:	3508      	adds	r5, #8
 8006274:	2d0c      	cmp	r5, #12
 8006276:	bf38      	it	cc
 8006278:	250c      	movcc	r5, #12
 800627a:	2d00      	cmp	r5, #0
 800627c:	4607      	mov	r7, r0
 800627e:	db01      	blt.n	8006284 <_malloc_r+0x1c>
 8006280:	42a9      	cmp	r1, r5
 8006282:	d905      	bls.n	8006290 <_malloc_r+0x28>
 8006284:	230c      	movs	r3, #12
 8006286:	2600      	movs	r6, #0
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	4630      	mov	r0, r6
 800628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006290:	4e2e      	ldr	r6, [pc, #184]	; (800634c <_malloc_r+0xe4>)
 8006292:	f000 fa25 	bl	80066e0 <__malloc_lock>
 8006296:	6833      	ldr	r3, [r6, #0]
 8006298:	461c      	mov	r4, r3
 800629a:	bb34      	cbnz	r4, 80062ea <_malloc_r+0x82>
 800629c:	4629      	mov	r1, r5
 800629e:	4638      	mov	r0, r7
 80062a0:	f7ff ffc2 	bl	8006228 <sbrk_aligned>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	4604      	mov	r4, r0
 80062a8:	d14d      	bne.n	8006346 <_malloc_r+0xde>
 80062aa:	6834      	ldr	r4, [r6, #0]
 80062ac:	4626      	mov	r6, r4
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	d140      	bne.n	8006334 <_malloc_r+0xcc>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	4631      	mov	r1, r6
 80062b6:	4638      	mov	r0, r7
 80062b8:	eb04 0803 	add.w	r8, r4, r3
 80062bc:	f000 f9a4 	bl	8006608 <_sbrk_r>
 80062c0:	4580      	cmp	r8, r0
 80062c2:	d13a      	bne.n	800633a <_malloc_r+0xd2>
 80062c4:	6821      	ldr	r1, [r4, #0]
 80062c6:	3503      	adds	r5, #3
 80062c8:	1a6d      	subs	r5, r5, r1
 80062ca:	f025 0503 	bic.w	r5, r5, #3
 80062ce:	3508      	adds	r5, #8
 80062d0:	2d0c      	cmp	r5, #12
 80062d2:	bf38      	it	cc
 80062d4:	250c      	movcc	r5, #12
 80062d6:	4638      	mov	r0, r7
 80062d8:	4629      	mov	r1, r5
 80062da:	f7ff ffa5 	bl	8006228 <sbrk_aligned>
 80062de:	3001      	adds	r0, #1
 80062e0:	d02b      	beq.n	800633a <_malloc_r+0xd2>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	442b      	add	r3, r5
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	e00e      	b.n	8006308 <_malloc_r+0xa0>
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	1b52      	subs	r2, r2, r5
 80062ee:	d41e      	bmi.n	800632e <_malloc_r+0xc6>
 80062f0:	2a0b      	cmp	r2, #11
 80062f2:	d916      	bls.n	8006322 <_malloc_r+0xba>
 80062f4:	1961      	adds	r1, r4, r5
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	6025      	str	r5, [r4, #0]
 80062fa:	bf18      	it	ne
 80062fc:	6059      	strne	r1, [r3, #4]
 80062fe:	6863      	ldr	r3, [r4, #4]
 8006300:	bf08      	it	eq
 8006302:	6031      	streq	r1, [r6, #0]
 8006304:	5162      	str	r2, [r4, r5]
 8006306:	604b      	str	r3, [r1, #4]
 8006308:	4638      	mov	r0, r7
 800630a:	f104 060b 	add.w	r6, r4, #11
 800630e:	f000 f9ed 	bl	80066ec <__malloc_unlock>
 8006312:	f026 0607 	bic.w	r6, r6, #7
 8006316:	1d23      	adds	r3, r4, #4
 8006318:	1af2      	subs	r2, r6, r3
 800631a:	d0b6      	beq.n	800628a <_malloc_r+0x22>
 800631c:	1b9b      	subs	r3, r3, r6
 800631e:	50a3      	str	r3, [r4, r2]
 8006320:	e7b3      	b.n	800628a <_malloc_r+0x22>
 8006322:	6862      	ldr	r2, [r4, #4]
 8006324:	42a3      	cmp	r3, r4
 8006326:	bf0c      	ite	eq
 8006328:	6032      	streq	r2, [r6, #0]
 800632a:	605a      	strne	r2, [r3, #4]
 800632c:	e7ec      	b.n	8006308 <_malloc_r+0xa0>
 800632e:	4623      	mov	r3, r4
 8006330:	6864      	ldr	r4, [r4, #4]
 8006332:	e7b2      	b.n	800629a <_malloc_r+0x32>
 8006334:	4634      	mov	r4, r6
 8006336:	6876      	ldr	r6, [r6, #4]
 8006338:	e7b9      	b.n	80062ae <_malloc_r+0x46>
 800633a:	230c      	movs	r3, #12
 800633c:	4638      	mov	r0, r7
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	f000 f9d4 	bl	80066ec <__malloc_unlock>
 8006344:	e7a1      	b.n	800628a <_malloc_r+0x22>
 8006346:	6025      	str	r5, [r4, #0]
 8006348:	e7de      	b.n	8006308 <_malloc_r+0xa0>
 800634a:	bf00      	nop
 800634c:	20000360 	.word	0x20000360

08006350 <__ssputs_r>:
 8006350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006354:	688e      	ldr	r6, [r1, #8]
 8006356:	4682      	mov	sl, r0
 8006358:	429e      	cmp	r6, r3
 800635a:	460c      	mov	r4, r1
 800635c:	4690      	mov	r8, r2
 800635e:	461f      	mov	r7, r3
 8006360:	d838      	bhi.n	80063d4 <__ssputs_r+0x84>
 8006362:	898a      	ldrh	r2, [r1, #12]
 8006364:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006368:	d032      	beq.n	80063d0 <__ssputs_r+0x80>
 800636a:	6825      	ldr	r5, [r4, #0]
 800636c:	6909      	ldr	r1, [r1, #16]
 800636e:	3301      	adds	r3, #1
 8006370:	eba5 0901 	sub.w	r9, r5, r1
 8006374:	6965      	ldr	r5, [r4, #20]
 8006376:	444b      	add	r3, r9
 8006378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800637c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006380:	106d      	asrs	r5, r5, #1
 8006382:	429d      	cmp	r5, r3
 8006384:	bf38      	it	cc
 8006386:	461d      	movcc	r5, r3
 8006388:	0553      	lsls	r3, r2, #21
 800638a:	d531      	bpl.n	80063f0 <__ssputs_r+0xa0>
 800638c:	4629      	mov	r1, r5
 800638e:	f7ff ff6b 	bl	8006268 <_malloc_r>
 8006392:	4606      	mov	r6, r0
 8006394:	b950      	cbnz	r0, 80063ac <__ssputs_r+0x5c>
 8006396:	230c      	movs	r3, #12
 8006398:	f04f 30ff 	mov.w	r0, #4294967295
 800639c:	f8ca 3000 	str.w	r3, [sl]
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a6:	81a3      	strh	r3, [r4, #12]
 80063a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ac:	464a      	mov	r2, r9
 80063ae:	6921      	ldr	r1, [r4, #16]
 80063b0:	f7ff fb4e 	bl	8005a50 <memcpy>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	6126      	str	r6, [r4, #16]
 80063c2:	444e      	add	r6, r9
 80063c4:	6026      	str	r6, [r4, #0]
 80063c6:	463e      	mov	r6, r7
 80063c8:	6165      	str	r5, [r4, #20]
 80063ca:	eba5 0509 	sub.w	r5, r5, r9
 80063ce:	60a5      	str	r5, [r4, #8]
 80063d0:	42be      	cmp	r6, r7
 80063d2:	d900      	bls.n	80063d6 <__ssputs_r+0x86>
 80063d4:	463e      	mov	r6, r7
 80063d6:	4632      	mov	r2, r6
 80063d8:	4641      	mov	r1, r8
 80063da:	6820      	ldr	r0, [r4, #0]
 80063dc:	f000 f966 	bl	80066ac <memmove>
 80063e0:	68a3      	ldr	r3, [r4, #8]
 80063e2:	2000      	movs	r0, #0
 80063e4:	1b9b      	subs	r3, r3, r6
 80063e6:	60a3      	str	r3, [r4, #8]
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	4433      	add	r3, r6
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	e7db      	b.n	80063a8 <__ssputs_r+0x58>
 80063f0:	462a      	mov	r2, r5
 80063f2:	f000 f981 	bl	80066f8 <_realloc_r>
 80063f6:	4606      	mov	r6, r0
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d1e1      	bne.n	80063c0 <__ssputs_r+0x70>
 80063fc:	4650      	mov	r0, sl
 80063fe:	6921      	ldr	r1, [r4, #16]
 8006400:	f7ff feca 	bl	8006198 <_free_r>
 8006404:	e7c7      	b.n	8006396 <__ssputs_r+0x46>
	...

08006408 <_svfiprintf_r>:
 8006408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	4698      	mov	r8, r3
 800640e:	898b      	ldrh	r3, [r1, #12]
 8006410:	4607      	mov	r7, r0
 8006412:	061b      	lsls	r3, r3, #24
 8006414:	460d      	mov	r5, r1
 8006416:	4614      	mov	r4, r2
 8006418:	b09d      	sub	sp, #116	; 0x74
 800641a:	d50e      	bpl.n	800643a <_svfiprintf_r+0x32>
 800641c:	690b      	ldr	r3, [r1, #16]
 800641e:	b963      	cbnz	r3, 800643a <_svfiprintf_r+0x32>
 8006420:	2140      	movs	r1, #64	; 0x40
 8006422:	f7ff ff21 	bl	8006268 <_malloc_r>
 8006426:	6028      	str	r0, [r5, #0]
 8006428:	6128      	str	r0, [r5, #16]
 800642a:	b920      	cbnz	r0, 8006436 <_svfiprintf_r+0x2e>
 800642c:	230c      	movs	r3, #12
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	f04f 30ff 	mov.w	r0, #4294967295
 8006434:	e0d1      	b.n	80065da <_svfiprintf_r+0x1d2>
 8006436:	2340      	movs	r3, #64	; 0x40
 8006438:	616b      	str	r3, [r5, #20]
 800643a:	2300      	movs	r3, #0
 800643c:	9309      	str	r3, [sp, #36]	; 0x24
 800643e:	2320      	movs	r3, #32
 8006440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006444:	2330      	movs	r3, #48	; 0x30
 8006446:	f04f 0901 	mov.w	r9, #1
 800644a:	f8cd 800c 	str.w	r8, [sp, #12]
 800644e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80065f4 <_svfiprintf_r+0x1ec>
 8006452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006456:	4623      	mov	r3, r4
 8006458:	469a      	mov	sl, r3
 800645a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800645e:	b10a      	cbz	r2, 8006464 <_svfiprintf_r+0x5c>
 8006460:	2a25      	cmp	r2, #37	; 0x25
 8006462:	d1f9      	bne.n	8006458 <_svfiprintf_r+0x50>
 8006464:	ebba 0b04 	subs.w	fp, sl, r4
 8006468:	d00b      	beq.n	8006482 <_svfiprintf_r+0x7a>
 800646a:	465b      	mov	r3, fp
 800646c:	4622      	mov	r2, r4
 800646e:	4629      	mov	r1, r5
 8006470:	4638      	mov	r0, r7
 8006472:	f7ff ff6d 	bl	8006350 <__ssputs_r>
 8006476:	3001      	adds	r0, #1
 8006478:	f000 80aa 	beq.w	80065d0 <_svfiprintf_r+0x1c8>
 800647c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800647e:	445a      	add	r2, fp
 8006480:	9209      	str	r2, [sp, #36]	; 0x24
 8006482:	f89a 3000 	ldrb.w	r3, [sl]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 80a2 	beq.w	80065d0 <_svfiprintf_r+0x1c8>
 800648c:	2300      	movs	r3, #0
 800648e:	f04f 32ff 	mov.w	r2, #4294967295
 8006492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006496:	f10a 0a01 	add.w	sl, sl, #1
 800649a:	9304      	str	r3, [sp, #16]
 800649c:	9307      	str	r3, [sp, #28]
 800649e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064a2:	931a      	str	r3, [sp, #104]	; 0x68
 80064a4:	4654      	mov	r4, sl
 80064a6:	2205      	movs	r2, #5
 80064a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ac:	4851      	ldr	r0, [pc, #324]	; (80065f4 <_svfiprintf_r+0x1ec>)
 80064ae:	f7ff fac1 	bl	8005a34 <memchr>
 80064b2:	9a04      	ldr	r2, [sp, #16]
 80064b4:	b9d8      	cbnz	r0, 80064ee <_svfiprintf_r+0xe6>
 80064b6:	06d0      	lsls	r0, r2, #27
 80064b8:	bf44      	itt	mi
 80064ba:	2320      	movmi	r3, #32
 80064bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064c0:	0711      	lsls	r1, r2, #28
 80064c2:	bf44      	itt	mi
 80064c4:	232b      	movmi	r3, #43	; 0x2b
 80064c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ca:	f89a 3000 	ldrb.w	r3, [sl]
 80064ce:	2b2a      	cmp	r3, #42	; 0x2a
 80064d0:	d015      	beq.n	80064fe <_svfiprintf_r+0xf6>
 80064d2:	4654      	mov	r4, sl
 80064d4:	2000      	movs	r0, #0
 80064d6:	f04f 0c0a 	mov.w	ip, #10
 80064da:	9a07      	ldr	r2, [sp, #28]
 80064dc:	4621      	mov	r1, r4
 80064de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064e2:	3b30      	subs	r3, #48	; 0x30
 80064e4:	2b09      	cmp	r3, #9
 80064e6:	d94e      	bls.n	8006586 <_svfiprintf_r+0x17e>
 80064e8:	b1b0      	cbz	r0, 8006518 <_svfiprintf_r+0x110>
 80064ea:	9207      	str	r2, [sp, #28]
 80064ec:	e014      	b.n	8006518 <_svfiprintf_r+0x110>
 80064ee:	eba0 0308 	sub.w	r3, r0, r8
 80064f2:	fa09 f303 	lsl.w	r3, r9, r3
 80064f6:	4313      	orrs	r3, r2
 80064f8:	46a2      	mov	sl, r4
 80064fa:	9304      	str	r3, [sp, #16]
 80064fc:	e7d2      	b.n	80064a4 <_svfiprintf_r+0x9c>
 80064fe:	9b03      	ldr	r3, [sp, #12]
 8006500:	1d19      	adds	r1, r3, #4
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	9103      	str	r1, [sp, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	bfbb      	ittet	lt
 800650a:	425b      	neglt	r3, r3
 800650c:	f042 0202 	orrlt.w	r2, r2, #2
 8006510:	9307      	strge	r3, [sp, #28]
 8006512:	9307      	strlt	r3, [sp, #28]
 8006514:	bfb8      	it	lt
 8006516:	9204      	strlt	r2, [sp, #16]
 8006518:	7823      	ldrb	r3, [r4, #0]
 800651a:	2b2e      	cmp	r3, #46	; 0x2e
 800651c:	d10c      	bne.n	8006538 <_svfiprintf_r+0x130>
 800651e:	7863      	ldrb	r3, [r4, #1]
 8006520:	2b2a      	cmp	r3, #42	; 0x2a
 8006522:	d135      	bne.n	8006590 <_svfiprintf_r+0x188>
 8006524:	9b03      	ldr	r3, [sp, #12]
 8006526:	3402      	adds	r4, #2
 8006528:	1d1a      	adds	r2, r3, #4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	9203      	str	r2, [sp, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	bfb8      	it	lt
 8006532:	f04f 33ff 	movlt.w	r3, #4294967295
 8006536:	9305      	str	r3, [sp, #20]
 8006538:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80065f8 <_svfiprintf_r+0x1f0>
 800653c:	2203      	movs	r2, #3
 800653e:	4650      	mov	r0, sl
 8006540:	7821      	ldrb	r1, [r4, #0]
 8006542:	f7ff fa77 	bl	8005a34 <memchr>
 8006546:	b140      	cbz	r0, 800655a <_svfiprintf_r+0x152>
 8006548:	2340      	movs	r3, #64	; 0x40
 800654a:	eba0 000a 	sub.w	r0, r0, sl
 800654e:	fa03 f000 	lsl.w	r0, r3, r0
 8006552:	9b04      	ldr	r3, [sp, #16]
 8006554:	3401      	adds	r4, #1
 8006556:	4303      	orrs	r3, r0
 8006558:	9304      	str	r3, [sp, #16]
 800655a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800655e:	2206      	movs	r2, #6
 8006560:	4826      	ldr	r0, [pc, #152]	; (80065fc <_svfiprintf_r+0x1f4>)
 8006562:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006566:	f7ff fa65 	bl	8005a34 <memchr>
 800656a:	2800      	cmp	r0, #0
 800656c:	d038      	beq.n	80065e0 <_svfiprintf_r+0x1d8>
 800656e:	4b24      	ldr	r3, [pc, #144]	; (8006600 <_svfiprintf_r+0x1f8>)
 8006570:	bb1b      	cbnz	r3, 80065ba <_svfiprintf_r+0x1b2>
 8006572:	9b03      	ldr	r3, [sp, #12]
 8006574:	3307      	adds	r3, #7
 8006576:	f023 0307 	bic.w	r3, r3, #7
 800657a:	3308      	adds	r3, #8
 800657c:	9303      	str	r3, [sp, #12]
 800657e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006580:	4433      	add	r3, r6
 8006582:	9309      	str	r3, [sp, #36]	; 0x24
 8006584:	e767      	b.n	8006456 <_svfiprintf_r+0x4e>
 8006586:	460c      	mov	r4, r1
 8006588:	2001      	movs	r0, #1
 800658a:	fb0c 3202 	mla	r2, ip, r2, r3
 800658e:	e7a5      	b.n	80064dc <_svfiprintf_r+0xd4>
 8006590:	2300      	movs	r3, #0
 8006592:	f04f 0c0a 	mov.w	ip, #10
 8006596:	4619      	mov	r1, r3
 8006598:	3401      	adds	r4, #1
 800659a:	9305      	str	r3, [sp, #20]
 800659c:	4620      	mov	r0, r4
 800659e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065a2:	3a30      	subs	r2, #48	; 0x30
 80065a4:	2a09      	cmp	r2, #9
 80065a6:	d903      	bls.n	80065b0 <_svfiprintf_r+0x1a8>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0c5      	beq.n	8006538 <_svfiprintf_r+0x130>
 80065ac:	9105      	str	r1, [sp, #20]
 80065ae:	e7c3      	b.n	8006538 <_svfiprintf_r+0x130>
 80065b0:	4604      	mov	r4, r0
 80065b2:	2301      	movs	r3, #1
 80065b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80065b8:	e7f0      	b.n	800659c <_svfiprintf_r+0x194>
 80065ba:	ab03      	add	r3, sp, #12
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	462a      	mov	r2, r5
 80065c0:	4638      	mov	r0, r7
 80065c2:	4b10      	ldr	r3, [pc, #64]	; (8006604 <_svfiprintf_r+0x1fc>)
 80065c4:	a904      	add	r1, sp, #16
 80065c6:	f7fd ffb9 	bl	800453c <_printf_float>
 80065ca:	1c42      	adds	r2, r0, #1
 80065cc:	4606      	mov	r6, r0
 80065ce:	d1d6      	bne.n	800657e <_svfiprintf_r+0x176>
 80065d0:	89ab      	ldrh	r3, [r5, #12]
 80065d2:	065b      	lsls	r3, r3, #25
 80065d4:	f53f af2c 	bmi.w	8006430 <_svfiprintf_r+0x28>
 80065d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065da:	b01d      	add	sp, #116	; 0x74
 80065dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e0:	ab03      	add	r3, sp, #12
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	462a      	mov	r2, r5
 80065e6:	4638      	mov	r0, r7
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <_svfiprintf_r+0x1fc>)
 80065ea:	a904      	add	r1, sp, #16
 80065ec:	f7fe fa42 	bl	8004a74 <_printf_i>
 80065f0:	e7eb      	b.n	80065ca <_svfiprintf_r+0x1c2>
 80065f2:	bf00      	nop
 80065f4:	080074d4 	.word	0x080074d4
 80065f8:	080074da 	.word	0x080074da
 80065fc:	080074de 	.word	0x080074de
 8006600:	0800453d 	.word	0x0800453d
 8006604:	08006351 	.word	0x08006351

08006608 <_sbrk_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	2300      	movs	r3, #0
 800660c:	4d05      	ldr	r5, [pc, #20]	; (8006624 <_sbrk_r+0x1c>)
 800660e:	4604      	mov	r4, r0
 8006610:	4608      	mov	r0, r1
 8006612:	602b      	str	r3, [r5, #0]
 8006614:	f7fb fb9a 	bl	8001d4c <_sbrk>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_sbrk_r+0x1a>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_sbrk_r+0x1a>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20000368 	.word	0x20000368

08006628 <__assert_func>:
 8006628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800662a:	4614      	mov	r4, r2
 800662c:	461a      	mov	r2, r3
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <__assert_func+0x2c>)
 8006630:	4605      	mov	r5, r0
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68d8      	ldr	r0, [r3, #12]
 8006636:	b14c      	cbz	r4, 800664c <__assert_func+0x24>
 8006638:	4b07      	ldr	r3, [pc, #28]	; (8006658 <__assert_func+0x30>)
 800663a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800663e:	9100      	str	r1, [sp, #0]
 8006640:	462b      	mov	r3, r5
 8006642:	4906      	ldr	r1, [pc, #24]	; (800665c <__assert_func+0x34>)
 8006644:	f000 f80e 	bl	8006664 <fiprintf>
 8006648:	f000 faaa 	bl	8006ba0 <abort>
 800664c:	4b04      	ldr	r3, [pc, #16]	; (8006660 <__assert_func+0x38>)
 800664e:	461c      	mov	r4, r3
 8006650:	e7f3      	b.n	800663a <__assert_func+0x12>
 8006652:	bf00      	nop
 8006654:	2000001c 	.word	0x2000001c
 8006658:	080074e5 	.word	0x080074e5
 800665c:	080074f2 	.word	0x080074f2
 8006660:	08007520 	.word	0x08007520

08006664 <fiprintf>:
 8006664:	b40e      	push	{r1, r2, r3}
 8006666:	b503      	push	{r0, r1, lr}
 8006668:	4601      	mov	r1, r0
 800666a:	ab03      	add	r3, sp, #12
 800666c:	4805      	ldr	r0, [pc, #20]	; (8006684 <fiprintf+0x20>)
 800666e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006672:	6800      	ldr	r0, [r0, #0]
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	f000 f895 	bl	80067a4 <_vfiprintf_r>
 800667a:	b002      	add	sp, #8
 800667c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006680:	b003      	add	sp, #12
 8006682:	4770      	bx	lr
 8006684:	2000001c 	.word	0x2000001c

08006688 <__ascii_mbtowc>:
 8006688:	b082      	sub	sp, #8
 800668a:	b901      	cbnz	r1, 800668e <__ascii_mbtowc+0x6>
 800668c:	a901      	add	r1, sp, #4
 800668e:	b142      	cbz	r2, 80066a2 <__ascii_mbtowc+0x1a>
 8006690:	b14b      	cbz	r3, 80066a6 <__ascii_mbtowc+0x1e>
 8006692:	7813      	ldrb	r3, [r2, #0]
 8006694:	600b      	str	r3, [r1, #0]
 8006696:	7812      	ldrb	r2, [r2, #0]
 8006698:	1e10      	subs	r0, r2, #0
 800669a:	bf18      	it	ne
 800669c:	2001      	movne	r0, #1
 800669e:	b002      	add	sp, #8
 80066a0:	4770      	bx	lr
 80066a2:	4610      	mov	r0, r2
 80066a4:	e7fb      	b.n	800669e <__ascii_mbtowc+0x16>
 80066a6:	f06f 0001 	mvn.w	r0, #1
 80066aa:	e7f8      	b.n	800669e <__ascii_mbtowc+0x16>

080066ac <memmove>:
 80066ac:	4288      	cmp	r0, r1
 80066ae:	b510      	push	{r4, lr}
 80066b0:	eb01 0402 	add.w	r4, r1, r2
 80066b4:	d902      	bls.n	80066bc <memmove+0x10>
 80066b6:	4284      	cmp	r4, r0
 80066b8:	4623      	mov	r3, r4
 80066ba:	d807      	bhi.n	80066cc <memmove+0x20>
 80066bc:	1e43      	subs	r3, r0, #1
 80066be:	42a1      	cmp	r1, r4
 80066c0:	d008      	beq.n	80066d4 <memmove+0x28>
 80066c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066ca:	e7f8      	b.n	80066be <memmove+0x12>
 80066cc:	4601      	mov	r1, r0
 80066ce:	4402      	add	r2, r0
 80066d0:	428a      	cmp	r2, r1
 80066d2:	d100      	bne.n	80066d6 <memmove+0x2a>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066de:	e7f7      	b.n	80066d0 <memmove+0x24>

080066e0 <__malloc_lock>:
 80066e0:	4801      	ldr	r0, [pc, #4]	; (80066e8 <__malloc_lock+0x8>)
 80066e2:	f000 bc19 	b.w	8006f18 <__retarget_lock_acquire_recursive>
 80066e6:	bf00      	nop
 80066e8:	2000036c 	.word	0x2000036c

080066ec <__malloc_unlock>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__malloc_unlock+0x8>)
 80066ee:	f000 bc14 	b.w	8006f1a <__retarget_lock_release_recursive>
 80066f2:	bf00      	nop
 80066f4:	2000036c 	.word	0x2000036c

080066f8 <_realloc_r>:
 80066f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066fc:	4680      	mov	r8, r0
 80066fe:	4614      	mov	r4, r2
 8006700:	460e      	mov	r6, r1
 8006702:	b921      	cbnz	r1, 800670e <_realloc_r+0x16>
 8006704:	4611      	mov	r1, r2
 8006706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800670a:	f7ff bdad 	b.w	8006268 <_malloc_r>
 800670e:	b92a      	cbnz	r2, 800671c <_realloc_r+0x24>
 8006710:	f7ff fd42 	bl	8006198 <_free_r>
 8006714:	4625      	mov	r5, r4
 8006716:	4628      	mov	r0, r5
 8006718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800671c:	f000 fc64 	bl	8006fe8 <_malloc_usable_size_r>
 8006720:	4284      	cmp	r4, r0
 8006722:	4607      	mov	r7, r0
 8006724:	d802      	bhi.n	800672c <_realloc_r+0x34>
 8006726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800672a:	d812      	bhi.n	8006752 <_realloc_r+0x5a>
 800672c:	4621      	mov	r1, r4
 800672e:	4640      	mov	r0, r8
 8006730:	f7ff fd9a 	bl	8006268 <_malloc_r>
 8006734:	4605      	mov	r5, r0
 8006736:	2800      	cmp	r0, #0
 8006738:	d0ed      	beq.n	8006716 <_realloc_r+0x1e>
 800673a:	42bc      	cmp	r4, r7
 800673c:	4622      	mov	r2, r4
 800673e:	4631      	mov	r1, r6
 8006740:	bf28      	it	cs
 8006742:	463a      	movcs	r2, r7
 8006744:	f7ff f984 	bl	8005a50 <memcpy>
 8006748:	4631      	mov	r1, r6
 800674a:	4640      	mov	r0, r8
 800674c:	f7ff fd24 	bl	8006198 <_free_r>
 8006750:	e7e1      	b.n	8006716 <_realloc_r+0x1e>
 8006752:	4635      	mov	r5, r6
 8006754:	e7df      	b.n	8006716 <_realloc_r+0x1e>

08006756 <__sfputc_r>:
 8006756:	6893      	ldr	r3, [r2, #8]
 8006758:	b410      	push	{r4}
 800675a:	3b01      	subs	r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	6093      	str	r3, [r2, #8]
 8006760:	da07      	bge.n	8006772 <__sfputc_r+0x1c>
 8006762:	6994      	ldr	r4, [r2, #24]
 8006764:	42a3      	cmp	r3, r4
 8006766:	db01      	blt.n	800676c <__sfputc_r+0x16>
 8006768:	290a      	cmp	r1, #10
 800676a:	d102      	bne.n	8006772 <__sfputc_r+0x1c>
 800676c:	bc10      	pop	{r4}
 800676e:	f000 b949 	b.w	8006a04 <__swbuf_r>
 8006772:	6813      	ldr	r3, [r2, #0]
 8006774:	1c58      	adds	r0, r3, #1
 8006776:	6010      	str	r0, [r2, #0]
 8006778:	7019      	strb	r1, [r3, #0]
 800677a:	4608      	mov	r0, r1
 800677c:	bc10      	pop	{r4}
 800677e:	4770      	bx	lr

08006780 <__sfputs_r>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	4606      	mov	r6, r0
 8006784:	460f      	mov	r7, r1
 8006786:	4614      	mov	r4, r2
 8006788:	18d5      	adds	r5, r2, r3
 800678a:	42ac      	cmp	r4, r5
 800678c:	d101      	bne.n	8006792 <__sfputs_r+0x12>
 800678e:	2000      	movs	r0, #0
 8006790:	e007      	b.n	80067a2 <__sfputs_r+0x22>
 8006792:	463a      	mov	r2, r7
 8006794:	4630      	mov	r0, r6
 8006796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679a:	f7ff ffdc 	bl	8006756 <__sfputc_r>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	d1f3      	bne.n	800678a <__sfputs_r+0xa>
 80067a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067a4 <_vfiprintf_r>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	460d      	mov	r5, r1
 80067aa:	4614      	mov	r4, r2
 80067ac:	4698      	mov	r8, r3
 80067ae:	4606      	mov	r6, r0
 80067b0:	b09d      	sub	sp, #116	; 0x74
 80067b2:	b118      	cbz	r0, 80067bc <_vfiprintf_r+0x18>
 80067b4:	6983      	ldr	r3, [r0, #24]
 80067b6:	b90b      	cbnz	r3, 80067bc <_vfiprintf_r+0x18>
 80067b8:	f000 fb10 	bl	8006ddc <__sinit>
 80067bc:	4b89      	ldr	r3, [pc, #548]	; (80069e4 <_vfiprintf_r+0x240>)
 80067be:	429d      	cmp	r5, r3
 80067c0:	d11b      	bne.n	80067fa <_vfiprintf_r+0x56>
 80067c2:	6875      	ldr	r5, [r6, #4]
 80067c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067c6:	07d9      	lsls	r1, r3, #31
 80067c8:	d405      	bmi.n	80067d6 <_vfiprintf_r+0x32>
 80067ca:	89ab      	ldrh	r3, [r5, #12]
 80067cc:	059a      	lsls	r2, r3, #22
 80067ce:	d402      	bmi.n	80067d6 <_vfiprintf_r+0x32>
 80067d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067d2:	f000 fba1 	bl	8006f18 <__retarget_lock_acquire_recursive>
 80067d6:	89ab      	ldrh	r3, [r5, #12]
 80067d8:	071b      	lsls	r3, r3, #28
 80067da:	d501      	bpl.n	80067e0 <_vfiprintf_r+0x3c>
 80067dc:	692b      	ldr	r3, [r5, #16]
 80067de:	b9eb      	cbnz	r3, 800681c <_vfiprintf_r+0x78>
 80067e0:	4629      	mov	r1, r5
 80067e2:	4630      	mov	r0, r6
 80067e4:	f000 f96e 	bl	8006ac4 <__swsetup_r>
 80067e8:	b1c0      	cbz	r0, 800681c <_vfiprintf_r+0x78>
 80067ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067ec:	07dc      	lsls	r4, r3, #31
 80067ee:	d50e      	bpl.n	800680e <_vfiprintf_r+0x6a>
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	b01d      	add	sp, #116	; 0x74
 80067f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fa:	4b7b      	ldr	r3, [pc, #492]	; (80069e8 <_vfiprintf_r+0x244>)
 80067fc:	429d      	cmp	r5, r3
 80067fe:	d101      	bne.n	8006804 <_vfiprintf_r+0x60>
 8006800:	68b5      	ldr	r5, [r6, #8]
 8006802:	e7df      	b.n	80067c4 <_vfiprintf_r+0x20>
 8006804:	4b79      	ldr	r3, [pc, #484]	; (80069ec <_vfiprintf_r+0x248>)
 8006806:	429d      	cmp	r5, r3
 8006808:	bf08      	it	eq
 800680a:	68f5      	ldreq	r5, [r6, #12]
 800680c:	e7da      	b.n	80067c4 <_vfiprintf_r+0x20>
 800680e:	89ab      	ldrh	r3, [r5, #12]
 8006810:	0598      	lsls	r0, r3, #22
 8006812:	d4ed      	bmi.n	80067f0 <_vfiprintf_r+0x4c>
 8006814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006816:	f000 fb80 	bl	8006f1a <__retarget_lock_release_recursive>
 800681a:	e7e9      	b.n	80067f0 <_vfiprintf_r+0x4c>
 800681c:	2300      	movs	r3, #0
 800681e:	9309      	str	r3, [sp, #36]	; 0x24
 8006820:	2320      	movs	r3, #32
 8006822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006826:	2330      	movs	r3, #48	; 0x30
 8006828:	f04f 0901 	mov.w	r9, #1
 800682c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006830:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80069f0 <_vfiprintf_r+0x24c>
 8006834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006838:	4623      	mov	r3, r4
 800683a:	469a      	mov	sl, r3
 800683c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006840:	b10a      	cbz	r2, 8006846 <_vfiprintf_r+0xa2>
 8006842:	2a25      	cmp	r2, #37	; 0x25
 8006844:	d1f9      	bne.n	800683a <_vfiprintf_r+0x96>
 8006846:	ebba 0b04 	subs.w	fp, sl, r4
 800684a:	d00b      	beq.n	8006864 <_vfiprintf_r+0xc0>
 800684c:	465b      	mov	r3, fp
 800684e:	4622      	mov	r2, r4
 8006850:	4629      	mov	r1, r5
 8006852:	4630      	mov	r0, r6
 8006854:	f7ff ff94 	bl	8006780 <__sfputs_r>
 8006858:	3001      	adds	r0, #1
 800685a:	f000 80aa 	beq.w	80069b2 <_vfiprintf_r+0x20e>
 800685e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006860:	445a      	add	r2, fp
 8006862:	9209      	str	r2, [sp, #36]	; 0x24
 8006864:	f89a 3000 	ldrb.w	r3, [sl]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80a2 	beq.w	80069b2 <_vfiprintf_r+0x20e>
 800686e:	2300      	movs	r3, #0
 8006870:	f04f 32ff 	mov.w	r2, #4294967295
 8006874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006878:	f10a 0a01 	add.w	sl, sl, #1
 800687c:	9304      	str	r3, [sp, #16]
 800687e:	9307      	str	r3, [sp, #28]
 8006880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006884:	931a      	str	r3, [sp, #104]	; 0x68
 8006886:	4654      	mov	r4, sl
 8006888:	2205      	movs	r2, #5
 800688a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800688e:	4858      	ldr	r0, [pc, #352]	; (80069f0 <_vfiprintf_r+0x24c>)
 8006890:	f7ff f8d0 	bl	8005a34 <memchr>
 8006894:	9a04      	ldr	r2, [sp, #16]
 8006896:	b9d8      	cbnz	r0, 80068d0 <_vfiprintf_r+0x12c>
 8006898:	06d1      	lsls	r1, r2, #27
 800689a:	bf44      	itt	mi
 800689c:	2320      	movmi	r3, #32
 800689e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068a2:	0713      	lsls	r3, r2, #28
 80068a4:	bf44      	itt	mi
 80068a6:	232b      	movmi	r3, #43	; 0x2b
 80068a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068ac:	f89a 3000 	ldrb.w	r3, [sl]
 80068b0:	2b2a      	cmp	r3, #42	; 0x2a
 80068b2:	d015      	beq.n	80068e0 <_vfiprintf_r+0x13c>
 80068b4:	4654      	mov	r4, sl
 80068b6:	2000      	movs	r0, #0
 80068b8:	f04f 0c0a 	mov.w	ip, #10
 80068bc:	9a07      	ldr	r2, [sp, #28]
 80068be:	4621      	mov	r1, r4
 80068c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068c4:	3b30      	subs	r3, #48	; 0x30
 80068c6:	2b09      	cmp	r3, #9
 80068c8:	d94e      	bls.n	8006968 <_vfiprintf_r+0x1c4>
 80068ca:	b1b0      	cbz	r0, 80068fa <_vfiprintf_r+0x156>
 80068cc:	9207      	str	r2, [sp, #28]
 80068ce:	e014      	b.n	80068fa <_vfiprintf_r+0x156>
 80068d0:	eba0 0308 	sub.w	r3, r0, r8
 80068d4:	fa09 f303 	lsl.w	r3, r9, r3
 80068d8:	4313      	orrs	r3, r2
 80068da:	46a2      	mov	sl, r4
 80068dc:	9304      	str	r3, [sp, #16]
 80068de:	e7d2      	b.n	8006886 <_vfiprintf_r+0xe2>
 80068e0:	9b03      	ldr	r3, [sp, #12]
 80068e2:	1d19      	adds	r1, r3, #4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	9103      	str	r1, [sp, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bfbb      	ittet	lt
 80068ec:	425b      	neglt	r3, r3
 80068ee:	f042 0202 	orrlt.w	r2, r2, #2
 80068f2:	9307      	strge	r3, [sp, #28]
 80068f4:	9307      	strlt	r3, [sp, #28]
 80068f6:	bfb8      	it	lt
 80068f8:	9204      	strlt	r2, [sp, #16]
 80068fa:	7823      	ldrb	r3, [r4, #0]
 80068fc:	2b2e      	cmp	r3, #46	; 0x2e
 80068fe:	d10c      	bne.n	800691a <_vfiprintf_r+0x176>
 8006900:	7863      	ldrb	r3, [r4, #1]
 8006902:	2b2a      	cmp	r3, #42	; 0x2a
 8006904:	d135      	bne.n	8006972 <_vfiprintf_r+0x1ce>
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	3402      	adds	r4, #2
 800690a:	1d1a      	adds	r2, r3, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	9203      	str	r2, [sp, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	bfb8      	it	lt
 8006914:	f04f 33ff 	movlt.w	r3, #4294967295
 8006918:	9305      	str	r3, [sp, #20]
 800691a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80069f4 <_vfiprintf_r+0x250>
 800691e:	2203      	movs	r2, #3
 8006920:	4650      	mov	r0, sl
 8006922:	7821      	ldrb	r1, [r4, #0]
 8006924:	f7ff f886 	bl	8005a34 <memchr>
 8006928:	b140      	cbz	r0, 800693c <_vfiprintf_r+0x198>
 800692a:	2340      	movs	r3, #64	; 0x40
 800692c:	eba0 000a 	sub.w	r0, r0, sl
 8006930:	fa03 f000 	lsl.w	r0, r3, r0
 8006934:	9b04      	ldr	r3, [sp, #16]
 8006936:	3401      	adds	r4, #1
 8006938:	4303      	orrs	r3, r0
 800693a:	9304      	str	r3, [sp, #16]
 800693c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006940:	2206      	movs	r2, #6
 8006942:	482d      	ldr	r0, [pc, #180]	; (80069f8 <_vfiprintf_r+0x254>)
 8006944:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006948:	f7ff f874 	bl	8005a34 <memchr>
 800694c:	2800      	cmp	r0, #0
 800694e:	d03f      	beq.n	80069d0 <_vfiprintf_r+0x22c>
 8006950:	4b2a      	ldr	r3, [pc, #168]	; (80069fc <_vfiprintf_r+0x258>)
 8006952:	bb1b      	cbnz	r3, 800699c <_vfiprintf_r+0x1f8>
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	3307      	adds	r3, #7
 8006958:	f023 0307 	bic.w	r3, r3, #7
 800695c:	3308      	adds	r3, #8
 800695e:	9303      	str	r3, [sp, #12]
 8006960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006962:	443b      	add	r3, r7
 8006964:	9309      	str	r3, [sp, #36]	; 0x24
 8006966:	e767      	b.n	8006838 <_vfiprintf_r+0x94>
 8006968:	460c      	mov	r4, r1
 800696a:	2001      	movs	r0, #1
 800696c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006970:	e7a5      	b.n	80068be <_vfiprintf_r+0x11a>
 8006972:	2300      	movs	r3, #0
 8006974:	f04f 0c0a 	mov.w	ip, #10
 8006978:	4619      	mov	r1, r3
 800697a:	3401      	adds	r4, #1
 800697c:	9305      	str	r3, [sp, #20]
 800697e:	4620      	mov	r0, r4
 8006980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006984:	3a30      	subs	r2, #48	; 0x30
 8006986:	2a09      	cmp	r2, #9
 8006988:	d903      	bls.n	8006992 <_vfiprintf_r+0x1ee>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0c5      	beq.n	800691a <_vfiprintf_r+0x176>
 800698e:	9105      	str	r1, [sp, #20]
 8006990:	e7c3      	b.n	800691a <_vfiprintf_r+0x176>
 8006992:	4604      	mov	r4, r0
 8006994:	2301      	movs	r3, #1
 8006996:	fb0c 2101 	mla	r1, ip, r1, r2
 800699a:	e7f0      	b.n	800697e <_vfiprintf_r+0x1da>
 800699c:	ab03      	add	r3, sp, #12
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	462a      	mov	r2, r5
 80069a2:	4630      	mov	r0, r6
 80069a4:	4b16      	ldr	r3, [pc, #88]	; (8006a00 <_vfiprintf_r+0x25c>)
 80069a6:	a904      	add	r1, sp, #16
 80069a8:	f7fd fdc8 	bl	800453c <_printf_float>
 80069ac:	4607      	mov	r7, r0
 80069ae:	1c78      	adds	r0, r7, #1
 80069b0:	d1d6      	bne.n	8006960 <_vfiprintf_r+0x1bc>
 80069b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069b4:	07d9      	lsls	r1, r3, #31
 80069b6:	d405      	bmi.n	80069c4 <_vfiprintf_r+0x220>
 80069b8:	89ab      	ldrh	r3, [r5, #12]
 80069ba:	059a      	lsls	r2, r3, #22
 80069bc:	d402      	bmi.n	80069c4 <_vfiprintf_r+0x220>
 80069be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069c0:	f000 faab 	bl	8006f1a <__retarget_lock_release_recursive>
 80069c4:	89ab      	ldrh	r3, [r5, #12]
 80069c6:	065b      	lsls	r3, r3, #25
 80069c8:	f53f af12 	bmi.w	80067f0 <_vfiprintf_r+0x4c>
 80069cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ce:	e711      	b.n	80067f4 <_vfiprintf_r+0x50>
 80069d0:	ab03      	add	r3, sp, #12
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	462a      	mov	r2, r5
 80069d6:	4630      	mov	r0, r6
 80069d8:	4b09      	ldr	r3, [pc, #36]	; (8006a00 <_vfiprintf_r+0x25c>)
 80069da:	a904      	add	r1, sp, #16
 80069dc:	f7fe f84a 	bl	8004a74 <_printf_i>
 80069e0:	e7e4      	b.n	80069ac <_vfiprintf_r+0x208>
 80069e2:	bf00      	nop
 80069e4:	0800764c 	.word	0x0800764c
 80069e8:	0800766c 	.word	0x0800766c
 80069ec:	0800762c 	.word	0x0800762c
 80069f0:	080074d4 	.word	0x080074d4
 80069f4:	080074da 	.word	0x080074da
 80069f8:	080074de 	.word	0x080074de
 80069fc:	0800453d 	.word	0x0800453d
 8006a00:	08006781 	.word	0x08006781

08006a04 <__swbuf_r>:
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a06:	460e      	mov	r6, r1
 8006a08:	4614      	mov	r4, r2
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	b118      	cbz	r0, 8006a16 <__swbuf_r+0x12>
 8006a0e:	6983      	ldr	r3, [r0, #24]
 8006a10:	b90b      	cbnz	r3, 8006a16 <__swbuf_r+0x12>
 8006a12:	f000 f9e3 	bl	8006ddc <__sinit>
 8006a16:	4b21      	ldr	r3, [pc, #132]	; (8006a9c <__swbuf_r+0x98>)
 8006a18:	429c      	cmp	r4, r3
 8006a1a:	d12b      	bne.n	8006a74 <__swbuf_r+0x70>
 8006a1c:	686c      	ldr	r4, [r5, #4]
 8006a1e:	69a3      	ldr	r3, [r4, #24]
 8006a20:	60a3      	str	r3, [r4, #8]
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	071a      	lsls	r2, r3, #28
 8006a26:	d52f      	bpl.n	8006a88 <__swbuf_r+0x84>
 8006a28:	6923      	ldr	r3, [r4, #16]
 8006a2a:	b36b      	cbz	r3, 8006a88 <__swbuf_r+0x84>
 8006a2c:	6923      	ldr	r3, [r4, #16]
 8006a2e:	6820      	ldr	r0, [r4, #0]
 8006a30:	b2f6      	uxtb	r6, r6
 8006a32:	1ac0      	subs	r0, r0, r3
 8006a34:	6963      	ldr	r3, [r4, #20]
 8006a36:	4637      	mov	r7, r6
 8006a38:	4283      	cmp	r3, r0
 8006a3a:	dc04      	bgt.n	8006a46 <__swbuf_r+0x42>
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 f938 	bl	8006cb4 <_fflush_r>
 8006a44:	bb30      	cbnz	r0, 8006a94 <__swbuf_r+0x90>
 8006a46:	68a3      	ldr	r3, [r4, #8]
 8006a48:	3001      	adds	r0, #1
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	60a3      	str	r3, [r4, #8]
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	6022      	str	r2, [r4, #0]
 8006a54:	701e      	strb	r6, [r3, #0]
 8006a56:	6963      	ldr	r3, [r4, #20]
 8006a58:	4283      	cmp	r3, r0
 8006a5a:	d004      	beq.n	8006a66 <__swbuf_r+0x62>
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	07db      	lsls	r3, r3, #31
 8006a60:	d506      	bpl.n	8006a70 <__swbuf_r+0x6c>
 8006a62:	2e0a      	cmp	r6, #10
 8006a64:	d104      	bne.n	8006a70 <__swbuf_r+0x6c>
 8006a66:	4621      	mov	r1, r4
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f000 f923 	bl	8006cb4 <_fflush_r>
 8006a6e:	b988      	cbnz	r0, 8006a94 <__swbuf_r+0x90>
 8006a70:	4638      	mov	r0, r7
 8006a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a74:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <__swbuf_r+0x9c>)
 8006a76:	429c      	cmp	r4, r3
 8006a78:	d101      	bne.n	8006a7e <__swbuf_r+0x7a>
 8006a7a:	68ac      	ldr	r4, [r5, #8]
 8006a7c:	e7cf      	b.n	8006a1e <__swbuf_r+0x1a>
 8006a7e:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <__swbuf_r+0xa0>)
 8006a80:	429c      	cmp	r4, r3
 8006a82:	bf08      	it	eq
 8006a84:	68ec      	ldreq	r4, [r5, #12]
 8006a86:	e7ca      	b.n	8006a1e <__swbuf_r+0x1a>
 8006a88:	4621      	mov	r1, r4
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f000 f81a 	bl	8006ac4 <__swsetup_r>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d0cb      	beq.n	8006a2c <__swbuf_r+0x28>
 8006a94:	f04f 37ff 	mov.w	r7, #4294967295
 8006a98:	e7ea      	b.n	8006a70 <__swbuf_r+0x6c>
 8006a9a:	bf00      	nop
 8006a9c:	0800764c 	.word	0x0800764c
 8006aa0:	0800766c 	.word	0x0800766c
 8006aa4:	0800762c 	.word	0x0800762c

08006aa8 <__ascii_wctomb>:
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	4608      	mov	r0, r1
 8006aac:	b141      	cbz	r1, 8006ac0 <__ascii_wctomb+0x18>
 8006aae:	2aff      	cmp	r2, #255	; 0xff
 8006ab0:	d904      	bls.n	8006abc <__ascii_wctomb+0x14>
 8006ab2:	228a      	movs	r2, #138	; 0x8a
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	4770      	bx	lr
 8006abc:	2001      	movs	r0, #1
 8006abe:	700a      	strb	r2, [r1, #0]
 8006ac0:	4770      	bx	lr
	...

08006ac4 <__swsetup_r>:
 8006ac4:	4b32      	ldr	r3, [pc, #200]	; (8006b90 <__swsetup_r+0xcc>)
 8006ac6:	b570      	push	{r4, r5, r6, lr}
 8006ac8:	681d      	ldr	r5, [r3, #0]
 8006aca:	4606      	mov	r6, r0
 8006acc:	460c      	mov	r4, r1
 8006ace:	b125      	cbz	r5, 8006ada <__swsetup_r+0x16>
 8006ad0:	69ab      	ldr	r3, [r5, #24]
 8006ad2:	b913      	cbnz	r3, 8006ada <__swsetup_r+0x16>
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f000 f981 	bl	8006ddc <__sinit>
 8006ada:	4b2e      	ldr	r3, [pc, #184]	; (8006b94 <__swsetup_r+0xd0>)
 8006adc:	429c      	cmp	r4, r3
 8006ade:	d10f      	bne.n	8006b00 <__swsetup_r+0x3c>
 8006ae0:	686c      	ldr	r4, [r5, #4]
 8006ae2:	89a3      	ldrh	r3, [r4, #12]
 8006ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ae8:	0719      	lsls	r1, r3, #28
 8006aea:	d42c      	bmi.n	8006b46 <__swsetup_r+0x82>
 8006aec:	06dd      	lsls	r5, r3, #27
 8006aee:	d411      	bmi.n	8006b14 <__swsetup_r+0x50>
 8006af0:	2309      	movs	r3, #9
 8006af2:	6033      	str	r3, [r6, #0]
 8006af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	e03e      	b.n	8006b7e <__swsetup_r+0xba>
 8006b00:	4b25      	ldr	r3, [pc, #148]	; (8006b98 <__swsetup_r+0xd4>)
 8006b02:	429c      	cmp	r4, r3
 8006b04:	d101      	bne.n	8006b0a <__swsetup_r+0x46>
 8006b06:	68ac      	ldr	r4, [r5, #8]
 8006b08:	e7eb      	b.n	8006ae2 <__swsetup_r+0x1e>
 8006b0a:	4b24      	ldr	r3, [pc, #144]	; (8006b9c <__swsetup_r+0xd8>)
 8006b0c:	429c      	cmp	r4, r3
 8006b0e:	bf08      	it	eq
 8006b10:	68ec      	ldreq	r4, [r5, #12]
 8006b12:	e7e6      	b.n	8006ae2 <__swsetup_r+0x1e>
 8006b14:	0758      	lsls	r0, r3, #29
 8006b16:	d512      	bpl.n	8006b3e <__swsetup_r+0x7a>
 8006b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b1a:	b141      	cbz	r1, 8006b2e <__swsetup_r+0x6a>
 8006b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b20:	4299      	cmp	r1, r3
 8006b22:	d002      	beq.n	8006b2a <__swsetup_r+0x66>
 8006b24:	4630      	mov	r0, r6
 8006b26:	f7ff fb37 	bl	8006198 <_free_r>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	2300      	movs	r3, #0
 8006b38:	6063      	str	r3, [r4, #4]
 8006b3a:	6923      	ldr	r3, [r4, #16]
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	f043 0308 	orr.w	r3, r3, #8
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	6923      	ldr	r3, [r4, #16]
 8006b48:	b94b      	cbnz	r3, 8006b5e <__swsetup_r+0x9a>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b54:	d003      	beq.n	8006b5e <__swsetup_r+0x9a>
 8006b56:	4621      	mov	r1, r4
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f000 fa05 	bl	8006f68 <__smakebuf_r>
 8006b5e:	89a0      	ldrh	r0, [r4, #12]
 8006b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b64:	f010 0301 	ands.w	r3, r0, #1
 8006b68:	d00a      	beq.n	8006b80 <__swsetup_r+0xbc>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60a3      	str	r3, [r4, #8]
 8006b6e:	6963      	ldr	r3, [r4, #20]
 8006b70:	425b      	negs	r3, r3
 8006b72:	61a3      	str	r3, [r4, #24]
 8006b74:	6923      	ldr	r3, [r4, #16]
 8006b76:	b943      	cbnz	r3, 8006b8a <__swsetup_r+0xc6>
 8006b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b7c:	d1ba      	bne.n	8006af4 <__swsetup_r+0x30>
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	0781      	lsls	r1, r0, #30
 8006b82:	bf58      	it	pl
 8006b84:	6963      	ldrpl	r3, [r4, #20]
 8006b86:	60a3      	str	r3, [r4, #8]
 8006b88:	e7f4      	b.n	8006b74 <__swsetup_r+0xb0>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e7f7      	b.n	8006b7e <__swsetup_r+0xba>
 8006b8e:	bf00      	nop
 8006b90:	2000001c 	.word	0x2000001c
 8006b94:	0800764c 	.word	0x0800764c
 8006b98:	0800766c 	.word	0x0800766c
 8006b9c:	0800762c 	.word	0x0800762c

08006ba0 <abort>:
 8006ba0:	2006      	movs	r0, #6
 8006ba2:	b508      	push	{r3, lr}
 8006ba4:	f000 fa50 	bl	8007048 <raise>
 8006ba8:	2001      	movs	r0, #1
 8006baa:	f7fb f85c 	bl	8001c66 <_exit>
	...

08006bb0 <__sflush_r>:
 8006bb0:	898a      	ldrh	r2, [r1, #12]
 8006bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	0710      	lsls	r0, r2, #28
 8006bb8:	460c      	mov	r4, r1
 8006bba:	d457      	bmi.n	8006c6c <__sflush_r+0xbc>
 8006bbc:	684b      	ldr	r3, [r1, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	dc04      	bgt.n	8006bcc <__sflush_r+0x1c>
 8006bc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dc01      	bgt.n	8006bcc <__sflush_r+0x1c>
 8006bc8:	2000      	movs	r0, #0
 8006bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bce:	2e00      	cmp	r6, #0
 8006bd0:	d0fa      	beq.n	8006bc8 <__sflush_r+0x18>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bd8:	682f      	ldr	r7, [r5, #0]
 8006bda:	602b      	str	r3, [r5, #0]
 8006bdc:	d032      	beq.n	8006c44 <__sflush_r+0x94>
 8006bde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	075a      	lsls	r2, r3, #29
 8006be4:	d505      	bpl.n	8006bf2 <__sflush_r+0x42>
 8006be6:	6863      	ldr	r3, [r4, #4]
 8006be8:	1ac0      	subs	r0, r0, r3
 8006bea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bec:	b10b      	cbz	r3, 8006bf2 <__sflush_r+0x42>
 8006bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bf0:	1ac0      	subs	r0, r0, r3
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	6a21      	ldr	r1, [r4, #32]
 8006bfc:	47b0      	blx	r6
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	d106      	bne.n	8006c12 <__sflush_r+0x62>
 8006c04:	6829      	ldr	r1, [r5, #0]
 8006c06:	291d      	cmp	r1, #29
 8006c08:	d82c      	bhi.n	8006c64 <__sflush_r+0xb4>
 8006c0a:	4a29      	ldr	r2, [pc, #164]	; (8006cb0 <__sflush_r+0x100>)
 8006c0c:	40ca      	lsrs	r2, r1
 8006c0e:	07d6      	lsls	r6, r2, #31
 8006c10:	d528      	bpl.n	8006c64 <__sflush_r+0xb4>
 8006c12:	2200      	movs	r2, #0
 8006c14:	6062      	str	r2, [r4, #4]
 8006c16:	6922      	ldr	r2, [r4, #16]
 8006c18:	04d9      	lsls	r1, r3, #19
 8006c1a:	6022      	str	r2, [r4, #0]
 8006c1c:	d504      	bpl.n	8006c28 <__sflush_r+0x78>
 8006c1e:	1c42      	adds	r2, r0, #1
 8006c20:	d101      	bne.n	8006c26 <__sflush_r+0x76>
 8006c22:	682b      	ldr	r3, [r5, #0]
 8006c24:	b903      	cbnz	r3, 8006c28 <__sflush_r+0x78>
 8006c26:	6560      	str	r0, [r4, #84]	; 0x54
 8006c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c2a:	602f      	str	r7, [r5, #0]
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	d0cb      	beq.n	8006bc8 <__sflush_r+0x18>
 8006c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c34:	4299      	cmp	r1, r3
 8006c36:	d002      	beq.n	8006c3e <__sflush_r+0x8e>
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f7ff faad 	bl	8006198 <_free_r>
 8006c3e:	2000      	movs	r0, #0
 8006c40:	6360      	str	r0, [r4, #52]	; 0x34
 8006c42:	e7c2      	b.n	8006bca <__sflush_r+0x1a>
 8006c44:	6a21      	ldr	r1, [r4, #32]
 8006c46:	2301      	movs	r3, #1
 8006c48:	4628      	mov	r0, r5
 8006c4a:	47b0      	blx	r6
 8006c4c:	1c41      	adds	r1, r0, #1
 8006c4e:	d1c7      	bne.n	8006be0 <__sflush_r+0x30>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0c4      	beq.n	8006be0 <__sflush_r+0x30>
 8006c56:	2b1d      	cmp	r3, #29
 8006c58:	d001      	beq.n	8006c5e <__sflush_r+0xae>
 8006c5a:	2b16      	cmp	r3, #22
 8006c5c:	d101      	bne.n	8006c62 <__sflush_r+0xb2>
 8006c5e:	602f      	str	r7, [r5, #0]
 8006c60:	e7b2      	b.n	8006bc8 <__sflush_r+0x18>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c68:	81a3      	strh	r3, [r4, #12]
 8006c6a:	e7ae      	b.n	8006bca <__sflush_r+0x1a>
 8006c6c:	690f      	ldr	r7, [r1, #16]
 8006c6e:	2f00      	cmp	r7, #0
 8006c70:	d0aa      	beq.n	8006bc8 <__sflush_r+0x18>
 8006c72:	0793      	lsls	r3, r2, #30
 8006c74:	bf18      	it	ne
 8006c76:	2300      	movne	r3, #0
 8006c78:	680e      	ldr	r6, [r1, #0]
 8006c7a:	bf08      	it	eq
 8006c7c:	694b      	ldreq	r3, [r1, #20]
 8006c7e:	1bf6      	subs	r6, r6, r7
 8006c80:	600f      	str	r7, [r1, #0]
 8006c82:	608b      	str	r3, [r1, #8]
 8006c84:	2e00      	cmp	r6, #0
 8006c86:	dd9f      	ble.n	8006bc8 <__sflush_r+0x18>
 8006c88:	4633      	mov	r3, r6
 8006c8a:	463a      	mov	r2, r7
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	6a21      	ldr	r1, [r4, #32]
 8006c90:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c94:	47e0      	blx	ip
 8006c96:	2800      	cmp	r0, #0
 8006c98:	dc06      	bgt.n	8006ca8 <__sflush_r+0xf8>
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca4:	81a3      	strh	r3, [r4, #12]
 8006ca6:	e790      	b.n	8006bca <__sflush_r+0x1a>
 8006ca8:	4407      	add	r7, r0
 8006caa:	1a36      	subs	r6, r6, r0
 8006cac:	e7ea      	b.n	8006c84 <__sflush_r+0xd4>
 8006cae:	bf00      	nop
 8006cb0:	20400001 	.word	0x20400001

08006cb4 <_fflush_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	690b      	ldr	r3, [r1, #16]
 8006cb8:	4605      	mov	r5, r0
 8006cba:	460c      	mov	r4, r1
 8006cbc:	b913      	cbnz	r3, 8006cc4 <_fflush_r+0x10>
 8006cbe:	2500      	movs	r5, #0
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	b118      	cbz	r0, 8006cce <_fflush_r+0x1a>
 8006cc6:	6983      	ldr	r3, [r0, #24]
 8006cc8:	b90b      	cbnz	r3, 8006cce <_fflush_r+0x1a>
 8006cca:	f000 f887 	bl	8006ddc <__sinit>
 8006cce:	4b14      	ldr	r3, [pc, #80]	; (8006d20 <_fflush_r+0x6c>)
 8006cd0:	429c      	cmp	r4, r3
 8006cd2:	d11b      	bne.n	8006d0c <_fflush_r+0x58>
 8006cd4:	686c      	ldr	r4, [r5, #4]
 8006cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0ef      	beq.n	8006cbe <_fflush_r+0xa>
 8006cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ce0:	07d0      	lsls	r0, r2, #31
 8006ce2:	d404      	bmi.n	8006cee <_fflush_r+0x3a>
 8006ce4:	0599      	lsls	r1, r3, #22
 8006ce6:	d402      	bmi.n	8006cee <_fflush_r+0x3a>
 8006ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cea:	f000 f915 	bl	8006f18 <__retarget_lock_acquire_recursive>
 8006cee:	4628      	mov	r0, r5
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	f7ff ff5d 	bl	8006bb0 <__sflush_r>
 8006cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	07da      	lsls	r2, r3, #31
 8006cfc:	d4e0      	bmi.n	8006cc0 <_fflush_r+0xc>
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	059b      	lsls	r3, r3, #22
 8006d02:	d4dd      	bmi.n	8006cc0 <_fflush_r+0xc>
 8006d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d06:	f000 f908 	bl	8006f1a <__retarget_lock_release_recursive>
 8006d0a:	e7d9      	b.n	8006cc0 <_fflush_r+0xc>
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <_fflush_r+0x70>)
 8006d0e:	429c      	cmp	r4, r3
 8006d10:	d101      	bne.n	8006d16 <_fflush_r+0x62>
 8006d12:	68ac      	ldr	r4, [r5, #8]
 8006d14:	e7df      	b.n	8006cd6 <_fflush_r+0x22>
 8006d16:	4b04      	ldr	r3, [pc, #16]	; (8006d28 <_fflush_r+0x74>)
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	bf08      	it	eq
 8006d1c:	68ec      	ldreq	r4, [r5, #12]
 8006d1e:	e7da      	b.n	8006cd6 <_fflush_r+0x22>
 8006d20:	0800764c 	.word	0x0800764c
 8006d24:	0800766c 	.word	0x0800766c
 8006d28:	0800762c 	.word	0x0800762c

08006d2c <std>:
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	4604      	mov	r4, r0
 8006d32:	e9c0 3300 	strd	r3, r3, [r0]
 8006d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d3a:	6083      	str	r3, [r0, #8]
 8006d3c:	8181      	strh	r1, [r0, #12]
 8006d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d40:	81c2      	strh	r2, [r0, #14]
 8006d42:	6183      	str	r3, [r0, #24]
 8006d44:	4619      	mov	r1, r3
 8006d46:	2208      	movs	r2, #8
 8006d48:	305c      	adds	r0, #92	; 0x5c
 8006d4a:	f7fd fb51 	bl	80043f0 <memset>
 8006d4e:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <std+0x38>)
 8006d50:	6224      	str	r4, [r4, #32]
 8006d52:	6263      	str	r3, [r4, #36]	; 0x24
 8006d54:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <std+0x3c>)
 8006d56:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <std+0x40>)
 8006d5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d5c:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <std+0x44>)
 8006d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	08007081 	.word	0x08007081
 8006d68:	080070a3 	.word	0x080070a3
 8006d6c:	080070db 	.word	0x080070db
 8006d70:	080070ff 	.word	0x080070ff

08006d74 <_cleanup_r>:
 8006d74:	4901      	ldr	r1, [pc, #4]	; (8006d7c <_cleanup_r+0x8>)
 8006d76:	f000 b8af 	b.w	8006ed8 <_fwalk_reent>
 8006d7a:	bf00      	nop
 8006d7c:	08006cb5 	.word	0x08006cb5

08006d80 <__sfmoreglue>:
 8006d80:	2268      	movs	r2, #104	; 0x68
 8006d82:	b570      	push	{r4, r5, r6, lr}
 8006d84:	1e4d      	subs	r5, r1, #1
 8006d86:	4355      	muls	r5, r2
 8006d88:	460e      	mov	r6, r1
 8006d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d8e:	f7ff fa6b 	bl	8006268 <_malloc_r>
 8006d92:	4604      	mov	r4, r0
 8006d94:	b140      	cbz	r0, 8006da8 <__sfmoreglue+0x28>
 8006d96:	2100      	movs	r1, #0
 8006d98:	e9c0 1600 	strd	r1, r6, [r0]
 8006d9c:	300c      	adds	r0, #12
 8006d9e:	60a0      	str	r0, [r4, #8]
 8006da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006da4:	f7fd fb24 	bl	80043f0 <memset>
 8006da8:	4620      	mov	r0, r4
 8006daa:	bd70      	pop	{r4, r5, r6, pc}

08006dac <__sfp_lock_acquire>:
 8006dac:	4801      	ldr	r0, [pc, #4]	; (8006db4 <__sfp_lock_acquire+0x8>)
 8006dae:	f000 b8b3 	b.w	8006f18 <__retarget_lock_acquire_recursive>
 8006db2:	bf00      	nop
 8006db4:	2000036d 	.word	0x2000036d

08006db8 <__sfp_lock_release>:
 8006db8:	4801      	ldr	r0, [pc, #4]	; (8006dc0 <__sfp_lock_release+0x8>)
 8006dba:	f000 b8ae 	b.w	8006f1a <__retarget_lock_release_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	2000036d 	.word	0x2000036d

08006dc4 <__sinit_lock_acquire>:
 8006dc4:	4801      	ldr	r0, [pc, #4]	; (8006dcc <__sinit_lock_acquire+0x8>)
 8006dc6:	f000 b8a7 	b.w	8006f18 <__retarget_lock_acquire_recursive>
 8006dca:	bf00      	nop
 8006dcc:	2000036e 	.word	0x2000036e

08006dd0 <__sinit_lock_release>:
 8006dd0:	4801      	ldr	r0, [pc, #4]	; (8006dd8 <__sinit_lock_release+0x8>)
 8006dd2:	f000 b8a2 	b.w	8006f1a <__retarget_lock_release_recursive>
 8006dd6:	bf00      	nop
 8006dd8:	2000036e 	.word	0x2000036e

08006ddc <__sinit>:
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	4604      	mov	r4, r0
 8006de0:	f7ff fff0 	bl	8006dc4 <__sinit_lock_acquire>
 8006de4:	69a3      	ldr	r3, [r4, #24]
 8006de6:	b11b      	cbz	r3, 8006df0 <__sinit+0x14>
 8006de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dec:	f7ff bff0 	b.w	8006dd0 <__sinit_lock_release>
 8006df0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006df4:	6523      	str	r3, [r4, #80]	; 0x50
 8006df6:	4b13      	ldr	r3, [pc, #76]	; (8006e44 <__sinit+0x68>)
 8006df8:	4a13      	ldr	r2, [pc, #76]	; (8006e48 <__sinit+0x6c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dfe:	42a3      	cmp	r3, r4
 8006e00:	bf08      	it	eq
 8006e02:	2301      	moveq	r3, #1
 8006e04:	4620      	mov	r0, r4
 8006e06:	bf08      	it	eq
 8006e08:	61a3      	streq	r3, [r4, #24]
 8006e0a:	f000 f81f 	bl	8006e4c <__sfp>
 8006e0e:	6060      	str	r0, [r4, #4]
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 f81b 	bl	8006e4c <__sfp>
 8006e16:	60a0      	str	r0, [r4, #8]
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 f817 	bl	8006e4c <__sfp>
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2104      	movs	r1, #4
 8006e22:	60e0      	str	r0, [r4, #12]
 8006e24:	6860      	ldr	r0, [r4, #4]
 8006e26:	f7ff ff81 	bl	8006d2c <std>
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	2109      	movs	r1, #9
 8006e2e:	68a0      	ldr	r0, [r4, #8]
 8006e30:	f7ff ff7c 	bl	8006d2c <std>
 8006e34:	2202      	movs	r2, #2
 8006e36:	2112      	movs	r1, #18
 8006e38:	68e0      	ldr	r0, [r4, #12]
 8006e3a:	f7ff ff77 	bl	8006d2c <std>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	61a3      	str	r3, [r4, #24]
 8006e42:	e7d1      	b.n	8006de8 <__sinit+0xc>
 8006e44:	080072b4 	.word	0x080072b4
 8006e48:	08006d75 	.word	0x08006d75

08006e4c <__sfp>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	4607      	mov	r7, r0
 8006e50:	f7ff ffac 	bl	8006dac <__sfp_lock_acquire>
 8006e54:	4b1e      	ldr	r3, [pc, #120]	; (8006ed0 <__sfp+0x84>)
 8006e56:	681e      	ldr	r6, [r3, #0]
 8006e58:	69b3      	ldr	r3, [r6, #24]
 8006e5a:	b913      	cbnz	r3, 8006e62 <__sfp+0x16>
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f7ff ffbd 	bl	8006ddc <__sinit>
 8006e62:	3648      	adds	r6, #72	; 0x48
 8006e64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	d503      	bpl.n	8006e74 <__sfp+0x28>
 8006e6c:	6833      	ldr	r3, [r6, #0]
 8006e6e:	b30b      	cbz	r3, 8006eb4 <__sfp+0x68>
 8006e70:	6836      	ldr	r6, [r6, #0]
 8006e72:	e7f7      	b.n	8006e64 <__sfp+0x18>
 8006e74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e78:	b9d5      	cbnz	r5, 8006eb0 <__sfp+0x64>
 8006e7a:	4b16      	ldr	r3, [pc, #88]	; (8006ed4 <__sfp+0x88>)
 8006e7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e80:	60e3      	str	r3, [r4, #12]
 8006e82:	6665      	str	r5, [r4, #100]	; 0x64
 8006e84:	f000 f847 	bl	8006f16 <__retarget_lock_init_recursive>
 8006e88:	f7ff ff96 	bl	8006db8 <__sfp_lock_release>
 8006e8c:	2208      	movs	r2, #8
 8006e8e:	4629      	mov	r1, r5
 8006e90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e98:	6025      	str	r5, [r4, #0]
 8006e9a:	61a5      	str	r5, [r4, #24]
 8006e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ea0:	f7fd faa6 	bl	80043f0 <memset>
 8006ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006eac:	4620      	mov	r0, r4
 8006eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb0:	3468      	adds	r4, #104	; 0x68
 8006eb2:	e7d9      	b.n	8006e68 <__sfp+0x1c>
 8006eb4:	2104      	movs	r1, #4
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	f7ff ff62 	bl	8006d80 <__sfmoreglue>
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	6030      	str	r0, [r6, #0]
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d1d5      	bne.n	8006e70 <__sfp+0x24>
 8006ec4:	f7ff ff78 	bl	8006db8 <__sfp_lock_release>
 8006ec8:	230c      	movs	r3, #12
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	e7ee      	b.n	8006eac <__sfp+0x60>
 8006ece:	bf00      	nop
 8006ed0:	080072b4 	.word	0x080072b4
 8006ed4:	ffff0001 	.word	0xffff0001

08006ed8 <_fwalk_reent>:
 8006ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	4606      	mov	r6, r0
 8006ede:	4688      	mov	r8, r1
 8006ee0:	2700      	movs	r7, #0
 8006ee2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eea:	f1b9 0901 	subs.w	r9, r9, #1
 8006eee:	d505      	bpl.n	8006efc <_fwalk_reent+0x24>
 8006ef0:	6824      	ldr	r4, [r4, #0]
 8006ef2:	2c00      	cmp	r4, #0
 8006ef4:	d1f7      	bne.n	8006ee6 <_fwalk_reent+0xe>
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efc:	89ab      	ldrh	r3, [r5, #12]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d907      	bls.n	8006f12 <_fwalk_reent+0x3a>
 8006f02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f06:	3301      	adds	r3, #1
 8006f08:	d003      	beq.n	8006f12 <_fwalk_reent+0x3a>
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	47c0      	blx	r8
 8006f10:	4307      	orrs	r7, r0
 8006f12:	3568      	adds	r5, #104	; 0x68
 8006f14:	e7e9      	b.n	8006eea <_fwalk_reent+0x12>

08006f16 <__retarget_lock_init_recursive>:
 8006f16:	4770      	bx	lr

08006f18 <__retarget_lock_acquire_recursive>:
 8006f18:	4770      	bx	lr

08006f1a <__retarget_lock_release_recursive>:
 8006f1a:	4770      	bx	lr

08006f1c <__swhatbuf_r>:
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	460e      	mov	r6, r1
 8006f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f24:	4614      	mov	r4, r2
 8006f26:	2900      	cmp	r1, #0
 8006f28:	461d      	mov	r5, r3
 8006f2a:	b096      	sub	sp, #88	; 0x58
 8006f2c:	da08      	bge.n	8006f40 <__swhatbuf_r+0x24>
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f34:	602a      	str	r2, [r5, #0]
 8006f36:	061a      	lsls	r2, r3, #24
 8006f38:	d410      	bmi.n	8006f5c <__swhatbuf_r+0x40>
 8006f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f3e:	e00e      	b.n	8006f5e <__swhatbuf_r+0x42>
 8006f40:	466a      	mov	r2, sp
 8006f42:	f000 f903 	bl	800714c <_fstat_r>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	dbf1      	blt.n	8006f2e <__swhatbuf_r+0x12>
 8006f4a:	9a01      	ldr	r2, [sp, #4]
 8006f4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f54:	425a      	negs	r2, r3
 8006f56:	415a      	adcs	r2, r3
 8006f58:	602a      	str	r2, [r5, #0]
 8006f5a:	e7ee      	b.n	8006f3a <__swhatbuf_r+0x1e>
 8006f5c:	2340      	movs	r3, #64	; 0x40
 8006f5e:	2000      	movs	r0, #0
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	b016      	add	sp, #88	; 0x58
 8006f64:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f68 <__smakebuf_r>:
 8006f68:	898b      	ldrh	r3, [r1, #12]
 8006f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f6c:	079d      	lsls	r5, r3, #30
 8006f6e:	4606      	mov	r6, r0
 8006f70:	460c      	mov	r4, r1
 8006f72:	d507      	bpl.n	8006f84 <__smakebuf_r+0x1c>
 8006f74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	6123      	str	r3, [r4, #16]
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	6163      	str	r3, [r4, #20]
 8006f80:	b002      	add	sp, #8
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	466a      	mov	r2, sp
 8006f86:	ab01      	add	r3, sp, #4
 8006f88:	f7ff ffc8 	bl	8006f1c <__swhatbuf_r>
 8006f8c:	9900      	ldr	r1, [sp, #0]
 8006f8e:	4605      	mov	r5, r0
 8006f90:	4630      	mov	r0, r6
 8006f92:	f7ff f969 	bl	8006268 <_malloc_r>
 8006f96:	b948      	cbnz	r0, 8006fac <__smakebuf_r+0x44>
 8006f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f9c:	059a      	lsls	r2, r3, #22
 8006f9e:	d4ef      	bmi.n	8006f80 <__smakebuf_r+0x18>
 8006fa0:	f023 0303 	bic.w	r3, r3, #3
 8006fa4:	f043 0302 	orr.w	r3, r3, #2
 8006fa8:	81a3      	strh	r3, [r4, #12]
 8006faa:	e7e3      	b.n	8006f74 <__smakebuf_r+0xc>
 8006fac:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <__smakebuf_r+0x7c>)
 8006fae:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	6020      	str	r0, [r4, #0]
 8006fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	9b00      	ldr	r3, [sp, #0]
 8006fbc:	6120      	str	r0, [r4, #16]
 8006fbe:	6163      	str	r3, [r4, #20]
 8006fc0:	9b01      	ldr	r3, [sp, #4]
 8006fc2:	b15b      	cbz	r3, 8006fdc <__smakebuf_r+0x74>
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fca:	f000 f8d1 	bl	8007170 <_isatty_r>
 8006fce:	b128      	cbz	r0, 8006fdc <__smakebuf_r+0x74>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	f023 0303 	bic.w	r3, r3, #3
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	89a0      	ldrh	r0, [r4, #12]
 8006fde:	4305      	orrs	r5, r0
 8006fe0:	81a5      	strh	r5, [r4, #12]
 8006fe2:	e7cd      	b.n	8006f80 <__smakebuf_r+0x18>
 8006fe4:	08006d75 	.word	0x08006d75

08006fe8 <_malloc_usable_size_r>:
 8006fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fec:	1f18      	subs	r0, r3, #4
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	bfbc      	itt	lt
 8006ff2:	580b      	ldrlt	r3, [r1, r0]
 8006ff4:	18c0      	addlt	r0, r0, r3
 8006ff6:	4770      	bx	lr

08006ff8 <_raise_r>:
 8006ff8:	291f      	cmp	r1, #31
 8006ffa:	b538      	push	{r3, r4, r5, lr}
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	460d      	mov	r5, r1
 8007000:	d904      	bls.n	800700c <_raise_r+0x14>
 8007002:	2316      	movs	r3, #22
 8007004:	6003      	str	r3, [r0, #0]
 8007006:	f04f 30ff 	mov.w	r0, #4294967295
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800700e:	b112      	cbz	r2, 8007016 <_raise_r+0x1e>
 8007010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007014:	b94b      	cbnz	r3, 800702a <_raise_r+0x32>
 8007016:	4620      	mov	r0, r4
 8007018:	f000 f830 	bl	800707c <_getpid_r>
 800701c:	462a      	mov	r2, r5
 800701e:	4601      	mov	r1, r0
 8007020:	4620      	mov	r0, r4
 8007022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007026:	f000 b817 	b.w	8007058 <_kill_r>
 800702a:	2b01      	cmp	r3, #1
 800702c:	d00a      	beq.n	8007044 <_raise_r+0x4c>
 800702e:	1c59      	adds	r1, r3, #1
 8007030:	d103      	bne.n	800703a <_raise_r+0x42>
 8007032:	2316      	movs	r3, #22
 8007034:	6003      	str	r3, [r0, #0]
 8007036:	2001      	movs	r0, #1
 8007038:	e7e7      	b.n	800700a <_raise_r+0x12>
 800703a:	2400      	movs	r4, #0
 800703c:	4628      	mov	r0, r5
 800703e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007042:	4798      	blx	r3
 8007044:	2000      	movs	r0, #0
 8007046:	e7e0      	b.n	800700a <_raise_r+0x12>

08007048 <raise>:
 8007048:	4b02      	ldr	r3, [pc, #8]	; (8007054 <raise+0xc>)
 800704a:	4601      	mov	r1, r0
 800704c:	6818      	ldr	r0, [r3, #0]
 800704e:	f7ff bfd3 	b.w	8006ff8 <_raise_r>
 8007052:	bf00      	nop
 8007054:	2000001c 	.word	0x2000001c

08007058 <_kill_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	2300      	movs	r3, #0
 800705c:	4d06      	ldr	r5, [pc, #24]	; (8007078 <_kill_r+0x20>)
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	4611      	mov	r1, r2
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	f7fa fdee 	bl	8001c46 <_kill>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	d102      	bne.n	8007074 <_kill_r+0x1c>
 800706e:	682b      	ldr	r3, [r5, #0]
 8007070:	b103      	cbz	r3, 8007074 <_kill_r+0x1c>
 8007072:	6023      	str	r3, [r4, #0]
 8007074:	bd38      	pop	{r3, r4, r5, pc}
 8007076:	bf00      	nop
 8007078:	20000368 	.word	0x20000368

0800707c <_getpid_r>:
 800707c:	f7fa bddc 	b.w	8001c38 <_getpid>

08007080 <__sread>:
 8007080:	b510      	push	{r4, lr}
 8007082:	460c      	mov	r4, r1
 8007084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007088:	f000 f894 	bl	80071b4 <_read_r>
 800708c:	2800      	cmp	r0, #0
 800708e:	bfab      	itete	ge
 8007090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007092:	89a3      	ldrhlt	r3, [r4, #12]
 8007094:	181b      	addge	r3, r3, r0
 8007096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800709a:	bfac      	ite	ge
 800709c:	6563      	strge	r3, [r4, #84]	; 0x54
 800709e:	81a3      	strhlt	r3, [r4, #12]
 80070a0:	bd10      	pop	{r4, pc}

080070a2 <__swrite>:
 80070a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a6:	461f      	mov	r7, r3
 80070a8:	898b      	ldrh	r3, [r1, #12]
 80070aa:	4605      	mov	r5, r0
 80070ac:	05db      	lsls	r3, r3, #23
 80070ae:	460c      	mov	r4, r1
 80070b0:	4616      	mov	r6, r2
 80070b2:	d505      	bpl.n	80070c0 <__swrite+0x1e>
 80070b4:	2302      	movs	r3, #2
 80070b6:	2200      	movs	r2, #0
 80070b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070bc:	f000 f868 	bl	8007190 <_lseek_r>
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	4632      	mov	r2, r6
 80070c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070c8:	81a3      	strh	r3, [r4, #12]
 80070ca:	4628      	mov	r0, r5
 80070cc:	463b      	mov	r3, r7
 80070ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070d6:	f000 b817 	b.w	8007108 <_write_r>

080070da <__sseek>:
 80070da:	b510      	push	{r4, lr}
 80070dc:	460c      	mov	r4, r1
 80070de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e2:	f000 f855 	bl	8007190 <_lseek_r>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	bf15      	itete	ne
 80070ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80070ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070f6:	81a3      	strheq	r3, [r4, #12]
 80070f8:	bf18      	it	ne
 80070fa:	81a3      	strhne	r3, [r4, #12]
 80070fc:	bd10      	pop	{r4, pc}

080070fe <__sclose>:
 80070fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007102:	f000 b813 	b.w	800712c <_close_r>
	...

08007108 <_write_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4604      	mov	r4, r0
 800710c:	4608      	mov	r0, r1
 800710e:	4611      	mov	r1, r2
 8007110:	2200      	movs	r2, #0
 8007112:	4d05      	ldr	r5, [pc, #20]	; (8007128 <_write_r+0x20>)
 8007114:	602a      	str	r2, [r5, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	f7fa fdcc 	bl	8001cb4 <_write>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_write_r+0x1e>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_write_r+0x1e>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20000368 	.word	0x20000368

0800712c <_close_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	2300      	movs	r3, #0
 8007130:	4d05      	ldr	r5, [pc, #20]	; (8007148 <_close_r+0x1c>)
 8007132:	4604      	mov	r4, r0
 8007134:	4608      	mov	r0, r1
 8007136:	602b      	str	r3, [r5, #0]
 8007138:	f7fa fdd8 	bl	8001cec <_close>
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	d102      	bne.n	8007146 <_close_r+0x1a>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	b103      	cbz	r3, 8007146 <_close_r+0x1a>
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	bd38      	pop	{r3, r4, r5, pc}
 8007148:	20000368 	.word	0x20000368

0800714c <_fstat_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	2300      	movs	r3, #0
 8007150:	4d06      	ldr	r5, [pc, #24]	; (800716c <_fstat_r+0x20>)
 8007152:	4604      	mov	r4, r0
 8007154:	4608      	mov	r0, r1
 8007156:	4611      	mov	r1, r2
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	f7fa fdd2 	bl	8001d02 <_fstat>
 800715e:	1c43      	adds	r3, r0, #1
 8007160:	d102      	bne.n	8007168 <_fstat_r+0x1c>
 8007162:	682b      	ldr	r3, [r5, #0]
 8007164:	b103      	cbz	r3, 8007168 <_fstat_r+0x1c>
 8007166:	6023      	str	r3, [r4, #0]
 8007168:	bd38      	pop	{r3, r4, r5, pc}
 800716a:	bf00      	nop
 800716c:	20000368 	.word	0x20000368

08007170 <_isatty_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	2300      	movs	r3, #0
 8007174:	4d05      	ldr	r5, [pc, #20]	; (800718c <_isatty_r+0x1c>)
 8007176:	4604      	mov	r4, r0
 8007178:	4608      	mov	r0, r1
 800717a:	602b      	str	r3, [r5, #0]
 800717c:	f7fa fdd0 	bl	8001d20 <_isatty>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d102      	bne.n	800718a <_isatty_r+0x1a>
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	b103      	cbz	r3, 800718a <_isatty_r+0x1a>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	bd38      	pop	{r3, r4, r5, pc}
 800718c:	20000368 	.word	0x20000368

08007190 <_lseek_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4604      	mov	r4, r0
 8007194:	4608      	mov	r0, r1
 8007196:	4611      	mov	r1, r2
 8007198:	2200      	movs	r2, #0
 800719a:	4d05      	ldr	r5, [pc, #20]	; (80071b0 <_lseek_r+0x20>)
 800719c:	602a      	str	r2, [r5, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f7fa fdc8 	bl	8001d34 <_lseek>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <_lseek_r+0x1e>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	b103      	cbz	r3, 80071ae <_lseek_r+0x1e>
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	20000368 	.word	0x20000368

080071b4 <_read_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	4611      	mov	r1, r2
 80071bc:	2200      	movs	r2, #0
 80071be:	4d05      	ldr	r5, [pc, #20]	; (80071d4 <_read_r+0x20>)
 80071c0:	602a      	str	r2, [r5, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f7fa fd59 	bl	8001c7a <_read>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d102      	bne.n	80071d2 <_read_r+0x1e>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	b103      	cbz	r3, 80071d2 <_read_r+0x1e>
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	20000368 	.word	0x20000368

080071d8 <_init>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	bf00      	nop
 80071dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071de:	bc08      	pop	{r3}
 80071e0:	469e      	mov	lr, r3
 80071e2:	4770      	bx	lr

080071e4 <_fini>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	bf00      	nop
 80071e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ea:	bc08      	pop	{r3}
 80071ec:	469e      	mov	lr, r3
 80071ee:	4770      	bx	lr
