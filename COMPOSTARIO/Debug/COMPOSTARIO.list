
COMPOSTARIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ccc  08003ccc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ccc  08003ccc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ccc  08003ccc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  08003d44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003d44  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a241  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1a  00000000  00000000  0002a2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176f1  00000000  00000000  0002d410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c176  00000000  00000000  00044b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aeff  00000000  00000000  00050c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbb76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  000dbbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c24 	.word	0x08003c24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003c24 	.word	0x08003c24

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <delay+0x2c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800093e:	bf00      	nop
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <delay+0x2c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	429a      	cmp	r2, r3
 800094a:	d3f9      	bcc.n	8000940 <delay+0x14>
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	200000bc 	.word	0x200000bc

0800095c <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	461a      	mov	r2, r3
 800096e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000972:	4820      	ldr	r0, [pc, #128]	; (80009f4 <send_to_lcd+0x98>)
 8000974:	f001 fc61 	bl	800223a <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	08db      	lsrs	r3, r3, #3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	2108      	movs	r1, #8
 8000988:	481a      	ldr	r0, [pc, #104]	; (80009f4 <send_to_lcd+0x98>)
 800098a:	f001 fc56 	bl	800223a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	2110      	movs	r1, #16
 800099e:	4815      	ldr	r0, [pc, #84]	; (80009f4 <send_to_lcd+0x98>)
 80009a0:	f001 fc4b 	bl	800223a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	085b      	lsrs	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	2120      	movs	r1, #32
 80009b4:	480f      	ldr	r0, [pc, #60]	; (80009f4 <send_to_lcd+0x98>)
 80009b6:	f001 fc40 	bl	800223a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	461a      	mov	r2, r3
 80009c4:	2140      	movs	r1, #64	; 0x40
 80009c6:	480b      	ldr	r0, [pc, #44]	; (80009f4 <send_to_lcd+0x98>)
 80009c8:	f001 fc37 	bl	800223a <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <send_to_lcd+0x98>)
 80009d2:	f001 fc32 	bl	800223a <HAL_GPIO_WritePin>
	delay (20);
 80009d6:	2014      	movs	r0, #20
 80009d8:	f7ff ffa8 	bl	800092c <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <send_to_lcd+0x98>)
 80009e2:	f001 fc2a 	bl	800223a <HAL_GPIO_WritePin>
	delay (20);
 80009e6:	2014      	movs	r0, #20
 80009e8:	f7ff ffa0 	bl	800092c <delay>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40010c00 	.word	0x40010c00

080009f8 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	091b      	lsrs	r3, r3, #4
 8000a06:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ffa5 	bl	800095c <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 030f 	and.w	r3, r3, #15
 8000a18:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff9c 	bl	800095c <send_to_lcd>
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff8b 	bl	800095c <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 030f 	and.w	r3, r3, #15
 8000a4c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	2101      	movs	r1, #1
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff82 	bl	800095c <send_to_lcd>
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <lcd_clear>:

void lcd_clear (void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff ffc7 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(2);
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f000 fcea 	bl	8001444 <HAL_Delay>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
    switch (row)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <lcd_put_cur+0x18>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d005      	beq.n	8000a96 <lcd_put_cur+0x22>
 8000a8a:	e009      	b.n	8000aa0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a92:	603b      	str	r3, [r7, #0]
            break;
 8000a94:	e004      	b.n	8000aa0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a9c:	603b      	str	r3, [r7, #0]
            break;
 8000a9e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ffa7 	bl	80009f8 <lcd_send_cmd>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <lcd_init>:


void lcd_init (void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ab6:	2032      	movs	r0, #50	; 0x32
 8000ab8:	f000 fcc4 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000abc:	2030      	movs	r0, #48	; 0x30
 8000abe:	f7ff ff9b 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000ac2:	2005      	movs	r0, #5
 8000ac4:	f000 fcbe 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ac8:	2030      	movs	r0, #48	; 0x30
 8000aca:	f7ff ff95 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f000 fcb8 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ad4:	2030      	movs	r0, #48	; 0x30
 8000ad6:	f7ff ff8f 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(10);
 8000ada:	200a      	movs	r0, #10
 8000adc:	f000 fcb2 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000ae0:	2020      	movs	r0, #32
 8000ae2:	f7ff ff89 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(10);
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f000 fcac 	bl	8001444 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000aec:	2028      	movs	r0, #40	; 0x28
 8000aee:	f7ff ff83 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f000 fca6 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000af8:	2008      	movs	r0, #8
 8000afa:	f7ff ff7d 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 fca0 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff ff77 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(1);
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 fc9a 	bl	8001444 <HAL_Delay>
	HAL_Delay(1);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f000 fc97 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000b16:	2006      	movs	r0, #6
 8000b18:	f7ff ff6e 	bl	80009f8 <lcd_send_cmd>
	HAL_Delay(1);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 fc91 	bl	8001444 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000b22:	200c      	movs	r0, #12
 8000b24:	f7ff ff68 	bl	80009f8 <lcd_send_cmd>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000b34:	e006      	b.n	8000b44 <lcd_send_string+0x18>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	1c5a      	adds	r2, r3, #1
 8000b3a:	607a      	str	r2, [r7, #4]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff74 	bl	8000a2c <lcd_send_data>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1f4      	bne.n	8000b36 <lcd_send_string+0xa>
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <measure_distance>:
//uint32_t Value1 = 0;				//ORIGINAL
//uint32_t Value2 = 0;				//ORIGINAL
//uint16_t Distance  = 0;			//ORIGINAL


uint16_t measure_distance() {
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
	uint32_t pMillis = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
	uint32_t Value1 = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
	uint32_t Value2 = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
	uint16_t Distance = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b74:	4838      	ldr	r0, [pc, #224]	; (8000c58 <measure_distance+0x100>)
 8000b76:	f001 fb60 	bl	800223a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b80:	4835      	ldr	r0, [pc, #212]	; (8000c58 <measure_distance+0x100>)
 8000b82:	f001 fb5a 	bl	800223a <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000b86:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <measure_distance+0x104>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&timer) < 10);  // wait for 10 us
 8000b8e:	bf00      	nop
 8000b90:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <measure_distance+0x104>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	2b09      	cmp	r3, #9
 8000b98:	d9fa      	bls.n	8000b90 <measure_distance+0x38>
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba0:	482d      	ldr	r0, [pc, #180]	; (8000c58 <measure_distance+0x100>)
 8000ba2:	f001 fb4a 	bl	800223a <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000ba6:	f000 fc43 	bl	8001430 <HAL_GetTick>
 8000baa:	60f8      	str	r0, [r7, #12]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&& pMillis + 10 > HAL_GetTick());
 8000bac:	bf00      	nop
 8000bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb2:	4829      	ldr	r0, [pc, #164]	; (8000c58 <measure_distance+0x100>)
 8000bb4:	f001 fb2a 	bl	800220c <HAL_GPIO_ReadPin>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d107      	bne.n	8000bce <measure_distance+0x76>
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f103 040a 	add.w	r4, r3, #10
 8000bc4:	f000 fc34 	bl	8001430 <HAL_GetTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	d8ef      	bhi.n	8000bae <measure_distance+0x56>
		Value1 = __HAL_TIM_GET_COUNTER(&timer);
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <measure_distance+0x104>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	60bb      	str	r3, [r7, #8]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000bd6:	f000 fc2b 	bl	8001430 <HAL_GetTick>
 8000bda:	60f8      	str	r0, [r7, #12]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&& pMillis + 50 > HAL_GetTick());
 8000bdc:	bf00      	nop
 8000bde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be2:	481d      	ldr	r0, [pc, #116]	; (8000c58 <measure_distance+0x100>)
 8000be4:	f001 fb12 	bl	800220c <HAL_GPIO_ReadPin>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d007      	beq.n	8000bfe <measure_distance+0xa6>
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000bf4:	f000 fc1c 	bl	8001430 <HAL_GetTick>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	429c      	cmp	r4, r3
 8000bfc:	d8ef      	bhi.n	8000bde <measure_distance+0x86>
		Value2 = __HAL_TIM_GET_COUNTER(&timer);
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <measure_distance+0x104>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	607b      	str	r3, [r7, #4]

	Distance = (Value2 - Value1) * 0.034 / 2;
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fbe1 	bl	80003d4 <__aeabi_ui2d>
 8000c12:	a30f      	add	r3, pc, #60	; (adr r3, 8000c50 <measure_distance+0xf8>)
 8000c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c18:	f7ff fc56 	bl	80004c8 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c2c:	f7ff fd76 	bl	800071c <__aeabi_ddiv>
 8000c30:	4602      	mov	r2, r0
 8000c32:	460b      	mov	r3, r1
 8000c34:	4610      	mov	r0, r2
 8000c36:	4619      	mov	r1, r3
 8000c38:	f7ff fe58 	bl	80008ec <__aeabi_d2uiz>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	807b      	strh	r3, [r7, #2]
	HAL_Delay(50);
 8000c40:	2032      	movs	r0, #50	; 0x32
 8000c42:	f000 fbff 	bl	8001444 <HAL_Delay>

	return Distance;
 8000c46:	887b      	ldrh	r3, [r7, #2]

}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd90      	pop	{r4, r7, pc}
 8000c50:	b020c49c 	.word	0xb020c49c
 8000c54:	3fa16872 	.word	0x3fa16872
 8000c58:	40010c00 	.word	0x40010c00
 8000c5c:	200000bc 	.word	0x200000bc

08000c60 <ADC_Select_CH1>:
char sun_exposition[5]="";




void ADC_Select_CH1 (void){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <ADC_Select_CH1+0x38>)
 8000c82:	f000 fec7 	bl	8001a14 <HAL_ADC_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 8000c8c:	f000 fa5a 	bl	8001144 <Error_Handler>
	  }
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000008c 	.word	0x2000008c

08000c9c <ADC_Select_CH2>:

void ADC_Select_CH2 (void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <ADC_Select_CH2+0x38>)
 8000cbe:	f000 fea9 	bl	8001a14 <HAL_ADC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 8000cc8:	f000 fa3c 	bl	8001144 <Error_Handler>
	  }
}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000008c 	.word	0x2000008c

08000cd8 <ADC_Select_CH3>:

void ADC_Select_CH3 (void){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_3;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <ADC_Select_CH3+0x38>)
 8000cfa:	f000 fe8b 	bl	8001a14 <HAL_ADC_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <ADC_Select_CH3+0x30>
	  {
	    Error_Handler();
 8000d04:	f000 fa1e 	bl	8001144 <Error_Handler>
	  }
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000008c 	.word	0x2000008c

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d18:	f000 fb32 	bl	8001380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1c:	f000 f8d2 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d20:	f000 f9ac 	bl	800107c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d24:	f000 f95a 	bl	8000fdc <MX_TIM1_Init>
  MX_ADC1_Init();
 8000d28:	f000 f928 	bl	8000f7c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000d2c:	4855      	ldr	r0, [pc, #340]	; (8000e84 <main+0x170>)
 8000d2e:	f002 f869 	bl	8002e04 <HAL_TIM_Base_Start>


  lcd_init();
 8000d32:	f7ff febe 	bl	8000ab2 <lcd_init>
  lcd_put_cur(0, 0);
 8000d36:	2100      	movs	r1, #0
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff fe9b 	bl	8000a74 <lcd_put_cur>
  lcd_send_string("COMPOSTARIO ");
 8000d3e:	4852      	ldr	r0, [pc, #328]	; (8000e88 <main+0x174>)
 8000d40:	f7ff fef4 	bl	8000b2c <lcd_send_string>
  HAL_Delay(3000);
 8000d44:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d48:	f000 fb7c 	bl	8001444 <HAL_Delay>
  lcd_clear();
 8000d4c:	f7ff fe88 	bl	8000a60 <lcd_clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ADC_Select_CH1();
 8000d50:	f7ff ff86 	bl	8000c60 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8000d54:	484d      	ldr	r0, [pc, #308]	; (8000e8c <main+0x178>)
 8000d56:	f000 fc71 	bl	800163c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000d5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d5e:	484b      	ldr	r0, [pc, #300]	; (8000e8c <main+0x178>)
 8000d60:	f000 fd46 	bl	80017f0 <HAL_ADC_PollForConversion>
	  humidity=HAL_ADC_GetValue(&hadc1);
 8000d64:	4849      	ldr	r0, [pc, #292]	; (8000e8c <main+0x178>)
 8000d66:	f000 fe49 	bl	80019fc <HAL_ADC_GetValue>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a48      	ldr	r2, [pc, #288]	; (8000e90 <main+0x17c>)
 8000d6e:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000d70:	4846      	ldr	r0, [pc, #280]	; (8000e8c <main+0x178>)
 8000d72:	f000 fd11 	bl	8001798 <HAL_ADC_Stop>

	  ADC_Select_CH2();
 8000d76:	f7ff ff91 	bl	8000c9c <ADC_Select_CH2>
	  HAL_ADC_Start(&hadc1);
 8000d7a:	4844      	ldr	r0, [pc, #272]	; (8000e8c <main+0x178>)
 8000d7c:	f000 fc5e 	bl	800163c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000d80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d84:	4841      	ldr	r0, [pc, #260]	; (8000e8c <main+0x178>)
 8000d86:	f000 fd33 	bl	80017f0 <HAL_ADC_PollForConversion>
	  temperature=HAL_ADC_GetValue(&hadc1);
 8000d8a:	4840      	ldr	r0, [pc, #256]	; (8000e8c <main+0x178>)
 8000d8c:	f000 fe36 	bl	80019fc <HAL_ADC_GetValue>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4a40      	ldr	r2, [pc, #256]	; (8000e94 <main+0x180>)
 8000d94:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000d96:	483d      	ldr	r0, [pc, #244]	; (8000e8c <main+0x178>)
 8000d98:	f000 fcfe 	bl	8001798 <HAL_ADC_Stop>

	  ADC_Select_CH3();
 8000d9c:	f7ff ff9c 	bl	8000cd8 <ADC_Select_CH3>
	  HAL_ADC_Start(&hadc1);
 8000da0:	483a      	ldr	r0, [pc, #232]	; (8000e8c <main+0x178>)
 8000da2:	f000 fc4b 	bl	800163c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000da6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000daa:	4838      	ldr	r0, [pc, #224]	; (8000e8c <main+0x178>)
 8000dac:	f000 fd20 	bl	80017f0 <HAL_ADC_PollForConversion>
	  sun=HAL_ADC_GetValue(&hadc1);
 8000db0:	4836      	ldr	r0, [pc, #216]	; (8000e8c <main+0x178>)
 8000db2:	f000 fe23 	bl	80019fc <HAL_ADC_GetValue>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a37      	ldr	r2, [pc, #220]	; (8000e98 <main+0x184>)
 8000dba:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000dbc:	4833      	ldr	r0, [pc, #204]	; (8000e8c <main+0x178>)
 8000dbe:	f000 fceb 	bl	8001798 <HAL_ADC_Stop>

	  distance=measure_distance();
 8000dc2:	f7ff fec9 	bl	8000b58 <measure_distance>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <main+0x188>)
 8000dcc:	801a      	strh	r2, [r3, #0]

	  sprintf(dist,"%u",distance);
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <main+0x188>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4932      	ldr	r1, [pc, #200]	; (8000ea0 <main+0x18c>)
 8000dd6:	4833      	ldr	r0, [pc, #204]	; (8000ea4 <main+0x190>)
 8000dd8:	f002 faaa 	bl	8003330 <siprintf>
	  sprintf(hum,"%u",humidity);
 8000ddc:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <main+0x17c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	492f      	ldr	r1, [pc, #188]	; (8000ea0 <main+0x18c>)
 8000de4:	4830      	ldr	r0, [pc, #192]	; (8000ea8 <main+0x194>)
 8000de6:	f002 faa3 	bl	8003330 <siprintf>
	  sprintf(temp,"%u",temperature);
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <main+0x180>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	492b      	ldr	r1, [pc, #172]	; (8000ea0 <main+0x18c>)
 8000df2:	482e      	ldr	r0, [pc, #184]	; (8000eac <main+0x198>)
 8000df4:	f002 fa9c 	bl	8003330 <siprintf>
	  sprintf(sun_exposition, "%u",sun);
 8000df8:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <main+0x184>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4928      	ldr	r1, [pc, #160]	; (8000ea0 <main+0x18c>)
 8000e00:	482b      	ldr	r0, [pc, #172]	; (8000eb0 <main+0x19c>)
 8000e02:	f002 fa95 	bl	8003330 <siprintf>


	  lcd_put_cur(0, 0);
 8000e06:	2100      	movs	r1, #0
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fe33 	bl	8000a74 <lcd_put_cur>
	  lcd_send_string("D:");
 8000e0e:	4829      	ldr	r0, [pc, #164]	; (8000eb4 <main+0x1a0>)
 8000e10:	f7ff fe8c 	bl	8000b2c <lcd_send_string>
	  lcd_put_cur(0, 2);
 8000e14:	2102      	movs	r1, #2
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fe2c 	bl	8000a74 <lcd_put_cur>
	  lcd_send_string(dist);
 8000e1c:	4821      	ldr	r0, [pc, #132]	; (8000ea4 <main+0x190>)
 8000e1e:	f7ff fe85 	bl	8000b2c <lcd_send_string>

	  lcd_put_cur(0, 6);
 8000e22:	2106      	movs	r1, #6
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fe25 	bl	8000a74 <lcd_put_cur>
	  lcd_send_string("H:");
 8000e2a:	4823      	ldr	r0, [pc, #140]	; (8000eb8 <main+0x1a4>)
 8000e2c:	f7ff fe7e 	bl	8000b2c <lcd_send_string>
	  lcd_put_cur(0, 8);
 8000e30:	2108      	movs	r1, #8
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fe1e 	bl	8000a74 <lcd_put_cur>
	  lcd_send_string(hum);
 8000e38:	481b      	ldr	r0, [pc, #108]	; (8000ea8 <main+0x194>)
 8000e3a:	f7ff fe77 	bl	8000b2c <lcd_send_string>

	  lcd_put_cur(1, 0);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff fe17 	bl	8000a74 <lcd_put_cur>
	  lcd_send_string("T:");
 8000e46:	481d      	ldr	r0, [pc, #116]	; (8000ebc <main+0x1a8>)
 8000e48:	f7ff fe70 	bl	8000b2c <lcd_send_string>
	  lcd_put_cur(1, 2);
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff fe10 	bl	8000a74 <lcd_put_cur>
	  lcd_send_string(temp);
 8000e54:	4815      	ldr	r0, [pc, #84]	; (8000eac <main+0x198>)
 8000e56:	f7ff fe69 	bl	8000b2c <lcd_send_string>

	  lcd_put_cur(1, 6);
 8000e5a:	2106      	movs	r1, #6
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff fe09 	bl	8000a74 <lcd_put_cur>
	  lcd_send_string("S:");
 8000e62:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <main+0x1ac>)
 8000e64:	f7ff fe62 	bl	8000b2c <lcd_send_string>
	  lcd_put_cur(1, 8);
 8000e68:	2108      	movs	r1, #8
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff fe02 	bl	8000a74 <lcd_put_cur>
	  lcd_send_string(sun_exposition);
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <main+0x19c>)
 8000e72:	f7ff fe5b 	bl	8000b2c <lcd_send_string>

	  HAL_Delay(1000);
 8000e76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e7a:	f000 fae3 	bl	8001444 <HAL_Delay>
	  lcd_clear();
 8000e7e:	f7ff fdef 	bl	8000a60 <lcd_clear>
  {
 8000e82:	e765      	b.n	8000d50 <main+0x3c>
 8000e84:	200000bc 	.word	0x200000bc
 8000e88:	08003c3c 	.word	0x08003c3c
 8000e8c:	2000008c 	.word	0x2000008c
 8000e90:	20000108 	.word	0x20000108
 8000e94:	2000010c 	.word	0x2000010c
 8000e98:	20000110 	.word	0x20000110
 8000e9c:	20000104 	.word	0x20000104
 8000ea0:	08003c4c 	.word	0x08003c4c
 8000ea4:	20000114 	.word	0x20000114
 8000ea8:	20000124 	.word	0x20000124
 8000eac:	2000011c 	.word	0x2000011c
 8000eb0:	2000012c 	.word	0x2000012c
 8000eb4:	08003c50 	.word	0x08003c50
 8000eb8:	08003c54 	.word	0x08003c54
 8000ebc:	08003c58 	.word	0x08003c58
 8000ec0:	08003c5c 	.word	0x08003c5c

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	; 0x50
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ece:	2228      	movs	r2, #40	; 0x28
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 fa24 	bl	8003320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f02:	2301      	movs	r3, #1
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f06:	2302      	movs	r3, #2
 8000f08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 f9a6 	bl	800226c <HAL_RCC_OscConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f26:	f000 f90d 	bl	8001144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fc12 	bl	8002770 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f52:	f000 f8f7 	bl	8001144 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f56:	2302      	movs	r3, #2
 8000f58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f5e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fd88 	bl	8002a78 <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f6e:	f000 f8e9 	bl	8001144 <Error_Handler>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3750      	adds	r7, #80	; 0x50
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_ADC1_Init+0x58>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_ADC1_Init+0x5c>)
 8000f90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_ADC1_Init+0x58>)
 8000f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_ADC1_Init+0x58>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_ADC1_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_ADC1_Init+0x58>)
 8000fa8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_ADC1_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_ADC1_Init+0x58>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_ADC1_Init+0x58>)
 8000fbc:	f000 fa66 	bl	800148c <HAL_ADC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000fc6:	f000 f8bd 	bl	8001144 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000008c 	.word	0x2000008c
 8000fd8:	40012400 	.word	0x40012400

08000fdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_TIM1_Init+0x98>)
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <MX_TIM1_Init+0x9c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <MX_TIM1_Init+0x98>)
 8001000:	2247      	movs	r2, #71	; 0x47
 8001002:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <MX_TIM1_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <MX_TIM1_Init+0x98>)
 800100c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001010:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <MX_TIM1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <MX_TIM1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <MX_TIM1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001024:	4813      	ldr	r0, [pc, #76]	; (8001074 <MX_TIM1_Init+0x98>)
 8001026:	f001 fe9d 	bl	8002d64 <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001030:	f000 f888 	bl	8001144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_TIM1_Init+0x98>)
 8001042:	f001 ff29 	bl	8002e98 <HAL_TIM_ConfigClockSource>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800104c:	f000 f87a 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_TIM1_Init+0x98>)
 800105e:	f002 f8d7 	bl	8003210 <HAL_TIMEx_MasterConfigSynchronization>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001068:	f000 f86c 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200000bc 	.word	0x200000bc
 8001078:	40012c00 	.word	0x40012c00

0800107c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <MX_GPIO_Init+0xc0>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a29      	ldr	r2, [pc, #164]	; (800113c <MX_GPIO_Init+0xc0>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <MX_GPIO_Init+0xc0>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <MX_GPIO_Init+0xc0>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a23      	ldr	r2, [pc, #140]	; (800113c <MX_GPIO_Init+0xc0>)
 80010ae:	f043 0320 	orr.w	r3, r3, #32
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_GPIO_Init+0xc0>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0320 	and.w	r3, r3, #32
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <MX_GPIO_Init+0xc0>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <MX_GPIO_Init+0xc0>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_GPIO_Init+0xc0>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_GPIO_Init+0xc0>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a17      	ldr	r2, [pc, #92]	; (800113c <MX_GPIO_Init+0xc0>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_GPIO_Init+0xc0>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 80010f6:	4812      	ldr	r0, [pc, #72]	; (8001140 <MX_GPIO_Init+0xc4>)
 80010f8:	f001 f89f 	bl	800223a <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80010fc:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8001100:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2302      	movs	r3, #2
 800110c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	480a      	ldr	r0, [pc, #40]	; (8001140 <MX_GPIO_Init+0xc4>)
 8001116:	f000 fef5 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800111a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800111e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	4804      	ldr	r0, [pc, #16]	; (8001140 <MX_GPIO_Init+0xc4>)
 8001130:	f000 fee8 	bl	8001f04 <HAL_GPIO_Init>

}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	40010c00 	.word	0x40010c00

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_MspInit+0x5c>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_MspInit+0x5c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6193      	str	r3, [r2, #24]
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_MspInit+0x5c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_MspInit+0x5c>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_MspInit+0x5c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_MspInit+0x5c>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_MspInit+0x60>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_MspInit+0x60>)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000

080011b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a14      	ldr	r2, [pc, #80]	; (8001220 <HAL_ADC_MspInit+0x6c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d121      	bne.n	8001218 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_ADC_MspInit+0x70>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001204:	230e      	movs	r3, #14
 8001206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001208:	2303      	movs	r3, #3
 800120a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_ADC_MspInit+0x74>)
 8001214:	f000 fe76 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40012400 	.word	0x40012400
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800

0800122c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a09      	ldr	r2, [pc, #36]	; (8001260 <HAL_TIM_Base_MspInit+0x34>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d10b      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_TIM_Base_MspInit+0x38>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_TIM_Base_MspInit+0x38>)
 8001244:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_TIM_Base_MspInit+0x38>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40012c00 	.word	0x40012c00
 8001264:	40021000 	.word	0x40021000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <HardFault_Handler+0x4>

0800127a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <BusFault_Handler+0x4>

08001286 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <UsageFault_Handler+0x4>

0800128c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f8aa 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <_sbrk+0x5c>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <_sbrk+0x60>)
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <_sbrk+0x64>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <_sbrk+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d207      	bcs.n	80012fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ec:	f001 ffee 	bl	80032cc <__errno>
 80012f0:	4603      	mov	r3, r0
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	e009      	b.n	8001310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <_sbrk+0x64>)
 800130c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20005000 	.word	0x20005000
 800131c:	00000400 	.word	0x00000400
 8001320:	20000134 	.word	0x20000134
 8001324:	20000150 	.word	0x20000150

08001328 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001336:	490d      	ldr	r1, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800134c:	4c0a      	ldr	r4, [pc, #40]	; (8001378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800135a:	f7ff ffe5 	bl	8001328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f001 ffbb 	bl	80032d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001362:	f7ff fcd7 	bl	8000d14 <main>
  bx lr
 8001366:	4770      	bx	lr
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001370:	08003cd4 	.word	0x08003cd4
  ldr r2, =_sbss
 8001374:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001378:	2000014c 	.word	0x2000014c

0800137c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC1_2_IRQHandler>
	...

08001380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_Init+0x28>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_Init+0x28>)
 800138a:	f043 0310 	orr.w	r3, r3, #16
 800138e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 fd83 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001396:	200f      	movs	r0, #15
 8001398:	f000 f808 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fed8 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40022000 	.word	0x40022000

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x54>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x58>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fd8d 	bl	8001eea <HAL_SYSTICK_Config>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00e      	b.n	80013f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	d80a      	bhi.n	80013f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e0:	2200      	movs	r2, #0
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f000 fd63 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_InitTick+0x5c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000000 	.word	0x20000000
 8001404:	20000008 	.word	0x20000008
 8001408:	20000004 	.word	0x20000004

0800140c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x1c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_IncTick+0x20>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a03      	ldr	r2, [pc, #12]	; (800142c <HAL_IncTick+0x20>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	20000008 	.word	0x20000008
 800142c:	20000138 	.word	0x20000138

08001430 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <HAL_GetTick+0x10>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	20000138 	.word	0x20000138

08001444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff fff0 	bl	8001430 <HAL_GetTick>
 8001450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d005      	beq.n	800146a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_Delay+0x44>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800146a:	bf00      	nop
 800146c:	f7ff ffe0 	bl	8001430 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f7      	bhi.n	800146c <HAL_Delay+0x28>
  {
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008

0800148c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0be      	b.n	800162c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fe72 	bl	80011b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fbf1 	bl	8001cb8 <ADC_ConversionStop_Disable>
 80014d6:	4603      	mov	r3, r0
 80014d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f040 8099 	bne.w	800161a <HAL_ADC_Init+0x18e>
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 8095 	bne.w	800161a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014f8:	f023 0302 	bic.w	r3, r3, #2
 80014fc:	f043 0202 	orr.w	r2, r3, #2
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800150c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7b1b      	ldrb	r3, [r3, #12]
 8001512:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001514:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	4313      	orrs	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001524:	d003      	beq.n	800152e <HAL_ADC_Init+0xa2>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d102      	bne.n	8001534 <HAL_ADC_Init+0xa8>
 800152e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001532:	e000      	b.n	8001536 <HAL_ADC_Init+0xaa>
 8001534:	2300      	movs	r3, #0
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7d1b      	ldrb	r3, [r3, #20]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d119      	bne.n	8001578 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7b1b      	ldrb	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d109      	bne.n	8001560 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	3b01      	subs	r3, #1
 8001552:	035a      	lsls	r2, r3, #13
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	e00b      	b.n	8001578 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	f043 0220 	orr.w	r2, r3, #32
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	430a      	orrs	r2, r1
 800158a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	4b28      	ldr	r3, [pc, #160]	; (8001634 <HAL_ADC_Init+0x1a8>)
 8001594:	4013      	ands	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	430b      	orrs	r3, r1
 800159e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a8:	d003      	beq.n	80015b2 <HAL_ADC_Init+0x126>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d104      	bne.n	80015bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	051b      	lsls	r3, r3, #20
 80015ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_ADC_Init+0x1ac>)
 80015d8:	4013      	ands	r3, r2
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d10b      	bne.n	80015f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	f023 0303 	bic.w	r3, r3, #3
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015f6:	e018      	b.n	800162a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	f023 0312 	bic.w	r3, r3, #18
 8001600:	f043 0210 	orr.w	r2, r3, #16
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	f043 0201 	orr.w	r2, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001618:	e007      	b.n	800162a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	f043 0210 	orr.w	r2, r3, #16
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800162a:	7dfb      	ldrb	r3, [r7, #23]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	ffe1f7fd 	.word	0xffe1f7fd
 8001638:	ff1f0efe 	.word	0xff1f0efe

0800163c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_ADC_Start+0x1a>
 8001652:	2302      	movs	r3, #2
 8001654:	e098      	b.n	8001788 <HAL_ADC_Start+0x14c>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fad0 	bl	8001c04 <ADC_Enable>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 8087 	bne.w	800177e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a41      	ldr	r2, [pc, #260]	; (8001790 <HAL_ADC_Start+0x154>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d105      	bne.n	800169a <HAL_ADC_Start+0x5e>
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_ADC_Start+0x158>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d115      	bne.n	80016c6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d026      	beq.n	8001702 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c4:	e01d      	b.n	8001702 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a2f      	ldr	r2, [pc, #188]	; (8001794 <HAL_ADC_Start+0x158>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d004      	beq.n	80016e6 <HAL_ADC_Start+0xaa>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a2b      	ldr	r2, [pc, #172]	; (8001790 <HAL_ADC_Start+0x154>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d10d      	bne.n	8001702 <HAL_ADC_Start+0xc6>
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_ADC_Start+0x158>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	f023 0206 	bic.w	r2, r3, #6
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
 800171a:	e002      	b.n	8001722 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f06f 0202 	mvn.w	r2, #2
 8001732:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800173e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001742:	d113      	bne.n	800176c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001748:	4a11      	ldr	r2, [pc, #68]	; (8001790 <HAL_ADC_Start+0x154>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d105      	bne.n	800175a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_ADC_Start+0x158>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001756:	2b00      	cmp	r3, #0
 8001758:	d108      	bne.n	800176c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	e00c      	b.n	8001786 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	e003      	b.n	8001786 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40012800 	.word	0x40012800
 8001794:	40012400 	.word	0x40012400

08001798 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_ADC_Stop+0x1a>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e01a      	b.n	80017e8 <HAL_ADC_Stop+0x50>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fa7c 	bl	8001cb8 <ADC_ConversionStop_Disable>
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	f043 0201 	orr.w	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001806:	f7ff fe13 	bl	8001430 <HAL_GetTick>
 800180a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00b      	beq.n	8001832 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f043 0220 	orr.w	r2, r3, #32
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e0d3      	b.n	80019da <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d131      	bne.n	80018a4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800184a:	2b00      	cmp	r3, #0
 800184c:	d12a      	bne.n	80018a4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800184e:	e021      	b.n	8001894 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001856:	d01d      	beq.n	8001894 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <HAL_ADC_PollForConversion+0x7e>
 800185e:	f7ff fde7 	bl	8001430 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d212      	bcs.n	8001894 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10b      	bne.n	8001894 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	f043 0204 	orr.w	r2, r3, #4
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0a2      	b.n	80019da <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0d6      	beq.n	8001850 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018a2:	e070      	b.n	8001986 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80018a4:	4b4f      	ldr	r3, [pc, #316]	; (80019e4 <HAL_ADC_PollForConversion+0x1f4>)
 80018a6:	681c      	ldr	r4, [r3, #0]
 80018a8:	2002      	movs	r0, #2
 80018aa:	f001 f99b 	bl	8002be4 <HAL_RCCEx_GetPeriphCLKFreq>
 80018ae:	4603      	mov	r3, r0
 80018b0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6919      	ldr	r1, [r3, #16]
 80018ba:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <HAL_ADC_PollForConversion+0x1f8>)
 80018bc:	400b      	ands	r3, r1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d118      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x104>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68d9      	ldr	r1, [r3, #12]
 80018c8:	4b48      	ldr	r3, [pc, #288]	; (80019ec <HAL_ADC_PollForConversion+0x1fc>)
 80018ca:	400b      	ands	r3, r1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d111      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x104>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6919      	ldr	r1, [r3, #16]
 80018d6:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <HAL_ADC_PollForConversion+0x200>)
 80018d8:	400b      	ands	r3, r1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d108      	bne.n	80018f0 <HAL_ADC_PollForConversion+0x100>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68d9      	ldr	r1, [r3, #12]
 80018e4:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_ADC_PollForConversion+0x204>)
 80018e6:	400b      	ands	r3, r1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_PollForConversion+0x100>
 80018ec:	2314      	movs	r3, #20
 80018ee:	e020      	b.n	8001932 <HAL_ADC_PollForConversion+0x142>
 80018f0:	2329      	movs	r3, #41	; 0x29
 80018f2:	e01e      	b.n	8001932 <HAL_ADC_PollForConversion+0x142>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6919      	ldr	r1, [r3, #16]
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <HAL_ADC_PollForConversion+0x200>)
 80018fc:	400b      	ands	r3, r1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_ADC_PollForConversion+0x120>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68d9      	ldr	r1, [r3, #12]
 8001908:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <HAL_ADC_PollForConversion+0x204>)
 800190a:	400b      	ands	r3, r1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00d      	beq.n	800192c <HAL_ADC_PollForConversion+0x13c>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6919      	ldr	r1, [r3, #16]
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <HAL_ADC_PollForConversion+0x208>)
 8001918:	400b      	ands	r3, r1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d108      	bne.n	8001930 <HAL_ADC_PollForConversion+0x140>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68d9      	ldr	r1, [r3, #12]
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_ADC_PollForConversion+0x208>)
 8001926:	400b      	ands	r3, r1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_ADC_PollForConversion+0x140>
 800192c:	2354      	movs	r3, #84	; 0x54
 800192e:	e000      	b.n	8001932 <HAL_ADC_PollForConversion+0x142>
 8001930:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001938:	e021      	b.n	800197e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d01a      	beq.n	8001978 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <HAL_ADC_PollForConversion+0x168>
 8001948:	f7ff fd72 	bl	8001430 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d20f      	bcs.n	8001978 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d90b      	bls.n	8001978 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	f043 0204 	orr.w	r2, r3, #4
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e030      	b.n	80019da <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	429a      	cmp	r2, r3
 8001984:	d8d9      	bhi.n	800193a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f06f 0212 	mvn.w	r2, #18
 800198e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019aa:	d115      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d111      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000000 	.word	0x20000000
 80019e8:	24924924 	.word	0x24924924
 80019ec:	00924924 	.word	0x00924924
 80019f0:	12492492 	.word	0x12492492
 80019f4:	00492492 	.word	0x00492492
 80019f8:	00249249 	.word	0x00249249

080019fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x20>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e0dc      	b.n	8001bee <HAL_ADC_ConfigChannel+0x1da>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b06      	cmp	r3, #6
 8001a42:	d81c      	bhi.n	8001a7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	3b05      	subs	r3, #5
 8001a56:	221f      	movs	r2, #31
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4019      	ands	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b05      	subs	r3, #5
 8001a70:	fa00 f203 	lsl.w	r2, r0, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a7c:	e03c      	b.n	8001af8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d81c      	bhi.n	8001ac0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	3b23      	subs	r3, #35	; 0x23
 8001a98:	221f      	movs	r2, #31
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	4019      	ands	r1, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b23      	subs	r3, #35	; 0x23
 8001ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
 8001abe:	e01b      	b.n	8001af8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3b41      	subs	r3, #65	; 0x41
 8001ad2:	221f      	movs	r2, #31
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4019      	ands	r1, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b41      	subs	r3, #65	; 0x41
 8001aec:	fa00 f203 	lsl.w	r2, r0, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	d91c      	bls.n	8001b3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68d9      	ldr	r1, [r3, #12]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b1e      	subs	r3, #30
 8001b12:	2207      	movs	r2, #7
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4019      	ands	r1, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6898      	ldr	r0, [r3, #8]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b1e      	subs	r3, #30
 8001b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	e019      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6919      	ldr	r1, [r3, #16]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4019      	ands	r1, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6898      	ldr	r0, [r3, #8]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	fa00 f203 	lsl.w	r2, r0, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b10      	cmp	r3, #16
 8001b74:	d003      	beq.n	8001b7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b7a:	2b11      	cmp	r3, #17
 8001b7c:	d132      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d125      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d126      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ba4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d11a      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <HAL_ADC_ConfigChannel+0x1e8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a13      	ldr	r2, [pc, #76]	; (8001c00 <HAL_ADC_ConfigChannel+0x1ec>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	0c9a      	lsrs	r2, r3, #18
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc4:	e002      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f9      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x1b2>
 8001bd2:	e007      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	f043 0220 	orr.w	r2, r3, #32
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	40012400 	.word	0x40012400
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	431bde83 	.word	0x431bde83

08001c04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d040      	beq.n	8001ca4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <ADC_Enable+0xac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <ADC_Enable+0xb0>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	0c9b      	lsrs	r3, r3, #18
 8001c3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c40:	e002      	b.n	8001c48 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f9      	bne.n	8001c42 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c4e:	f7ff fbef 	bl	8001430 <HAL_GetTick>
 8001c52:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c54:	e01f      	b.n	8001c96 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c56:	f7ff fbeb 	bl	8001430 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d918      	bls.n	8001c96 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d011      	beq.n	8001c96 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	f043 0210 	orr.w	r2, r3, #16
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e007      	b.n	8001ca6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d1d8      	bne.n	8001c56 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	431bde83 	.word	0x431bde83

08001cb8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d12e      	bne.n	8001d30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ce2:	f7ff fba5 	bl	8001430 <HAL_GetTick>
 8001ce6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ce8:	e01b      	b.n	8001d22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cea:	f7ff fba1 	bl	8001430 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d914      	bls.n	8001d22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10d      	bne.n	8001d22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f043 0210 	orr.w	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	f043 0201 	orr.w	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e007      	b.n	8001d32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d0dc      	beq.n	8001cea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff90 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff49 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff5e 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff90 	bl	8001df4 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5f 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffb0 	bl	8001e58 <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b08b      	sub	sp, #44	; 0x2c
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e169      	b.n	80021ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 8158 	bne.w	80021e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a9a      	ldr	r2, [pc, #616]	; (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d05e      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f40:	4a98      	ldr	r2, [pc, #608]	; (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d875      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f46:	4a98      	ldr	r2, [pc, #608]	; (80021a8 <HAL_GPIO_Init+0x2a4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d058      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f4c:	4a96      	ldr	r2, [pc, #600]	; (80021a8 <HAL_GPIO_Init+0x2a4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d86f      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f52:	4a96      	ldr	r2, [pc, #600]	; (80021ac <HAL_GPIO_Init+0x2a8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d052      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f58:	4a94      	ldr	r2, [pc, #592]	; (80021ac <HAL_GPIO_Init+0x2a8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d869      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f5e:	4a94      	ldr	r2, [pc, #592]	; (80021b0 <HAL_GPIO_Init+0x2ac>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04c      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f64:	4a92      	ldr	r2, [pc, #584]	; (80021b0 <HAL_GPIO_Init+0x2ac>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d863      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f6a:	4a92      	ldr	r2, [pc, #584]	; (80021b4 <HAL_GPIO_Init+0x2b0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d046      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f70:	4a90      	ldr	r2, [pc, #576]	; (80021b4 <HAL_GPIO_Init+0x2b0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d85d      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f76:	2b12      	cmp	r3, #18
 8001f78:	d82a      	bhi.n	8001fd0 <HAL_GPIO_Init+0xcc>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d859      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <HAL_GPIO_Init+0x80>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001fff 	.word	0x08001fff
 8001f88:	08001fd9 	.word	0x08001fd9
 8001f8c:	08001feb 	.word	0x08001feb
 8001f90:	0800202d 	.word	0x0800202d
 8001f94:	08002033 	.word	0x08002033
 8001f98:	08002033 	.word	0x08002033
 8001f9c:	08002033 	.word	0x08002033
 8001fa0:	08002033 	.word	0x08002033
 8001fa4:	08002033 	.word	0x08002033
 8001fa8:	08002033 	.word	0x08002033
 8001fac:	08002033 	.word	0x08002033
 8001fb0:	08002033 	.word	0x08002033
 8001fb4:	08002033 	.word	0x08002033
 8001fb8:	08002033 	.word	0x08002033
 8001fbc:	08002033 	.word	0x08002033
 8001fc0:	08002033 	.word	0x08002033
 8001fc4:	08002033 	.word	0x08002033
 8001fc8:	08001fe1 	.word	0x08001fe1
 8001fcc:	08001ff5 	.word	0x08001ff5
 8001fd0:	4a79      	ldr	r2, [pc, #484]	; (80021b8 <HAL_GPIO_Init+0x2b4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fd6:	e02c      	b.n	8002032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	623b      	str	r3, [r7, #32]
          break;
 8001fde:	e029      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	623b      	str	r3, [r7, #32]
          break;
 8001fe8:	e024      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	3308      	adds	r3, #8
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e01f      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	623b      	str	r3, [r7, #32]
          break;
 8001ffc:	e01a      	b.n	8002034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002006:	2304      	movs	r3, #4
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e013      	b.n	8002034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002014:	2308      	movs	r3, #8
 8002016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	611a      	str	r2, [r3, #16]
          break;
 800201e:	e009      	b.n	8002034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	615a      	str	r2, [r3, #20]
          break;
 800202a:	e003      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
          break;
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x130>
          break;
 8002032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2bff      	cmp	r3, #255	; 0xff
 8002038:	d801      	bhi.n	800203e <HAL_GPIO_Init+0x13a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_Init+0x13e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3304      	adds	r3, #4
 8002042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2bff      	cmp	r3, #255	; 0xff
 8002048:	d802      	bhi.n	8002050 <HAL_GPIO_Init+0x14c>
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x152>
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3b08      	subs	r3, #8
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	210f      	movs	r1, #15
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	6a39      	ldr	r1, [r7, #32]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	431a      	orrs	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80b1 	beq.w	80021e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800209c:	4a48      	ldr	r2, [pc, #288]	; (80021c0 <HAL_GPIO_Init+0x2bc>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a40      	ldr	r2, [pc, #256]	; (80021c4 <HAL_GPIO_Init+0x2c0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_GPIO_Init+0x1ec>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3f      	ldr	r2, [pc, #252]	; (80021c8 <HAL_GPIO_Init+0x2c4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1e8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3e      	ldr	r2, [pc, #248]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1e4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <HAL_GPIO_Init+0x2cc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1e0>
 80020e0:	2303      	movs	r3, #3
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e4:	2304      	movs	r3, #4
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020f0:	2300      	movs	r3, #0
 80020f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002102:	492f      	ldr	r1, [pc, #188]	; (80021c0 <HAL_GPIO_Init+0x2bc>)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	492c      	ldr	r1, [pc, #176]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	4928      	ldr	r1, [pc, #160]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002134:	4013      	ands	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	4922      	ldr	r1, [pc, #136]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	491e      	ldr	r1, [pc, #120]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800215c:	4013      	ands	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	4918      	ldr	r1, [pc, #96]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	4914      	ldr	r1, [pc, #80]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002184:	4013      	ands	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d021      	beq.n	80021d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	490e      	ldr	r1, [pc, #56]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
 80021a0:	e021      	b.n	80021e6 <HAL_GPIO_Init+0x2e2>
 80021a2:	bf00      	nop
 80021a4:	10320000 	.word	0x10320000
 80021a8:	10310000 	.word	0x10310000
 80021ac:	10220000 	.word	0x10220000
 80021b0:	10210000 	.word	0x10210000
 80021b4:	10120000 	.word	0x10120000
 80021b8:	10110000 	.word	0x10110000
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	40011000 	.word	0x40011000
 80021d0:	40011400 	.word	0x40011400
 80021d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	43db      	mvns	r3, r3
 80021e0:	4909      	ldr	r1, [pc, #36]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	3301      	adds	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f47f ae8e 	bne.w	8001f18 <HAL_GPIO_Init+0x14>
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	372c      	adds	r7, #44	; 0x2c
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e001      	b.n	800222e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]
 8002246:	4613      	mov	r3, r2
 8002248:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800224a:	787b      	ldrb	r3, [r7, #1]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002250:	887a      	ldrh	r2, [r7, #2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002256:	e003      	b.n	8002260 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	041a      	lsls	r2, r3, #16
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	611a      	str	r2, [r3, #16]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
	...

0800226c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e272      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8087 	beq.w	800239a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800228c:	4b92      	ldr	r3, [pc, #584]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b04      	cmp	r3, #4
 8002296:	d00c      	beq.n	80022b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002298:	4b8f      	ldr	r3, [pc, #572]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d112      	bne.n	80022ca <HAL_RCC_OscConfig+0x5e>
 80022a4:	4b8c      	ldr	r3, [pc, #560]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b0:	d10b      	bne.n	80022ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b2:	4b89      	ldr	r3, [pc, #548]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d06c      	beq.n	8002398 <HAL_RCC_OscConfig+0x12c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d168      	bne.n	8002398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e24c      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x76>
 80022d4:	4b80      	ldr	r3, [pc, #512]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a7f      	ldr	r2, [pc, #508]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e02e      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x98>
 80022ea:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7a      	ldr	r2, [pc, #488]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a77      	ldr	r2, [pc, #476]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0xbc>
 800230e:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a71      	ldr	r2, [pc, #452]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b6f      	ldr	r3, [pc, #444]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6e      	ldr	r2, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 8002328:	4b6b      	ldr	r3, [pc, #428]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a6a      	ldr	r2, [pc, #424]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b68      	ldr	r3, [pc, #416]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a67      	ldr	r2, [pc, #412]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff f872 	bl	8001430 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff f86e 	bl	8001430 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e200      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b5d      	ldr	r3, [pc, #372]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xe4>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7ff f85e 	bl	8001430 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff f85a 	bl	8001430 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1ec      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x10c>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d063      	beq.n	800246e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a6:	4b4c      	ldr	r3, [pc, #304]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023b2:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d11c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x18c>
 80023be:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x176>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e1c0      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4939      	ldr	r1, [pc, #228]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	e03a      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b36      	ldr	r3, [pc, #216]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7ff f813 	bl	8001430 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240e:	f7ff f80f 	bl	8001430 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1a1      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4927      	ldr	r1, [pc, #156]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe fff2 	bl	8001430 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002450:	f7fe ffee 	bl	8001430 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e180      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d03a      	beq.n	80024f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d019      	beq.n	80024b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7fe ffd2 	bl	8001430 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002490:	f7fe ffce 	bl	8001430 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e160      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f000 fac4 	bl	8002a3c <RCC_Delay>
 80024b4:	e01c      	b.n	80024f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_RCC_OscConfig+0x274>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024bc:	f7fe ffb8 	bl	8001430 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c2:	e00f      	b.n	80024e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7fe ffb4 	bl	8001430 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d908      	bls.n	80024e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e146      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	42420000 	.word	0x42420000
 80024e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	4b92      	ldr	r3, [pc, #584]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e9      	bne.n	80024c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a6 	beq.w	800264a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002502:	4b8b      	ldr	r3, [pc, #556]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b88      	ldr	r3, [pc, #544]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a87      	ldr	r2, [pc, #540]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	61d3      	str	r3, [r2, #28]
 800251a:	4b85      	ldr	r3, [pc, #532]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252a:	4b82      	ldr	r3, [pc, #520]	; (8002734 <HAL_RCC_OscConfig+0x4c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d118      	bne.n	8002568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002536:	4b7f      	ldr	r3, [pc, #508]	; (8002734 <HAL_RCC_OscConfig+0x4c8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7e      	ldr	r2, [pc, #504]	; (8002734 <HAL_RCC_OscConfig+0x4c8>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002542:	f7fe ff75 	bl	8001430 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7fe ff71 	bl	8001430 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b64      	cmp	r3, #100	; 0x64
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e103      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	4b75      	ldr	r3, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x4c8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x312>
 8002570:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a6e      	ldr	r2, [pc, #440]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	e02d      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x334>
 8002586:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a69      	ldr	r2, [pc, #420]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6213      	str	r3, [r2, #32]
 8002592:	4b67      	ldr	r3, [pc, #412]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a66      	ldr	r2, [pc, #408]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6213      	str	r3, [r2, #32]
 800259e:	e01c      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x356>
 80025a8:	4b61      	ldr	r3, [pc, #388]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4a60      	ldr	r2, [pc, #384]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6213      	str	r3, [r2, #32]
 80025b4:	4b5e      	ldr	r3, [pc, #376]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a5d      	ldr	r2, [pc, #372]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6213      	str	r3, [r2, #32]
 80025c0:	e00b      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 80025c2:	4b5b      	ldr	r3, [pc, #364]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a5a      	ldr	r2, [pc, #360]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6213      	str	r3, [r2, #32]
 80025ce:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d015      	beq.n	800260e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe ff25 	bl	8001430 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe ff21 	bl	8001430 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0b1      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ee      	beq.n	80025ea <HAL_RCC_OscConfig+0x37e>
 800260c:	e014      	b.n	8002638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260e:	f7fe ff0f 	bl	8001430 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe ff0b 	bl	8001430 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e09b      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	4b40      	ldr	r3, [pc, #256]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ee      	bne.n	8002616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d105      	bne.n	800264a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263e:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a3b      	ldr	r2, [pc, #236]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8087 	beq.w	8002762 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002654:	4b36      	ldr	r3, [pc, #216]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d061      	beq.n	8002724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d146      	bne.n	80026f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002668:	4b33      	ldr	r3, [pc, #204]	; (8002738 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7fe fedf 	bl	8001430 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe fedb 	bl	8001430 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e06d      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d108      	bne.n	80026b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4921      	ldr	r1, [pc, #132]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a19      	ldr	r1, [r3, #32]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	430b      	orrs	r3, r1
 80026c2:	491b      	ldr	r1, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_RCC_OscConfig+0x4cc>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe feaf 	bl	8001430 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe feab 	bl	8001430 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e03d      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x46a>
 80026f4:	e035      	b.n	8002762 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_RCC_OscConfig+0x4cc>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fe98 	bl	8001430 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe fe94 	bl	8001430 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e026      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x498>
 8002722:	e01e      	b.n	8002762 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d107      	bne.n	800273c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e019      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
 8002730:	40021000 	.word	0x40021000
 8002734:	40007000 	.word	0x40007000
 8002738:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_OscConfig+0x500>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	429a      	cmp	r2, r3
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000

08002770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0d0      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d910      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b67      	ldr	r3, [pc, #412]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0207 	bic.w	r2, r3, #7
 800279a:	4965      	ldr	r1, [pc, #404]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b8      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e4:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	494d      	ldr	r1, [pc, #308]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d040      	beq.n	8002890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d115      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e073      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06b      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284e:	4b39      	ldr	r3, [pc, #228]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4936      	ldr	r1, [pc, #216]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002860:	f7fe fde6 	bl	8001430 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe fde2 	bl	8001430 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e053      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 020c 	and.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d1eb      	bne.n	8002868 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002890:	4b27      	ldr	r3, [pc, #156]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d210      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0207 	bic.w	r2, r3, #7
 80028a6:	4922      	ldr	r1, [pc, #136]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e032      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4916      	ldr	r1, [pc, #88]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	490e      	ldr	r1, [pc, #56]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028fe:	f000 f821 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002902:	4602      	mov	r2, r0
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	490a      	ldr	r1, [pc, #40]	; (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	5ccb      	ldrb	r3, [r1, r3]
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1cc>)
 8002918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_ClockConfig+0x1d0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fd44 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000
 8002934:	40021000 	.word	0x40021000
 8002938:	08003c80 	.word	0x08003c80
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b490      	push	{r4, r7}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800294a:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800294c:	1d3c      	adds	r4, r7, #4
 800294e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002954:	f240 2301 	movw	r3, #513	; 0x201
 8002958:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b04      	cmp	r3, #4
 800297c:	d002      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x40>
 800297e:	2b08      	cmp	r3, #8
 8002980:	d003      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x46>
 8002982:	e02b      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002986:	623b      	str	r3, [r7, #32]
      break;
 8002988:	e02b      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	0c9b      	lsrs	r3, r3, #18
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3328      	adds	r3, #40	; 0x28
 8002994:	443b      	add	r3, r7
 8002996:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800299a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d012      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	0c5b      	lsrs	r3, r3, #17
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	3328      	adds	r3, #40	; 0x28
 80029b2:	443b      	add	r3, r7
 80029b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029be:	fb03 f202 	mul.w	r2, r3, r2
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ca:	e004      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	623b      	str	r3, [r7, #32]
      break;
 80029da:	e002      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029de:	623b      	str	r3, [r7, #32]
      break;
 80029e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e2:	6a3b      	ldr	r3, [r7, #32]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3728      	adds	r7, #40	; 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc90      	pop	{r4, r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	08003c60 	.word	0x08003c60
 80029f4:	40021000 	.word	0x40021000
 80029f8:	007a1200 	.word	0x007a1200
 80029fc:	003d0900 	.word	0x003d0900

08002a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20000000 	.word	0x20000000

08002a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a18:	f7ff fff2 	bl	8002a00 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	0adb      	lsrs	r3, r3, #11
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4903      	ldr	r1, [pc, #12]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08003c90 	.word	0x08003c90

08002a3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <RCC_Delay+0x34>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <RCC_Delay+0x38>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0a5b      	lsrs	r3, r3, #9
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a58:	bf00      	nop
  }
  while (Delay --);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1e5a      	subs	r2, r3, #1
 8002a5e:	60fa      	str	r2, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f9      	bne.n	8002a58 <RCC_Delay+0x1c>
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000000 	.word	0x20000000
 8002a74:	10624dd3 	.word	0x10624dd3

08002a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d07d      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a98:	4b4f      	ldr	r3, [pc, #316]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10d      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa4:	4b4c      	ldr	r3, [pc, #304]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	4a4b      	ldr	r2, [pc, #300]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aae:	61d3      	str	r3, [r2, #28]
 8002ab0:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002abc:	2301      	movs	r3, #1
 8002abe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	4b46      	ldr	r3, [pc, #280]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d118      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002acc:	4b43      	ldr	r3, [pc, #268]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a42      	ldr	r2, [pc, #264]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fcaa 	bl	8001430 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	e008      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae0:	f7fe fca6 	bl	8001430 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e06d      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002afe:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d02e      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d027      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b1c:	4b2e      	ldr	r3, [pc, #184]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b26:	4b2e      	ldr	r3, [pc, #184]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b2c:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b32:	4a29      	ldr	r2, [pc, #164]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d014      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe fc75 	bl	8001430 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fc71 	bl	8001430 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e036      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0ee      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4917      	ldr	r1, [pc, #92]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	490b      	ldr	r1, [pc, #44]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4904      	ldr	r1, [pc, #16]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	42420440 	.word	0x42420440

08002be4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b08d      	sub	sp, #52	; 0x34
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bec:	4b58      	ldr	r3, [pc, #352]	; (8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002bee:	f107 040c 	add.w	r4, r7, #12
 8002bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bf8:	f240 2301 	movw	r3, #513	; 0x201
 8002bfc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
 8002c02:	2300      	movs	r3, #0
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	f200 808e 	bhi.w	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d049      	beq.n	8002cba <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d079      	beq.n	8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002c2c:	e086      	b.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002c2e:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c34:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d07f      	beq.n	8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	0c9b      	lsrs	r3, r3, #18
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	3330      	adds	r3, #48	; 0x30
 8002c4a:	443b      	add	r3, r7
 8002c4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c50:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d017      	beq.n	8002c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c5c:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0c5b      	lsrs	r3, r3, #17
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	3330      	adds	r3, #48	; 0x30
 8002c68:	443b      	add	r3, r7
 8002c6a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c7a:	4a37      	ldr	r2, [pc, #220]	; (8002d58 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c8a:	e004      	b.n	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	4a33      	ldr	r2, [pc, #204]	; (8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca2:	d102      	bne.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ca8:	e04a      	b.n	8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4a2c      	ldr	r2, [pc, #176]	; (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002cb8:	e042      	b.n	8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cca:	d108      	bne.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cdc:	e01f      	b.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002cf6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfc:	e00f      	b.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d08:	d11c      	bne.n	8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002d16:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d1c:	e012      	b.n	8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002d1e:	e011      	b.n	8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d20:	f7ff fe78 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	0b9b      	lsrs	r3, r3, #14
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	3301      	adds	r3, #1
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d3a:	e004      	b.n	8002d46 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002d3c:	bf00      	nop
 8002d3e:	e002      	b.n	8002d46 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002d40:	bf00      	nop
 8002d42:	e000      	b.n	8002d46 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002d44:	bf00      	nop
    }
  }
  return (frequency);
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3734      	adds	r7, #52	; 0x34
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd90      	pop	{r4, r7, pc}
 8002d50:	08003c70 	.word	0x08003c70
 8002d54:	40021000 	.word	0x40021000
 8002d58:	007a1200 	.word	0x007a1200
 8002d5c:	003d0900 	.word	0x003d0900
 8002d60:	aaaaaaab 	.word	0xaaaaaaab

08002d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e041      	b.n	8002dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe fa4e 	bl	800122c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f000 f93c 	bl	8003020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d001      	beq.n	8002e1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e032      	b.n	8002e82 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <HAL_TIM_Base_Start+0x88>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_TIM_Base_Start+0x48>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e36:	d009      	beq.n	8002e4c <HAL_TIM_Base_Start+0x48>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_TIM_Base_Start+0x8c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_TIM_Base_Start+0x48>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <HAL_TIM_Base_Start+0x90>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d111      	bne.n	8002e70 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d010      	beq.n	8002e80 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6e:	e007      	b.n	8002e80 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	40012c00 	.word	0x40012c00
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800

08002e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_TIM_ConfigClockSource+0x18>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e0b3      	b.n	8003018 <HAL_TIM_ConfigClockSource+0x180>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee8:	d03e      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0xd0>
 8002eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eee:	f200 8087 	bhi.w	8003000 <HAL_TIM_ConfigClockSource+0x168>
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef6:	f000 8085 	beq.w	8003004 <HAL_TIM_ConfigClockSource+0x16c>
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efe:	d87f      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x168>
 8002f00:	2b70      	cmp	r3, #112	; 0x70
 8002f02:	d01a      	beq.n	8002f3a <HAL_TIM_ConfigClockSource+0xa2>
 8002f04:	2b70      	cmp	r3, #112	; 0x70
 8002f06:	d87b      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x168>
 8002f08:	2b60      	cmp	r3, #96	; 0x60
 8002f0a:	d050      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0x116>
 8002f0c:	2b60      	cmp	r3, #96	; 0x60
 8002f0e:	d877      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x168>
 8002f10:	2b50      	cmp	r3, #80	; 0x50
 8002f12:	d03c      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0xf6>
 8002f14:	2b50      	cmp	r3, #80	; 0x50
 8002f16:	d873      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x168>
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d058      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x136>
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d86f      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x168>
 8002f20:	2b30      	cmp	r3, #48	; 0x30
 8002f22:	d064      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x156>
 8002f24:	2b30      	cmp	r3, #48	; 0x30
 8002f26:	d86b      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x168>
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d060      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x156>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d867      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x168>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d05c      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x156>
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d05a      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f38:	e062      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f000 f942 	bl	80031d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	609a      	str	r2, [r3, #8]
      break;
 8002f66:	e04e      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f000 f92b 	bl	80031d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8a:	609a      	str	r2, [r3, #8]
      break;
 8002f8c:	e03b      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f000 f8a2 	bl	80030e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2150      	movs	r1, #80	; 0x50
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f8f9 	bl	800319e <TIM_ITRx_SetConfig>
      break;
 8002fac:	e02b      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f000 f8c0 	bl	8003140 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2160      	movs	r1, #96	; 0x60
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f8e9 	bl	800319e <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e01b      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f000 f882 	bl	80030e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2140      	movs	r1, #64	; 0x40
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f8d9 	bl	800319e <TIM_ITRx_SetConfig>
      break;
 8002fec:	e00b      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f000 f8d0 	bl	800319e <TIM_ITRx_SetConfig>
        break;
 8002ffe:	e002      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003000:	bf00      	nop
 8003002:	e000      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003004:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a29      	ldr	r2, [pc, #164]	; (80030d8 <TIM_Base_SetConfig+0xb8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00b      	beq.n	8003050 <TIM_Base_SetConfig+0x30>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303e:	d007      	beq.n	8003050 <TIM_Base_SetConfig+0x30>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a26      	ldr	r2, [pc, #152]	; (80030dc <TIM_Base_SetConfig+0xbc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_Base_SetConfig+0x30>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a25      	ldr	r2, [pc, #148]	; (80030e0 <TIM_Base_SetConfig+0xc0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d108      	bne.n	8003062 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <TIM_Base_SetConfig+0xb8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00b      	beq.n	8003082 <TIM_Base_SetConfig+0x62>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003070:	d007      	beq.n	8003082 <TIM_Base_SetConfig+0x62>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a19      	ldr	r2, [pc, #100]	; (80030dc <TIM_Base_SetConfig+0xbc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d003      	beq.n	8003082 <TIM_Base_SetConfig+0x62>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <TIM_Base_SetConfig+0xc0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d108      	bne.n	8003094 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <TIM_Base_SetConfig+0xb8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d103      	bne.n	80030c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	615a      	str	r2, [r3, #20]
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800

080030e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f023 0201 	bic.w	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800310e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f023 030a 	bic.w	r3, r3, #10
 8003120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f023 0210 	bic.w	r2, r3, #16
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800316a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	031b      	lsls	r3, r3, #12
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800317c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	621a      	str	r2, [r3, #32]
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f043 0307 	orr.w	r3, r3, #7
 80031c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b087      	sub	sp, #28
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	021a      	lsls	r2, r3, #8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	609a      	str	r2, [r3, #8]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003224:	2302      	movs	r3, #2
 8003226:	e046      	b.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00e      	beq.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003274:	d009      	beq.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10c      	bne.n	80032a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4313      	orrs	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800

080032cc <__errno>:
 80032cc:	4b01      	ldr	r3, [pc, #4]	; (80032d4 <__errno+0x8>)
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	2000000c 	.word	0x2000000c

080032d8 <__libc_init_array>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	2600      	movs	r6, #0
 80032dc:	4d0c      	ldr	r5, [pc, #48]	; (8003310 <__libc_init_array+0x38>)
 80032de:	4c0d      	ldr	r4, [pc, #52]	; (8003314 <__libc_init_array+0x3c>)
 80032e0:	1b64      	subs	r4, r4, r5
 80032e2:	10a4      	asrs	r4, r4, #2
 80032e4:	42a6      	cmp	r6, r4
 80032e6:	d109      	bne.n	80032fc <__libc_init_array+0x24>
 80032e8:	f000 fc9c 	bl	8003c24 <_init>
 80032ec:	2600      	movs	r6, #0
 80032ee:	4d0a      	ldr	r5, [pc, #40]	; (8003318 <__libc_init_array+0x40>)
 80032f0:	4c0a      	ldr	r4, [pc, #40]	; (800331c <__libc_init_array+0x44>)
 80032f2:	1b64      	subs	r4, r4, r5
 80032f4:	10a4      	asrs	r4, r4, #2
 80032f6:	42a6      	cmp	r6, r4
 80032f8:	d105      	bne.n	8003306 <__libc_init_array+0x2e>
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003300:	4798      	blx	r3
 8003302:	3601      	adds	r6, #1
 8003304:	e7ee      	b.n	80032e4 <__libc_init_array+0xc>
 8003306:	f855 3b04 	ldr.w	r3, [r5], #4
 800330a:	4798      	blx	r3
 800330c:	3601      	adds	r6, #1
 800330e:	e7f2      	b.n	80032f6 <__libc_init_array+0x1e>
 8003310:	08003ccc 	.word	0x08003ccc
 8003314:	08003ccc 	.word	0x08003ccc
 8003318:	08003ccc 	.word	0x08003ccc
 800331c:	08003cd0 	.word	0x08003cd0

08003320 <memset>:
 8003320:	4603      	mov	r3, r0
 8003322:	4402      	add	r2, r0
 8003324:	4293      	cmp	r3, r2
 8003326:	d100      	bne.n	800332a <memset+0xa>
 8003328:	4770      	bx	lr
 800332a:	f803 1b01 	strb.w	r1, [r3], #1
 800332e:	e7f9      	b.n	8003324 <memset+0x4>

08003330 <siprintf>:
 8003330:	b40e      	push	{r1, r2, r3}
 8003332:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003336:	b500      	push	{lr}
 8003338:	b09c      	sub	sp, #112	; 0x70
 800333a:	ab1d      	add	r3, sp, #116	; 0x74
 800333c:	9002      	str	r0, [sp, #8]
 800333e:	9006      	str	r0, [sp, #24]
 8003340:	9107      	str	r1, [sp, #28]
 8003342:	9104      	str	r1, [sp, #16]
 8003344:	4808      	ldr	r0, [pc, #32]	; (8003368 <siprintf+0x38>)
 8003346:	4909      	ldr	r1, [pc, #36]	; (800336c <siprintf+0x3c>)
 8003348:	f853 2b04 	ldr.w	r2, [r3], #4
 800334c:	9105      	str	r1, [sp, #20]
 800334e:	6800      	ldr	r0, [r0, #0]
 8003350:	a902      	add	r1, sp, #8
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	f000 f868 	bl	8003428 <_svfiprintf_r>
 8003358:	2200      	movs	r2, #0
 800335a:	9b02      	ldr	r3, [sp, #8]
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	b01c      	add	sp, #112	; 0x70
 8003360:	f85d eb04 	ldr.w	lr, [sp], #4
 8003364:	b003      	add	sp, #12
 8003366:	4770      	bx	lr
 8003368:	2000000c 	.word	0x2000000c
 800336c:	ffff0208 	.word	0xffff0208

08003370 <__ssputs_r>:
 8003370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003374:	688e      	ldr	r6, [r1, #8]
 8003376:	4682      	mov	sl, r0
 8003378:	429e      	cmp	r6, r3
 800337a:	460c      	mov	r4, r1
 800337c:	4690      	mov	r8, r2
 800337e:	461f      	mov	r7, r3
 8003380:	d838      	bhi.n	80033f4 <__ssputs_r+0x84>
 8003382:	898a      	ldrh	r2, [r1, #12]
 8003384:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003388:	d032      	beq.n	80033f0 <__ssputs_r+0x80>
 800338a:	6825      	ldr	r5, [r4, #0]
 800338c:	6909      	ldr	r1, [r1, #16]
 800338e:	3301      	adds	r3, #1
 8003390:	eba5 0901 	sub.w	r9, r5, r1
 8003394:	6965      	ldr	r5, [r4, #20]
 8003396:	444b      	add	r3, r9
 8003398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800339c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033a0:	106d      	asrs	r5, r5, #1
 80033a2:	429d      	cmp	r5, r3
 80033a4:	bf38      	it	cc
 80033a6:	461d      	movcc	r5, r3
 80033a8:	0553      	lsls	r3, r2, #21
 80033aa:	d531      	bpl.n	8003410 <__ssputs_r+0xa0>
 80033ac:	4629      	mov	r1, r5
 80033ae:	f000 fb6f 	bl	8003a90 <_malloc_r>
 80033b2:	4606      	mov	r6, r0
 80033b4:	b950      	cbnz	r0, 80033cc <__ssputs_r+0x5c>
 80033b6:	230c      	movs	r3, #12
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	f8ca 3000 	str.w	r3, [sl]
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c6:	81a3      	strh	r3, [r4, #12]
 80033c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033cc:	464a      	mov	r2, r9
 80033ce:	6921      	ldr	r1, [r4, #16]
 80033d0:	f000 face 	bl	8003970 <memcpy>
 80033d4:	89a3      	ldrh	r3, [r4, #12]
 80033d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033de:	81a3      	strh	r3, [r4, #12]
 80033e0:	6126      	str	r6, [r4, #16]
 80033e2:	444e      	add	r6, r9
 80033e4:	6026      	str	r6, [r4, #0]
 80033e6:	463e      	mov	r6, r7
 80033e8:	6165      	str	r5, [r4, #20]
 80033ea:	eba5 0509 	sub.w	r5, r5, r9
 80033ee:	60a5      	str	r5, [r4, #8]
 80033f0:	42be      	cmp	r6, r7
 80033f2:	d900      	bls.n	80033f6 <__ssputs_r+0x86>
 80033f4:	463e      	mov	r6, r7
 80033f6:	4632      	mov	r2, r6
 80033f8:	4641      	mov	r1, r8
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	f000 fac6 	bl	800398c <memmove>
 8003400:	68a3      	ldr	r3, [r4, #8]
 8003402:	2000      	movs	r0, #0
 8003404:	1b9b      	subs	r3, r3, r6
 8003406:	60a3      	str	r3, [r4, #8]
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	4433      	add	r3, r6
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	e7db      	b.n	80033c8 <__ssputs_r+0x58>
 8003410:	462a      	mov	r2, r5
 8003412:	f000 fbb1 	bl	8003b78 <_realloc_r>
 8003416:	4606      	mov	r6, r0
 8003418:	2800      	cmp	r0, #0
 800341a:	d1e1      	bne.n	80033e0 <__ssputs_r+0x70>
 800341c:	4650      	mov	r0, sl
 800341e:	6921      	ldr	r1, [r4, #16]
 8003420:	f000 face 	bl	80039c0 <_free_r>
 8003424:	e7c7      	b.n	80033b6 <__ssputs_r+0x46>
	...

08003428 <_svfiprintf_r>:
 8003428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800342c:	4698      	mov	r8, r3
 800342e:	898b      	ldrh	r3, [r1, #12]
 8003430:	4607      	mov	r7, r0
 8003432:	061b      	lsls	r3, r3, #24
 8003434:	460d      	mov	r5, r1
 8003436:	4614      	mov	r4, r2
 8003438:	b09d      	sub	sp, #116	; 0x74
 800343a:	d50e      	bpl.n	800345a <_svfiprintf_r+0x32>
 800343c:	690b      	ldr	r3, [r1, #16]
 800343e:	b963      	cbnz	r3, 800345a <_svfiprintf_r+0x32>
 8003440:	2140      	movs	r1, #64	; 0x40
 8003442:	f000 fb25 	bl	8003a90 <_malloc_r>
 8003446:	6028      	str	r0, [r5, #0]
 8003448:	6128      	str	r0, [r5, #16]
 800344a:	b920      	cbnz	r0, 8003456 <_svfiprintf_r+0x2e>
 800344c:	230c      	movs	r3, #12
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	f04f 30ff 	mov.w	r0, #4294967295
 8003454:	e0d1      	b.n	80035fa <_svfiprintf_r+0x1d2>
 8003456:	2340      	movs	r3, #64	; 0x40
 8003458:	616b      	str	r3, [r5, #20]
 800345a:	2300      	movs	r3, #0
 800345c:	9309      	str	r3, [sp, #36]	; 0x24
 800345e:	2320      	movs	r3, #32
 8003460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003464:	2330      	movs	r3, #48	; 0x30
 8003466:	f04f 0901 	mov.w	r9, #1
 800346a:	f8cd 800c 	str.w	r8, [sp, #12]
 800346e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003614 <_svfiprintf_r+0x1ec>
 8003472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003476:	4623      	mov	r3, r4
 8003478:	469a      	mov	sl, r3
 800347a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800347e:	b10a      	cbz	r2, 8003484 <_svfiprintf_r+0x5c>
 8003480:	2a25      	cmp	r2, #37	; 0x25
 8003482:	d1f9      	bne.n	8003478 <_svfiprintf_r+0x50>
 8003484:	ebba 0b04 	subs.w	fp, sl, r4
 8003488:	d00b      	beq.n	80034a2 <_svfiprintf_r+0x7a>
 800348a:	465b      	mov	r3, fp
 800348c:	4622      	mov	r2, r4
 800348e:	4629      	mov	r1, r5
 8003490:	4638      	mov	r0, r7
 8003492:	f7ff ff6d 	bl	8003370 <__ssputs_r>
 8003496:	3001      	adds	r0, #1
 8003498:	f000 80aa 	beq.w	80035f0 <_svfiprintf_r+0x1c8>
 800349c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800349e:	445a      	add	r2, fp
 80034a0:	9209      	str	r2, [sp, #36]	; 0x24
 80034a2:	f89a 3000 	ldrb.w	r3, [sl]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80a2 	beq.w	80035f0 <_svfiprintf_r+0x1c8>
 80034ac:	2300      	movs	r3, #0
 80034ae:	f04f 32ff 	mov.w	r2, #4294967295
 80034b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034b6:	f10a 0a01 	add.w	sl, sl, #1
 80034ba:	9304      	str	r3, [sp, #16]
 80034bc:	9307      	str	r3, [sp, #28]
 80034be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034c2:	931a      	str	r3, [sp, #104]	; 0x68
 80034c4:	4654      	mov	r4, sl
 80034c6:	2205      	movs	r2, #5
 80034c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034cc:	4851      	ldr	r0, [pc, #324]	; (8003614 <_svfiprintf_r+0x1ec>)
 80034ce:	f000 fa41 	bl	8003954 <memchr>
 80034d2:	9a04      	ldr	r2, [sp, #16]
 80034d4:	b9d8      	cbnz	r0, 800350e <_svfiprintf_r+0xe6>
 80034d6:	06d0      	lsls	r0, r2, #27
 80034d8:	bf44      	itt	mi
 80034da:	2320      	movmi	r3, #32
 80034dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034e0:	0711      	lsls	r1, r2, #28
 80034e2:	bf44      	itt	mi
 80034e4:	232b      	movmi	r3, #43	; 0x2b
 80034e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ea:	f89a 3000 	ldrb.w	r3, [sl]
 80034ee:	2b2a      	cmp	r3, #42	; 0x2a
 80034f0:	d015      	beq.n	800351e <_svfiprintf_r+0xf6>
 80034f2:	4654      	mov	r4, sl
 80034f4:	2000      	movs	r0, #0
 80034f6:	f04f 0c0a 	mov.w	ip, #10
 80034fa:	9a07      	ldr	r2, [sp, #28]
 80034fc:	4621      	mov	r1, r4
 80034fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003502:	3b30      	subs	r3, #48	; 0x30
 8003504:	2b09      	cmp	r3, #9
 8003506:	d94e      	bls.n	80035a6 <_svfiprintf_r+0x17e>
 8003508:	b1b0      	cbz	r0, 8003538 <_svfiprintf_r+0x110>
 800350a:	9207      	str	r2, [sp, #28]
 800350c:	e014      	b.n	8003538 <_svfiprintf_r+0x110>
 800350e:	eba0 0308 	sub.w	r3, r0, r8
 8003512:	fa09 f303 	lsl.w	r3, r9, r3
 8003516:	4313      	orrs	r3, r2
 8003518:	46a2      	mov	sl, r4
 800351a:	9304      	str	r3, [sp, #16]
 800351c:	e7d2      	b.n	80034c4 <_svfiprintf_r+0x9c>
 800351e:	9b03      	ldr	r3, [sp, #12]
 8003520:	1d19      	adds	r1, r3, #4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	9103      	str	r1, [sp, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	bfbb      	ittet	lt
 800352a:	425b      	neglt	r3, r3
 800352c:	f042 0202 	orrlt.w	r2, r2, #2
 8003530:	9307      	strge	r3, [sp, #28]
 8003532:	9307      	strlt	r3, [sp, #28]
 8003534:	bfb8      	it	lt
 8003536:	9204      	strlt	r2, [sp, #16]
 8003538:	7823      	ldrb	r3, [r4, #0]
 800353a:	2b2e      	cmp	r3, #46	; 0x2e
 800353c:	d10c      	bne.n	8003558 <_svfiprintf_r+0x130>
 800353e:	7863      	ldrb	r3, [r4, #1]
 8003540:	2b2a      	cmp	r3, #42	; 0x2a
 8003542:	d135      	bne.n	80035b0 <_svfiprintf_r+0x188>
 8003544:	9b03      	ldr	r3, [sp, #12]
 8003546:	3402      	adds	r4, #2
 8003548:	1d1a      	adds	r2, r3, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	9203      	str	r2, [sp, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	bfb8      	it	lt
 8003552:	f04f 33ff 	movlt.w	r3, #4294967295
 8003556:	9305      	str	r3, [sp, #20]
 8003558:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003618 <_svfiprintf_r+0x1f0>
 800355c:	2203      	movs	r2, #3
 800355e:	4650      	mov	r0, sl
 8003560:	7821      	ldrb	r1, [r4, #0]
 8003562:	f000 f9f7 	bl	8003954 <memchr>
 8003566:	b140      	cbz	r0, 800357a <_svfiprintf_r+0x152>
 8003568:	2340      	movs	r3, #64	; 0x40
 800356a:	eba0 000a 	sub.w	r0, r0, sl
 800356e:	fa03 f000 	lsl.w	r0, r3, r0
 8003572:	9b04      	ldr	r3, [sp, #16]
 8003574:	3401      	adds	r4, #1
 8003576:	4303      	orrs	r3, r0
 8003578:	9304      	str	r3, [sp, #16]
 800357a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800357e:	2206      	movs	r2, #6
 8003580:	4826      	ldr	r0, [pc, #152]	; (800361c <_svfiprintf_r+0x1f4>)
 8003582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003586:	f000 f9e5 	bl	8003954 <memchr>
 800358a:	2800      	cmp	r0, #0
 800358c:	d038      	beq.n	8003600 <_svfiprintf_r+0x1d8>
 800358e:	4b24      	ldr	r3, [pc, #144]	; (8003620 <_svfiprintf_r+0x1f8>)
 8003590:	bb1b      	cbnz	r3, 80035da <_svfiprintf_r+0x1b2>
 8003592:	9b03      	ldr	r3, [sp, #12]
 8003594:	3307      	adds	r3, #7
 8003596:	f023 0307 	bic.w	r3, r3, #7
 800359a:	3308      	adds	r3, #8
 800359c:	9303      	str	r3, [sp, #12]
 800359e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035a0:	4433      	add	r3, r6
 80035a2:	9309      	str	r3, [sp, #36]	; 0x24
 80035a4:	e767      	b.n	8003476 <_svfiprintf_r+0x4e>
 80035a6:	460c      	mov	r4, r1
 80035a8:	2001      	movs	r0, #1
 80035aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80035ae:	e7a5      	b.n	80034fc <_svfiprintf_r+0xd4>
 80035b0:	2300      	movs	r3, #0
 80035b2:	f04f 0c0a 	mov.w	ip, #10
 80035b6:	4619      	mov	r1, r3
 80035b8:	3401      	adds	r4, #1
 80035ba:	9305      	str	r3, [sp, #20]
 80035bc:	4620      	mov	r0, r4
 80035be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035c2:	3a30      	subs	r2, #48	; 0x30
 80035c4:	2a09      	cmp	r2, #9
 80035c6:	d903      	bls.n	80035d0 <_svfiprintf_r+0x1a8>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0c5      	beq.n	8003558 <_svfiprintf_r+0x130>
 80035cc:	9105      	str	r1, [sp, #20]
 80035ce:	e7c3      	b.n	8003558 <_svfiprintf_r+0x130>
 80035d0:	4604      	mov	r4, r0
 80035d2:	2301      	movs	r3, #1
 80035d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80035d8:	e7f0      	b.n	80035bc <_svfiprintf_r+0x194>
 80035da:	ab03      	add	r3, sp, #12
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	462a      	mov	r2, r5
 80035e0:	4638      	mov	r0, r7
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <_svfiprintf_r+0x1fc>)
 80035e4:	a904      	add	r1, sp, #16
 80035e6:	f3af 8000 	nop.w
 80035ea:	1c42      	adds	r2, r0, #1
 80035ec:	4606      	mov	r6, r0
 80035ee:	d1d6      	bne.n	800359e <_svfiprintf_r+0x176>
 80035f0:	89ab      	ldrh	r3, [r5, #12]
 80035f2:	065b      	lsls	r3, r3, #25
 80035f4:	f53f af2c 	bmi.w	8003450 <_svfiprintf_r+0x28>
 80035f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035fa:	b01d      	add	sp, #116	; 0x74
 80035fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003600:	ab03      	add	r3, sp, #12
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	462a      	mov	r2, r5
 8003606:	4638      	mov	r0, r7
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <_svfiprintf_r+0x1fc>)
 800360a:	a904      	add	r1, sp, #16
 800360c:	f000 f87c 	bl	8003708 <_printf_i>
 8003610:	e7eb      	b.n	80035ea <_svfiprintf_r+0x1c2>
 8003612:	bf00      	nop
 8003614:	08003c98 	.word	0x08003c98
 8003618:	08003c9e 	.word	0x08003c9e
 800361c:	08003ca2 	.word	0x08003ca2
 8003620:	00000000 	.word	0x00000000
 8003624:	08003371 	.word	0x08003371

08003628 <_printf_common>:
 8003628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800362c:	4616      	mov	r6, r2
 800362e:	4699      	mov	r9, r3
 8003630:	688a      	ldr	r2, [r1, #8]
 8003632:	690b      	ldr	r3, [r1, #16]
 8003634:	4607      	mov	r7, r0
 8003636:	4293      	cmp	r3, r2
 8003638:	bfb8      	it	lt
 800363a:	4613      	movlt	r3, r2
 800363c:	6033      	str	r3, [r6, #0]
 800363e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003642:	460c      	mov	r4, r1
 8003644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003648:	b10a      	cbz	r2, 800364e <_printf_common+0x26>
 800364a:	3301      	adds	r3, #1
 800364c:	6033      	str	r3, [r6, #0]
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	0699      	lsls	r1, r3, #26
 8003652:	bf42      	ittt	mi
 8003654:	6833      	ldrmi	r3, [r6, #0]
 8003656:	3302      	addmi	r3, #2
 8003658:	6033      	strmi	r3, [r6, #0]
 800365a:	6825      	ldr	r5, [r4, #0]
 800365c:	f015 0506 	ands.w	r5, r5, #6
 8003660:	d106      	bne.n	8003670 <_printf_common+0x48>
 8003662:	f104 0a19 	add.w	sl, r4, #25
 8003666:	68e3      	ldr	r3, [r4, #12]
 8003668:	6832      	ldr	r2, [r6, #0]
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	42ab      	cmp	r3, r5
 800366e:	dc28      	bgt.n	80036c2 <_printf_common+0x9a>
 8003670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003674:	1e13      	subs	r3, r2, #0
 8003676:	6822      	ldr	r2, [r4, #0]
 8003678:	bf18      	it	ne
 800367a:	2301      	movne	r3, #1
 800367c:	0692      	lsls	r2, r2, #26
 800367e:	d42d      	bmi.n	80036dc <_printf_common+0xb4>
 8003680:	4649      	mov	r1, r9
 8003682:	4638      	mov	r0, r7
 8003684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003688:	47c0      	blx	r8
 800368a:	3001      	adds	r0, #1
 800368c:	d020      	beq.n	80036d0 <_printf_common+0xa8>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	68e5      	ldr	r5, [r4, #12]
 8003692:	f003 0306 	and.w	r3, r3, #6
 8003696:	2b04      	cmp	r3, #4
 8003698:	bf18      	it	ne
 800369a:	2500      	movne	r5, #0
 800369c:	6832      	ldr	r2, [r6, #0]
 800369e:	f04f 0600 	mov.w	r6, #0
 80036a2:	68a3      	ldr	r3, [r4, #8]
 80036a4:	bf08      	it	eq
 80036a6:	1aad      	subeq	r5, r5, r2
 80036a8:	6922      	ldr	r2, [r4, #16]
 80036aa:	bf08      	it	eq
 80036ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036b0:	4293      	cmp	r3, r2
 80036b2:	bfc4      	itt	gt
 80036b4:	1a9b      	subgt	r3, r3, r2
 80036b6:	18ed      	addgt	r5, r5, r3
 80036b8:	341a      	adds	r4, #26
 80036ba:	42b5      	cmp	r5, r6
 80036bc:	d11a      	bne.n	80036f4 <_printf_common+0xcc>
 80036be:	2000      	movs	r0, #0
 80036c0:	e008      	b.n	80036d4 <_printf_common+0xac>
 80036c2:	2301      	movs	r3, #1
 80036c4:	4652      	mov	r2, sl
 80036c6:	4649      	mov	r1, r9
 80036c8:	4638      	mov	r0, r7
 80036ca:	47c0      	blx	r8
 80036cc:	3001      	adds	r0, #1
 80036ce:	d103      	bne.n	80036d8 <_printf_common+0xb0>
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295
 80036d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d8:	3501      	adds	r5, #1
 80036da:	e7c4      	b.n	8003666 <_printf_common+0x3e>
 80036dc:	2030      	movs	r0, #48	; 0x30
 80036de:	18e1      	adds	r1, r4, r3
 80036e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ea:	4422      	add	r2, r4
 80036ec:	3302      	adds	r3, #2
 80036ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036f2:	e7c5      	b.n	8003680 <_printf_common+0x58>
 80036f4:	2301      	movs	r3, #1
 80036f6:	4622      	mov	r2, r4
 80036f8:	4649      	mov	r1, r9
 80036fa:	4638      	mov	r0, r7
 80036fc:	47c0      	blx	r8
 80036fe:	3001      	adds	r0, #1
 8003700:	d0e6      	beq.n	80036d0 <_printf_common+0xa8>
 8003702:	3601      	adds	r6, #1
 8003704:	e7d9      	b.n	80036ba <_printf_common+0x92>
	...

08003708 <_printf_i>:
 8003708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800370c:	7e0f      	ldrb	r7, [r1, #24]
 800370e:	4691      	mov	r9, r2
 8003710:	2f78      	cmp	r7, #120	; 0x78
 8003712:	4680      	mov	r8, r0
 8003714:	460c      	mov	r4, r1
 8003716:	469a      	mov	sl, r3
 8003718:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800371a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800371e:	d807      	bhi.n	8003730 <_printf_i+0x28>
 8003720:	2f62      	cmp	r7, #98	; 0x62
 8003722:	d80a      	bhi.n	800373a <_printf_i+0x32>
 8003724:	2f00      	cmp	r7, #0
 8003726:	f000 80d9 	beq.w	80038dc <_printf_i+0x1d4>
 800372a:	2f58      	cmp	r7, #88	; 0x58
 800372c:	f000 80a4 	beq.w	8003878 <_printf_i+0x170>
 8003730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003738:	e03a      	b.n	80037b0 <_printf_i+0xa8>
 800373a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800373e:	2b15      	cmp	r3, #21
 8003740:	d8f6      	bhi.n	8003730 <_printf_i+0x28>
 8003742:	a101      	add	r1, pc, #4	; (adr r1, 8003748 <_printf_i+0x40>)
 8003744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003748:	080037a1 	.word	0x080037a1
 800374c:	080037b5 	.word	0x080037b5
 8003750:	08003731 	.word	0x08003731
 8003754:	08003731 	.word	0x08003731
 8003758:	08003731 	.word	0x08003731
 800375c:	08003731 	.word	0x08003731
 8003760:	080037b5 	.word	0x080037b5
 8003764:	08003731 	.word	0x08003731
 8003768:	08003731 	.word	0x08003731
 800376c:	08003731 	.word	0x08003731
 8003770:	08003731 	.word	0x08003731
 8003774:	080038c3 	.word	0x080038c3
 8003778:	080037e5 	.word	0x080037e5
 800377c:	080038a5 	.word	0x080038a5
 8003780:	08003731 	.word	0x08003731
 8003784:	08003731 	.word	0x08003731
 8003788:	080038e5 	.word	0x080038e5
 800378c:	08003731 	.word	0x08003731
 8003790:	080037e5 	.word	0x080037e5
 8003794:	08003731 	.word	0x08003731
 8003798:	08003731 	.word	0x08003731
 800379c:	080038ad 	.word	0x080038ad
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	1d1a      	adds	r2, r3, #4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	602a      	str	r2, [r5, #0]
 80037a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0a4      	b.n	80038fe <_printf_i+0x1f6>
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	6829      	ldr	r1, [r5, #0]
 80037b8:	0606      	lsls	r6, r0, #24
 80037ba:	f101 0304 	add.w	r3, r1, #4
 80037be:	d50a      	bpl.n	80037d6 <_printf_i+0xce>
 80037c0:	680e      	ldr	r6, [r1, #0]
 80037c2:	602b      	str	r3, [r5, #0]
 80037c4:	2e00      	cmp	r6, #0
 80037c6:	da03      	bge.n	80037d0 <_printf_i+0xc8>
 80037c8:	232d      	movs	r3, #45	; 0x2d
 80037ca:	4276      	negs	r6, r6
 80037cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037d0:	230a      	movs	r3, #10
 80037d2:	485e      	ldr	r0, [pc, #376]	; (800394c <_printf_i+0x244>)
 80037d4:	e019      	b.n	800380a <_printf_i+0x102>
 80037d6:	680e      	ldr	r6, [r1, #0]
 80037d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037dc:	602b      	str	r3, [r5, #0]
 80037de:	bf18      	it	ne
 80037e0:	b236      	sxthne	r6, r6
 80037e2:	e7ef      	b.n	80037c4 <_printf_i+0xbc>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	6820      	ldr	r0, [r4, #0]
 80037e8:	1d19      	adds	r1, r3, #4
 80037ea:	6029      	str	r1, [r5, #0]
 80037ec:	0601      	lsls	r1, r0, #24
 80037ee:	d501      	bpl.n	80037f4 <_printf_i+0xec>
 80037f0:	681e      	ldr	r6, [r3, #0]
 80037f2:	e002      	b.n	80037fa <_printf_i+0xf2>
 80037f4:	0646      	lsls	r6, r0, #25
 80037f6:	d5fb      	bpl.n	80037f0 <_printf_i+0xe8>
 80037f8:	881e      	ldrh	r6, [r3, #0]
 80037fa:	2f6f      	cmp	r7, #111	; 0x6f
 80037fc:	bf0c      	ite	eq
 80037fe:	2308      	moveq	r3, #8
 8003800:	230a      	movne	r3, #10
 8003802:	4852      	ldr	r0, [pc, #328]	; (800394c <_printf_i+0x244>)
 8003804:	2100      	movs	r1, #0
 8003806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800380a:	6865      	ldr	r5, [r4, #4]
 800380c:	2d00      	cmp	r5, #0
 800380e:	bfa8      	it	ge
 8003810:	6821      	ldrge	r1, [r4, #0]
 8003812:	60a5      	str	r5, [r4, #8]
 8003814:	bfa4      	itt	ge
 8003816:	f021 0104 	bicge.w	r1, r1, #4
 800381a:	6021      	strge	r1, [r4, #0]
 800381c:	b90e      	cbnz	r6, 8003822 <_printf_i+0x11a>
 800381e:	2d00      	cmp	r5, #0
 8003820:	d04d      	beq.n	80038be <_printf_i+0x1b6>
 8003822:	4615      	mov	r5, r2
 8003824:	fbb6 f1f3 	udiv	r1, r6, r3
 8003828:	fb03 6711 	mls	r7, r3, r1, r6
 800382c:	5dc7      	ldrb	r7, [r0, r7]
 800382e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003832:	4637      	mov	r7, r6
 8003834:	42bb      	cmp	r3, r7
 8003836:	460e      	mov	r6, r1
 8003838:	d9f4      	bls.n	8003824 <_printf_i+0x11c>
 800383a:	2b08      	cmp	r3, #8
 800383c:	d10b      	bne.n	8003856 <_printf_i+0x14e>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	07de      	lsls	r6, r3, #31
 8003842:	d508      	bpl.n	8003856 <_printf_i+0x14e>
 8003844:	6923      	ldr	r3, [r4, #16]
 8003846:	6861      	ldr	r1, [r4, #4]
 8003848:	4299      	cmp	r1, r3
 800384a:	bfde      	ittt	le
 800384c:	2330      	movle	r3, #48	; 0x30
 800384e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003852:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003856:	1b52      	subs	r2, r2, r5
 8003858:	6122      	str	r2, [r4, #16]
 800385a:	464b      	mov	r3, r9
 800385c:	4621      	mov	r1, r4
 800385e:	4640      	mov	r0, r8
 8003860:	f8cd a000 	str.w	sl, [sp]
 8003864:	aa03      	add	r2, sp, #12
 8003866:	f7ff fedf 	bl	8003628 <_printf_common>
 800386a:	3001      	adds	r0, #1
 800386c:	d14c      	bne.n	8003908 <_printf_i+0x200>
 800386e:	f04f 30ff 	mov.w	r0, #4294967295
 8003872:	b004      	add	sp, #16
 8003874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003878:	4834      	ldr	r0, [pc, #208]	; (800394c <_printf_i+0x244>)
 800387a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800387e:	6829      	ldr	r1, [r5, #0]
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	f851 6b04 	ldr.w	r6, [r1], #4
 8003886:	6029      	str	r1, [r5, #0]
 8003888:	061d      	lsls	r5, r3, #24
 800388a:	d514      	bpl.n	80038b6 <_printf_i+0x1ae>
 800388c:	07df      	lsls	r7, r3, #31
 800388e:	bf44      	itt	mi
 8003890:	f043 0320 	orrmi.w	r3, r3, #32
 8003894:	6023      	strmi	r3, [r4, #0]
 8003896:	b91e      	cbnz	r6, 80038a0 <_printf_i+0x198>
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	f023 0320 	bic.w	r3, r3, #32
 800389e:	6023      	str	r3, [r4, #0]
 80038a0:	2310      	movs	r3, #16
 80038a2:	e7af      	b.n	8003804 <_printf_i+0xfc>
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	f043 0320 	orr.w	r3, r3, #32
 80038aa:	6023      	str	r3, [r4, #0]
 80038ac:	2378      	movs	r3, #120	; 0x78
 80038ae:	4828      	ldr	r0, [pc, #160]	; (8003950 <_printf_i+0x248>)
 80038b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038b4:	e7e3      	b.n	800387e <_printf_i+0x176>
 80038b6:	0659      	lsls	r1, r3, #25
 80038b8:	bf48      	it	mi
 80038ba:	b2b6      	uxthmi	r6, r6
 80038bc:	e7e6      	b.n	800388c <_printf_i+0x184>
 80038be:	4615      	mov	r5, r2
 80038c0:	e7bb      	b.n	800383a <_printf_i+0x132>
 80038c2:	682b      	ldr	r3, [r5, #0]
 80038c4:	6826      	ldr	r6, [r4, #0]
 80038c6:	1d18      	adds	r0, r3, #4
 80038c8:	6961      	ldr	r1, [r4, #20]
 80038ca:	6028      	str	r0, [r5, #0]
 80038cc:	0635      	lsls	r5, r6, #24
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	d501      	bpl.n	80038d6 <_printf_i+0x1ce>
 80038d2:	6019      	str	r1, [r3, #0]
 80038d4:	e002      	b.n	80038dc <_printf_i+0x1d4>
 80038d6:	0670      	lsls	r0, r6, #25
 80038d8:	d5fb      	bpl.n	80038d2 <_printf_i+0x1ca>
 80038da:	8019      	strh	r1, [r3, #0]
 80038dc:	2300      	movs	r3, #0
 80038de:	4615      	mov	r5, r2
 80038e0:	6123      	str	r3, [r4, #16]
 80038e2:	e7ba      	b.n	800385a <_printf_i+0x152>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	2100      	movs	r1, #0
 80038e8:	1d1a      	adds	r2, r3, #4
 80038ea:	602a      	str	r2, [r5, #0]
 80038ec:	681d      	ldr	r5, [r3, #0]
 80038ee:	6862      	ldr	r2, [r4, #4]
 80038f0:	4628      	mov	r0, r5
 80038f2:	f000 f82f 	bl	8003954 <memchr>
 80038f6:	b108      	cbz	r0, 80038fc <_printf_i+0x1f4>
 80038f8:	1b40      	subs	r0, r0, r5
 80038fa:	6060      	str	r0, [r4, #4]
 80038fc:	6863      	ldr	r3, [r4, #4]
 80038fe:	6123      	str	r3, [r4, #16]
 8003900:	2300      	movs	r3, #0
 8003902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003906:	e7a8      	b.n	800385a <_printf_i+0x152>
 8003908:	462a      	mov	r2, r5
 800390a:	4649      	mov	r1, r9
 800390c:	4640      	mov	r0, r8
 800390e:	6923      	ldr	r3, [r4, #16]
 8003910:	47d0      	blx	sl
 8003912:	3001      	adds	r0, #1
 8003914:	d0ab      	beq.n	800386e <_printf_i+0x166>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	079b      	lsls	r3, r3, #30
 800391a:	d413      	bmi.n	8003944 <_printf_i+0x23c>
 800391c:	68e0      	ldr	r0, [r4, #12]
 800391e:	9b03      	ldr	r3, [sp, #12]
 8003920:	4298      	cmp	r0, r3
 8003922:	bfb8      	it	lt
 8003924:	4618      	movlt	r0, r3
 8003926:	e7a4      	b.n	8003872 <_printf_i+0x16a>
 8003928:	2301      	movs	r3, #1
 800392a:	4632      	mov	r2, r6
 800392c:	4649      	mov	r1, r9
 800392e:	4640      	mov	r0, r8
 8003930:	47d0      	blx	sl
 8003932:	3001      	adds	r0, #1
 8003934:	d09b      	beq.n	800386e <_printf_i+0x166>
 8003936:	3501      	adds	r5, #1
 8003938:	68e3      	ldr	r3, [r4, #12]
 800393a:	9903      	ldr	r1, [sp, #12]
 800393c:	1a5b      	subs	r3, r3, r1
 800393e:	42ab      	cmp	r3, r5
 8003940:	dcf2      	bgt.n	8003928 <_printf_i+0x220>
 8003942:	e7eb      	b.n	800391c <_printf_i+0x214>
 8003944:	2500      	movs	r5, #0
 8003946:	f104 0619 	add.w	r6, r4, #25
 800394a:	e7f5      	b.n	8003938 <_printf_i+0x230>
 800394c:	08003ca9 	.word	0x08003ca9
 8003950:	08003cba 	.word	0x08003cba

08003954 <memchr>:
 8003954:	4603      	mov	r3, r0
 8003956:	b510      	push	{r4, lr}
 8003958:	b2c9      	uxtb	r1, r1
 800395a:	4402      	add	r2, r0
 800395c:	4293      	cmp	r3, r2
 800395e:	4618      	mov	r0, r3
 8003960:	d101      	bne.n	8003966 <memchr+0x12>
 8003962:	2000      	movs	r0, #0
 8003964:	e003      	b.n	800396e <memchr+0x1a>
 8003966:	7804      	ldrb	r4, [r0, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	428c      	cmp	r4, r1
 800396c:	d1f6      	bne.n	800395c <memchr+0x8>
 800396e:	bd10      	pop	{r4, pc}

08003970 <memcpy>:
 8003970:	440a      	add	r2, r1
 8003972:	4291      	cmp	r1, r2
 8003974:	f100 33ff 	add.w	r3, r0, #4294967295
 8003978:	d100      	bne.n	800397c <memcpy+0xc>
 800397a:	4770      	bx	lr
 800397c:	b510      	push	{r4, lr}
 800397e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003982:	4291      	cmp	r1, r2
 8003984:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003988:	d1f9      	bne.n	800397e <memcpy+0xe>
 800398a:	bd10      	pop	{r4, pc}

0800398c <memmove>:
 800398c:	4288      	cmp	r0, r1
 800398e:	b510      	push	{r4, lr}
 8003990:	eb01 0402 	add.w	r4, r1, r2
 8003994:	d902      	bls.n	800399c <memmove+0x10>
 8003996:	4284      	cmp	r4, r0
 8003998:	4623      	mov	r3, r4
 800399a:	d807      	bhi.n	80039ac <memmove+0x20>
 800399c:	1e43      	subs	r3, r0, #1
 800399e:	42a1      	cmp	r1, r4
 80039a0:	d008      	beq.n	80039b4 <memmove+0x28>
 80039a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039aa:	e7f8      	b.n	800399e <memmove+0x12>
 80039ac:	4601      	mov	r1, r0
 80039ae:	4402      	add	r2, r0
 80039b0:	428a      	cmp	r2, r1
 80039b2:	d100      	bne.n	80039b6 <memmove+0x2a>
 80039b4:	bd10      	pop	{r4, pc}
 80039b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039be:	e7f7      	b.n	80039b0 <memmove+0x24>

080039c0 <_free_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4605      	mov	r5, r0
 80039c4:	2900      	cmp	r1, #0
 80039c6:	d040      	beq.n	8003a4a <_free_r+0x8a>
 80039c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039cc:	1f0c      	subs	r4, r1, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfb8      	it	lt
 80039d2:	18e4      	addlt	r4, r4, r3
 80039d4:	f000 f910 	bl	8003bf8 <__malloc_lock>
 80039d8:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <_free_r+0x8c>)
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	b933      	cbnz	r3, 80039ec <_free_r+0x2c>
 80039de:	6063      	str	r3, [r4, #4]
 80039e0:	6014      	str	r4, [r2, #0]
 80039e2:	4628      	mov	r0, r5
 80039e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039e8:	f000 b90c 	b.w	8003c04 <__malloc_unlock>
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	d908      	bls.n	8003a02 <_free_r+0x42>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	1821      	adds	r1, r4, r0
 80039f4:	428b      	cmp	r3, r1
 80039f6:	bf01      	itttt	eq
 80039f8:	6819      	ldreq	r1, [r3, #0]
 80039fa:	685b      	ldreq	r3, [r3, #4]
 80039fc:	1809      	addeq	r1, r1, r0
 80039fe:	6021      	streq	r1, [r4, #0]
 8003a00:	e7ed      	b.n	80039de <_free_r+0x1e>
 8003a02:	461a      	mov	r2, r3
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	b10b      	cbz	r3, 8003a0c <_free_r+0x4c>
 8003a08:	42a3      	cmp	r3, r4
 8003a0a:	d9fa      	bls.n	8003a02 <_free_r+0x42>
 8003a0c:	6811      	ldr	r1, [r2, #0]
 8003a0e:	1850      	adds	r0, r2, r1
 8003a10:	42a0      	cmp	r0, r4
 8003a12:	d10b      	bne.n	8003a2c <_free_r+0x6c>
 8003a14:	6820      	ldr	r0, [r4, #0]
 8003a16:	4401      	add	r1, r0
 8003a18:	1850      	adds	r0, r2, r1
 8003a1a:	4283      	cmp	r3, r0
 8003a1c:	6011      	str	r1, [r2, #0]
 8003a1e:	d1e0      	bne.n	80039e2 <_free_r+0x22>
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4401      	add	r1, r0
 8003a26:	6011      	str	r1, [r2, #0]
 8003a28:	6053      	str	r3, [r2, #4]
 8003a2a:	e7da      	b.n	80039e2 <_free_r+0x22>
 8003a2c:	d902      	bls.n	8003a34 <_free_r+0x74>
 8003a2e:	230c      	movs	r3, #12
 8003a30:	602b      	str	r3, [r5, #0]
 8003a32:	e7d6      	b.n	80039e2 <_free_r+0x22>
 8003a34:	6820      	ldr	r0, [r4, #0]
 8003a36:	1821      	adds	r1, r4, r0
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	bf01      	itttt	eq
 8003a3c:	6819      	ldreq	r1, [r3, #0]
 8003a3e:	685b      	ldreq	r3, [r3, #4]
 8003a40:	1809      	addeq	r1, r1, r0
 8003a42:	6021      	streq	r1, [r4, #0]
 8003a44:	6063      	str	r3, [r4, #4]
 8003a46:	6054      	str	r4, [r2, #4]
 8003a48:	e7cb      	b.n	80039e2 <_free_r+0x22>
 8003a4a:	bd38      	pop	{r3, r4, r5, pc}
 8003a4c:	2000013c 	.word	0x2000013c

08003a50 <sbrk_aligned>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	4e0e      	ldr	r6, [pc, #56]	; (8003a8c <sbrk_aligned+0x3c>)
 8003a54:	460c      	mov	r4, r1
 8003a56:	6831      	ldr	r1, [r6, #0]
 8003a58:	4605      	mov	r5, r0
 8003a5a:	b911      	cbnz	r1, 8003a62 <sbrk_aligned+0x12>
 8003a5c:	f000 f8bc 	bl	8003bd8 <_sbrk_r>
 8003a60:	6030      	str	r0, [r6, #0]
 8003a62:	4621      	mov	r1, r4
 8003a64:	4628      	mov	r0, r5
 8003a66:	f000 f8b7 	bl	8003bd8 <_sbrk_r>
 8003a6a:	1c43      	adds	r3, r0, #1
 8003a6c:	d00a      	beq.n	8003a84 <sbrk_aligned+0x34>
 8003a6e:	1cc4      	adds	r4, r0, #3
 8003a70:	f024 0403 	bic.w	r4, r4, #3
 8003a74:	42a0      	cmp	r0, r4
 8003a76:	d007      	beq.n	8003a88 <sbrk_aligned+0x38>
 8003a78:	1a21      	subs	r1, r4, r0
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f000 f8ac 	bl	8003bd8 <_sbrk_r>
 8003a80:	3001      	adds	r0, #1
 8003a82:	d101      	bne.n	8003a88 <sbrk_aligned+0x38>
 8003a84:	f04f 34ff 	mov.w	r4, #4294967295
 8003a88:	4620      	mov	r0, r4
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	20000140 	.word	0x20000140

08003a90 <_malloc_r>:
 8003a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a94:	1ccd      	adds	r5, r1, #3
 8003a96:	f025 0503 	bic.w	r5, r5, #3
 8003a9a:	3508      	adds	r5, #8
 8003a9c:	2d0c      	cmp	r5, #12
 8003a9e:	bf38      	it	cc
 8003aa0:	250c      	movcc	r5, #12
 8003aa2:	2d00      	cmp	r5, #0
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	db01      	blt.n	8003aac <_malloc_r+0x1c>
 8003aa8:	42a9      	cmp	r1, r5
 8003aaa:	d905      	bls.n	8003ab8 <_malloc_r+0x28>
 8003aac:	230c      	movs	r3, #12
 8003aae:	2600      	movs	r6, #0
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab8:	4e2e      	ldr	r6, [pc, #184]	; (8003b74 <_malloc_r+0xe4>)
 8003aba:	f000 f89d 	bl	8003bf8 <__malloc_lock>
 8003abe:	6833      	ldr	r3, [r6, #0]
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	bb34      	cbnz	r4, 8003b12 <_malloc_r+0x82>
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	f7ff ffc2 	bl	8003a50 <sbrk_aligned>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	4604      	mov	r4, r0
 8003ad0:	d14d      	bne.n	8003b6e <_malloc_r+0xde>
 8003ad2:	6834      	ldr	r4, [r6, #0]
 8003ad4:	4626      	mov	r6, r4
 8003ad6:	2e00      	cmp	r6, #0
 8003ad8:	d140      	bne.n	8003b5c <_malloc_r+0xcc>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	4631      	mov	r1, r6
 8003ade:	4638      	mov	r0, r7
 8003ae0:	eb04 0803 	add.w	r8, r4, r3
 8003ae4:	f000 f878 	bl	8003bd8 <_sbrk_r>
 8003ae8:	4580      	cmp	r8, r0
 8003aea:	d13a      	bne.n	8003b62 <_malloc_r+0xd2>
 8003aec:	6821      	ldr	r1, [r4, #0]
 8003aee:	3503      	adds	r5, #3
 8003af0:	1a6d      	subs	r5, r5, r1
 8003af2:	f025 0503 	bic.w	r5, r5, #3
 8003af6:	3508      	adds	r5, #8
 8003af8:	2d0c      	cmp	r5, #12
 8003afa:	bf38      	it	cc
 8003afc:	250c      	movcc	r5, #12
 8003afe:	4638      	mov	r0, r7
 8003b00:	4629      	mov	r1, r5
 8003b02:	f7ff ffa5 	bl	8003a50 <sbrk_aligned>
 8003b06:	3001      	adds	r0, #1
 8003b08:	d02b      	beq.n	8003b62 <_malloc_r+0xd2>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	442b      	add	r3, r5
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	e00e      	b.n	8003b30 <_malloc_r+0xa0>
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	1b52      	subs	r2, r2, r5
 8003b16:	d41e      	bmi.n	8003b56 <_malloc_r+0xc6>
 8003b18:	2a0b      	cmp	r2, #11
 8003b1a:	d916      	bls.n	8003b4a <_malloc_r+0xba>
 8003b1c:	1961      	adds	r1, r4, r5
 8003b1e:	42a3      	cmp	r3, r4
 8003b20:	6025      	str	r5, [r4, #0]
 8003b22:	bf18      	it	ne
 8003b24:	6059      	strne	r1, [r3, #4]
 8003b26:	6863      	ldr	r3, [r4, #4]
 8003b28:	bf08      	it	eq
 8003b2a:	6031      	streq	r1, [r6, #0]
 8003b2c:	5162      	str	r2, [r4, r5]
 8003b2e:	604b      	str	r3, [r1, #4]
 8003b30:	4638      	mov	r0, r7
 8003b32:	f104 060b 	add.w	r6, r4, #11
 8003b36:	f000 f865 	bl	8003c04 <__malloc_unlock>
 8003b3a:	f026 0607 	bic.w	r6, r6, #7
 8003b3e:	1d23      	adds	r3, r4, #4
 8003b40:	1af2      	subs	r2, r6, r3
 8003b42:	d0b6      	beq.n	8003ab2 <_malloc_r+0x22>
 8003b44:	1b9b      	subs	r3, r3, r6
 8003b46:	50a3      	str	r3, [r4, r2]
 8003b48:	e7b3      	b.n	8003ab2 <_malloc_r+0x22>
 8003b4a:	6862      	ldr	r2, [r4, #4]
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	bf0c      	ite	eq
 8003b50:	6032      	streq	r2, [r6, #0]
 8003b52:	605a      	strne	r2, [r3, #4]
 8003b54:	e7ec      	b.n	8003b30 <_malloc_r+0xa0>
 8003b56:	4623      	mov	r3, r4
 8003b58:	6864      	ldr	r4, [r4, #4]
 8003b5a:	e7b2      	b.n	8003ac2 <_malloc_r+0x32>
 8003b5c:	4634      	mov	r4, r6
 8003b5e:	6876      	ldr	r6, [r6, #4]
 8003b60:	e7b9      	b.n	8003ad6 <_malloc_r+0x46>
 8003b62:	230c      	movs	r3, #12
 8003b64:	4638      	mov	r0, r7
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	f000 f84c 	bl	8003c04 <__malloc_unlock>
 8003b6c:	e7a1      	b.n	8003ab2 <_malloc_r+0x22>
 8003b6e:	6025      	str	r5, [r4, #0]
 8003b70:	e7de      	b.n	8003b30 <_malloc_r+0xa0>
 8003b72:	bf00      	nop
 8003b74:	2000013c 	.word	0x2000013c

08003b78 <_realloc_r>:
 8003b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7c:	4680      	mov	r8, r0
 8003b7e:	4614      	mov	r4, r2
 8003b80:	460e      	mov	r6, r1
 8003b82:	b921      	cbnz	r1, 8003b8e <_realloc_r+0x16>
 8003b84:	4611      	mov	r1, r2
 8003b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b8a:	f7ff bf81 	b.w	8003a90 <_malloc_r>
 8003b8e:	b92a      	cbnz	r2, 8003b9c <_realloc_r+0x24>
 8003b90:	f7ff ff16 	bl	80039c0 <_free_r>
 8003b94:	4625      	mov	r5, r4
 8003b96:	4628      	mov	r0, r5
 8003b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b9c:	f000 f838 	bl	8003c10 <_malloc_usable_size_r>
 8003ba0:	4284      	cmp	r4, r0
 8003ba2:	4607      	mov	r7, r0
 8003ba4:	d802      	bhi.n	8003bac <_realloc_r+0x34>
 8003ba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003baa:	d812      	bhi.n	8003bd2 <_realloc_r+0x5a>
 8003bac:	4621      	mov	r1, r4
 8003bae:	4640      	mov	r0, r8
 8003bb0:	f7ff ff6e 	bl	8003a90 <_malloc_r>
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d0ed      	beq.n	8003b96 <_realloc_r+0x1e>
 8003bba:	42bc      	cmp	r4, r7
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	bf28      	it	cs
 8003bc2:	463a      	movcs	r2, r7
 8003bc4:	f7ff fed4 	bl	8003970 <memcpy>
 8003bc8:	4631      	mov	r1, r6
 8003bca:	4640      	mov	r0, r8
 8003bcc:	f7ff fef8 	bl	80039c0 <_free_r>
 8003bd0:	e7e1      	b.n	8003b96 <_realloc_r+0x1e>
 8003bd2:	4635      	mov	r5, r6
 8003bd4:	e7df      	b.n	8003b96 <_realloc_r+0x1e>
	...

08003bd8 <_sbrk_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	2300      	movs	r3, #0
 8003bdc:	4d05      	ldr	r5, [pc, #20]	; (8003bf4 <_sbrk_r+0x1c>)
 8003bde:	4604      	mov	r4, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	602b      	str	r3, [r5, #0]
 8003be4:	f7fd fb6a 	bl	80012bc <_sbrk>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d102      	bne.n	8003bf2 <_sbrk_r+0x1a>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	b103      	cbz	r3, 8003bf2 <_sbrk_r+0x1a>
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	20000144 	.word	0x20000144

08003bf8 <__malloc_lock>:
 8003bf8:	4801      	ldr	r0, [pc, #4]	; (8003c00 <__malloc_lock+0x8>)
 8003bfa:	f000 b811 	b.w	8003c20 <__retarget_lock_acquire_recursive>
 8003bfe:	bf00      	nop
 8003c00:	20000148 	.word	0x20000148

08003c04 <__malloc_unlock>:
 8003c04:	4801      	ldr	r0, [pc, #4]	; (8003c0c <__malloc_unlock+0x8>)
 8003c06:	f000 b80c 	b.w	8003c22 <__retarget_lock_release_recursive>
 8003c0a:	bf00      	nop
 8003c0c:	20000148 	.word	0x20000148

08003c10 <_malloc_usable_size_r>:
 8003c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c14:	1f18      	subs	r0, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bfbc      	itt	lt
 8003c1a:	580b      	ldrlt	r3, [r1, r0]
 8003c1c:	18c0      	addlt	r0, r0, r3
 8003c1e:	4770      	bx	lr

08003c20 <__retarget_lock_acquire_recursive>:
 8003c20:	4770      	bx	lr

08003c22 <__retarget_lock_release_recursive>:
 8003c22:	4770      	bx	lr

08003c24 <_init>:
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	bf00      	nop
 8003c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2a:	bc08      	pop	{r3}
 8003c2c:	469e      	mov	lr, r3
 8003c2e:	4770      	bx	lr

08003c30 <_fini>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	bf00      	nop
 8003c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c36:	bc08      	pop	{r3}
 8003c38:	469e      	mov	lr, r3
 8003c3a:	4770      	bx	lr
