
COMPOSTARIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  080071d0  080071d0  000171d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800766c  0800766c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800766c  0800766c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800766c  0800766c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001ec  08007860  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08007860  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca38  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021db  00000000  00000000  0002cc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0002ee28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  0002fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001944e  00000000  00000000  00030960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efd1  00000000  00000000  00049dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b63  00000000  00000000  00058d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e98e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc0  00000000  00000000  000e9934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	080071b8 	.word	0x080071b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	080071b8 	.word	0x080071b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <delay+0x2c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8001076:	bf00      	nop
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <delay+0x2c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	429a      	cmp	r2, r3
 8001082:	d3f9      	bcc.n	8001078 <delay+0x14>
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	20000238 	.word	0x20000238

08001094 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	4820      	ldr	r0, [pc, #128]	; (800112c <send_to_lcd+0x98>)
 80010ac:	f001 ff51 	bl	8002f52 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	2108      	movs	r1, #8
 80010c0:	481a      	ldr	r0, [pc, #104]	; (800112c <send_to_lcd+0x98>)
 80010c2:	f001 ff46 	bl	8002f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	2110      	movs	r1, #16
 80010d6:	4815      	ldr	r0, [pc, #84]	; (800112c <send_to_lcd+0x98>)
 80010d8:	f001 ff3b 	bl	8002f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	085b      	lsrs	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	2120      	movs	r1, #32
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <send_to_lcd+0x98>)
 80010ee:	f001 ff30 	bl	8002f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <send_to_lcd+0x98>)
 8001100:	f001 ff27 	bl	8002f52 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <send_to_lcd+0x98>)
 800110a:	f001 ff22 	bl	8002f52 <HAL_GPIO_WritePin>
	delay (20);
 800110e:	2014      	movs	r0, #20
 8001110:	f7ff ffa8 	bl	8001064 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <send_to_lcd+0x98>)
 800111a:	f001 ff1a 	bl	8002f52 <HAL_GPIO_WritePin>
	delay (20);
 800111e:	2014      	movs	r0, #20
 8001120:	f7ff ffa0 	bl	8001064 <delay>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40010c00 	.word	0x40010c00

08001130 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ffa5 	bl	8001094 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff9c 	bl	8001094 <send_to_lcd>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2101      	movs	r1, #1
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff8b 	bl	8001094 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2101      	movs	r1, #1
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff82 	bl	8001094 <send_to_lcd>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <lcd_clear>:

void lcd_clear (void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff ffc7 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(2);
 80011a2:	2002      	movs	r0, #2
 80011a4:	f000 ffda 	bl	800215c <HAL_Delay>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    switch (row)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <lcd_put_cur+0x18>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d005      	beq.n	80011ce <lcd_put_cur+0x22>
 80011c2:	e009      	b.n	80011d8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ca:	603b      	str	r3, [r7, #0]
            break;
 80011cc:	e004      	b.n	80011d8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011d4:	603b      	str	r3, [r7, #0]
            break;
 80011d6:	bf00      	nop
    }

    lcd_send_cmd (col);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ffa7 	bl	8001130 <lcd_send_cmd>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <lcd_init>:


void lcd_init (void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80011ee:	2032      	movs	r0, #50	; 0x32
 80011f0:	f000 ffb4 	bl	800215c <HAL_Delay>
	lcd_send_cmd (0x30);
 80011f4:	2030      	movs	r0, #48	; 0x30
 80011f6:	f7ff ff9b 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80011fa:	2005      	movs	r0, #5
 80011fc:	f000 ffae 	bl	800215c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001200:	2030      	movs	r0, #48	; 0x30
 8001202:	f7ff ff95 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001206:	2001      	movs	r0, #1
 8001208:	f000 ffa8 	bl	800215c <HAL_Delay>
	lcd_send_cmd (0x30);
 800120c:	2030      	movs	r0, #48	; 0x30
 800120e:	f7ff ff8f 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f000 ffa2 	bl	800215c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001218:	2020      	movs	r0, #32
 800121a:	f7ff ff89 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(10);
 800121e:	200a      	movs	r0, #10
 8001220:	f000 ff9c 	bl	800215c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001224:	2028      	movs	r0, #40	; 0x28
 8001226:	f7ff ff83 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f000 ff96 	bl	800215c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001230:	2008      	movs	r0, #8
 8001232:	f7ff ff7d 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f000 ff90 	bl	800215c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff ff77 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f000 ff8a 	bl	800215c <HAL_Delay>
	HAL_Delay(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f000 ff87 	bl	800215c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800124e:	2006      	movs	r0, #6
 8001250:	f7ff ff6e 	bl	8001130 <lcd_send_cmd>
	HAL_Delay(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f000 ff81 	bl	800215c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800125a:	200c      	movs	r0, #12
 800125c:	f7ff ff68 	bl	8001130 <lcd_send_cmd>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800126c:	e006      	b.n	800127c <lcd_send_string+0x18>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff74 	bl	8001164 <lcd_send_data>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f4      	bne.n	800126e <lcd_send_string+0xa>
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <measure_distance>:
//uint32_t Value1 = 0;				//ORIGINAL
//uint32_t Value2 = 0;				//ORIGINAL
//uint16_t Distance  = 0;			//ORIGINAL


uint16_t measure_distance() {
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
	uint32_t pMillis = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
	uint32_t Value1 = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
	uint32_t Value2 = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
	uint16_t Distance = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ac:	4838      	ldr	r0, [pc, #224]	; (8001390 <measure_distance+0x100>)
 80012ae:	f001 fe50 	bl	8002f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b8:	4835      	ldr	r0, [pc, #212]	; (8001390 <measure_distance+0x100>)
 80012ba:	f001 fe4a 	bl	8002f52 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80012be:	4b35      	ldr	r3, [pc, #212]	; (8001394 <measure_distance+0x104>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&timer) < 10);  // wait for 10 us
 80012c6:	bf00      	nop
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <measure_distance+0x104>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	2b09      	cmp	r3, #9
 80012d0:	d9fa      	bls.n	80012c8 <measure_distance+0x38>
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d8:	482d      	ldr	r0, [pc, #180]	; (8001390 <measure_distance+0x100>)
 80012da:	f001 fe3a 	bl	8002f52 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80012de:	f000 ff33 	bl	8002148 <HAL_GetTick>
 80012e2:	60f8      	str	r0, [r7, #12]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&& pMillis + 10 > HAL_GetTick());
 80012e4:	bf00      	nop
 80012e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ea:	4829      	ldr	r0, [pc, #164]	; (8001390 <measure_distance+0x100>)
 80012ec:	f001 fe1a 	bl	8002f24 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d107      	bne.n	8001306 <measure_distance+0x76>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f103 040a 	add.w	r4, r3, #10
 80012fc:	f000 ff24 	bl	8002148 <HAL_GetTick>
 8001300:	4603      	mov	r3, r0
 8001302:	429c      	cmp	r4, r3
 8001304:	d8ef      	bhi.n	80012e6 <measure_distance+0x56>
		Value1 = __HAL_TIM_GET_COUNTER(&timer);
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <measure_distance+0x104>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	60bb      	str	r3, [r7, #8]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800130e:	f000 ff1b 	bl	8002148 <HAL_GetTick>
 8001312:	60f8      	str	r0, [r7, #12]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&& pMillis + 50 > HAL_GetTick());
 8001314:	bf00      	nop
 8001316:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131a:	481d      	ldr	r0, [pc, #116]	; (8001390 <measure_distance+0x100>)
 800131c:	f001 fe02 	bl	8002f24 <HAL_GPIO_ReadPin>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <measure_distance+0xa6>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800132c:	f000 ff0c 	bl	8002148 <HAL_GetTick>
 8001330:	4603      	mov	r3, r0
 8001332:	429c      	cmp	r4, r3
 8001334:	d8ef      	bhi.n	8001316 <measure_distance+0x86>
		Value2 = __HAL_TIM_GET_COUNTER(&timer);
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <measure_distance+0x104>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	607b      	str	r3, [r7, #4]

	Distance = (Value2 - Value1) * 0.034 / 2;
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f84d 	bl	80003e4 <__aeabi_ui2d>
 800134a:	a30f      	add	r3, pc, #60	; (adr r3, 8001388 <measure_distance+0xf8>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff f8c2 	bl	80004d8 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001364:	f7ff f9e2 	bl	800072c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fb8a 	bl	8000a88 <__aeabi_d2uiz>
 8001374:	4603      	mov	r3, r0
 8001376:	807b      	strh	r3, [r7, #2]
	HAL_Delay(50);
 8001378:	2032      	movs	r0, #50	; 0x32
 800137a:	f000 feef 	bl	800215c <HAL_Delay>

	return Distance;
 800137e:	887b      	ldrh	r3, [r7, #2]

}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	b020c49c 	.word	0xb020c49c
 800138c:	3fa16872 	.word	0x3fa16872
 8001390:	40010c00 	.word	0x40010c00
 8001394:	20000238 	.word	0x20000238

08001398 <ADC_Select_CH1>:
HUMTypeDef hum_t;

char AT[20]="temp=\"Ezequiel\"\r\n";


void ADC_Select_CH1 (void){
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <ADC_Select_CH1+0x38>)
 80013ba:	f001 f9b7 	bl	800272c <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 80013c4:	f000 fb20 	bl	8001a08 <Error_Handler>
	  }
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000208 	.word	0x20000208

080013d4 <ADC_Select_CH2>:

void ADC_Select_CH2 (void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
	  /** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_2;
 80013e4:	2302      	movs	r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <ADC_Select_CH2+0x38>)
 80013f6:	f001 f999 	bl	800272c <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 8001400:	f000 fb02 	bl	8001a08 <Error_Handler>
	  }
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000208 	.word	0x20000208

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001416:	f000 fe3f 	bl	8002098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141a:	f000 f961 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141e:	f000 fa81 	bl	8001924 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001422:	f000 fa05 	bl	8001830 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001426:	f000 f9b7 	bl	8001798 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800142a:	f000 fa51 	bl	80018d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800142e:	488e      	ldr	r0, [pc, #568]	; (8001668 <main+0x258>)
 8001430:	f002 fb88 	bl	8003b44 <HAL_TIM_Base_Start>


  lcd_init();
 8001434:	f7ff fed9 	bl	80011ea <lcd_init>
  lcd_put_cur(0, 2);
 8001438:	2102      	movs	r1, #2
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff feb6 	bl	80011ac <lcd_put_cur>
  lcd_send_string("COMPOSTARIO!");
 8001440:	488a      	ldr	r0, [pc, #552]	; (800166c <main+0x25c>)
 8001442:	f7ff ff0f 	bl	8001264 <lcd_send_string>
  HAL_Delay(3000);
 8001446:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800144a:	f000 fe87 	bl	800215c <HAL_Delay>
  lcd_clear();
 800144e:	f7ff fea3 	bl	8001198 <lcd_clear>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Get values
	  ADC_Select_CH1();
 8001452:	f7ff ffa1 	bl	8001398 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8001456:	4886      	ldr	r0, [pc, #536]	; (8001670 <main+0x260>)
 8001458:	f000 ff7c 	bl	8002354 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800145c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001460:	4883      	ldr	r0, [pc, #524]	; (8001670 <main+0x260>)
 8001462:	f001 f851 	bl	8002508 <HAL_ADC_PollForConversion>
	  humidity_adc=HAL_ADC_GetValue(&hadc1);
 8001466:	4882      	ldr	r0, [pc, #520]	; (8001670 <main+0x260>)
 8001468:	f001 f954 	bl	8002714 <HAL_ADC_GetValue>
 800146c:	4603      	mov	r3, r0
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b80      	ldr	r3, [pc, #512]	; (8001674 <main+0x264>)
 8001472:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8001474:	487e      	ldr	r0, [pc, #504]	; (8001670 <main+0x260>)
 8001476:	f001 f81b 	bl	80024b0 <HAL_ADC_Stop>

	  ADC_Select_CH2();
 800147a:	f7ff ffab 	bl	80013d4 <ADC_Select_CH2>
	  HAL_ADC_Start(&hadc1);
 800147e:	487c      	ldr	r0, [pc, #496]	; (8001670 <main+0x260>)
 8001480:	f000 ff68 	bl	8002354 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001484:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001488:	4879      	ldr	r0, [pc, #484]	; (8001670 <main+0x260>)
 800148a:	f001 f83d 	bl	8002508 <HAL_ADC_PollForConversion>
	  temperature_adc=HAL_ADC_GetValue(&hadc1);
 800148e:	4878      	ldr	r0, [pc, #480]	; (8001670 <main+0x260>)
 8001490:	f001 f940 	bl	8002714 <HAL_ADC_GetValue>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b77      	ldr	r3, [pc, #476]	; (8001678 <main+0x268>)
 800149a:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 800149c:	4874      	ldr	r0, [pc, #464]	; (8001670 <main+0x260>)
 800149e:	f001 f807 	bl	80024b0 <HAL_ADC_Stop>
//	  HAL_ADC_Start(&hadc1);
//	  HAL_ADC_PollForConversion(&hadc1, 1000);
//	  sun_adc=HAL_ADC_GetValue(&hadc1);
//	  HAL_ADC_Stop(&hadc1);

	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){
 80014a2:	2140      	movs	r1, #64	; 0x40
 80014a4:	4875      	ldr	r0, [pc, #468]	; (800167c <main+0x26c>)
 80014a6:	f001 fd3d 	bl	8002f24 <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d108      	bne.n	80014c2 <main+0xb2>
		  sun_value=1;
 80014b0:	4b73      	ldr	r3, [pc, #460]	; (8001680 <main+0x270>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
		  strncpy(sun_exposition,"SI",5);
 80014b6:	2205      	movs	r2, #5
 80014b8:	4972      	ldr	r1, [pc, #456]	; (8001684 <main+0x274>)
 80014ba:	4873      	ldr	r0, [pc, #460]	; (8001688 <main+0x278>)
 80014bc:	f003 fc10 	bl	8004ce0 <strncpy>
 80014c0:	e007      	b.n	80014d2 <main+0xc2>

	  }
	  else{
		  sun_value=0;
 80014c2:	4b6f      	ldr	r3, [pc, #444]	; (8001680 <main+0x270>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
		  strncpy(sun_exposition,"NO",5);
 80014c8:	2205      	movs	r2, #5
 80014ca:	4970      	ldr	r1, [pc, #448]	; (800168c <main+0x27c>)
 80014cc:	486e      	ldr	r0, [pc, #440]	; (8001688 <main+0x278>)
 80014ce:	f003 fc07 	bl	8004ce0 <strncpy>
	  }



	  //Lee el Ultrasonido
	  distance=measure_distance();
 80014d2:	f7ff fedd 	bl	8001290 <measure_distance>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b6d      	ldr	r3, [pc, #436]	; (8001690 <main+0x280>)
 80014dc:	801a      	strh	r2, [r3, #0]
	  volume=calculate_volume(distance,3.5);
 80014de:	4b6c      	ldr	r3, [pc, #432]	; (8001690 <main+0x280>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	496c      	ldr	r1, [pc, #432]	; (8001694 <main+0x284>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fcd7 	bl	8001e98 <calculate_volume>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <main+0x288>)
 80014f0:	701a      	strb	r2, [r3, #0]

	  //Convertir valores de adc a porcentaje de humedad
	  humidity_value = adc_to_hum(humidity_adc);
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <main+0x264>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fc56 	bl	8001da8 <adc_to_hum>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b66      	ldr	r3, [pc, #408]	; (800169c <main+0x28c>)
 8001502:	701a      	strb	r2, [r3, #0]

	  //Convertir valores de adc a temperatura
	  temperature_value = adc_to_temp(temperature_adc);
 8001504:	4b5c      	ldr	r3, [pc, #368]	; (8001678 <main+0x268>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fc81 	bl	8001e10 <adc_to_temp>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <main+0x290>)
 8001514:	701a      	strb	r2, [r3, #0]

	  //valores int a string
	  sprintf(vol,"%u",volume);
 8001516:	4b60      	ldr	r3, [pc, #384]	; (8001698 <main+0x288>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	4961      	ldr	r1, [pc, #388]	; (80016a4 <main+0x294>)
 800151e:	4862      	ldr	r0, [pc, #392]	; (80016a8 <main+0x298>)
 8001520:	f003 fbbe 	bl	8004ca0 <siprintf>
	  sprintf(hum,"%u",humidity_value);
 8001524:	4b5d      	ldr	r3, [pc, #372]	; (800169c <main+0x28c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	495e      	ldr	r1, [pc, #376]	; (80016a4 <main+0x294>)
 800152c:	485f      	ldr	r0, [pc, #380]	; (80016ac <main+0x29c>)
 800152e:	f003 fbb7 	bl	8004ca0 <siprintf>
	  sprintf(temp,"%u",temperature_value);
 8001532:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <main+0x290>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	495a      	ldr	r1, [pc, #360]	; (80016a4 <main+0x294>)
 800153a:	485d      	ldr	r0, [pc, #372]	; (80016b0 <main+0x2a0>)
 800153c:	f003 fbb0 	bl	8004ca0 <siprintf>
	  //sprintf(sun_exposition, "%u",sun_adc);
	  sprintf(msg, "%u,%u,%u,%s\r\n",volume, humidity_value, temperature_value, sun_exposition);
 8001540:	4b55      	ldr	r3, [pc, #340]	; (8001698 <main+0x288>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4b55      	ldr	r3, [pc, #340]	; (800169c <main+0x28c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <main+0x290>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <main+0x278>)
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	9200      	str	r2, [sp, #0]
 8001558:	4603      	mov	r3, r0
 800155a:	460a      	mov	r2, r1
 800155c:	4955      	ldr	r1, [pc, #340]	; (80016b4 <main+0x2a4>)
 800155e:	4856      	ldr	r0, [pc, #344]	; (80016b8 <main+0x2a8>)
 8001560:	f003 fb9e 	bl	8004ca0 <siprintf>



	  // Imprimo en pantalla el volumen libre ocupado de la compostera
	  lcd_put_cur(0, 0);
 8001564:	2100      	movs	r1, #0
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff fe20 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("V:");
 800156c:	4853      	ldr	r0, [pc, #332]	; (80016bc <main+0x2ac>)
 800156e:	f7ff fe79 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(0, 2);
 8001572:	2102      	movs	r1, #2
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fe19 	bl	80011ac <lcd_put_cur>
	  lcd_send_string(vol);
 800157a:	484b      	ldr	r0, [pc, #300]	; (80016a8 <main+0x298>)
 800157c:	f7ff fe72 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(0,5);
 8001580:	2105      	movs	r1, #5
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fe12 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("%");
 8001588:	484d      	ldr	r0, [pc, #308]	; (80016c0 <main+0x2b0>)
 800158a:	f7ff fe6b 	bl	8001264 <lcd_send_string>

	  // Imprimo en pantalla la humedad  de la compostera
	  lcd_put_cur(0,8);
 800158e:	2108      	movs	r1, #8
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff fe0b 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("H:");
 8001596:	484b      	ldr	r0, [pc, #300]	; (80016c4 <main+0x2b4>)
 8001598:	f7ff fe64 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(0,10);
 800159c:	210a      	movs	r1, #10
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff fe04 	bl	80011ac <lcd_put_cur>
	  lcd_send_string(hum);
 80015a4:	4841      	ldr	r0, [pc, #260]	; (80016ac <main+0x29c>)
 80015a6:	f7ff fe5d 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(0,13);
 80015aa:	210d      	movs	r1, #13
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fdfd 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("%");
 80015b2:	4843      	ldr	r0, [pc, #268]	; (80016c0 <main+0x2b0>)
 80015b4:	f7ff fe56 	bl	8001264 <lcd_send_string>

	  // Imprimo en pantalla la temperatura  de la compostera
	  lcd_put_cur(1, 0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff fdf6 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("T:");
 80015c0:	4841      	ldr	r0, [pc, #260]	; (80016c8 <main+0x2b8>)
 80015c2:	f7ff fe4f 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(1, 2);
 80015c6:	2102      	movs	r1, #2
 80015c8:	2001      	movs	r0, #1
 80015ca:	f7ff fdef 	bl	80011ac <lcd_put_cur>
	  lcd_send_string(temp);
 80015ce:	4838      	ldr	r0, [pc, #224]	; (80016b0 <main+0x2a0>)
 80015d0:	f7ff fe48 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(1, 5);
 80015d4:	2105      	movs	r1, #5
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff fde8 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("C");
 80015dc:	483b      	ldr	r0, [pc, #236]	; (80016cc <main+0x2bc>)
 80015de:	f7ff fe41 	bl	8001264 <lcd_send_string>

	  // Imprimo en pantalla la exposicion al sol de la compostera
	  lcd_put_cur(1, 8);
 80015e2:	2108      	movs	r1, #8
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fde1 	bl	80011ac <lcd_put_cur>
	  lcd_send_string("S:");
 80015ea:	4839      	ldr	r0, [pc, #228]	; (80016d0 <main+0x2c0>)
 80015ec:	f7ff fe3a 	bl	8001264 <lcd_send_string>
	  lcd_put_cur(1, 10);
 80015f0:	210a      	movs	r1, #10
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff fdda 	bl	80011ac <lcd_put_cur>
	  lcd_send_string(sun_exposition);
 80015f8:	4823      	ldr	r0, [pc, #140]	; (8001688 <main+0x278>)
 80015fa:	f7ff fe33 	bl	8001264 <lcd_send_string>

	  HAL_Delay(5000);
 80015fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8001602:	f000 fdab 	bl	800215c <HAL_Delay>
	  //Envío por UART
 	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 300);
 8001606:	482c      	ldr	r0, [pc, #176]	; (80016b8 <main+0x2a8>)
 8001608:	f7fe fda2 	bl	8000150 <strlen>
 800160c:	4603      	mov	r3, r0
 800160e:	b29a      	uxth	r2, r3
 8001610:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001614:	4928      	ldr	r1, [pc, #160]	; (80016b8 <main+0x2a8>)
 8001616:	482f      	ldr	r0, [pc, #188]	; (80016d4 <main+0x2c4>)
 8001618:	f002 fd45 	bl	80040a6 <HAL_UART_Transmit>
 	  //HAL_UART_Transmit(&huart1,(uint8_t*)AT, strlen(AT), 300);

	  //Chequeo que los valores esten dentro de los limites
	  temp_t=check_temperature(temperature_value);
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <main+0x290>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fc7d 	bl	8001f20 <check_temperature>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <main+0x2c8>)
 800162c:	701a      	strb	r2, [r3, #0]
	  hum_t=check_humidity(humidity_value);
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <main+0x28c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fc8b 	bl	8001f4e <check_humidity>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <main+0x2cc>)
 800163e:	701a      	strb	r2, [r3, #0]

	  //Si hay valores fuera de los limites, imprimo
	  if(temp_t !=TEMP_OK || hum_t!=HUM_OK){
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <main+0x2c8>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d103      	bne.n	8001650 <main+0x240>
 8001648:	4b24      	ldr	r3, [pc, #144]	; (80016dc <main+0x2cc>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <main+0x250>
		  print_error_msg(temp_t,hum_t);
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <main+0x2c8>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <main+0x2cc>)
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fc8e 	bl	8001f7c <print_error_msg>
	  }
	  lcd_clear();
 8001660:	f7ff fd9a 	bl	8001198 <lcd_clear>
	  ADC_Select_CH1();
 8001664:	e6f5      	b.n	8001452 <main+0x42>
 8001666:	bf00      	nop
 8001668:	20000238 	.word	0x20000238
 800166c:	080071d0 	.word	0x080071d0
 8001670:	20000208 	.word	0x20000208
 8001674:	200002c8 	.word	0x200002c8
 8001678:	200002ca 	.word	0x200002ca
 800167c:	40010800 	.word	0x40010800
 8001680:	200002ce 	.word	0x200002ce
 8001684:	080071e0 	.word	0x080071e0
 8001688:	200002e8 	.word	0x200002e8
 800168c:	080071e4 	.word	0x080071e4
 8001690:	200002c4 	.word	0x200002c4
 8001694:	40600000 	.word	0x40600000
 8001698:	200002c6 	.word	0x200002c6
 800169c:	200002cc 	.word	0x200002cc
 80016a0:	200002cd 	.word	0x200002cd
 80016a4:	080071e8 	.word	0x080071e8
 80016a8:	200002d0 	.word	0x200002d0
 80016ac:	200002e0 	.word	0x200002e0
 80016b0:	200002d8 	.word	0x200002d8
 80016b4:	080071ec 	.word	0x080071ec
 80016b8:	200002f0 	.word	0x200002f0
 80016bc:	080071fc 	.word	0x080071fc
 80016c0:	08007200 	.word	0x08007200
 80016c4:	08007204 	.word	0x08007204
 80016c8:	08007208 	.word	0x08007208
 80016cc:	0800720c 	.word	0x0800720c
 80016d0:	08007210 	.word	0x08007210
 80016d4:	20000280 	.word	0x20000280
 80016d8:	20000354 	.word	0x20000354
 80016dc:	20000355 	.word	0x20000355

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b094      	sub	sp, #80	; 0x50
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ea:	2228      	movs	r2, #40	; 0x28
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fe6e 	bl	80043d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001710:	2301      	movs	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171e:	2301      	movs	r3, #1
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001722:	2302      	movs	r3, #2
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800172c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001730:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fc24 	bl	8002f84 <HAL_RCC_OscConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001742:	f000 f961 	bl	8001a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001746:	230f      	movs	r3, #15
 8001748:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001756:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2102      	movs	r1, #2
 8001762:	4618      	mov	r0, r3
 8001764:	f001 fe90 	bl	8003488 <HAL_RCC_ClockConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800176e:	f000 f94b 	bl	8001a08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001772:	2302      	movs	r3, #2
 8001774:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800177a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4618      	mov	r0, r3
 8001780:	f002 f81a 	bl	80037b8 <HAL_RCCEx_PeriphCLKConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800178a:	f000 f93d 	bl	8001a08 <Error_Handler>
  }
}
 800178e:	bf00      	nop
 8001790:	3750      	adds	r7, #80	; 0x50
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <MX_ADC1_Init+0x90>)
 80017aa:	4a20      	ldr	r2, [pc, #128]	; (800182c <MX_ADC1_Init+0x94>)
 80017ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <MX_ADC1_Init+0x90>)
 80017b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <MX_ADC1_Init+0x90>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_ADC1_Init+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <MX_ADC1_Init+0x90>)
 80017c4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MX_ADC1_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <MX_ADC1_Init+0x90>)
 80017d2:	2203      	movs	r2, #3
 80017d4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d6:	4814      	ldr	r0, [pc, #80]	; (8001828 <MX_ADC1_Init+0x90>)
 80017d8:	f000 fce4 	bl	80021a4 <HAL_ADC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80017e2:	f000 f911 	bl	8001a08 <Error_Handler>
//  {
//    Error_Handler();
//  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <MX_ADC1_Init+0x90>)
 80017f4:	f000 ff9a 	bl	800272c <HAL_ADC_ConfigChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 80017fe:	f000 f903 	bl	8001a08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001802:	2303      	movs	r3, #3
 8001804:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001806:	2303      	movs	r3, #3
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_ADC1_Init+0x90>)
 8001810:	f000 ff8c 	bl	800272c <HAL_ADC_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800181a:	f000 f8f5 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000208 	.word	0x20000208
 800182c:	40012400 	.word	0x40012400

08001830 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <MX_TIM1_Init+0x98>)
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <MX_TIM1_Init+0x9c>)
 8001850:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_TIM1_Init+0x98>)
 8001854:	2247      	movs	r2, #71	; 0x47
 8001856:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <MX_TIM1_Init+0x98>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_TIM1_Init+0x98>)
 8001860:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001864:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_TIM1_Init+0x98>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <MX_TIM1_Init+0x98>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <MX_TIM1_Init+0x98>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001878:	4813      	ldr	r0, [pc, #76]	; (80018c8 <MX_TIM1_Init+0x98>)
 800187a:	f002 f913 	bl	8003aa4 <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001884:	f000 f8c0 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	4619      	mov	r1, r3
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <MX_TIM1_Init+0x98>)
 8001896:	f002 f99f 	bl	8003bd8 <HAL_TIM_ConfigClockSource>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018a0:	f000 f8b2 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_TIM1_Init+0x98>)
 80018b2:	f002 fb4d 	bl	8003f50 <HAL_TIMEx_MasterConfigSynchronization>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018bc:	f000 f8a4 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000238 	.word	0x20000238
 80018cc:	40012c00 	.word	0x40012c00

080018d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_USART1_UART_Init+0x4c>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <MX_USART1_UART_Init+0x50>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_USART1_UART_Init+0x4c>)
 80018dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_USART1_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_USART1_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_USART1_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_USART1_UART_Init+0x4c>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_USART1_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_USART1_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_USART1_UART_Init+0x4c>)
 8001908:	f002 fb80 	bl	800400c <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001912:	f000 f879 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000280 	.word	0x20000280
 8001920:	40013800 	.word	0x40013800

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001938:	4b30      	ldr	r3, [pc, #192]	; (80019fc <MX_GPIO_Init+0xd8>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a2f      	ldr	r2, [pc, #188]	; (80019fc <MX_GPIO_Init+0xd8>)
 800193e:	f043 0310 	orr.w	r3, r3, #16
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <MX_GPIO_Init+0xd8>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <MX_GPIO_Init+0xd8>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a29      	ldr	r2, [pc, #164]	; (80019fc <MX_GPIO_Init+0xd8>)
 8001956:	f043 0320 	orr.w	r3, r3, #32
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <MX_GPIO_Init+0xd8>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <MX_GPIO_Init+0xd8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a23      	ldr	r2, [pc, #140]	; (80019fc <MX_GPIO_Init+0xd8>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <MX_GPIO_Init+0xd8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <MX_GPIO_Init+0xd8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <MX_GPIO_Init+0xd8>)
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_GPIO_Init+0xd8>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <MX_GPIO_Init+0xdc>)
 80019a0:	f001 fad7 	bl	8002f52 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019a4:	2340      	movs	r3, #64	; 0x40
 80019a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4619      	mov	r1, r3
 80019b6:	4813      	ldr	r0, [pc, #76]	; (8001a04 <MX_GPIO_Init+0xe0>)
 80019b8:	f001 f930 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80019bc:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 80019c0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	4619      	mov	r1, r3
 80019d4:	480a      	ldr	r0, [pc, #40]	; (8001a00 <MX_GPIO_Init+0xdc>)
 80019d6:	f001 f921 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4619      	mov	r1, r3
 80019ee:	4804      	ldr	r0, [pc, #16]	; (8001a00 <MX_GPIO_Init+0xdc>)
 80019f0:	f001 f914 	bl	8002c1c <HAL_GPIO_Init>

}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010c00 	.word	0x40010c00
 8001a04:	40010800 	.word	0x40010800

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6193      	str	r3, [r2, #24]
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_MspInit+0x60>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_MspInit+0x60>)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000

08001a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <HAL_ADC_MspInit+0x6c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d121      	bne.n	8001adc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ac8:	230e      	movs	r3, #14
 8001aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001acc:	2303      	movs	r3, #3
 8001ace:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <HAL_ADC_MspInit+0x74>)
 8001ad8:	f001 f8a0 	bl	8002c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40012400 	.word	0x40012400
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010800 	.word	0x40010800

08001af0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_TIM_Base_MspInit+0x34>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10b      	bne.n	8001b1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_TIM_Base_MspInit+0x38>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <HAL_TIM_Base_MspInit+0x38>)
 8001b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b0c:	6193      	str	r3, [r2, #24]
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_TIM_Base_MspInit+0x38>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	40012c00 	.word	0x40012c00
 8001b28:	40021000 	.word	0x40021000

08001b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <HAL_UART_MspInit+0x8c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d131      	bne.n	8001bb0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a1a      	ldr	r2, [pc, #104]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <HAL_UART_MspInit+0x94>)
 8001b92:	f001 f843 	bl	8002c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <HAL_UART_MspInit+0x94>)
 8001bac:	f001 f836 	bl	8002c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40013800 	.word	0x40013800
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010800 	.word	0x40010800

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <HardFault_Handler+0x4>

08001bd6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <MemManage_Handler+0x4>

08001bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <BusFault_Handler+0x4>

08001be2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <UsageFault_Handler+0x4>

08001be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c10:	f000 fa88 	bl	8002124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
	return 1;
 8001c1c:	2301      	movs	r3, #1
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <_kill>:

int _kill(int pid, int sig)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c30:	f002 fba4 	bl	800437c <__errno>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2216      	movs	r2, #22
 8001c38:	601a      	str	r2, [r3, #0]
	return -1;
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_exit>:

void _exit (int status)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffe7 	bl	8001c26 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c58:	e7fe      	b.n	8001c58 <_exit+0x12>

08001c5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e00a      	b.n	8001c82 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c6c:	f3af 8000 	nop.w
 8001c70:	4601      	mov	r1, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	60ba      	str	r2, [r7, #8]
 8001c78:	b2ca      	uxtb	r2, r1
 8001c7a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dbf0      	blt.n	8001c6c <_read+0x12>
	}

return len;
 8001c8a:	687b      	ldr	r3, [r7, #4]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e009      	b.n	8001cba <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	60ba      	str	r2, [r7, #8]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	dbf1      	blt.n	8001ca6 <_write+0x12>
	}
	return len;
 8001cc2:	687b      	ldr	r3, [r7, #4]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_close>:

int _close(int file)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	return -1;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <_isatty>:

int _isatty(int file)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	return 1;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <_sbrk+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <_sbrk+0x60>)
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_sbrk+0x64>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <_sbrk+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d5c:	f002 fb0e 	bl	800437c <__errno>
 8001d60:	4603      	mov	r3, r0
 8001d62:	220c      	movs	r2, #12
 8001d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <_sbrk+0x64>)
 8001d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20005000 	.word	0x20005000
 8001d8c:	00000400 	.word	0x00000400
 8001d90:	20000358 	.word	0x20000358
 8001d94:	20000370 	.word	0x20000370

08001d98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	0000      	movs	r0, r0
	...

08001da8 <adc_to_hum>:

uint8_t map(uint16_t au16_IN, uint16_t au16_INmin, uint16_t au16_INmax, uint16_t au16_OUTmin, uint16_t au16_OUTmax){
    return ((((au16_IN - au16_INmin)*(au16_OUTmax - au16_OUTmin))/(au16_INmax - au16_INmin)) + au16_OUTmin);
}

uint8_t adc_to_hum(uint16_t hum){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
	uint8_t var;
	var=-0.026*hum+105;
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fb25 	bl	8000404 <__aeabi_i2d>
 8001dba:	a311      	add	r3, pc, #68	; (adr r3, 8001e00 <adc_to_hum+0x58>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fb8a 	bl	80004d8 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <adc_to_hum+0x60>)
 8001dd2:	f7fe f9cb 	bl	800016c <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fe53 	bl	8000a88 <__aeabi_d2uiz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	73fb      	strb	r3, [r7, #15]
	if(var>100){
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	2b64      	cmp	r3, #100	; 0x64
 8001dea:	d901      	bls.n	8001df0 <adc_to_hum+0x48>
		var=100.00;
 8001dec:	2364      	movs	r3, #100	; 0x64
 8001dee:	73fb      	strb	r3, [r7, #15]
	}
	return var;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	76c8b439 	.word	0x76c8b439
 8001e04:	bf9a9fbe 	.word	0xbf9a9fbe
 8001e08:	405a4000 	.word	0x405a4000
 8001e0c:	00000000 	.word	0x00000000

08001e10 <adc_to_temp>:
uint8_t adc_to_temp(uint16_t au16_IN){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
	uint8_t temp;
	temp=(((au16_IN*3.3/4096.0)*100)-27);
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe faf1 	bl	8000404 <__aeabi_i2d>
 8001e22:	a317      	add	r3, pc, #92	; (adr r3, 8001e80 <adc_to_temp+0x70>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fb56 	bl	80004d8 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <adc_to_temp+0x78>)
 8001e3a:	f7fe fc77 	bl	800072c <__aeabi_ddiv>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <adc_to_temp+0x7c>)
 8001e4c:	f7fe fb44 	bl	80004d8 <__aeabi_dmul>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <adc_to_temp+0x80>)
 8001e5e:	f7fe f983 	bl	8000168 <__aeabi_dsub>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe fe0d 	bl	8000a88 <__aeabi_d2uiz>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
    return temp;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	f3af 8000 	nop.w
 8001e80:	66666666 	.word	0x66666666
 8001e84:	400a6666 	.word	0x400a6666
 8001e88:	40b00000 	.word	0x40b00000
 8001e8c:	40590000 	.word	0x40590000
 8001e90:	403b0000 	.word	0x403b0000
 8001e94:	00000000 	.word	0x00000000

08001e98 <calculate_volume>:
uint8_t calculate_volume(uint16_t h, float r){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	80fb      	strh	r3, [r7, #6]
	float var;
	uint8_t vol;
	var=h*r*r*2.14;
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe ff18 	bl	8000cdc <__aeabi_i2f>
 8001eac:	4603      	mov	r3, r0
 8001eae:	6839      	ldr	r1, [r7, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe ff67 	bl	8000d84 <__aeabi_fmul>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6839      	ldr	r1, [r7, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe ff62 	bl	8000d84 <__aeabi_fmul>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fab0 	bl	8000428 <__aeabi_f2d>
 8001ec8:	a311      	add	r3, pc, #68	; (adr r3, 8001f10 <calculate_volume+0x78>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fb03 	bl	80004d8 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7fe fdf5 	bl	8000ac8 <__aeabi_d2f>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	60fb      	str	r3, [r7, #12]
	vol=var*100/288;
 8001ee2:	490d      	ldr	r1, [pc, #52]	; (8001f18 <calculate_volume+0x80>)
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f7fe ff4d 	bl	8000d84 <__aeabi_fmul>
 8001eea:	4603      	mov	r3, r0
 8001eec:	490b      	ldr	r1, [pc, #44]	; (8001f1c <calculate_volume+0x84>)
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fffc 	bl	8000eec <__aeabi_fdiv>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f894 	bl	8001024 <__aeabi_f2uiz>
 8001efc:	4603      	mov	r3, r0
 8001efe:	72fb      	strb	r3, [r7, #11]
	return (vol);
 8001f00:	7afb      	ldrb	r3, [r7, #11]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	f3af 8000 	nop.w
 8001f10:	51eb851f 	.word	0x51eb851f
 8001f14:	40011eb8 	.word	0x40011eb8
 8001f18:	42c80000 	.word	0x42c80000
 8001f1c:	43900000 	.word	0x43900000

08001f20 <check_temperature>:

TempTypeDef check_temperature(uint8_t temp){
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]

	if(temp>TEMP_MAX){
 8001f2a:	2246      	movs	r2, #70	; 0x46
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <check_temperature+0x16>
		return OVERTEMPERATURE;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e006      	b.n	8001f44 <check_temperature+0x24>
	}
	else if(temp<TEMP_MIN){
 8001f36:	2214      	movs	r2, #20
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d201      	bcs.n	8001f42 <check_temperature+0x22>
		return UNDERTEMPERATURE;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e000      	b.n	8001f44 <check_temperature+0x24>
	}
	else
		return TEMP_OK;
 8001f42:	2300      	movs	r3, #0

}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <check_humidity>:

HUMTypeDef check_humidity(uint8_t hum){
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	71fb      	strb	r3, [r7, #7]

	if(hum>HUM_MAX){
 8001f58:	2250      	movs	r2, #80	; 0x50
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <check_humidity+0x16>
		return OVERHUMIDITY;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e006      	b.n	8001f72 <check_humidity+0x24>
	}
	else if(hum<HUM_MIN){
 8001f64:	2228      	movs	r2, #40	; 0x28
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d201      	bcs.n	8001f70 <check_humidity+0x22>
		return UNDERHUMIDITY;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e000      	b.n	8001f72 <check_humidity+0x24>
	}
	else
		return HUM_OK;
 8001f70:	2300      	movs	r3, #0

}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <print_error_msg>:

void print_error_msg(TempTypeDef temp, HUMTypeDef hum){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	460a      	mov	r2, r1
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	71bb      	strb	r3, [r7, #6]
	switch(temp){
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d015      	beq.n	8001fbe <print_error_msg+0x42>
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	dc24      	bgt.n	8001fe0 <print_error_msg+0x64>
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d021      	beq.n	8001fde <print_error_msg+0x62>
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d120      	bne.n	8001fe0 <print_error_msg+0x64>
		case OVERTEMPERATURE:
			  lcd_clear();
 8001f9e:	f7ff f8fb 	bl	8001198 <lcd_clear>
			  lcd_put_cur(0, 0);
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff f901 	bl	80011ac <lcd_put_cur>
			  lcd_send_string(OVER_TEMP);
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <print_error_msg+0xc0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f958 	bl	8001264 <lcd_send_string>
			  HAL_Delay(3000);
 8001fb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fb8:	f000 f8d0 	bl	800215c <HAL_Delay>
			break;
 8001fbc:	e010      	b.n	8001fe0 <print_error_msg+0x64>

		case UNDERTEMPERATURE:
			  lcd_clear();
 8001fbe:	f7ff f8eb 	bl	8001198 <lcd_clear>
			  lcd_put_cur(0, 0);
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7ff f8f1 	bl	80011ac <lcd_put_cur>
			  lcd_send_string(UNDER_TEMP);
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <print_error_msg+0xc4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f948 	bl	8001264 <lcd_send_string>
			  HAL_Delay(3000);
 8001fd4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fd8:	f000 f8c0 	bl	800215c <HAL_Delay>
			break;
 8001fdc:	e000      	b.n	8001fe0 <print_error_msg+0x64>

		case TEMP_OK:
			break;
 8001fde:	bf00      	nop
	}

	switch(hum){
 8001fe0:	79bb      	ldrb	r3, [r7, #6]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d015      	beq.n	8002012 <print_error_msg+0x96>
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	dc24      	bgt.n	8002034 <print_error_msg+0xb8>
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d021      	beq.n	8002032 <print_error_msg+0xb6>
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d120      	bne.n	8002034 <print_error_msg+0xb8>
		case OVERHUMIDITY:
			  lcd_clear();
 8001ff2:	f7ff f8d1 	bl	8001198 <lcd_clear>
			  lcd_put_cur(0, 0);
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff f8d7 	bl	80011ac <lcd_put_cur>
			  lcd_send_string(OVER_HUM);
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <print_error_msg+0xc8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f92e 	bl	8001264 <lcd_send_string>
			  HAL_Delay(3000);
 8002008:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800200c:	f000 f8a6 	bl	800215c <HAL_Delay>
			break;
 8002010:	e010      	b.n	8002034 <print_error_msg+0xb8>

		case UNDERHUMIDITY:
			  lcd_clear();
 8002012:	f7ff f8c1 	bl	8001198 <lcd_clear>
			  lcd_put_cur(0, 0);
 8002016:	2100      	movs	r1, #0
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff f8c7 	bl	80011ac <lcd_put_cur>
			  lcd_send_string(UNDER_HUM);
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <print_error_msg+0xcc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f91e 	bl	8001264 <lcd_send_string>
			  HAL_Delay(3000);
 8002028:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800202c:	f000 f896 	bl	800215c <HAL_Delay>
			break;
 8002030:	e000      	b.n	8002034 <print_error_msg+0xb8>

		case HUM_OK:
			break;
 8002032:	bf00      	nop
	}
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000004 	.word	0x20000004
 8002040:	20000008 	.word	0x20000008
 8002044:	2000000c 	.word	0x2000000c
 8002048:	20000010 	.word	0x20000010

0800204c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800204e:	490d      	ldr	r1, [pc, #52]	; (8002084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002050:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002054:	e002      	b.n	800205c <LoopCopyDataInit>

08002056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205a:	3304      	adds	r3, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800205c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002060:	d3f9      	bcc.n	8002056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002064:	4c0a      	ldr	r4, [pc, #40]	; (8002090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002068:	e001      	b.n	800206e <LoopFillZerobss>

0800206a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800206c:	3204      	adds	r2, #4

0800206e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002072:	f7ff fe91 	bl	8001d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002076:	f002 f987 	bl	8004388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800207a:	f7ff f9c9 	bl	8001410 <main>
  bx lr
 800207e:	4770      	bx	lr
  ldr r0, =_sdata
 8002080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002084:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002088:	08007674 	.word	0x08007674
  ldr r2, =_sbss
 800208c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002090:	20000370 	.word	0x20000370

08002094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002094:	e7fe      	b.n	8002094 <ADC1_2_IRQHandler>
	...

08002098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_Init+0x28>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <HAL_Init+0x28>)
 80020a2:	f043 0310 	orr.w	r3, r3, #16
 80020a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f000 fd83 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ae:	200f      	movs	r0, #15
 80020b0:	f000 f808 	bl	80020c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b4:	f7ff fcae 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_InitTick+0x54>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_InitTick+0x58>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020da:	fbb3 f3f1 	udiv	r3, r3, r1
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fd8d 	bl	8002c02 <HAL_SYSTICK_Config>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00e      	b.n	8002110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b0f      	cmp	r3, #15
 80020f6:	d80a      	bhi.n	800210e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f8:	2200      	movs	r2, #0
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f000 fd63 	bl	8002bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002104:	4a06      	ldr	r2, [pc, #24]	; (8002120 <HAL_InitTick+0x5c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000000 	.word	0x20000000
 800211c:	20000018 	.word	0x20000018
 8002120:	20000014 	.word	0x20000014

08002124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_IncTick+0x1c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_IncTick+0x20>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4a03      	ldr	r2, [pc, #12]	; (8002144 <HAL_IncTick+0x20>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000018 	.word	0x20000018
 8002144:	2000035c 	.word	0x2000035c

08002148 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <HAL_GetTick+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	2000035c 	.word	0x2000035c

0800215c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff fff0 	bl	8002148 <HAL_GetTick>
 8002168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d005      	beq.n	8002182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_Delay+0x44>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002182:	bf00      	nop
 8002184:	f7ff ffe0 	bl	8002148 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	d8f7      	bhi.n	8002184 <HAL_Delay+0x28>
  {
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000018 	.word	0x20000018

080021a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0be      	b.n	8002344 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fc48 	bl	8001a78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fbf1 	bl	80029d0 <ADC_ConversionStop_Disable>
 80021ee:	4603      	mov	r3, r0
 80021f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 8099 	bne.w	8002332 <HAL_ADC_Init+0x18e>
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 8095 	bne.w	8002332 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002210:	f023 0302 	bic.w	r3, r3, #2
 8002214:	f043 0202 	orr.w	r2, r3, #2
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002224:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7b1b      	ldrb	r3, [r3, #12]
 800222a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800222c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4313      	orrs	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800223c:	d003      	beq.n	8002246 <HAL_ADC_Init+0xa2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d102      	bne.n	800224c <HAL_ADC_Init+0xa8>
 8002246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800224a:	e000      	b.n	800224e <HAL_ADC_Init+0xaa>
 800224c:	2300      	movs	r3, #0
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7d1b      	ldrb	r3, [r3, #20]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d119      	bne.n	8002290 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7b1b      	ldrb	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	3b01      	subs	r3, #1
 800226a:	035a      	lsls	r2, r3, #13
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	e00b      	b.n	8002290 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	f043 0220 	orr.w	r2, r3, #32
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	4b28      	ldr	r3, [pc, #160]	; (800234c <HAL_ADC_Init+0x1a8>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c0:	d003      	beq.n	80022ca <HAL_ADC_Init+0x126>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d104      	bne.n	80022d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	051b      	lsls	r3, r3, #20
 80022d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_ADC_Init+0x1ac>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d10b      	bne.n	8002310 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800230e:	e018      	b.n	8002342 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	f023 0312 	bic.w	r3, r3, #18
 8002318:	f043 0210 	orr.w	r2, r3, #16
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002330:	e007      	b.n	8002342 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	f043 0210 	orr.w	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002342:	7dfb      	ldrb	r3, [r7, #23]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	ffe1f7fd 	.word	0xffe1f7fd
 8002350:	ff1f0efe 	.word	0xff1f0efe

08002354 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_ADC_Start+0x1a>
 800236a:	2302      	movs	r3, #2
 800236c:	e098      	b.n	80024a0 <HAL_ADC_Start+0x14c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fad0 	bl	800291c <ADC_Enable>
 800237c:	4603      	mov	r3, r0
 800237e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 8087 	bne.w	8002496 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a41      	ldr	r2, [pc, #260]	; (80024a8 <HAL_ADC_Start+0x154>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d105      	bne.n	80023b2 <HAL_ADC_Start+0x5e>
 80023a6:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_ADC_Start+0x158>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d115      	bne.n	80023de <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d026      	beq.n	800241a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023dc:	e01d      	b.n	800241a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a2f      	ldr	r2, [pc, #188]	; (80024ac <HAL_ADC_Start+0x158>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d004      	beq.n	80023fe <HAL_ADC_Start+0xaa>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a2b      	ldr	r2, [pc, #172]	; (80024a8 <HAL_ADC_Start+0x154>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d10d      	bne.n	800241a <HAL_ADC_Start+0xc6>
 80023fe:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_ADC_Start+0x158>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002412:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	f023 0206 	bic.w	r2, r3, #6
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c
 8002432:	e002      	b.n	800243a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f06f 0202 	mvn.w	r2, #2
 800244a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002456:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800245a:	d113      	bne.n	8002484 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002460:	4a11      	ldr	r2, [pc, #68]	; (80024a8 <HAL_ADC_Start+0x154>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d105      	bne.n	8002472 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <HAL_ADC_Start+0x158>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	e00c      	b.n	800249e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	e003      	b.n	800249e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40012800 	.word	0x40012800
 80024ac:	40012400 	.word	0x40012400

080024b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_Stop+0x1a>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e01a      	b.n	8002500 <HAL_ADC_Stop+0x50>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fa7c 	bl	80029d0 <ADC_ConversionStop_Disable>
 80024d8:	4603      	mov	r3, r0
 80024da:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800251e:	f7ff fe13 	bl	8002148 <HAL_GetTick>
 8002522:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	f043 0220 	orr.w	r2, r3, #32
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0d3      	b.n	80026f2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d131      	bne.n	80025bc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002562:	2b00      	cmp	r3, #0
 8002564:	d12a      	bne.n	80025bc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002566:	e021      	b.n	80025ac <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d01d      	beq.n	80025ac <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_ADC_PollForConversion+0x7e>
 8002576:	f7ff fde7 	bl	8002148 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d212      	bcs.n	80025ac <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	f043 0204 	orr.w	r2, r3, #4
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0a2      	b.n	80026f2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0d6      	beq.n	8002568 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025ba:	e070      	b.n	800269e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80025bc:	4b4f      	ldr	r3, [pc, #316]	; (80026fc <HAL_ADC_PollForConversion+0x1f4>)
 80025be:	681c      	ldr	r4, [r3, #0]
 80025c0:	2002      	movs	r0, #2
 80025c2:	f001 f9af 	bl	8003924 <HAL_RCCEx_GetPeriphCLKFreq>
 80025c6:	4603      	mov	r3, r0
 80025c8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6919      	ldr	r1, [r3, #16]
 80025d2:	4b4b      	ldr	r3, [pc, #300]	; (8002700 <HAL_ADC_PollForConversion+0x1f8>)
 80025d4:	400b      	ands	r3, r1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_ADC_PollForConversion+0x104>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68d9      	ldr	r1, [r3, #12]
 80025e0:	4b48      	ldr	r3, [pc, #288]	; (8002704 <HAL_ADC_PollForConversion+0x1fc>)
 80025e2:	400b      	ands	r3, r1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d111      	bne.n	800260c <HAL_ADC_PollForConversion+0x104>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6919      	ldr	r1, [r3, #16]
 80025ee:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_ADC_PollForConversion+0x200>)
 80025f0:	400b      	ands	r3, r1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d108      	bne.n	8002608 <HAL_ADC_PollForConversion+0x100>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68d9      	ldr	r1, [r3, #12]
 80025fc:	4b43      	ldr	r3, [pc, #268]	; (800270c <HAL_ADC_PollForConversion+0x204>)
 80025fe:	400b      	ands	r3, r1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_PollForConversion+0x100>
 8002604:	2314      	movs	r3, #20
 8002606:	e020      	b.n	800264a <HAL_ADC_PollForConversion+0x142>
 8002608:	2329      	movs	r3, #41	; 0x29
 800260a:	e01e      	b.n	800264a <HAL_ADC_PollForConversion+0x142>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6919      	ldr	r1, [r3, #16]
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_ADC_PollForConversion+0x200>)
 8002614:	400b      	ands	r3, r1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_ADC_PollForConversion+0x120>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68d9      	ldr	r1, [r3, #12]
 8002620:	4b3a      	ldr	r3, [pc, #232]	; (800270c <HAL_ADC_PollForConversion+0x204>)
 8002622:	400b      	ands	r3, r1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00d      	beq.n	8002644 <HAL_ADC_PollForConversion+0x13c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6919      	ldr	r1, [r3, #16]
 800262e:	4b38      	ldr	r3, [pc, #224]	; (8002710 <HAL_ADC_PollForConversion+0x208>)
 8002630:	400b      	ands	r3, r1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <HAL_ADC_PollForConversion+0x140>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68d9      	ldr	r1, [r3, #12]
 800263c:	4b34      	ldr	r3, [pc, #208]	; (8002710 <HAL_ADC_PollForConversion+0x208>)
 800263e:	400b      	ands	r3, r1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_PollForConversion+0x140>
 8002644:	2354      	movs	r3, #84	; 0x54
 8002646:	e000      	b.n	800264a <HAL_ADC_PollForConversion+0x142>
 8002648:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002650:	e021      	b.n	8002696 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d01a      	beq.n	8002690 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <HAL_ADC_PollForConversion+0x168>
 8002660:	f7ff fd72 	bl	8002148 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d20f      	bcs.n	8002690 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	429a      	cmp	r2, r3
 8002676:	d90b      	bls.n	8002690 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	f043 0204 	orr.w	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e030      	b.n	80026f2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3301      	adds	r3, #1
 8002694:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	429a      	cmp	r2, r3
 800269c:	d8d9      	bhi.n	8002652 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f06f 0212 	mvn.w	r2, #18
 80026a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026c2:	d115      	bne.n	80026f0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd90      	pop	{r4, r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000000 	.word	0x20000000
 8002700:	24924924 	.word	0x24924924
 8002704:	00924924 	.word	0x00924924
 8002708:	12492492 	.word	0x12492492
 800270c:	00492492 	.word	0x00492492
 8002710:	00249249 	.word	0x00249249

08002714 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x20>
 8002748:	2302      	movs	r3, #2
 800274a:	e0dc      	b.n	8002906 <HAL_ADC_ConfigChannel+0x1da>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b06      	cmp	r3, #6
 800275a:	d81c      	bhi.n	8002796 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	3b05      	subs	r3, #5
 800276e:	221f      	movs	r2, #31
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	4019      	ands	r1, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3b05      	subs	r3, #5
 8002788:	fa00 f203 	lsl.w	r2, r0, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	635a      	str	r2, [r3, #52]	; 0x34
 8002794:	e03c      	b.n	8002810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d81c      	bhi.n	80027d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b23      	subs	r3, #35	; 0x23
 80027b0:	221f      	movs	r2, #31
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	4019      	ands	r1, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	3b23      	subs	r3, #35	; 0x23
 80027ca:	fa00 f203 	lsl.w	r2, r0, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
 80027d6:	e01b      	b.n	8002810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	3b41      	subs	r3, #65	; 0x41
 80027ea:	221f      	movs	r2, #31
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	4019      	ands	r1, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b41      	subs	r3, #65	; 0x41
 8002804:	fa00 f203 	lsl.w	r2, r0, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b09      	cmp	r3, #9
 8002816:	d91c      	bls.n	8002852 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68d9      	ldr	r1, [r3, #12]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	3b1e      	subs	r3, #30
 800282a:	2207      	movs	r2, #7
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	4019      	ands	r1, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6898      	ldr	r0, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	3b1e      	subs	r3, #30
 8002844:	fa00 f203 	lsl.w	r2, r0, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	e019      	b.n	8002886 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6919      	ldr	r1, [r3, #16]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	2207      	movs	r2, #7
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	4019      	ands	r1, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6898      	ldr	r0, [r3, #8]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	fa00 f203 	lsl.w	r2, r0, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b10      	cmp	r3, #16
 800288c:	d003      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002892:	2b11      	cmp	r3, #17
 8002894:	d132      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <HAL_ADC_ConfigChannel+0x1e4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d125      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d126      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80028bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d11a      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_ADC_ConfigChannel+0x1e8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a13      	ldr	r2, [pc, #76]	; (8002918 <HAL_ADC_ConfigChannel+0x1ec>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	0c9a      	lsrs	r2, r3, #18
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028dc:	e002      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f9      	bne.n	80028de <HAL_ADC_ConfigChannel+0x1b2>
 80028ea:	e007      	b.n	80028fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	40012400 	.word	0x40012400
 8002914:	20000000 	.word	0x20000000
 8002918:	431bde83 	.word	0x431bde83

0800291c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d040      	beq.n	80029bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <ADC_Enable+0xac>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <ADC_Enable+0xb0>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	0c9b      	lsrs	r3, r3, #18
 8002956:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002958:	e002      	b.n	8002960 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3b01      	subs	r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f9      	bne.n	800295a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002966:	f7ff fbef 	bl	8002148 <HAL_GetTick>
 800296a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800296c:	e01f      	b.n	80029ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800296e:	f7ff fbeb 	bl	8002148 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d918      	bls.n	80029ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d011      	beq.n	80029ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	f043 0210 	orr.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e007      	b.n	80029be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d1d8      	bne.n	800296e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000000 	.word	0x20000000
 80029cc:	431bde83 	.word	0x431bde83

080029d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d12e      	bne.n	8002a48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029fa:	f7ff fba5 	bl	8002148 <HAL_GetTick>
 80029fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a00:	e01b      	b.n	8002a3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a02:	f7ff fba1 	bl	8002148 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d914      	bls.n	8002a3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10d      	bne.n	8002a3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	f043 0210 	orr.w	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e007      	b.n	8002a4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d0dc      	beq.n	8002a02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a70:	4013      	ands	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	60d3      	str	r3, [r2, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	f003 0307 	and.w	r3, r3, #7
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	; (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f1c3 0307 	rsb	r3, r3, #7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf28      	it	cs
 8002b2a:	2304      	movcs	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d902      	bls.n	8002b3c <NVIC_EncodePriority+0x30>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3b03      	subs	r3, #3
 8002b3a:	e000      	b.n	8002b3e <NVIC_EncodePriority+0x32>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	401a      	ands	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	4313      	orrs	r3, r2
         );
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b80:	d301      	bcc.n	8002b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <SysTick_Config+0x40>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f7ff ff90 	bl	8002ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <SysTick_Config+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <SysTick_Config+0x40>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff49 	bl	8002a54 <__NVIC_SetPriorityGrouping>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bdc:	f7ff ff5e 	bl	8002a9c <__NVIC_GetPriorityGrouping>
 8002be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff90 	bl	8002b0c <NVIC_EncodePriority>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff5f 	bl	8002ab8 <__NVIC_SetPriority>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ffb0 	bl	8002b70 <SysTick_Config>
 8002c10:	4603      	mov	r3, r0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b08b      	sub	sp, #44	; 0x2c
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	e169      	b.n	8002f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c30:	2201      	movs	r2, #1
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	f040 8158 	bne.w	8002efe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a9a      	ldr	r2, [pc, #616]	; (8002ebc <HAL_GPIO_Init+0x2a0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d05e      	beq.n	8002d16 <HAL_GPIO_Init+0xfa>
 8002c58:	4a98      	ldr	r2, [pc, #608]	; (8002ebc <HAL_GPIO_Init+0x2a0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d875      	bhi.n	8002d4a <HAL_GPIO_Init+0x12e>
 8002c5e:	4a98      	ldr	r2, [pc, #608]	; (8002ec0 <HAL_GPIO_Init+0x2a4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d058      	beq.n	8002d16 <HAL_GPIO_Init+0xfa>
 8002c64:	4a96      	ldr	r2, [pc, #600]	; (8002ec0 <HAL_GPIO_Init+0x2a4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d86f      	bhi.n	8002d4a <HAL_GPIO_Init+0x12e>
 8002c6a:	4a96      	ldr	r2, [pc, #600]	; (8002ec4 <HAL_GPIO_Init+0x2a8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d052      	beq.n	8002d16 <HAL_GPIO_Init+0xfa>
 8002c70:	4a94      	ldr	r2, [pc, #592]	; (8002ec4 <HAL_GPIO_Init+0x2a8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d869      	bhi.n	8002d4a <HAL_GPIO_Init+0x12e>
 8002c76:	4a94      	ldr	r2, [pc, #592]	; (8002ec8 <HAL_GPIO_Init+0x2ac>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d04c      	beq.n	8002d16 <HAL_GPIO_Init+0xfa>
 8002c7c:	4a92      	ldr	r2, [pc, #584]	; (8002ec8 <HAL_GPIO_Init+0x2ac>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d863      	bhi.n	8002d4a <HAL_GPIO_Init+0x12e>
 8002c82:	4a92      	ldr	r2, [pc, #584]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d046      	beq.n	8002d16 <HAL_GPIO_Init+0xfa>
 8002c88:	4a90      	ldr	r2, [pc, #576]	; (8002ecc <HAL_GPIO_Init+0x2b0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d85d      	bhi.n	8002d4a <HAL_GPIO_Init+0x12e>
 8002c8e:	2b12      	cmp	r3, #18
 8002c90:	d82a      	bhi.n	8002ce8 <HAL_GPIO_Init+0xcc>
 8002c92:	2b12      	cmp	r3, #18
 8002c94:	d859      	bhi.n	8002d4a <HAL_GPIO_Init+0x12e>
 8002c96:	a201      	add	r2, pc, #4	; (adr r2, 8002c9c <HAL_GPIO_Init+0x80>)
 8002c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9c:	08002d17 	.word	0x08002d17
 8002ca0:	08002cf1 	.word	0x08002cf1
 8002ca4:	08002d03 	.word	0x08002d03
 8002ca8:	08002d45 	.word	0x08002d45
 8002cac:	08002d4b 	.word	0x08002d4b
 8002cb0:	08002d4b 	.word	0x08002d4b
 8002cb4:	08002d4b 	.word	0x08002d4b
 8002cb8:	08002d4b 	.word	0x08002d4b
 8002cbc:	08002d4b 	.word	0x08002d4b
 8002cc0:	08002d4b 	.word	0x08002d4b
 8002cc4:	08002d4b 	.word	0x08002d4b
 8002cc8:	08002d4b 	.word	0x08002d4b
 8002ccc:	08002d4b 	.word	0x08002d4b
 8002cd0:	08002d4b 	.word	0x08002d4b
 8002cd4:	08002d4b 	.word	0x08002d4b
 8002cd8:	08002d4b 	.word	0x08002d4b
 8002cdc:	08002d4b 	.word	0x08002d4b
 8002ce0:	08002cf9 	.word	0x08002cf9
 8002ce4:	08002d0d 	.word	0x08002d0d
 8002ce8:	4a79      	ldr	r2, [pc, #484]	; (8002ed0 <HAL_GPIO_Init+0x2b4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cee:	e02c      	b.n	8002d4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	623b      	str	r3, [r7, #32]
          break;
 8002cf6:	e029      	b.n	8002d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	623b      	str	r3, [r7, #32]
          break;
 8002d00:	e024      	b.n	8002d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	3308      	adds	r3, #8
 8002d08:	623b      	str	r3, [r7, #32]
          break;
 8002d0a:	e01f      	b.n	8002d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	330c      	adds	r3, #12
 8002d12:	623b      	str	r3, [r7, #32]
          break;
 8002d14:	e01a      	b.n	8002d4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d1e:	2304      	movs	r3, #4
 8002d20:	623b      	str	r3, [r7, #32]
          break;
 8002d22:	e013      	b.n	8002d4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	611a      	str	r2, [r3, #16]
          break;
 8002d36:	e009      	b.n	8002d4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d38:	2308      	movs	r3, #8
 8002d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	615a      	str	r2, [r3, #20]
          break;
 8002d42:	e003      	b.n	8002d4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d44:	2300      	movs	r3, #0
 8002d46:	623b      	str	r3, [r7, #32]
          break;
 8002d48:	e000      	b.n	8002d4c <HAL_GPIO_Init+0x130>
          break;
 8002d4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2bff      	cmp	r3, #255	; 0xff
 8002d50:	d801      	bhi.n	8002d56 <HAL_GPIO_Init+0x13a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	e001      	b.n	8002d5a <HAL_GPIO_Init+0x13e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2bff      	cmp	r3, #255	; 0xff
 8002d60:	d802      	bhi.n	8002d68 <HAL_GPIO_Init+0x14c>
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	e002      	b.n	8002d6e <HAL_GPIO_Init+0x152>
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	3b08      	subs	r3, #8
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	210f      	movs	r1, #15
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	401a      	ands	r2, r3
 8002d80:	6a39      	ldr	r1, [r7, #32]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80b1 	beq.w	8002efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d9c:	4b4d      	ldr	r3, [pc, #308]	; (8002ed4 <HAL_GPIO_Init+0x2b8>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	4a4c      	ldr	r2, [pc, #304]	; (8002ed4 <HAL_GPIO_Init+0x2b8>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6193      	str	r3, [r2, #24]
 8002da8:	4b4a      	ldr	r3, [pc, #296]	; (8002ed4 <HAL_GPIO_Init+0x2b8>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002db4:	4a48      	ldr	r2, [pc, #288]	; (8002ed8 <HAL_GPIO_Init+0x2bc>)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	3302      	adds	r3, #2
 8002dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a40      	ldr	r2, [pc, #256]	; (8002edc <HAL_GPIO_Init+0x2c0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <HAL_GPIO_Init+0x1ec>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a3f      	ldr	r2, [pc, #252]	; (8002ee0 <HAL_GPIO_Init+0x2c4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00d      	beq.n	8002e04 <HAL_GPIO_Init+0x1e8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a3e      	ldr	r2, [pc, #248]	; (8002ee4 <HAL_GPIO_Init+0x2c8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <HAL_GPIO_Init+0x1e4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3d      	ldr	r2, [pc, #244]	; (8002ee8 <HAL_GPIO_Init+0x2cc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <HAL_GPIO_Init+0x1e0>
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e006      	b.n	8002e0a <HAL_GPIO_Init+0x1ee>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	e004      	b.n	8002e0a <HAL_GPIO_Init+0x1ee>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e002      	b.n	8002e0a <HAL_GPIO_Init+0x1ee>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_GPIO_Init+0x1ee>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	f002 0203 	and.w	r2, r2, #3
 8002e10:	0092      	lsls	r2, r2, #2
 8002e12:	4093      	lsls	r3, r2
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e1a:	492f      	ldr	r1, [pc, #188]	; (8002ed8 <HAL_GPIO_Init+0x2bc>)
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	3302      	adds	r3, #2
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e34:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	492c      	ldr	r1, [pc, #176]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]
 8002e40:	e006      	b.n	8002e50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e42:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	4928      	ldr	r1, [pc, #160]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d006      	beq.n	8002e6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e5c:	4b23      	ldr	r3, [pc, #140]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4922      	ldr	r1, [pc, #136]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
 8002e68:	e006      	b.n	8002e78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	491e      	ldr	r1, [pc, #120]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d006      	beq.n	8002e92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	4918      	ldr	r1, [pc, #96]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]
 8002e90:	e006      	b.n	8002ea0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	4914      	ldr	r1, [pc, #80]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d021      	beq.n	8002ef0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	490e      	ldr	r1, [pc, #56]	; (8002eec <HAL_GPIO_Init+0x2d0>)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
 8002eb8:	e021      	b.n	8002efe <HAL_GPIO_Init+0x2e2>
 8002eba:	bf00      	nop
 8002ebc:	10320000 	.word	0x10320000
 8002ec0:	10310000 	.word	0x10310000
 8002ec4:	10220000 	.word	0x10220000
 8002ec8:	10210000 	.word	0x10210000
 8002ecc:	10120000 	.word	0x10120000
 8002ed0:	10110000 	.word	0x10110000
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40010800 	.word	0x40010800
 8002ee0:	40010c00 	.word	0x40010c00
 8002ee4:	40011000 	.word	0x40011000
 8002ee8:	40011400 	.word	0x40011400
 8002eec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	4909      	ldr	r1, [pc, #36]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	3301      	adds	r3, #1
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f47f ae8e 	bne.w	8002c30 <HAL_GPIO_Init+0x14>
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	372c      	adds	r7, #44	; 0x2c
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	40010400 	.word	0x40010400

08002f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	887b      	ldrh	r3, [r7, #2]
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	e001      	b.n	8002f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	807b      	strh	r3, [r7, #2]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f62:	787b      	ldrb	r3, [r7, #1]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f68:	887a      	ldrh	r2, [r7, #2]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f6e:	e003      	b.n	8002f78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	041a      	lsls	r2, r3, #16
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	611a      	str	r2, [r3, #16]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
	...

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e272      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fa4:	4b92      	ldr	r3, [pc, #584]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d00c      	beq.n	8002fca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fb0:	4b8f      	ldr	r3, [pc, #572]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d112      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x5e>
 8002fbc:	4b8c      	ldr	r3, [pc, #560]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fca:	4b89      	ldr	r3, [pc, #548]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d06c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x12c>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d168      	bne.n	80030b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e24c      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x76>
 8002fec:	4b80      	ldr	r3, [pc, #512]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a7f      	ldr	r2, [pc, #508]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	e02e      	b.n	8003058 <HAL_RCC_OscConfig+0xd4>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x98>
 8003002:	4b7b      	ldr	r3, [pc, #492]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7a      	ldr	r2, [pc, #488]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b78      	ldr	r3, [pc, #480]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a77      	ldr	r2, [pc, #476]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e01d      	b.n	8003058 <HAL_RCC_OscConfig+0xd4>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0xbc>
 8003026:	4b72      	ldr	r3, [pc, #456]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a71      	ldr	r2, [pc, #452]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800302c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b6f      	ldr	r3, [pc, #444]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a6e      	ldr	r2, [pc, #440]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0xd4>
 8003040:	4b6b      	ldr	r3, [pc, #428]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a6a      	ldr	r2, [pc, #424]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b68      	ldr	r3, [pc, #416]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a67      	ldr	r2, [pc, #412]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003056:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7ff f872 	bl	8002148 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7ff f86e 	bl	8002148 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e200      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	4b5d      	ldr	r3, [pc, #372]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0xe4>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff f85e 	bl	8002148 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003090:	f7ff f85a 	bl	8002148 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e1ec      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x10c>
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d063      	beq.n	8003186 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030be:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030ca:	4b49      	ldr	r3, [pc, #292]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d11c      	bne.n	8003110 <HAL_RCC_OscConfig+0x18c>
 80030d6:	4b46      	ldr	r3, [pc, #280]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d116      	bne.n	8003110 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	4b43      	ldr	r3, [pc, #268]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_RCC_OscConfig+0x176>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d001      	beq.n	80030fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e1c0      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	4b3d      	ldr	r3, [pc, #244]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4939      	ldr	r1, [pc, #228]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310e:	e03a      	b.n	8003186 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003118:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <HAL_RCC_OscConfig+0x270>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7ff f813 	bl	8002148 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003126:	f7ff f80f 	bl	8002148 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e1a1      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003138:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003144:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4927      	ldr	r1, [pc, #156]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
 8003158:	e015      	b.n	8003186 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315a:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <HAL_RCC_OscConfig+0x270>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fe fff2 	bl	8002148 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003168:	f7fe ffee 	bl	8002148 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e180      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d03a      	beq.n	8003208 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d019      	beq.n	80031ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319a:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a0:	f7fe ffd2 	bl	8002148 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a8:	f7fe ffce 	bl	8002148 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e160      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031c6:	2001      	movs	r0, #1
 80031c8:	f000 fad8 	bl	800377c <RCC_Delay>
 80031cc:	e01c      	b.n	8003208 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7fe ffb8 	bl	8002148 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031da:	e00f      	b.n	80031fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031dc:	f7fe ffb4 	bl	8002148 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d908      	bls.n	80031fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e146      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	42420000 	.word	0x42420000
 80031f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	4b92      	ldr	r3, [pc, #584]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e9      	bne.n	80031dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80a6 	beq.w	8003362 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321a:	4b8b      	ldr	r3, [pc, #556]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10d      	bne.n	8003242 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	4b88      	ldr	r3, [pc, #544]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4a87      	ldr	r2, [pc, #540]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	61d3      	str	r3, [r2, #28]
 8003232:	4b85      	ldr	r3, [pc, #532]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b82      	ldr	r3, [pc, #520]	; (800344c <HAL_RCC_OscConfig+0x4c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d118      	bne.n	8003280 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324e:	4b7f      	ldr	r3, [pc, #508]	; (800344c <HAL_RCC_OscConfig+0x4c8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a7e      	ldr	r2, [pc, #504]	; (800344c <HAL_RCC_OscConfig+0x4c8>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325a:	f7fe ff75 	bl	8002148 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7fe ff71 	bl	8002148 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b64      	cmp	r3, #100	; 0x64
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e103      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	4b75      	ldr	r3, [pc, #468]	; (800344c <HAL_RCC_OscConfig+0x4c8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x312>
 8003288:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4a6e      	ldr	r2, [pc, #440]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6213      	str	r3, [r2, #32]
 8003294:	e02d      	b.n	80032f2 <HAL_RCC_OscConfig+0x36e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x334>
 800329e:	4b6a      	ldr	r3, [pc, #424]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4a69      	ldr	r2, [pc, #420]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6213      	str	r3, [r2, #32]
 80032aa:	4b67      	ldr	r3, [pc, #412]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4a66      	ldr	r2, [pc, #408]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	6213      	str	r3, [r2, #32]
 80032b6:	e01c      	b.n	80032f2 <HAL_RCC_OscConfig+0x36e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b05      	cmp	r3, #5
 80032be:	d10c      	bne.n	80032da <HAL_RCC_OscConfig+0x356>
 80032c0:	4b61      	ldr	r3, [pc, #388]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4a60      	ldr	r2, [pc, #384]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	6213      	str	r3, [r2, #32]
 80032cc:	4b5e      	ldr	r3, [pc, #376]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	4a5d      	ldr	r2, [pc, #372]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6213      	str	r3, [r2, #32]
 80032d8:	e00b      	b.n	80032f2 <HAL_RCC_OscConfig+0x36e>
 80032da:	4b5b      	ldr	r3, [pc, #364]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4a5a      	ldr	r2, [pc, #360]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	6213      	str	r3, [r2, #32]
 80032e6:	4b58      	ldr	r3, [pc, #352]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4a57      	ldr	r2, [pc, #348]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	f023 0304 	bic.w	r3, r3, #4
 80032f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d015      	beq.n	8003326 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fa:	f7fe ff25 	bl	8002148 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fe ff21 	bl	8002148 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0b1      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	4b4b      	ldr	r3, [pc, #300]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ee      	beq.n	8003302 <HAL_RCC_OscConfig+0x37e>
 8003324:	e014      	b.n	8003350 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003326:	f7fe ff0f 	bl	8002148 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332c:	e00a      	b.n	8003344 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332e:	f7fe ff0b 	bl	8002148 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	f241 3288 	movw	r2, #5000	; 0x1388
 800333c:	4293      	cmp	r3, r2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e09b      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003344:	4b40      	ldr	r3, [pc, #256]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1ee      	bne.n	800332e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003356:	4b3c      	ldr	r3, [pc, #240]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4a3b      	ldr	r2, [pc, #236]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003360:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8087 	beq.w	800347a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800336c:	4b36      	ldr	r3, [pc, #216]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b08      	cmp	r3, #8
 8003376:	d061      	beq.n	800343c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d146      	bne.n	800340e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003380:	4b33      	ldr	r3, [pc, #204]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7fe fedf 	bl	8002148 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fe fedb 	bl	8002148 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e06d      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a0:	4b29      	ldr	r3, [pc, #164]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d108      	bne.n	80033c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	4921      	ldr	r1, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c8:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a19      	ldr	r1, [r3, #32]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	430b      	orrs	r3, r1
 80033da:	491b      	ldr	r1, [pc, #108]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fe feaf 	bl	8002148 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fe feab 	bl	8002148 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e03d      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x46a>
 800340c:	e035      	b.n	800347a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fe fe98 	bl	8002148 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341c:	f7fe fe94 	bl	8002148 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e026      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x498>
 800343a:	e01e      	b.n	800347a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d107      	bne.n	8003454 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e019      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
 8003448:	40021000 	.word	0x40021000
 800344c:	40007000 	.word	0x40007000
 8003450:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_OscConfig+0x500>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	429a      	cmp	r2, r3
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000

08003488 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0d0      	b.n	800363e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800349c:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d910      	bls.n	80034cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b67      	ldr	r3, [pc, #412]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 0207 	bic.w	r2, r3, #7
 80034b2:	4965      	ldr	r1, [pc, #404]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b63      	ldr	r3, [pc, #396]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0b8      	b.n	800363e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e4:	4b59      	ldr	r3, [pc, #356]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4a58      	ldr	r2, [pc, #352]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034fc:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a52      	ldr	r2, [pc, #328]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003506:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b50      	ldr	r3, [pc, #320]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	494d      	ldr	r1, [pc, #308]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d040      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b47      	ldr	r3, [pc, #284]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d115      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e07f      	b.n	800363e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003546:	4b41      	ldr	r3, [pc, #260]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e073      	b.n	800363e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e06b      	b.n	800363e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003566:	4b39      	ldr	r3, [pc, #228]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4936      	ldr	r1, [pc, #216]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003578:	f7fe fde6 	bl	8002148 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	e00a      	b.n	8003596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fe fde2 	bl	8002148 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e053      	b.n	800363e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b2d      	ldr	r3, [pc, #180]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 020c 	and.w	r2, r3, #12
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d1eb      	bne.n	8003580 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a8:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d210      	bcs.n	80035d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 0207 	bic.w	r2, r3, #7
 80035be:	4922      	ldr	r1, [pc, #136]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e032      	b.n	800363e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e4:	4b19      	ldr	r3, [pc, #100]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4916      	ldr	r1, [pc, #88]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	490e      	ldr	r1, [pc, #56]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003616:	f000 f821 	bl	800365c <HAL_RCC_GetSysClockFreq>
 800361a:	4602      	mov	r2, r0
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	490a      	ldr	r1, [pc, #40]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	5ccb      	ldrb	r3, [r1, r3]
 800362a:	fa22 f303 	lsr.w	r3, r2, r3
 800362e:	4a09      	ldr	r2, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1cc>)
 8003630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1d0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fd44 	bl	80020c4 <HAL_InitTick>

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40022000 	.word	0x40022000
 800364c:	40021000 	.word	0x40021000
 8003650:	0800727c 	.word	0x0800727c
 8003654:	20000000 	.word	0x20000000
 8003658:	20000014 	.word	0x20000014

0800365c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800365c:	b490      	push	{r4, r7}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003662:	4b29      	ldr	r3, [pc, #164]	; (8003708 <HAL_RCC_GetSysClockFreq+0xac>)
 8003664:	1d3c      	adds	r4, r7, #4
 8003666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003668:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800366c:	f240 2301 	movw	r3, #513	; 0x201
 8003670:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	2300      	movs	r3, #0
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b04      	cmp	r3, #4
 8003694:	d002      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x40>
 8003696:	2b08      	cmp	r3, #8
 8003698:	d003      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0x46>
 800369a:	e02b      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800369c:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <HAL_RCC_GetSysClockFreq+0xb4>)
 800369e:	623b      	str	r3, [r7, #32]
      break;
 80036a0:	e02b      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	0c9b      	lsrs	r3, r3, #18
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	3328      	adds	r3, #40	; 0x28
 80036ac:	443b      	add	r3, r7
 80036ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d012      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_RCC_GetSysClockFreq+0xb0>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	0c5b      	lsrs	r3, r3, #17
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	3328      	adds	r3, #40	; 0x28
 80036ca:	443b      	add	r3, r7
 80036cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	4a0e      	ldr	r2, [pc, #56]	; (8003710 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036d6:	fb03 f202 	mul.w	r2, r3, r2
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	e004      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	623b      	str	r3, [r7, #32]
      break;
 80036f2:	e002      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036f6:	623b      	str	r3, [r7, #32]
      break;
 80036f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036fa:	6a3b      	ldr	r3, [r7, #32]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3728      	adds	r7, #40	; 0x28
 8003700:	46bd      	mov	sp, r7
 8003702:	bc90      	pop	{r4, r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	0800725c 	.word	0x0800725c
 800370c:	40021000 	.word	0x40021000
 8003710:	007a1200 	.word	0x007a1200
 8003714:	003d0900 	.word	0x003d0900

08003718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800371c:	4b02      	ldr	r3, [pc, #8]	; (8003728 <HAL_RCC_GetHCLKFreq+0x10>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20000000 	.word	0x20000000

0800372c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003730:	f7ff fff2 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	0800728c 	.word	0x0800728c

08003754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003758:	f7ff ffde 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	0adb      	lsrs	r3, r3, #11
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4903      	ldr	r1, [pc, #12]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	0800728c 	.word	0x0800728c

0800377c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <RCC_Delay+0x34>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <RCC_Delay+0x38>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	0a5b      	lsrs	r3, r3, #9
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003798:	bf00      	nop
  }
  while (Delay --);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1e5a      	subs	r2, r3, #1
 800379e:	60fa      	str	r2, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f9      	bne.n	8003798 <RCC_Delay+0x1c>
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	20000000 	.word	0x20000000
 80037b4:	10624dd3 	.word	0x10624dd3

080037b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d07d      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037d4:	2300      	movs	r3, #0
 80037d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d8:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10d      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4a4b      	ldr	r2, [pc, #300]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	61d3      	str	r3, [r2, #28]
 80037f0:	4b49      	ldr	r3, [pc, #292]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fc:	2301      	movs	r3, #1
 80037fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003800:	4b46      	ldr	r3, [pc, #280]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d118      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800380c:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a42      	ldr	r2, [pc, #264]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003816:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003818:	f7fe fc96 	bl	8002148 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	e008      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003820:	f7fe fc92 	bl	8002148 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e06d      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003832:	4b3a      	ldr	r3, [pc, #232]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800383e:	4b36      	ldr	r3, [pc, #216]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d02e      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	429a      	cmp	r2, r3
 800385a:	d027      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800385c:	4b2e      	ldr	r3, [pc, #184]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003864:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003866:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800386c:	4b2c      	ldr	r3, [pc, #176]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003872:	4a29      	ldr	r2, [pc, #164]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d014      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fe fc61 	bl	8002148 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003888:	e00a      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fe fc5d 	bl	8002148 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e036      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0ee      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4917      	ldr	r1, [pc, #92]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d105      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	4a13      	ldr	r2, [pc, #76]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	490b      	ldr	r1, [pc, #44]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4904      	ldr	r1, [pc, #16]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
 8003920:	42420440 	.word	0x42420440

08003924 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b08d      	sub	sp, #52	; 0x34
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800392c:	4b58      	ldr	r3, [pc, #352]	; (8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800392e:	f107 040c 	add.w	r4, r7, #12
 8003932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003938:	f240 2301 	movw	r3, #513	; 0x201
 800393c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
 8003942:	2300      	movs	r3, #0
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003946:	2300      	movs	r3, #0
 8003948:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	2300      	movs	r3, #0
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b10      	cmp	r3, #16
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b10      	cmp	r3, #16
 800395c:	f200 808e 	bhi.w	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d049      	beq.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d079      	beq.n	8003a60 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800396c:	e086      	b.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800396e:	4b49      	ldr	r3, [pc, #292]	; (8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003974:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d07f      	beq.n	8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	0c9b      	lsrs	r3, r3, #18
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	3330      	adds	r3, #48	; 0x30
 800398a:	443b      	add	r3, r7
 800398c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003990:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d017      	beq.n	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800399c:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	0c5b      	lsrs	r3, r3, #17
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	3330      	adds	r3, #48	; 0x30
 80039a8:	443b      	add	r3, r7
 80039aa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00d      	beq.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80039ba:	4a37      	ldr	r2, [pc, #220]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ca:	e004      	b.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	4a33      	ldr	r2, [pc, #204]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80039d6:	4b2f      	ldr	r3, [pc, #188]	; (8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e2:	d102      	bne.n	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039e8:	e04a      	b.n	8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4a2c      	ldr	r2, [pc, #176]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	085b      	lsrs	r3, r3, #1
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039f8:	e042      	b.n	8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80039fa:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0a:	d108      	bne.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a1c:	e01f      	b.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a28:	d109      	bne.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003a36:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3c:	e00f      	b.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a48:	d11c      	bne.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d016      	beq.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003a56:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a5c:	e012      	b.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003a5e:	e011      	b.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a60:	f7ff fe78 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	0b9b      	lsrs	r3, r3, #14
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	3301      	adds	r3, #1
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a7a:	e004      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a7c:	bf00      	nop
 8003a7e:	e002      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a80:	bf00      	nop
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a84:	bf00      	nop
    }
  }
  return (frequency);
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3734      	adds	r7, #52	; 0x34
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd90      	pop	{r4, r7, pc}
 8003a90:	0800726c 	.word	0x0800726c
 8003a94:	40021000 	.word	0x40021000
 8003a98:	007a1200 	.word	0x007a1200
 8003a9c:	003d0900 	.word	0x003d0900
 8003aa0:	aaaaaaab 	.word	0xaaaaaaab

08003aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e041      	b.n	8003b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fe f810 	bl	8001af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f000 f93c 	bl	8003d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d001      	beq.n	8003b5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e032      	b.n	8003bc2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <HAL_TIM_Base_Start+0x88>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <HAL_TIM_Base_Start+0x48>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b76:	d009      	beq.n	8003b8c <HAL_TIM_Base_Start+0x48>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <HAL_TIM_Base_Start+0x8c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_TIM_Base_Start+0x48>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <HAL_TIM_Base_Start+0x90>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d111      	bne.n	8003bb0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d010      	beq.n	8003bc0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bae:	e007      	b.n	8003bc0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800

08003bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_TIM_ConfigClockSource+0x18>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e0b3      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x180>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c28:	d03e      	beq.n	8003ca8 <HAL_TIM_ConfigClockSource+0xd0>
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2e:	f200 8087 	bhi.w	8003d40 <HAL_TIM_ConfigClockSource+0x168>
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c36:	f000 8085 	beq.w	8003d44 <HAL_TIM_ConfigClockSource+0x16c>
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3e:	d87f      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x168>
 8003c40:	2b70      	cmp	r3, #112	; 0x70
 8003c42:	d01a      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0xa2>
 8003c44:	2b70      	cmp	r3, #112	; 0x70
 8003c46:	d87b      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x168>
 8003c48:	2b60      	cmp	r3, #96	; 0x60
 8003c4a:	d050      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x116>
 8003c4c:	2b60      	cmp	r3, #96	; 0x60
 8003c4e:	d877      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x168>
 8003c50:	2b50      	cmp	r3, #80	; 0x50
 8003c52:	d03c      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xf6>
 8003c54:	2b50      	cmp	r3, #80	; 0x50
 8003c56:	d873      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x168>
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	d058      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x136>
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d86f      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x168>
 8003c60:	2b30      	cmp	r3, #48	; 0x30
 8003c62:	d064      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x156>
 8003c64:	2b30      	cmp	r3, #48	; 0x30
 8003c66:	d86b      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x168>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d060      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x156>
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d867      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x168>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d05c      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x156>
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d05a      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c78:	e062      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6899      	ldr	r1, [r3, #8]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f000 f942 	bl	8003f12 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	609a      	str	r2, [r3, #8]
      break;
 8003ca6:	e04e      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	6899      	ldr	r1, [r3, #8]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f000 f92b 	bl	8003f12 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cca:	609a      	str	r2, [r3, #8]
      break;
 8003ccc:	e03b      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f000 f8a2 	bl	8003e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2150      	movs	r1, #80	; 0x50
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f8f9 	bl	8003ede <TIM_ITRx_SetConfig>
      break;
 8003cec:	e02b      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f000 f8c0 	bl	8003e80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2160      	movs	r1, #96	; 0x60
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f8e9 	bl	8003ede <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e01b      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 f882 	bl	8003e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2140      	movs	r1, #64	; 0x40
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f8d9 	bl	8003ede <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e00b      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f000 f8d0 	bl	8003ede <TIM_ITRx_SetConfig>
        break;
 8003d3e:	e002      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d40:	bf00      	nop
 8003d42:	e000      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <TIM_Base_SetConfig+0xb8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_Base_SetConfig+0x30>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0x30>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a26      	ldr	r2, [pc, #152]	; (8003e1c <TIM_Base_SetConfig+0xbc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0x30>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a25      	ldr	r2, [pc, #148]	; (8003e20 <TIM_Base_SetConfig+0xc0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d108      	bne.n	8003da2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <TIM_Base_SetConfig+0xb8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <TIM_Base_SetConfig+0x62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d007      	beq.n	8003dc2 <TIM_Base_SetConfig+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <TIM_Base_SetConfig+0xbc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_Base_SetConfig+0x62>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a18      	ldr	r2, [pc, #96]	; (8003e20 <TIM_Base_SetConfig+0xc0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d108      	bne.n	8003dd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <TIM_Base_SetConfig+0xb8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d103      	bne.n	8003e08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	615a      	str	r2, [r3, #20]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800

08003e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f023 0201 	bic.w	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f023 030a 	bic.w	r3, r3, #10
 8003e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f023 0210 	bic.w	r2, r3, #16
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	031b      	lsls	r3, r3, #12
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ebc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f043 0307 	orr.w	r3, r3, #7
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b087      	sub	sp, #28
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	021a      	lsls	r2, r3, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	609a      	str	r2, [r3, #8]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e046      	b.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a16      	ldr	r2, [pc, #88]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d009      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a12      	ldr	r2, [pc, #72]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a10      	ldr	r2, [pc, #64]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800

0800400c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e03f      	b.n	800409e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd fd7a 	bl	8001b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2224      	movs	r2, #36	; 0x24
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800404e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f905 	bl	8004260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b08a      	sub	sp, #40	; 0x28
 80040aa:	af02      	add	r7, sp, #8
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	4613      	mov	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d17c      	bne.n	80041c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_UART_Transmit+0x2c>
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e075      	b.n	80041c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_UART_Transmit+0x3e>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e06e      	b.n	80041c2 <HAL_UART_Transmit+0x11c>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2221      	movs	r2, #33	; 0x21
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040fa:	f7fe f825 	bl	8002148 <HAL_GetTick>
 80040fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	88fa      	ldrh	r2, [r7, #6]
 8004104:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004114:	d108      	bne.n	8004128 <HAL_UART_Transmit+0x82>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d104      	bne.n	8004128 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	e003      	b.n	8004130 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800412c:	2300      	movs	r3, #0
 800412e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004138:	e02a      	b.n	8004190 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	2180      	movs	r1, #128	; 0x80
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f840 	bl	80041ca <UART_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e036      	b.n	80041c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004168:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	3302      	adds	r3, #2
 800416e:	61bb      	str	r3, [r7, #24]
 8004170:	e007      	b.n	8004182 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	3301      	adds	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1cf      	bne.n	800413a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	2140      	movs	r1, #64	; 0x40
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f810 	bl	80041ca <UART_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e006      	b.n	80041c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	e000      	b.n	80041c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
  }
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3720      	adds	r7, #32
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	4613      	mov	r3, r2
 80041d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041da:	e02c      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	d028      	beq.n	8004236 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0x30>
 80041ea:	f7fd ffad 	bl	8002148 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d21d      	bcs.n	8004236 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004208:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0201 	bic.w	r2, r2, #1
 8004218:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e00f      	b.n	8004256 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4013      	ands	r3, r2
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	429a      	cmp	r2, r3
 8004244:	bf0c      	ite	eq
 8004246:	2301      	moveq	r3, #1
 8004248:	2300      	movne	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	429a      	cmp	r2, r3
 8004252:	d0c3      	beq.n	80041dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800429a:	f023 030c 	bic.w	r3, r3, #12
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a2c      	ldr	r2, [pc, #176]	; (8004374 <UART_SetConfig+0x114>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d103      	bne.n	80042d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042c8:	f7ff fa44 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	e002      	b.n	80042d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7ff fa2c 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 80042d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009a      	lsls	r2, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	4a22      	ldr	r2, [pc, #136]	; (8004378 <UART_SetConfig+0x118>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	0119      	lsls	r1, r3, #4
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009a      	lsls	r2, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	fbb2 f2f3 	udiv	r2, r2, r3
 800430c:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <UART_SetConfig+0x118>)
 800430e:	fba3 0302 	umull	r0, r3, r3, r2
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2064      	movs	r0, #100	; 0x64
 8004316:	fb00 f303 	mul.w	r3, r0, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	3332      	adds	r3, #50	; 0x32
 8004320:	4a15      	ldr	r2, [pc, #84]	; (8004378 <UART_SetConfig+0x118>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800432c:	4419      	add	r1, r3
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009a      	lsls	r2, r3, #2
 8004338:	441a      	add	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	fbb2 f2f3 	udiv	r2, r2, r3
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <UART_SetConfig+0x118>)
 8004346:	fba3 0302 	umull	r0, r3, r3, r2
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2064      	movs	r0, #100	; 0x64
 800434e:	fb00 f303 	mul.w	r3, r0, r3
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	3332      	adds	r3, #50	; 0x32
 8004358:	4a07      	ldr	r2, [pc, #28]	; (8004378 <UART_SetConfig+0x118>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	f003 020f 	and.w	r2, r3, #15
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	440a      	add	r2, r1
 800436a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40013800 	.word	0x40013800
 8004378:	51eb851f 	.word	0x51eb851f

0800437c <__errno>:
 800437c:	4b01      	ldr	r3, [pc, #4]	; (8004384 <__errno+0x8>)
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	2000001c 	.word	0x2000001c

08004388 <__libc_init_array>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	2600      	movs	r6, #0
 800438c:	4d0c      	ldr	r5, [pc, #48]	; (80043c0 <__libc_init_array+0x38>)
 800438e:	4c0d      	ldr	r4, [pc, #52]	; (80043c4 <__libc_init_array+0x3c>)
 8004390:	1b64      	subs	r4, r4, r5
 8004392:	10a4      	asrs	r4, r4, #2
 8004394:	42a6      	cmp	r6, r4
 8004396:	d109      	bne.n	80043ac <__libc_init_array+0x24>
 8004398:	f002 ff0e 	bl	80071b8 <_init>
 800439c:	2600      	movs	r6, #0
 800439e:	4d0a      	ldr	r5, [pc, #40]	; (80043c8 <__libc_init_array+0x40>)
 80043a0:	4c0a      	ldr	r4, [pc, #40]	; (80043cc <__libc_init_array+0x44>)
 80043a2:	1b64      	subs	r4, r4, r5
 80043a4:	10a4      	asrs	r4, r4, #2
 80043a6:	42a6      	cmp	r6, r4
 80043a8:	d105      	bne.n	80043b6 <__libc_init_array+0x2e>
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b0:	4798      	blx	r3
 80043b2:	3601      	adds	r6, #1
 80043b4:	e7ee      	b.n	8004394 <__libc_init_array+0xc>
 80043b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ba:	4798      	blx	r3
 80043bc:	3601      	adds	r6, #1
 80043be:	e7f2      	b.n	80043a6 <__libc_init_array+0x1e>
 80043c0:	0800766c 	.word	0x0800766c
 80043c4:	0800766c 	.word	0x0800766c
 80043c8:	0800766c 	.word	0x0800766c
 80043cc:	08007670 	.word	0x08007670

080043d0 <memset>:
 80043d0:	4603      	mov	r3, r0
 80043d2:	4402      	add	r2, r0
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d100      	bne.n	80043da <memset+0xa>
 80043d8:	4770      	bx	lr
 80043da:	f803 1b01 	strb.w	r1, [r3], #1
 80043de:	e7f9      	b.n	80043d4 <memset+0x4>

080043e0 <__cvt>:
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e6:	461f      	mov	r7, r3
 80043e8:	bfbb      	ittet	lt
 80043ea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80043ee:	461f      	movlt	r7, r3
 80043f0:	2300      	movge	r3, #0
 80043f2:	232d      	movlt	r3, #45	; 0x2d
 80043f4:	b088      	sub	sp, #32
 80043f6:	4614      	mov	r4, r2
 80043f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80043fc:	7013      	strb	r3, [r2, #0]
 80043fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004400:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004404:	f023 0820 	bic.w	r8, r3, #32
 8004408:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800440c:	d005      	beq.n	800441a <__cvt+0x3a>
 800440e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004412:	d100      	bne.n	8004416 <__cvt+0x36>
 8004414:	3501      	adds	r5, #1
 8004416:	2302      	movs	r3, #2
 8004418:	e000      	b.n	800441c <__cvt+0x3c>
 800441a:	2303      	movs	r3, #3
 800441c:	aa07      	add	r2, sp, #28
 800441e:	9204      	str	r2, [sp, #16]
 8004420:	aa06      	add	r2, sp, #24
 8004422:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004426:	e9cd 3500 	strd	r3, r5, [sp]
 800442a:	4622      	mov	r2, r4
 800442c:	463b      	mov	r3, r7
 800442e:	f000 fcf7 	bl	8004e20 <_dtoa_r>
 8004432:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004436:	4606      	mov	r6, r0
 8004438:	d102      	bne.n	8004440 <__cvt+0x60>
 800443a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800443c:	07db      	lsls	r3, r3, #31
 800443e:	d522      	bpl.n	8004486 <__cvt+0xa6>
 8004440:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004444:	eb06 0905 	add.w	r9, r6, r5
 8004448:	d110      	bne.n	800446c <__cvt+0x8c>
 800444a:	7833      	ldrb	r3, [r6, #0]
 800444c:	2b30      	cmp	r3, #48	; 0x30
 800444e:	d10a      	bne.n	8004466 <__cvt+0x86>
 8004450:	2200      	movs	r2, #0
 8004452:	2300      	movs	r3, #0
 8004454:	4620      	mov	r0, r4
 8004456:	4639      	mov	r1, r7
 8004458:	f7fc faa6 	bl	80009a8 <__aeabi_dcmpeq>
 800445c:	b918      	cbnz	r0, 8004466 <__cvt+0x86>
 800445e:	f1c5 0501 	rsb	r5, r5, #1
 8004462:	f8ca 5000 	str.w	r5, [sl]
 8004466:	f8da 3000 	ldr.w	r3, [sl]
 800446a:	4499      	add	r9, r3
 800446c:	2200      	movs	r2, #0
 800446e:	2300      	movs	r3, #0
 8004470:	4620      	mov	r0, r4
 8004472:	4639      	mov	r1, r7
 8004474:	f7fc fa98 	bl	80009a8 <__aeabi_dcmpeq>
 8004478:	b108      	cbz	r0, 800447e <__cvt+0x9e>
 800447a:	f8cd 901c 	str.w	r9, [sp, #28]
 800447e:	2230      	movs	r2, #48	; 0x30
 8004480:	9b07      	ldr	r3, [sp, #28]
 8004482:	454b      	cmp	r3, r9
 8004484:	d307      	bcc.n	8004496 <__cvt+0xb6>
 8004486:	4630      	mov	r0, r6
 8004488:	9b07      	ldr	r3, [sp, #28]
 800448a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800448c:	1b9b      	subs	r3, r3, r6
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	b008      	add	sp, #32
 8004492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004496:	1c59      	adds	r1, r3, #1
 8004498:	9107      	str	r1, [sp, #28]
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e7f0      	b.n	8004480 <__cvt+0xa0>

0800449e <__exponent>:
 800449e:	4603      	mov	r3, r0
 80044a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044a2:	2900      	cmp	r1, #0
 80044a4:	f803 2b02 	strb.w	r2, [r3], #2
 80044a8:	bfb6      	itet	lt
 80044aa:	222d      	movlt	r2, #45	; 0x2d
 80044ac:	222b      	movge	r2, #43	; 0x2b
 80044ae:	4249      	neglt	r1, r1
 80044b0:	2909      	cmp	r1, #9
 80044b2:	7042      	strb	r2, [r0, #1]
 80044b4:	dd2b      	ble.n	800450e <__exponent+0x70>
 80044b6:	f10d 0407 	add.w	r4, sp, #7
 80044ba:	46a4      	mov	ip, r4
 80044bc:	270a      	movs	r7, #10
 80044be:	fb91 f6f7 	sdiv	r6, r1, r7
 80044c2:	460a      	mov	r2, r1
 80044c4:	46a6      	mov	lr, r4
 80044c6:	fb07 1516 	mls	r5, r7, r6, r1
 80044ca:	2a63      	cmp	r2, #99	; 0x63
 80044cc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80044d0:	4631      	mov	r1, r6
 80044d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80044d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80044da:	dcf0      	bgt.n	80044be <__exponent+0x20>
 80044dc:	3130      	adds	r1, #48	; 0x30
 80044de:	f1ae 0502 	sub.w	r5, lr, #2
 80044e2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80044e6:	4629      	mov	r1, r5
 80044e8:	1c44      	adds	r4, r0, #1
 80044ea:	4561      	cmp	r1, ip
 80044ec:	d30a      	bcc.n	8004504 <__exponent+0x66>
 80044ee:	f10d 0209 	add.w	r2, sp, #9
 80044f2:	eba2 020e 	sub.w	r2, r2, lr
 80044f6:	4565      	cmp	r5, ip
 80044f8:	bf88      	it	hi
 80044fa:	2200      	movhi	r2, #0
 80044fc:	4413      	add	r3, r2
 80044fe:	1a18      	subs	r0, r3, r0
 8004500:	b003      	add	sp, #12
 8004502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004504:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004508:	f804 2f01 	strb.w	r2, [r4, #1]!
 800450c:	e7ed      	b.n	80044ea <__exponent+0x4c>
 800450e:	2330      	movs	r3, #48	; 0x30
 8004510:	3130      	adds	r1, #48	; 0x30
 8004512:	7083      	strb	r3, [r0, #2]
 8004514:	70c1      	strb	r1, [r0, #3]
 8004516:	1d03      	adds	r3, r0, #4
 8004518:	e7f1      	b.n	80044fe <__exponent+0x60>
	...

0800451c <_printf_float>:
 800451c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004520:	b091      	sub	sp, #68	; 0x44
 8004522:	460c      	mov	r4, r1
 8004524:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004528:	4616      	mov	r6, r2
 800452a:	461f      	mov	r7, r3
 800452c:	4605      	mov	r5, r0
 800452e:	f001 fa65 	bl	80059fc <_localeconv_r>
 8004532:	6803      	ldr	r3, [r0, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	9309      	str	r3, [sp, #36]	; 0x24
 8004538:	f7fb fe0a 	bl	8000150 <strlen>
 800453c:	2300      	movs	r3, #0
 800453e:	930e      	str	r3, [sp, #56]	; 0x38
 8004540:	f8d8 3000 	ldr.w	r3, [r8]
 8004544:	900a      	str	r0, [sp, #40]	; 0x28
 8004546:	3307      	adds	r3, #7
 8004548:	f023 0307 	bic.w	r3, r3, #7
 800454c:	f103 0208 	add.w	r2, r3, #8
 8004550:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004554:	f8d4 b000 	ldr.w	fp, [r4]
 8004558:	f8c8 2000 	str.w	r2, [r8]
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004564:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004568:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800456c:	930b      	str	r3, [sp, #44]	; 0x2c
 800456e:	f04f 32ff 	mov.w	r2, #4294967295
 8004572:	4640      	mov	r0, r8
 8004574:	4b9c      	ldr	r3, [pc, #624]	; (80047e8 <_printf_float+0x2cc>)
 8004576:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004578:	f7fc fa48 	bl	8000a0c <__aeabi_dcmpun>
 800457c:	bb70      	cbnz	r0, 80045dc <_printf_float+0xc0>
 800457e:	f04f 32ff 	mov.w	r2, #4294967295
 8004582:	4640      	mov	r0, r8
 8004584:	4b98      	ldr	r3, [pc, #608]	; (80047e8 <_printf_float+0x2cc>)
 8004586:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004588:	f7fc fa22 	bl	80009d0 <__aeabi_dcmple>
 800458c:	bb30      	cbnz	r0, 80045dc <_printf_float+0xc0>
 800458e:	2200      	movs	r2, #0
 8004590:	2300      	movs	r3, #0
 8004592:	4640      	mov	r0, r8
 8004594:	4651      	mov	r1, sl
 8004596:	f7fc fa11 	bl	80009bc <__aeabi_dcmplt>
 800459a:	b110      	cbz	r0, 80045a2 <_printf_float+0x86>
 800459c:	232d      	movs	r3, #45	; 0x2d
 800459e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a2:	4b92      	ldr	r3, [pc, #584]	; (80047ec <_printf_float+0x2d0>)
 80045a4:	4892      	ldr	r0, [pc, #584]	; (80047f0 <_printf_float+0x2d4>)
 80045a6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80045aa:	bf94      	ite	ls
 80045ac:	4698      	movls	r8, r3
 80045ae:	4680      	movhi	r8, r0
 80045b0:	2303      	movs	r3, #3
 80045b2:	f04f 0a00 	mov.w	sl, #0
 80045b6:	6123      	str	r3, [r4, #16]
 80045b8:	f02b 0304 	bic.w	r3, fp, #4
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	4633      	mov	r3, r6
 80045c0:	4621      	mov	r1, r4
 80045c2:	4628      	mov	r0, r5
 80045c4:	9700      	str	r7, [sp, #0]
 80045c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80045c8:	f000 f9d4 	bl	8004974 <_printf_common>
 80045cc:	3001      	adds	r0, #1
 80045ce:	f040 8090 	bne.w	80046f2 <_printf_float+0x1d6>
 80045d2:	f04f 30ff 	mov.w	r0, #4294967295
 80045d6:	b011      	add	sp, #68	; 0x44
 80045d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045dc:	4642      	mov	r2, r8
 80045de:	4653      	mov	r3, sl
 80045e0:	4640      	mov	r0, r8
 80045e2:	4651      	mov	r1, sl
 80045e4:	f7fc fa12 	bl	8000a0c <__aeabi_dcmpun>
 80045e8:	b148      	cbz	r0, 80045fe <_printf_float+0xe2>
 80045ea:	f1ba 0f00 	cmp.w	sl, #0
 80045ee:	bfb8      	it	lt
 80045f0:	232d      	movlt	r3, #45	; 0x2d
 80045f2:	4880      	ldr	r0, [pc, #512]	; (80047f4 <_printf_float+0x2d8>)
 80045f4:	bfb8      	it	lt
 80045f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045fa:	4b7f      	ldr	r3, [pc, #508]	; (80047f8 <_printf_float+0x2dc>)
 80045fc:	e7d3      	b.n	80045a6 <_printf_float+0x8a>
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	d142      	bne.n	800468e <_printf_float+0x172>
 8004608:	2306      	movs	r3, #6
 800460a:	6063      	str	r3, [r4, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	9206      	str	r2, [sp, #24]
 8004610:	aa0e      	add	r2, sp, #56	; 0x38
 8004612:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004616:	aa0d      	add	r2, sp, #52	; 0x34
 8004618:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800461c:	9203      	str	r2, [sp, #12]
 800461e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004622:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	6863      	ldr	r3, [r4, #4]
 800462a:	4642      	mov	r2, r8
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	4628      	mov	r0, r5
 8004630:	4653      	mov	r3, sl
 8004632:	910b      	str	r1, [sp, #44]	; 0x2c
 8004634:	f7ff fed4 	bl	80043e0 <__cvt>
 8004638:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800463a:	4680      	mov	r8, r0
 800463c:	2947      	cmp	r1, #71	; 0x47
 800463e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004640:	d108      	bne.n	8004654 <_printf_float+0x138>
 8004642:	1cc8      	adds	r0, r1, #3
 8004644:	db02      	blt.n	800464c <_printf_float+0x130>
 8004646:	6863      	ldr	r3, [r4, #4]
 8004648:	4299      	cmp	r1, r3
 800464a:	dd40      	ble.n	80046ce <_printf_float+0x1b2>
 800464c:	f1a9 0902 	sub.w	r9, r9, #2
 8004650:	fa5f f989 	uxtb.w	r9, r9
 8004654:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004658:	d81f      	bhi.n	800469a <_printf_float+0x17e>
 800465a:	464a      	mov	r2, r9
 800465c:	3901      	subs	r1, #1
 800465e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004662:	910d      	str	r1, [sp, #52]	; 0x34
 8004664:	f7ff ff1b 	bl	800449e <__exponent>
 8004668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800466a:	4682      	mov	sl, r0
 800466c:	1813      	adds	r3, r2, r0
 800466e:	2a01      	cmp	r2, #1
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	dc02      	bgt.n	800467a <_printf_float+0x15e>
 8004674:	6822      	ldr	r2, [r4, #0]
 8004676:	07d2      	lsls	r2, r2, #31
 8004678:	d501      	bpl.n	800467e <_printf_float+0x162>
 800467a:	3301      	adds	r3, #1
 800467c:	6123      	str	r3, [r4, #16]
 800467e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004682:	2b00      	cmp	r3, #0
 8004684:	d09b      	beq.n	80045be <_printf_float+0xa2>
 8004686:	232d      	movs	r3, #45	; 0x2d
 8004688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800468c:	e797      	b.n	80045be <_printf_float+0xa2>
 800468e:	2947      	cmp	r1, #71	; 0x47
 8004690:	d1bc      	bne.n	800460c <_printf_float+0xf0>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1ba      	bne.n	800460c <_printf_float+0xf0>
 8004696:	2301      	movs	r3, #1
 8004698:	e7b7      	b.n	800460a <_printf_float+0xee>
 800469a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800469e:	d118      	bne.n	80046d2 <_printf_float+0x1b6>
 80046a0:	2900      	cmp	r1, #0
 80046a2:	6863      	ldr	r3, [r4, #4]
 80046a4:	dd0b      	ble.n	80046be <_printf_float+0x1a2>
 80046a6:	6121      	str	r1, [r4, #16]
 80046a8:	b913      	cbnz	r3, 80046b0 <_printf_float+0x194>
 80046aa:	6822      	ldr	r2, [r4, #0]
 80046ac:	07d0      	lsls	r0, r2, #31
 80046ae:	d502      	bpl.n	80046b6 <_printf_float+0x19a>
 80046b0:	3301      	adds	r3, #1
 80046b2:	440b      	add	r3, r1
 80046b4:	6123      	str	r3, [r4, #16]
 80046b6:	f04f 0a00 	mov.w	sl, #0
 80046ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80046bc:	e7df      	b.n	800467e <_printf_float+0x162>
 80046be:	b913      	cbnz	r3, 80046c6 <_printf_float+0x1aa>
 80046c0:	6822      	ldr	r2, [r4, #0]
 80046c2:	07d2      	lsls	r2, r2, #31
 80046c4:	d501      	bpl.n	80046ca <_printf_float+0x1ae>
 80046c6:	3302      	adds	r3, #2
 80046c8:	e7f4      	b.n	80046b4 <_printf_float+0x198>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e7f2      	b.n	80046b4 <_printf_float+0x198>
 80046ce:	f04f 0967 	mov.w	r9, #103	; 0x67
 80046d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046d4:	4299      	cmp	r1, r3
 80046d6:	db05      	blt.n	80046e4 <_printf_float+0x1c8>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	6121      	str	r1, [r4, #16]
 80046dc:	07d8      	lsls	r0, r3, #31
 80046de:	d5ea      	bpl.n	80046b6 <_printf_float+0x19a>
 80046e0:	1c4b      	adds	r3, r1, #1
 80046e2:	e7e7      	b.n	80046b4 <_printf_float+0x198>
 80046e4:	2900      	cmp	r1, #0
 80046e6:	bfcc      	ite	gt
 80046e8:	2201      	movgt	r2, #1
 80046ea:	f1c1 0202 	rsble	r2, r1, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	e7e0      	b.n	80046b4 <_printf_float+0x198>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	055a      	lsls	r2, r3, #21
 80046f6:	d407      	bmi.n	8004708 <_printf_float+0x1ec>
 80046f8:	6923      	ldr	r3, [r4, #16]
 80046fa:	4642      	mov	r2, r8
 80046fc:	4631      	mov	r1, r6
 80046fe:	4628      	mov	r0, r5
 8004700:	47b8      	blx	r7
 8004702:	3001      	adds	r0, #1
 8004704:	d12b      	bne.n	800475e <_printf_float+0x242>
 8004706:	e764      	b.n	80045d2 <_printf_float+0xb6>
 8004708:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800470c:	f240 80dd 	bls.w	80048ca <_printf_float+0x3ae>
 8004710:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004714:	2200      	movs	r2, #0
 8004716:	2300      	movs	r3, #0
 8004718:	f7fc f946 	bl	80009a8 <__aeabi_dcmpeq>
 800471c:	2800      	cmp	r0, #0
 800471e:	d033      	beq.n	8004788 <_printf_float+0x26c>
 8004720:	2301      	movs	r3, #1
 8004722:	4631      	mov	r1, r6
 8004724:	4628      	mov	r0, r5
 8004726:	4a35      	ldr	r2, [pc, #212]	; (80047fc <_printf_float+0x2e0>)
 8004728:	47b8      	blx	r7
 800472a:	3001      	adds	r0, #1
 800472c:	f43f af51 	beq.w	80045d2 <_printf_float+0xb6>
 8004730:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004734:	429a      	cmp	r2, r3
 8004736:	db02      	blt.n	800473e <_printf_float+0x222>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	07d8      	lsls	r0, r3, #31
 800473c:	d50f      	bpl.n	800475e <_printf_float+0x242>
 800473e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004742:	4631      	mov	r1, r6
 8004744:	4628      	mov	r0, r5
 8004746:	47b8      	blx	r7
 8004748:	3001      	adds	r0, #1
 800474a:	f43f af42 	beq.w	80045d2 <_printf_float+0xb6>
 800474e:	f04f 0800 	mov.w	r8, #0
 8004752:	f104 091a 	add.w	r9, r4, #26
 8004756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004758:	3b01      	subs	r3, #1
 800475a:	4543      	cmp	r3, r8
 800475c:	dc09      	bgt.n	8004772 <_printf_float+0x256>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	079b      	lsls	r3, r3, #30
 8004762:	f100 8102 	bmi.w	800496a <_printf_float+0x44e>
 8004766:	68e0      	ldr	r0, [r4, #12]
 8004768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800476a:	4298      	cmp	r0, r3
 800476c:	bfb8      	it	lt
 800476e:	4618      	movlt	r0, r3
 8004770:	e731      	b.n	80045d6 <_printf_float+0xba>
 8004772:	2301      	movs	r3, #1
 8004774:	464a      	mov	r2, r9
 8004776:	4631      	mov	r1, r6
 8004778:	4628      	mov	r0, r5
 800477a:	47b8      	blx	r7
 800477c:	3001      	adds	r0, #1
 800477e:	f43f af28 	beq.w	80045d2 <_printf_float+0xb6>
 8004782:	f108 0801 	add.w	r8, r8, #1
 8004786:	e7e6      	b.n	8004756 <_printf_float+0x23a>
 8004788:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800478a:	2b00      	cmp	r3, #0
 800478c:	dc38      	bgt.n	8004800 <_printf_float+0x2e4>
 800478e:	2301      	movs	r3, #1
 8004790:	4631      	mov	r1, r6
 8004792:	4628      	mov	r0, r5
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <_printf_float+0x2e0>)
 8004796:	47b8      	blx	r7
 8004798:	3001      	adds	r0, #1
 800479a:	f43f af1a 	beq.w	80045d2 <_printf_float+0xb6>
 800479e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d102      	bne.n	80047ac <_printf_float+0x290>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	07d9      	lsls	r1, r3, #31
 80047aa:	d5d8      	bpl.n	800475e <_printf_float+0x242>
 80047ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047b0:	4631      	mov	r1, r6
 80047b2:	4628      	mov	r0, r5
 80047b4:	47b8      	blx	r7
 80047b6:	3001      	adds	r0, #1
 80047b8:	f43f af0b 	beq.w	80045d2 <_printf_float+0xb6>
 80047bc:	f04f 0900 	mov.w	r9, #0
 80047c0:	f104 0a1a 	add.w	sl, r4, #26
 80047c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047c6:	425b      	negs	r3, r3
 80047c8:	454b      	cmp	r3, r9
 80047ca:	dc01      	bgt.n	80047d0 <_printf_float+0x2b4>
 80047cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047ce:	e794      	b.n	80046fa <_printf_float+0x1de>
 80047d0:	2301      	movs	r3, #1
 80047d2:	4652      	mov	r2, sl
 80047d4:	4631      	mov	r1, r6
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b8      	blx	r7
 80047da:	3001      	adds	r0, #1
 80047dc:	f43f aef9 	beq.w	80045d2 <_printf_float+0xb6>
 80047e0:	f109 0901 	add.w	r9, r9, #1
 80047e4:	e7ee      	b.n	80047c4 <_printf_float+0x2a8>
 80047e6:	bf00      	nop
 80047e8:	7fefffff 	.word	0x7fefffff
 80047ec:	08007298 	.word	0x08007298
 80047f0:	0800729c 	.word	0x0800729c
 80047f4:	080072a4 	.word	0x080072a4
 80047f8:	080072a0 	.word	0x080072a0
 80047fc:	080072a8 	.word	0x080072a8
 8004800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004802:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004804:	429a      	cmp	r2, r3
 8004806:	bfa8      	it	ge
 8004808:	461a      	movge	r2, r3
 800480a:	2a00      	cmp	r2, #0
 800480c:	4691      	mov	r9, r2
 800480e:	dc37      	bgt.n	8004880 <_printf_float+0x364>
 8004810:	f04f 0b00 	mov.w	fp, #0
 8004814:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004818:	f104 021a 	add.w	r2, r4, #26
 800481c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004820:	ebaa 0309 	sub.w	r3, sl, r9
 8004824:	455b      	cmp	r3, fp
 8004826:	dc33      	bgt.n	8004890 <_printf_float+0x374>
 8004828:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800482c:	429a      	cmp	r2, r3
 800482e:	db3b      	blt.n	80048a8 <_printf_float+0x38c>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	07da      	lsls	r2, r3, #31
 8004834:	d438      	bmi.n	80048a8 <_printf_float+0x38c>
 8004836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004838:	990d      	ldr	r1, [sp, #52]	; 0x34
 800483a:	eba3 020a 	sub.w	r2, r3, sl
 800483e:	eba3 0901 	sub.w	r9, r3, r1
 8004842:	4591      	cmp	r9, r2
 8004844:	bfa8      	it	ge
 8004846:	4691      	movge	r9, r2
 8004848:	f1b9 0f00 	cmp.w	r9, #0
 800484c:	dc34      	bgt.n	80048b8 <_printf_float+0x39c>
 800484e:	f04f 0800 	mov.w	r8, #0
 8004852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004856:	f104 0a1a 	add.w	sl, r4, #26
 800485a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	eba3 0309 	sub.w	r3, r3, r9
 8004864:	4543      	cmp	r3, r8
 8004866:	f77f af7a 	ble.w	800475e <_printf_float+0x242>
 800486a:	2301      	movs	r3, #1
 800486c:	4652      	mov	r2, sl
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	47b8      	blx	r7
 8004874:	3001      	adds	r0, #1
 8004876:	f43f aeac 	beq.w	80045d2 <_printf_float+0xb6>
 800487a:	f108 0801 	add.w	r8, r8, #1
 800487e:	e7ec      	b.n	800485a <_printf_float+0x33e>
 8004880:	4613      	mov	r3, r2
 8004882:	4631      	mov	r1, r6
 8004884:	4642      	mov	r2, r8
 8004886:	4628      	mov	r0, r5
 8004888:	47b8      	blx	r7
 800488a:	3001      	adds	r0, #1
 800488c:	d1c0      	bne.n	8004810 <_printf_float+0x2f4>
 800488e:	e6a0      	b.n	80045d2 <_printf_float+0xb6>
 8004890:	2301      	movs	r3, #1
 8004892:	4631      	mov	r1, r6
 8004894:	4628      	mov	r0, r5
 8004896:	920b      	str	r2, [sp, #44]	; 0x2c
 8004898:	47b8      	blx	r7
 800489a:	3001      	adds	r0, #1
 800489c:	f43f ae99 	beq.w	80045d2 <_printf_float+0xb6>
 80048a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048a2:	f10b 0b01 	add.w	fp, fp, #1
 80048a6:	e7b9      	b.n	800481c <_printf_float+0x300>
 80048a8:	4631      	mov	r1, r6
 80048aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048ae:	4628      	mov	r0, r5
 80048b0:	47b8      	blx	r7
 80048b2:	3001      	adds	r0, #1
 80048b4:	d1bf      	bne.n	8004836 <_printf_float+0x31a>
 80048b6:	e68c      	b.n	80045d2 <_printf_float+0xb6>
 80048b8:	464b      	mov	r3, r9
 80048ba:	4631      	mov	r1, r6
 80048bc:	4628      	mov	r0, r5
 80048be:	eb08 020a 	add.w	r2, r8, sl
 80048c2:	47b8      	blx	r7
 80048c4:	3001      	adds	r0, #1
 80048c6:	d1c2      	bne.n	800484e <_printf_float+0x332>
 80048c8:	e683      	b.n	80045d2 <_printf_float+0xb6>
 80048ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048cc:	2a01      	cmp	r2, #1
 80048ce:	dc01      	bgt.n	80048d4 <_printf_float+0x3b8>
 80048d0:	07db      	lsls	r3, r3, #31
 80048d2:	d537      	bpl.n	8004944 <_printf_float+0x428>
 80048d4:	2301      	movs	r3, #1
 80048d6:	4642      	mov	r2, r8
 80048d8:	4631      	mov	r1, r6
 80048da:	4628      	mov	r0, r5
 80048dc:	47b8      	blx	r7
 80048de:	3001      	adds	r0, #1
 80048e0:	f43f ae77 	beq.w	80045d2 <_printf_float+0xb6>
 80048e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048e8:	4631      	mov	r1, r6
 80048ea:	4628      	mov	r0, r5
 80048ec:	47b8      	blx	r7
 80048ee:	3001      	adds	r0, #1
 80048f0:	f43f ae6f 	beq.w	80045d2 <_printf_float+0xb6>
 80048f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048f8:	2200      	movs	r2, #0
 80048fa:	2300      	movs	r3, #0
 80048fc:	f7fc f854 	bl	80009a8 <__aeabi_dcmpeq>
 8004900:	b9d8      	cbnz	r0, 800493a <_printf_float+0x41e>
 8004902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004904:	f108 0201 	add.w	r2, r8, #1
 8004908:	3b01      	subs	r3, #1
 800490a:	4631      	mov	r1, r6
 800490c:	4628      	mov	r0, r5
 800490e:	47b8      	blx	r7
 8004910:	3001      	adds	r0, #1
 8004912:	d10e      	bne.n	8004932 <_printf_float+0x416>
 8004914:	e65d      	b.n	80045d2 <_printf_float+0xb6>
 8004916:	2301      	movs	r3, #1
 8004918:	464a      	mov	r2, r9
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	f43f ae56 	beq.w	80045d2 <_printf_float+0xb6>
 8004926:	f108 0801 	add.w	r8, r8, #1
 800492a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800492c:	3b01      	subs	r3, #1
 800492e:	4543      	cmp	r3, r8
 8004930:	dcf1      	bgt.n	8004916 <_printf_float+0x3fa>
 8004932:	4653      	mov	r3, sl
 8004934:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004938:	e6e0      	b.n	80046fc <_printf_float+0x1e0>
 800493a:	f04f 0800 	mov.w	r8, #0
 800493e:	f104 091a 	add.w	r9, r4, #26
 8004942:	e7f2      	b.n	800492a <_printf_float+0x40e>
 8004944:	2301      	movs	r3, #1
 8004946:	4642      	mov	r2, r8
 8004948:	e7df      	b.n	800490a <_printf_float+0x3ee>
 800494a:	2301      	movs	r3, #1
 800494c:	464a      	mov	r2, r9
 800494e:	4631      	mov	r1, r6
 8004950:	4628      	mov	r0, r5
 8004952:	47b8      	blx	r7
 8004954:	3001      	adds	r0, #1
 8004956:	f43f ae3c 	beq.w	80045d2 <_printf_float+0xb6>
 800495a:	f108 0801 	add.w	r8, r8, #1
 800495e:	68e3      	ldr	r3, [r4, #12]
 8004960:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004962:	1a5b      	subs	r3, r3, r1
 8004964:	4543      	cmp	r3, r8
 8004966:	dcf0      	bgt.n	800494a <_printf_float+0x42e>
 8004968:	e6fd      	b.n	8004766 <_printf_float+0x24a>
 800496a:	f04f 0800 	mov.w	r8, #0
 800496e:	f104 0919 	add.w	r9, r4, #25
 8004972:	e7f4      	b.n	800495e <_printf_float+0x442>

08004974 <_printf_common>:
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	4616      	mov	r6, r2
 800497a:	4699      	mov	r9, r3
 800497c:	688a      	ldr	r2, [r1, #8]
 800497e:	690b      	ldr	r3, [r1, #16]
 8004980:	4607      	mov	r7, r0
 8004982:	4293      	cmp	r3, r2
 8004984:	bfb8      	it	lt
 8004986:	4613      	movlt	r3, r2
 8004988:	6033      	str	r3, [r6, #0]
 800498a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800498e:	460c      	mov	r4, r1
 8004990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004994:	b10a      	cbz	r2, 800499a <_printf_common+0x26>
 8004996:	3301      	adds	r3, #1
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0699      	lsls	r1, r3, #26
 800499e:	bf42      	ittt	mi
 80049a0:	6833      	ldrmi	r3, [r6, #0]
 80049a2:	3302      	addmi	r3, #2
 80049a4:	6033      	strmi	r3, [r6, #0]
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	f015 0506 	ands.w	r5, r5, #6
 80049ac:	d106      	bne.n	80049bc <_printf_common+0x48>
 80049ae:	f104 0a19 	add.w	sl, r4, #25
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	6832      	ldr	r2, [r6, #0]
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	42ab      	cmp	r3, r5
 80049ba:	dc28      	bgt.n	8004a0e <_printf_common+0x9a>
 80049bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049c0:	1e13      	subs	r3, r2, #0
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	bf18      	it	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	0692      	lsls	r2, r2, #26
 80049ca:	d42d      	bmi.n	8004a28 <_printf_common+0xb4>
 80049cc:	4649      	mov	r1, r9
 80049ce:	4638      	mov	r0, r7
 80049d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049d4:	47c0      	blx	r8
 80049d6:	3001      	adds	r0, #1
 80049d8:	d020      	beq.n	8004a1c <_printf_common+0xa8>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	68e5      	ldr	r5, [r4, #12]
 80049de:	f003 0306 	and.w	r3, r3, #6
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	bf18      	it	ne
 80049e6:	2500      	movne	r5, #0
 80049e8:	6832      	ldr	r2, [r6, #0]
 80049ea:	f04f 0600 	mov.w	r6, #0
 80049ee:	68a3      	ldr	r3, [r4, #8]
 80049f0:	bf08      	it	eq
 80049f2:	1aad      	subeq	r5, r5, r2
 80049f4:	6922      	ldr	r2, [r4, #16]
 80049f6:	bf08      	it	eq
 80049f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049fc:	4293      	cmp	r3, r2
 80049fe:	bfc4      	itt	gt
 8004a00:	1a9b      	subgt	r3, r3, r2
 8004a02:	18ed      	addgt	r5, r5, r3
 8004a04:	341a      	adds	r4, #26
 8004a06:	42b5      	cmp	r5, r6
 8004a08:	d11a      	bne.n	8004a40 <_printf_common+0xcc>
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	e008      	b.n	8004a20 <_printf_common+0xac>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4652      	mov	r2, sl
 8004a12:	4649      	mov	r1, r9
 8004a14:	4638      	mov	r0, r7
 8004a16:	47c0      	blx	r8
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d103      	bne.n	8004a24 <_printf_common+0xb0>
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a24:	3501      	adds	r5, #1
 8004a26:	e7c4      	b.n	80049b2 <_printf_common+0x3e>
 8004a28:	2030      	movs	r0, #48	; 0x30
 8004a2a:	18e1      	adds	r1, r4, r3
 8004a2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a36:	4422      	add	r2, r4
 8004a38:	3302      	adds	r3, #2
 8004a3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a3e:	e7c5      	b.n	80049cc <_printf_common+0x58>
 8004a40:	2301      	movs	r3, #1
 8004a42:	4622      	mov	r2, r4
 8004a44:	4649      	mov	r1, r9
 8004a46:	4638      	mov	r0, r7
 8004a48:	47c0      	blx	r8
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d0e6      	beq.n	8004a1c <_printf_common+0xa8>
 8004a4e:	3601      	adds	r6, #1
 8004a50:	e7d9      	b.n	8004a06 <_printf_common+0x92>
	...

08004a54 <_printf_i>:
 8004a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a58:	7e0f      	ldrb	r7, [r1, #24]
 8004a5a:	4691      	mov	r9, r2
 8004a5c:	2f78      	cmp	r7, #120	; 0x78
 8004a5e:	4680      	mov	r8, r0
 8004a60:	460c      	mov	r4, r1
 8004a62:	469a      	mov	sl, r3
 8004a64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a6a:	d807      	bhi.n	8004a7c <_printf_i+0x28>
 8004a6c:	2f62      	cmp	r7, #98	; 0x62
 8004a6e:	d80a      	bhi.n	8004a86 <_printf_i+0x32>
 8004a70:	2f00      	cmp	r7, #0
 8004a72:	f000 80d9 	beq.w	8004c28 <_printf_i+0x1d4>
 8004a76:	2f58      	cmp	r7, #88	; 0x58
 8004a78:	f000 80a4 	beq.w	8004bc4 <_printf_i+0x170>
 8004a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a84:	e03a      	b.n	8004afc <_printf_i+0xa8>
 8004a86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a8a:	2b15      	cmp	r3, #21
 8004a8c:	d8f6      	bhi.n	8004a7c <_printf_i+0x28>
 8004a8e:	a101      	add	r1, pc, #4	; (adr r1, 8004a94 <_printf_i+0x40>)
 8004a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a94:	08004aed 	.word	0x08004aed
 8004a98:	08004b01 	.word	0x08004b01
 8004a9c:	08004a7d 	.word	0x08004a7d
 8004aa0:	08004a7d 	.word	0x08004a7d
 8004aa4:	08004a7d 	.word	0x08004a7d
 8004aa8:	08004a7d 	.word	0x08004a7d
 8004aac:	08004b01 	.word	0x08004b01
 8004ab0:	08004a7d 	.word	0x08004a7d
 8004ab4:	08004a7d 	.word	0x08004a7d
 8004ab8:	08004a7d 	.word	0x08004a7d
 8004abc:	08004a7d 	.word	0x08004a7d
 8004ac0:	08004c0f 	.word	0x08004c0f
 8004ac4:	08004b31 	.word	0x08004b31
 8004ac8:	08004bf1 	.word	0x08004bf1
 8004acc:	08004a7d 	.word	0x08004a7d
 8004ad0:	08004a7d 	.word	0x08004a7d
 8004ad4:	08004c31 	.word	0x08004c31
 8004ad8:	08004a7d 	.word	0x08004a7d
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004a7d 	.word	0x08004a7d
 8004ae4:	08004a7d 	.word	0x08004a7d
 8004ae8:	08004bf9 	.word	0x08004bf9
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	1d1a      	adds	r2, r3, #4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	602a      	str	r2, [r5, #0]
 8004af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0a4      	b.n	8004c4a <_printf_i+0x1f6>
 8004b00:	6820      	ldr	r0, [r4, #0]
 8004b02:	6829      	ldr	r1, [r5, #0]
 8004b04:	0606      	lsls	r6, r0, #24
 8004b06:	f101 0304 	add.w	r3, r1, #4
 8004b0a:	d50a      	bpl.n	8004b22 <_printf_i+0xce>
 8004b0c:	680e      	ldr	r6, [r1, #0]
 8004b0e:	602b      	str	r3, [r5, #0]
 8004b10:	2e00      	cmp	r6, #0
 8004b12:	da03      	bge.n	8004b1c <_printf_i+0xc8>
 8004b14:	232d      	movs	r3, #45	; 0x2d
 8004b16:	4276      	negs	r6, r6
 8004b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b1c:	230a      	movs	r3, #10
 8004b1e:	485e      	ldr	r0, [pc, #376]	; (8004c98 <_printf_i+0x244>)
 8004b20:	e019      	b.n	8004b56 <_printf_i+0x102>
 8004b22:	680e      	ldr	r6, [r1, #0]
 8004b24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	bf18      	it	ne
 8004b2c:	b236      	sxthne	r6, r6
 8004b2e:	e7ef      	b.n	8004b10 <_printf_i+0xbc>
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	6820      	ldr	r0, [r4, #0]
 8004b34:	1d19      	adds	r1, r3, #4
 8004b36:	6029      	str	r1, [r5, #0]
 8004b38:	0601      	lsls	r1, r0, #24
 8004b3a:	d501      	bpl.n	8004b40 <_printf_i+0xec>
 8004b3c:	681e      	ldr	r6, [r3, #0]
 8004b3e:	e002      	b.n	8004b46 <_printf_i+0xf2>
 8004b40:	0646      	lsls	r6, r0, #25
 8004b42:	d5fb      	bpl.n	8004b3c <_printf_i+0xe8>
 8004b44:	881e      	ldrh	r6, [r3, #0]
 8004b46:	2f6f      	cmp	r7, #111	; 0x6f
 8004b48:	bf0c      	ite	eq
 8004b4a:	2308      	moveq	r3, #8
 8004b4c:	230a      	movne	r3, #10
 8004b4e:	4852      	ldr	r0, [pc, #328]	; (8004c98 <_printf_i+0x244>)
 8004b50:	2100      	movs	r1, #0
 8004b52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b56:	6865      	ldr	r5, [r4, #4]
 8004b58:	2d00      	cmp	r5, #0
 8004b5a:	bfa8      	it	ge
 8004b5c:	6821      	ldrge	r1, [r4, #0]
 8004b5e:	60a5      	str	r5, [r4, #8]
 8004b60:	bfa4      	itt	ge
 8004b62:	f021 0104 	bicge.w	r1, r1, #4
 8004b66:	6021      	strge	r1, [r4, #0]
 8004b68:	b90e      	cbnz	r6, 8004b6e <_printf_i+0x11a>
 8004b6a:	2d00      	cmp	r5, #0
 8004b6c:	d04d      	beq.n	8004c0a <_printf_i+0x1b6>
 8004b6e:	4615      	mov	r5, r2
 8004b70:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b74:	fb03 6711 	mls	r7, r3, r1, r6
 8004b78:	5dc7      	ldrb	r7, [r0, r7]
 8004b7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b7e:	4637      	mov	r7, r6
 8004b80:	42bb      	cmp	r3, r7
 8004b82:	460e      	mov	r6, r1
 8004b84:	d9f4      	bls.n	8004b70 <_printf_i+0x11c>
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d10b      	bne.n	8004ba2 <_printf_i+0x14e>
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	07de      	lsls	r6, r3, #31
 8004b8e:	d508      	bpl.n	8004ba2 <_printf_i+0x14e>
 8004b90:	6923      	ldr	r3, [r4, #16]
 8004b92:	6861      	ldr	r1, [r4, #4]
 8004b94:	4299      	cmp	r1, r3
 8004b96:	bfde      	ittt	le
 8004b98:	2330      	movle	r3, #48	; 0x30
 8004b9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ba2:	1b52      	subs	r2, r2, r5
 8004ba4:	6122      	str	r2, [r4, #16]
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4640      	mov	r0, r8
 8004bac:	f8cd a000 	str.w	sl, [sp]
 8004bb0:	aa03      	add	r2, sp, #12
 8004bb2:	f7ff fedf 	bl	8004974 <_printf_common>
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	d14c      	bne.n	8004c54 <_printf_i+0x200>
 8004bba:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbe:	b004      	add	sp, #16
 8004bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc4:	4834      	ldr	r0, [pc, #208]	; (8004c98 <_printf_i+0x244>)
 8004bc6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bca:	6829      	ldr	r1, [r5, #0]
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bd2:	6029      	str	r1, [r5, #0]
 8004bd4:	061d      	lsls	r5, r3, #24
 8004bd6:	d514      	bpl.n	8004c02 <_printf_i+0x1ae>
 8004bd8:	07df      	lsls	r7, r3, #31
 8004bda:	bf44      	itt	mi
 8004bdc:	f043 0320 	orrmi.w	r3, r3, #32
 8004be0:	6023      	strmi	r3, [r4, #0]
 8004be2:	b91e      	cbnz	r6, 8004bec <_printf_i+0x198>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	f023 0320 	bic.w	r3, r3, #32
 8004bea:	6023      	str	r3, [r4, #0]
 8004bec:	2310      	movs	r3, #16
 8004bee:	e7af      	b.n	8004b50 <_printf_i+0xfc>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	f043 0320 	orr.w	r3, r3, #32
 8004bf6:	6023      	str	r3, [r4, #0]
 8004bf8:	2378      	movs	r3, #120	; 0x78
 8004bfa:	4828      	ldr	r0, [pc, #160]	; (8004c9c <_printf_i+0x248>)
 8004bfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c00:	e7e3      	b.n	8004bca <_printf_i+0x176>
 8004c02:	0659      	lsls	r1, r3, #25
 8004c04:	bf48      	it	mi
 8004c06:	b2b6      	uxthmi	r6, r6
 8004c08:	e7e6      	b.n	8004bd8 <_printf_i+0x184>
 8004c0a:	4615      	mov	r5, r2
 8004c0c:	e7bb      	b.n	8004b86 <_printf_i+0x132>
 8004c0e:	682b      	ldr	r3, [r5, #0]
 8004c10:	6826      	ldr	r6, [r4, #0]
 8004c12:	1d18      	adds	r0, r3, #4
 8004c14:	6961      	ldr	r1, [r4, #20]
 8004c16:	6028      	str	r0, [r5, #0]
 8004c18:	0635      	lsls	r5, r6, #24
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	d501      	bpl.n	8004c22 <_printf_i+0x1ce>
 8004c1e:	6019      	str	r1, [r3, #0]
 8004c20:	e002      	b.n	8004c28 <_printf_i+0x1d4>
 8004c22:	0670      	lsls	r0, r6, #25
 8004c24:	d5fb      	bpl.n	8004c1e <_printf_i+0x1ca>
 8004c26:	8019      	strh	r1, [r3, #0]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4615      	mov	r5, r2
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	e7ba      	b.n	8004ba6 <_printf_i+0x152>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	2100      	movs	r1, #0
 8004c34:	1d1a      	adds	r2, r3, #4
 8004c36:	602a      	str	r2, [r5, #0]
 8004c38:	681d      	ldr	r5, [r3, #0]
 8004c3a:	6862      	ldr	r2, [r4, #4]
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f000 fee9 	bl	8005a14 <memchr>
 8004c42:	b108      	cbz	r0, 8004c48 <_printf_i+0x1f4>
 8004c44:	1b40      	subs	r0, r0, r5
 8004c46:	6060      	str	r0, [r4, #4]
 8004c48:	6863      	ldr	r3, [r4, #4]
 8004c4a:	6123      	str	r3, [r4, #16]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c52:	e7a8      	b.n	8004ba6 <_printf_i+0x152>
 8004c54:	462a      	mov	r2, r5
 8004c56:	4649      	mov	r1, r9
 8004c58:	4640      	mov	r0, r8
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	47d0      	blx	sl
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d0ab      	beq.n	8004bba <_printf_i+0x166>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	079b      	lsls	r3, r3, #30
 8004c66:	d413      	bmi.n	8004c90 <_printf_i+0x23c>
 8004c68:	68e0      	ldr	r0, [r4, #12]
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	4298      	cmp	r0, r3
 8004c6e:	bfb8      	it	lt
 8004c70:	4618      	movlt	r0, r3
 8004c72:	e7a4      	b.n	8004bbe <_printf_i+0x16a>
 8004c74:	2301      	movs	r3, #1
 8004c76:	4632      	mov	r2, r6
 8004c78:	4649      	mov	r1, r9
 8004c7a:	4640      	mov	r0, r8
 8004c7c:	47d0      	blx	sl
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d09b      	beq.n	8004bba <_printf_i+0x166>
 8004c82:	3501      	adds	r5, #1
 8004c84:	68e3      	ldr	r3, [r4, #12]
 8004c86:	9903      	ldr	r1, [sp, #12]
 8004c88:	1a5b      	subs	r3, r3, r1
 8004c8a:	42ab      	cmp	r3, r5
 8004c8c:	dcf2      	bgt.n	8004c74 <_printf_i+0x220>
 8004c8e:	e7eb      	b.n	8004c68 <_printf_i+0x214>
 8004c90:	2500      	movs	r5, #0
 8004c92:	f104 0619 	add.w	r6, r4, #25
 8004c96:	e7f5      	b.n	8004c84 <_printf_i+0x230>
 8004c98:	080072aa 	.word	0x080072aa
 8004c9c:	080072bb 	.word	0x080072bb

08004ca0 <siprintf>:
 8004ca0:	b40e      	push	{r1, r2, r3}
 8004ca2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ca6:	b500      	push	{lr}
 8004ca8:	b09c      	sub	sp, #112	; 0x70
 8004caa:	ab1d      	add	r3, sp, #116	; 0x74
 8004cac:	9002      	str	r0, [sp, #8]
 8004cae:	9006      	str	r0, [sp, #24]
 8004cb0:	9107      	str	r1, [sp, #28]
 8004cb2:	9104      	str	r1, [sp, #16]
 8004cb4:	4808      	ldr	r0, [pc, #32]	; (8004cd8 <siprintf+0x38>)
 8004cb6:	4909      	ldr	r1, [pc, #36]	; (8004cdc <siprintf+0x3c>)
 8004cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cbc:	9105      	str	r1, [sp, #20]
 8004cbe:	6800      	ldr	r0, [r0, #0]
 8004cc0:	a902      	add	r1, sp, #8
 8004cc2:	9301      	str	r3, [sp, #4]
 8004cc4:	f001 fb90 	bl	80063e8 <_svfiprintf_r>
 8004cc8:	2200      	movs	r2, #0
 8004cca:	9b02      	ldr	r3, [sp, #8]
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	b01c      	add	sp, #112	; 0x70
 8004cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cd4:	b003      	add	sp, #12
 8004cd6:	4770      	bx	lr
 8004cd8:	2000001c 	.word	0x2000001c
 8004cdc:	ffff0208 	.word	0xffff0208

08004ce0 <strncpy>:
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	b510      	push	{r4, lr}
 8004ce4:	3901      	subs	r1, #1
 8004ce6:	b132      	cbz	r2, 8004cf6 <strncpy+0x16>
 8004ce8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004cec:	3a01      	subs	r2, #1
 8004cee:	f803 4b01 	strb.w	r4, [r3], #1
 8004cf2:	2c00      	cmp	r4, #0
 8004cf4:	d1f7      	bne.n	8004ce6 <strncpy+0x6>
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	441a      	add	r2, r3
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d100      	bne.n	8004d00 <strncpy+0x20>
 8004cfe:	bd10      	pop	{r4, pc}
 8004d00:	f803 1b01 	strb.w	r1, [r3], #1
 8004d04:	e7f9      	b.n	8004cfa <strncpy+0x1a>

08004d06 <quorem>:
 8004d06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0a:	6903      	ldr	r3, [r0, #16]
 8004d0c:	690c      	ldr	r4, [r1, #16]
 8004d0e:	4607      	mov	r7, r0
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	f2c0 8082 	blt.w	8004e1a <quorem+0x114>
 8004d16:	3c01      	subs	r4, #1
 8004d18:	f100 0514 	add.w	r5, r0, #20
 8004d1c:	f101 0814 	add.w	r8, r1, #20
 8004d20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	429a      	cmp	r2, r3
 8004d32:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d3e:	d331      	bcc.n	8004da4 <quorem+0x9e>
 8004d40:	f04f 0e00 	mov.w	lr, #0
 8004d44:	4640      	mov	r0, r8
 8004d46:	46ac      	mov	ip, r5
 8004d48:	46f2      	mov	sl, lr
 8004d4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d4e:	b293      	uxth	r3, r2
 8004d50:	fb06 e303 	mla	r3, r6, r3, lr
 8004d54:	0c12      	lsrs	r2, r2, #16
 8004d56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	fb06 e202 	mla	r2, r6, r2, lr
 8004d60:	ebaa 0303 	sub.w	r3, sl, r3
 8004d64:	f8dc a000 	ldr.w	sl, [ip]
 8004d68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d6c:	fa1f fa8a 	uxth.w	sl, sl
 8004d70:	4453      	add	r3, sl
 8004d72:	f8dc a000 	ldr.w	sl, [ip]
 8004d76:	b292      	uxth	r2, r2
 8004d78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004d7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d86:	4581      	cmp	r9, r0
 8004d88:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d8c:	f84c 3b04 	str.w	r3, [ip], #4
 8004d90:	d2db      	bcs.n	8004d4a <quorem+0x44>
 8004d92:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d96:	b92b      	cbnz	r3, 8004da4 <quorem+0x9e>
 8004d98:	9b01      	ldr	r3, [sp, #4]
 8004d9a:	3b04      	subs	r3, #4
 8004d9c:	429d      	cmp	r5, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	d32f      	bcc.n	8004e02 <quorem+0xfc>
 8004da2:	613c      	str	r4, [r7, #16]
 8004da4:	4638      	mov	r0, r7
 8004da6:	f001 f8cf 	bl	8005f48 <__mcmp>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	db25      	blt.n	8004dfa <quorem+0xf4>
 8004dae:	4628      	mov	r0, r5
 8004db0:	f04f 0c00 	mov.w	ip, #0
 8004db4:	3601      	adds	r6, #1
 8004db6:	f858 1b04 	ldr.w	r1, [r8], #4
 8004dba:	f8d0 e000 	ldr.w	lr, [r0]
 8004dbe:	b28b      	uxth	r3, r1
 8004dc0:	ebac 0303 	sub.w	r3, ip, r3
 8004dc4:	fa1f f28e 	uxth.w	r2, lr
 8004dc8:	4413      	add	r3, r2
 8004dca:	0c0a      	lsrs	r2, r1, #16
 8004dcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004dd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dda:	45c1      	cmp	r9, r8
 8004ddc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004de0:	f840 3b04 	str.w	r3, [r0], #4
 8004de4:	d2e7      	bcs.n	8004db6 <quorem+0xb0>
 8004de6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dee:	b922      	cbnz	r2, 8004dfa <quorem+0xf4>
 8004df0:	3b04      	subs	r3, #4
 8004df2:	429d      	cmp	r5, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	d30a      	bcc.n	8004e0e <quorem+0x108>
 8004df8:	613c      	str	r4, [r7, #16]
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	b003      	add	sp, #12
 8004dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	3b04      	subs	r3, #4
 8004e06:	2a00      	cmp	r2, #0
 8004e08:	d1cb      	bne.n	8004da2 <quorem+0x9c>
 8004e0a:	3c01      	subs	r4, #1
 8004e0c:	e7c6      	b.n	8004d9c <quorem+0x96>
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	3b04      	subs	r3, #4
 8004e12:	2a00      	cmp	r2, #0
 8004e14:	d1f0      	bne.n	8004df8 <quorem+0xf2>
 8004e16:	3c01      	subs	r4, #1
 8004e18:	e7eb      	b.n	8004df2 <quorem+0xec>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e7ee      	b.n	8004dfc <quorem+0xf6>
	...

08004e20 <_dtoa_r>:
 8004e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	4616      	mov	r6, r2
 8004e26:	461f      	mov	r7, r3
 8004e28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004e2a:	b099      	sub	sp, #100	; 0x64
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004e36:	b974      	cbnz	r4, 8004e56 <_dtoa_r+0x36>
 8004e38:	2010      	movs	r0, #16
 8004e3a:	f000 fde3 	bl	8005a04 <malloc>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6268      	str	r0, [r5, #36]	; 0x24
 8004e42:	b920      	cbnz	r0, 8004e4e <_dtoa_r+0x2e>
 8004e44:	21ea      	movs	r1, #234	; 0xea
 8004e46:	4ba8      	ldr	r3, [pc, #672]	; (80050e8 <_dtoa_r+0x2c8>)
 8004e48:	48a8      	ldr	r0, [pc, #672]	; (80050ec <_dtoa_r+0x2cc>)
 8004e4a:	f001 fbdd 	bl	8006608 <__assert_func>
 8004e4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e52:	6004      	str	r4, [r0, #0]
 8004e54:	60c4      	str	r4, [r0, #12]
 8004e56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e58:	6819      	ldr	r1, [r3, #0]
 8004e5a:	b151      	cbz	r1, 8004e72 <_dtoa_r+0x52>
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	2301      	movs	r3, #1
 8004e60:	4093      	lsls	r3, r2
 8004e62:	604a      	str	r2, [r1, #4]
 8004e64:	608b      	str	r3, [r1, #8]
 8004e66:	4628      	mov	r0, r5
 8004e68:	f000 fe30 	bl	8005acc <_Bfree>
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	1e3b      	subs	r3, r7, #0
 8004e74:	bfaf      	iteee	ge
 8004e76:	2300      	movge	r3, #0
 8004e78:	2201      	movlt	r2, #1
 8004e7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e7e:	9305      	strlt	r3, [sp, #20]
 8004e80:	bfa8      	it	ge
 8004e82:	f8c8 3000 	strge.w	r3, [r8]
 8004e86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004e8a:	4b99      	ldr	r3, [pc, #612]	; (80050f0 <_dtoa_r+0x2d0>)
 8004e8c:	bfb8      	it	lt
 8004e8e:	f8c8 2000 	strlt.w	r2, [r8]
 8004e92:	ea33 0309 	bics.w	r3, r3, r9
 8004e96:	d119      	bne.n	8004ecc <_dtoa_r+0xac>
 8004e98:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ea4:	4333      	orrs	r3, r6
 8004ea6:	f000 857f 	beq.w	80059a8 <_dtoa_r+0xb88>
 8004eaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004eac:	b953      	cbnz	r3, 8004ec4 <_dtoa_r+0xa4>
 8004eae:	4b91      	ldr	r3, [pc, #580]	; (80050f4 <_dtoa_r+0x2d4>)
 8004eb0:	e022      	b.n	8004ef8 <_dtoa_r+0xd8>
 8004eb2:	4b91      	ldr	r3, [pc, #580]	; (80050f8 <_dtoa_r+0x2d8>)
 8004eb4:	9303      	str	r3, [sp, #12]
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	9803      	ldr	r0, [sp, #12]
 8004ebe:	b019      	add	sp, #100	; 0x64
 8004ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec4:	4b8b      	ldr	r3, [pc, #556]	; (80050f4 <_dtoa_r+0x2d4>)
 8004ec6:	9303      	str	r3, [sp, #12]
 8004ec8:	3303      	adds	r3, #3
 8004eca:	e7f5      	b.n	8004eb8 <_dtoa_r+0x98>
 8004ecc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004ed0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004ed4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2300      	movs	r3, #0
 8004edc:	f7fb fd64 	bl	80009a8 <__aeabi_dcmpeq>
 8004ee0:	4680      	mov	r8, r0
 8004ee2:	b158      	cbz	r0, 8004efc <_dtoa_r+0xdc>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8558 	beq.w	80059a2 <_dtoa_r+0xb82>
 8004ef2:	4882      	ldr	r0, [pc, #520]	; (80050fc <_dtoa_r+0x2dc>)
 8004ef4:	6018      	str	r0, [r3, #0]
 8004ef6:	1e43      	subs	r3, r0, #1
 8004ef8:	9303      	str	r3, [sp, #12]
 8004efa:	e7df      	b.n	8004ebc <_dtoa_r+0x9c>
 8004efc:	ab16      	add	r3, sp, #88	; 0x58
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	ab17      	add	r3, sp, #92	; 0x5c
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	4628      	mov	r0, r5
 8004f06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f0a:	f001 f8c5 	bl	8006098 <__d2b>
 8004f0e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f12:	4683      	mov	fp, r0
 8004f14:	2c00      	cmp	r4, #0
 8004f16:	d07f      	beq.n	8005018 <_dtoa_r+0x1f8>
 8004f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f1e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004f22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f26:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004f2a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004f2e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004f32:	2200      	movs	r2, #0
 8004f34:	4b72      	ldr	r3, [pc, #456]	; (8005100 <_dtoa_r+0x2e0>)
 8004f36:	f7fb f917 	bl	8000168 <__aeabi_dsub>
 8004f3a:	a365      	add	r3, pc, #404	; (adr r3, 80050d0 <_dtoa_r+0x2b0>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f7fb faca 	bl	80004d8 <__aeabi_dmul>
 8004f44:	a364      	add	r3, pc, #400	; (adr r3, 80050d8 <_dtoa_r+0x2b8>)
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f7fb f90f 	bl	800016c <__adddf3>
 8004f4e:	4606      	mov	r6, r0
 8004f50:	4620      	mov	r0, r4
 8004f52:	460f      	mov	r7, r1
 8004f54:	f7fb fa56 	bl	8000404 <__aeabi_i2d>
 8004f58:	a361      	add	r3, pc, #388	; (adr r3, 80050e0 <_dtoa_r+0x2c0>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f7fb fabb 	bl	80004d8 <__aeabi_dmul>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4630      	mov	r0, r6
 8004f68:	4639      	mov	r1, r7
 8004f6a:	f7fb f8ff 	bl	800016c <__adddf3>
 8004f6e:	4606      	mov	r6, r0
 8004f70:	460f      	mov	r7, r1
 8004f72:	f7fb fd61 	bl	8000a38 <__aeabi_d2iz>
 8004f76:	2200      	movs	r2, #0
 8004f78:	4682      	mov	sl, r0
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	4639      	mov	r1, r7
 8004f80:	f7fb fd1c 	bl	80009bc <__aeabi_dcmplt>
 8004f84:	b148      	cbz	r0, 8004f9a <_dtoa_r+0x17a>
 8004f86:	4650      	mov	r0, sl
 8004f88:	f7fb fa3c 	bl	8000404 <__aeabi_i2d>
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	463b      	mov	r3, r7
 8004f90:	f7fb fd0a 	bl	80009a8 <__aeabi_dcmpeq>
 8004f94:	b908      	cbnz	r0, 8004f9a <_dtoa_r+0x17a>
 8004f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f9a:	f1ba 0f16 	cmp.w	sl, #22
 8004f9e:	d858      	bhi.n	8005052 <_dtoa_r+0x232>
 8004fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fa4:	4b57      	ldr	r3, [pc, #348]	; (8005104 <_dtoa_r+0x2e4>)
 8004fa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb fd05 	bl	80009bc <__aeabi_dcmplt>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d04f      	beq.n	8005056 <_dtoa_r+0x236>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004fc0:	1b1c      	subs	r4, r3, r4
 8004fc2:	1e63      	subs	r3, r4, #1
 8004fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc6:	bf49      	itett	mi
 8004fc8:	f1c4 0301 	rsbmi	r3, r4, #1
 8004fcc:	2300      	movpl	r3, #0
 8004fce:	9306      	strmi	r3, [sp, #24]
 8004fd0:	2300      	movmi	r3, #0
 8004fd2:	bf54      	ite	pl
 8004fd4:	9306      	strpl	r3, [sp, #24]
 8004fd6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004fd8:	f1ba 0f00 	cmp.w	sl, #0
 8004fdc:	db3d      	blt.n	800505a <_dtoa_r+0x23a>
 8004fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004fe4:	4453      	add	r3, sl
 8004fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe8:	2300      	movs	r3, #0
 8004fea:	930a      	str	r3, [sp, #40]	; 0x28
 8004fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fee:	2b09      	cmp	r3, #9
 8004ff0:	f200 808c 	bhi.w	800510c <_dtoa_r+0x2ec>
 8004ff4:	2b05      	cmp	r3, #5
 8004ff6:	bfc4      	itt	gt
 8004ff8:	3b04      	subgt	r3, #4
 8004ffa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004ffc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ffe:	bfc8      	it	gt
 8005000:	2400      	movgt	r4, #0
 8005002:	f1a3 0302 	sub.w	r3, r3, #2
 8005006:	bfd8      	it	le
 8005008:	2401      	movle	r4, #1
 800500a:	2b03      	cmp	r3, #3
 800500c:	f200 808a 	bhi.w	8005124 <_dtoa_r+0x304>
 8005010:	e8df f003 	tbb	[pc, r3]
 8005014:	5b4d4f2d 	.word	0x5b4d4f2d
 8005018:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800501c:	441c      	add	r4, r3
 800501e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005022:	2b20      	cmp	r3, #32
 8005024:	bfc3      	ittte	gt
 8005026:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800502a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800502e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005032:	f1c3 0320 	rsble	r3, r3, #32
 8005036:	bfc6      	itte	gt
 8005038:	fa26 f000 	lsrgt.w	r0, r6, r0
 800503c:	4318      	orrgt	r0, r3
 800503e:	fa06 f003 	lslle.w	r0, r6, r3
 8005042:	f7fb f9cf 	bl	80003e4 <__aeabi_ui2d>
 8005046:	2301      	movs	r3, #1
 8005048:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800504c:	3c01      	subs	r4, #1
 800504e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005050:	e76f      	b.n	8004f32 <_dtoa_r+0x112>
 8005052:	2301      	movs	r3, #1
 8005054:	e7b2      	b.n	8004fbc <_dtoa_r+0x19c>
 8005056:	900f      	str	r0, [sp, #60]	; 0x3c
 8005058:	e7b1      	b.n	8004fbe <_dtoa_r+0x19e>
 800505a:	9b06      	ldr	r3, [sp, #24]
 800505c:	eba3 030a 	sub.w	r3, r3, sl
 8005060:	9306      	str	r3, [sp, #24]
 8005062:	f1ca 0300 	rsb	r3, sl, #0
 8005066:	930a      	str	r3, [sp, #40]	; 0x28
 8005068:	2300      	movs	r3, #0
 800506a:	930e      	str	r3, [sp, #56]	; 0x38
 800506c:	e7be      	b.n	8004fec <_dtoa_r+0x1cc>
 800506e:	2300      	movs	r3, #0
 8005070:	930b      	str	r3, [sp, #44]	; 0x2c
 8005072:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005074:	2b00      	cmp	r3, #0
 8005076:	dc58      	bgt.n	800512a <_dtoa_r+0x30a>
 8005078:	f04f 0901 	mov.w	r9, #1
 800507c:	464b      	mov	r3, r9
 800507e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005082:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005086:	2200      	movs	r2, #0
 8005088:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800508a:	6042      	str	r2, [r0, #4]
 800508c:	2204      	movs	r2, #4
 800508e:	f102 0614 	add.w	r6, r2, #20
 8005092:	429e      	cmp	r6, r3
 8005094:	6841      	ldr	r1, [r0, #4]
 8005096:	d94e      	bls.n	8005136 <_dtoa_r+0x316>
 8005098:	4628      	mov	r0, r5
 800509a:	f000 fcd7 	bl	8005a4c <_Balloc>
 800509e:	9003      	str	r0, [sp, #12]
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d14c      	bne.n	800513e <_dtoa_r+0x31e>
 80050a4:	4602      	mov	r2, r0
 80050a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050aa:	4b17      	ldr	r3, [pc, #92]	; (8005108 <_dtoa_r+0x2e8>)
 80050ac:	e6cc      	b.n	8004e48 <_dtoa_r+0x28>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e7de      	b.n	8005070 <_dtoa_r+0x250>
 80050b2:	2300      	movs	r3, #0
 80050b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80050b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050b8:	eb0a 0903 	add.w	r9, sl, r3
 80050bc:	f109 0301 	add.w	r3, r9, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	9308      	str	r3, [sp, #32]
 80050c4:	bfb8      	it	lt
 80050c6:	2301      	movlt	r3, #1
 80050c8:	e7dd      	b.n	8005086 <_dtoa_r+0x266>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e7f2      	b.n	80050b4 <_dtoa_r+0x294>
 80050ce:	bf00      	nop
 80050d0:	636f4361 	.word	0x636f4361
 80050d4:	3fd287a7 	.word	0x3fd287a7
 80050d8:	8b60c8b3 	.word	0x8b60c8b3
 80050dc:	3fc68a28 	.word	0x3fc68a28
 80050e0:	509f79fb 	.word	0x509f79fb
 80050e4:	3fd34413 	.word	0x3fd34413
 80050e8:	080072d9 	.word	0x080072d9
 80050ec:	080072f0 	.word	0x080072f0
 80050f0:	7ff00000 	.word	0x7ff00000
 80050f4:	080072d5 	.word	0x080072d5
 80050f8:	080072cc 	.word	0x080072cc
 80050fc:	080072a9 	.word	0x080072a9
 8005100:	3ff80000 	.word	0x3ff80000
 8005104:	080073e0 	.word	0x080073e0
 8005108:	0800734b 	.word	0x0800734b
 800510c:	2401      	movs	r4, #1
 800510e:	2300      	movs	r3, #0
 8005110:	940b      	str	r4, [sp, #44]	; 0x2c
 8005112:	9322      	str	r3, [sp, #136]	; 0x88
 8005114:	f04f 39ff 	mov.w	r9, #4294967295
 8005118:	2200      	movs	r2, #0
 800511a:	2312      	movs	r3, #18
 800511c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005120:	9223      	str	r2, [sp, #140]	; 0x8c
 8005122:	e7b0      	b.n	8005086 <_dtoa_r+0x266>
 8005124:	2301      	movs	r3, #1
 8005126:	930b      	str	r3, [sp, #44]	; 0x2c
 8005128:	e7f4      	b.n	8005114 <_dtoa_r+0x2f4>
 800512a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800512e:	464b      	mov	r3, r9
 8005130:	f8cd 9020 	str.w	r9, [sp, #32]
 8005134:	e7a7      	b.n	8005086 <_dtoa_r+0x266>
 8005136:	3101      	adds	r1, #1
 8005138:	6041      	str	r1, [r0, #4]
 800513a:	0052      	lsls	r2, r2, #1
 800513c:	e7a7      	b.n	800508e <_dtoa_r+0x26e>
 800513e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005140:	9a03      	ldr	r2, [sp, #12]
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	9b08      	ldr	r3, [sp, #32]
 8005146:	2b0e      	cmp	r3, #14
 8005148:	f200 80a8 	bhi.w	800529c <_dtoa_r+0x47c>
 800514c:	2c00      	cmp	r4, #0
 800514e:	f000 80a5 	beq.w	800529c <_dtoa_r+0x47c>
 8005152:	f1ba 0f00 	cmp.w	sl, #0
 8005156:	dd34      	ble.n	80051c2 <_dtoa_r+0x3a2>
 8005158:	4a9a      	ldr	r2, [pc, #616]	; (80053c4 <_dtoa_r+0x5a4>)
 800515a:	f00a 030f 	and.w	r3, sl, #15
 800515e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005162:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005166:	e9d3 3400 	ldrd	r3, r4, [r3]
 800516a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800516e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005172:	d016      	beq.n	80051a2 <_dtoa_r+0x382>
 8005174:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005178:	4b93      	ldr	r3, [pc, #588]	; (80053c8 <_dtoa_r+0x5a8>)
 800517a:	2703      	movs	r7, #3
 800517c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005180:	f7fb fad4 	bl	800072c <__aeabi_ddiv>
 8005184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005188:	f004 040f 	and.w	r4, r4, #15
 800518c:	4e8e      	ldr	r6, [pc, #568]	; (80053c8 <_dtoa_r+0x5a8>)
 800518e:	b954      	cbnz	r4, 80051a6 <_dtoa_r+0x386>
 8005190:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005198:	f7fb fac8 	bl	800072c <__aeabi_ddiv>
 800519c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051a0:	e029      	b.n	80051f6 <_dtoa_r+0x3d6>
 80051a2:	2702      	movs	r7, #2
 80051a4:	e7f2      	b.n	800518c <_dtoa_r+0x36c>
 80051a6:	07e1      	lsls	r1, r4, #31
 80051a8:	d508      	bpl.n	80051bc <_dtoa_r+0x39c>
 80051aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051b2:	f7fb f991 	bl	80004d8 <__aeabi_dmul>
 80051b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051ba:	3701      	adds	r7, #1
 80051bc:	1064      	asrs	r4, r4, #1
 80051be:	3608      	adds	r6, #8
 80051c0:	e7e5      	b.n	800518e <_dtoa_r+0x36e>
 80051c2:	f000 80a5 	beq.w	8005310 <_dtoa_r+0x4f0>
 80051c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051ca:	f1ca 0400 	rsb	r4, sl, #0
 80051ce:	4b7d      	ldr	r3, [pc, #500]	; (80053c4 <_dtoa_r+0x5a4>)
 80051d0:	f004 020f 	and.w	r2, r4, #15
 80051d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051dc:	f7fb f97c 	bl	80004d8 <__aeabi_dmul>
 80051e0:	2702      	movs	r7, #2
 80051e2:	2300      	movs	r3, #0
 80051e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051e8:	4e77      	ldr	r6, [pc, #476]	; (80053c8 <_dtoa_r+0x5a8>)
 80051ea:	1124      	asrs	r4, r4, #4
 80051ec:	2c00      	cmp	r4, #0
 80051ee:	f040 8084 	bne.w	80052fa <_dtoa_r+0x4da>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1d2      	bne.n	800519c <_dtoa_r+0x37c>
 80051f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 808b 	beq.w	8005314 <_dtoa_r+0x4f4>
 80051fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005202:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005206:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800520a:	2200      	movs	r2, #0
 800520c:	4b6f      	ldr	r3, [pc, #444]	; (80053cc <_dtoa_r+0x5ac>)
 800520e:	f7fb fbd5 	bl	80009bc <__aeabi_dcmplt>
 8005212:	2800      	cmp	r0, #0
 8005214:	d07e      	beq.n	8005314 <_dtoa_r+0x4f4>
 8005216:	9b08      	ldr	r3, [sp, #32]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d07b      	beq.n	8005314 <_dtoa_r+0x4f4>
 800521c:	f1b9 0f00 	cmp.w	r9, #0
 8005220:	dd38      	ble.n	8005294 <_dtoa_r+0x474>
 8005222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005226:	2200      	movs	r2, #0
 8005228:	4b69      	ldr	r3, [pc, #420]	; (80053d0 <_dtoa_r+0x5b0>)
 800522a:	f7fb f955 	bl	80004d8 <__aeabi_dmul>
 800522e:	464c      	mov	r4, r9
 8005230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005234:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005238:	3701      	adds	r7, #1
 800523a:	4638      	mov	r0, r7
 800523c:	f7fb f8e2 	bl	8000404 <__aeabi_i2d>
 8005240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005244:	f7fb f948 	bl	80004d8 <__aeabi_dmul>
 8005248:	2200      	movs	r2, #0
 800524a:	4b62      	ldr	r3, [pc, #392]	; (80053d4 <_dtoa_r+0x5b4>)
 800524c:	f7fa ff8e 	bl	800016c <__adddf3>
 8005250:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005254:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005258:	9611      	str	r6, [sp, #68]	; 0x44
 800525a:	2c00      	cmp	r4, #0
 800525c:	d15d      	bne.n	800531a <_dtoa_r+0x4fa>
 800525e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005262:	2200      	movs	r2, #0
 8005264:	4b5c      	ldr	r3, [pc, #368]	; (80053d8 <_dtoa_r+0x5b8>)
 8005266:	f7fa ff7f 	bl	8000168 <__aeabi_dsub>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005272:	4633      	mov	r3, r6
 8005274:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005276:	f7fb fbbf 	bl	80009f8 <__aeabi_dcmpgt>
 800527a:	2800      	cmp	r0, #0
 800527c:	f040 829c 	bne.w	80057b8 <_dtoa_r+0x998>
 8005280:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005286:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800528a:	f7fb fb97 	bl	80009bc <__aeabi_dcmplt>
 800528e:	2800      	cmp	r0, #0
 8005290:	f040 8290 	bne.w	80057b4 <_dtoa_r+0x994>
 8005294:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005298:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800529c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f2c0 8152 	blt.w	8005548 <_dtoa_r+0x728>
 80052a4:	f1ba 0f0e 	cmp.w	sl, #14
 80052a8:	f300 814e 	bgt.w	8005548 <_dtoa_r+0x728>
 80052ac:	4b45      	ldr	r3, [pc, #276]	; (80053c4 <_dtoa_r+0x5a4>)
 80052ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80052ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f280 80db 	bge.w	8005478 <_dtoa_r+0x658>
 80052c2:	9b08      	ldr	r3, [sp, #32]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f300 80d7 	bgt.w	8005478 <_dtoa_r+0x658>
 80052ca:	f040 8272 	bne.w	80057b2 <_dtoa_r+0x992>
 80052ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052d2:	2200      	movs	r2, #0
 80052d4:	4b40      	ldr	r3, [pc, #256]	; (80053d8 <_dtoa_r+0x5b8>)
 80052d6:	f7fb f8ff 	bl	80004d8 <__aeabi_dmul>
 80052da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052de:	f7fb fb81 	bl	80009e4 <__aeabi_dcmpge>
 80052e2:	9c08      	ldr	r4, [sp, #32]
 80052e4:	4626      	mov	r6, r4
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f040 8248 	bne.w	800577c <_dtoa_r+0x95c>
 80052ec:	2331      	movs	r3, #49	; 0x31
 80052ee:	9f03      	ldr	r7, [sp, #12]
 80052f0:	f10a 0a01 	add.w	sl, sl, #1
 80052f4:	f807 3b01 	strb.w	r3, [r7], #1
 80052f8:	e244      	b.n	8005784 <_dtoa_r+0x964>
 80052fa:	07e2      	lsls	r2, r4, #31
 80052fc:	d505      	bpl.n	800530a <_dtoa_r+0x4ea>
 80052fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005302:	f7fb f8e9 	bl	80004d8 <__aeabi_dmul>
 8005306:	2301      	movs	r3, #1
 8005308:	3701      	adds	r7, #1
 800530a:	1064      	asrs	r4, r4, #1
 800530c:	3608      	adds	r6, #8
 800530e:	e76d      	b.n	80051ec <_dtoa_r+0x3cc>
 8005310:	2702      	movs	r7, #2
 8005312:	e770      	b.n	80051f6 <_dtoa_r+0x3d6>
 8005314:	46d0      	mov	r8, sl
 8005316:	9c08      	ldr	r4, [sp, #32]
 8005318:	e78f      	b.n	800523a <_dtoa_r+0x41a>
 800531a:	9903      	ldr	r1, [sp, #12]
 800531c:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <_dtoa_r+0x5a4>)
 800531e:	4421      	add	r1, r4
 8005320:	9112      	str	r1, [sp, #72]	; 0x48
 8005322:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005324:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005328:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800532c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005330:	2900      	cmp	r1, #0
 8005332:	d055      	beq.n	80053e0 <_dtoa_r+0x5c0>
 8005334:	2000      	movs	r0, #0
 8005336:	4929      	ldr	r1, [pc, #164]	; (80053dc <_dtoa_r+0x5bc>)
 8005338:	f7fb f9f8 	bl	800072c <__aeabi_ddiv>
 800533c:	463b      	mov	r3, r7
 800533e:	4632      	mov	r2, r6
 8005340:	f7fa ff12 	bl	8000168 <__aeabi_dsub>
 8005344:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005348:	9f03      	ldr	r7, [sp, #12]
 800534a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800534e:	f7fb fb73 	bl	8000a38 <__aeabi_d2iz>
 8005352:	4604      	mov	r4, r0
 8005354:	f7fb f856 	bl	8000404 <__aeabi_i2d>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005360:	f7fa ff02 	bl	8000168 <__aeabi_dsub>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	3430      	adds	r4, #48	; 0x30
 800536a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800536e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005372:	f807 4b01 	strb.w	r4, [r7], #1
 8005376:	f7fb fb21 	bl	80009bc <__aeabi_dcmplt>
 800537a:	2800      	cmp	r0, #0
 800537c:	d174      	bne.n	8005468 <_dtoa_r+0x648>
 800537e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005382:	2000      	movs	r0, #0
 8005384:	4911      	ldr	r1, [pc, #68]	; (80053cc <_dtoa_r+0x5ac>)
 8005386:	f7fa feef 	bl	8000168 <__aeabi_dsub>
 800538a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800538e:	f7fb fb15 	bl	80009bc <__aeabi_dcmplt>
 8005392:	2800      	cmp	r0, #0
 8005394:	f040 80b7 	bne.w	8005506 <_dtoa_r+0x6e6>
 8005398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800539a:	429f      	cmp	r7, r3
 800539c:	f43f af7a 	beq.w	8005294 <_dtoa_r+0x474>
 80053a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053a4:	2200      	movs	r2, #0
 80053a6:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <_dtoa_r+0x5b0>)
 80053a8:	f7fb f896 	bl	80004d8 <__aeabi_dmul>
 80053ac:	2200      	movs	r2, #0
 80053ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <_dtoa_r+0x5b0>)
 80053b8:	f7fb f88e 	bl	80004d8 <__aeabi_dmul>
 80053bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053c0:	e7c3      	b.n	800534a <_dtoa_r+0x52a>
 80053c2:	bf00      	nop
 80053c4:	080073e0 	.word	0x080073e0
 80053c8:	080073b8 	.word	0x080073b8
 80053cc:	3ff00000 	.word	0x3ff00000
 80053d0:	40240000 	.word	0x40240000
 80053d4:	401c0000 	.word	0x401c0000
 80053d8:	40140000 	.word	0x40140000
 80053dc:	3fe00000 	.word	0x3fe00000
 80053e0:	4630      	mov	r0, r6
 80053e2:	4639      	mov	r1, r7
 80053e4:	f7fb f878 	bl	80004d8 <__aeabi_dmul>
 80053e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053ee:	9c03      	ldr	r4, [sp, #12]
 80053f0:	9314      	str	r3, [sp, #80]	; 0x50
 80053f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f6:	f7fb fb1f 	bl	8000a38 <__aeabi_d2iz>
 80053fa:	9015      	str	r0, [sp, #84]	; 0x54
 80053fc:	f7fb f802 	bl	8000404 <__aeabi_i2d>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005408:	f7fa feae 	bl	8000168 <__aeabi_dsub>
 800540c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800540e:	4606      	mov	r6, r0
 8005410:	3330      	adds	r3, #48	; 0x30
 8005412:	f804 3b01 	strb.w	r3, [r4], #1
 8005416:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005418:	460f      	mov	r7, r1
 800541a:	429c      	cmp	r4, r3
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	d124      	bne.n	800546c <_dtoa_r+0x64c>
 8005422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005426:	4bb0      	ldr	r3, [pc, #704]	; (80056e8 <_dtoa_r+0x8c8>)
 8005428:	f7fa fea0 	bl	800016c <__adddf3>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4630      	mov	r0, r6
 8005432:	4639      	mov	r1, r7
 8005434:	f7fb fae0 	bl	80009f8 <__aeabi_dcmpgt>
 8005438:	2800      	cmp	r0, #0
 800543a:	d163      	bne.n	8005504 <_dtoa_r+0x6e4>
 800543c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005440:	2000      	movs	r0, #0
 8005442:	49a9      	ldr	r1, [pc, #676]	; (80056e8 <_dtoa_r+0x8c8>)
 8005444:	f7fa fe90 	bl	8000168 <__aeabi_dsub>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fb fab4 	bl	80009bc <__aeabi_dcmplt>
 8005454:	2800      	cmp	r0, #0
 8005456:	f43f af1d 	beq.w	8005294 <_dtoa_r+0x474>
 800545a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800545c:	1e7b      	subs	r3, r7, #1
 800545e:	9314      	str	r3, [sp, #80]	; 0x50
 8005460:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005464:	2b30      	cmp	r3, #48	; 0x30
 8005466:	d0f8      	beq.n	800545a <_dtoa_r+0x63a>
 8005468:	46c2      	mov	sl, r8
 800546a:	e03b      	b.n	80054e4 <_dtoa_r+0x6c4>
 800546c:	4b9f      	ldr	r3, [pc, #636]	; (80056ec <_dtoa_r+0x8cc>)
 800546e:	f7fb f833 	bl	80004d8 <__aeabi_dmul>
 8005472:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005476:	e7bc      	b.n	80053f2 <_dtoa_r+0x5d2>
 8005478:	9f03      	ldr	r7, [sp, #12]
 800547a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800547e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005482:	4640      	mov	r0, r8
 8005484:	4649      	mov	r1, r9
 8005486:	f7fb f951 	bl	800072c <__aeabi_ddiv>
 800548a:	f7fb fad5 	bl	8000a38 <__aeabi_d2iz>
 800548e:	4604      	mov	r4, r0
 8005490:	f7fa ffb8 	bl	8000404 <__aeabi_i2d>
 8005494:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005498:	f7fb f81e 	bl	80004d8 <__aeabi_dmul>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4640      	mov	r0, r8
 80054a2:	4649      	mov	r1, r9
 80054a4:	f7fa fe60 	bl	8000168 <__aeabi_dsub>
 80054a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80054ac:	f807 6b01 	strb.w	r6, [r7], #1
 80054b0:	9e03      	ldr	r6, [sp, #12]
 80054b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80054b6:	1bbe      	subs	r6, r7, r6
 80054b8:	45b4      	cmp	ip, r6
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	d136      	bne.n	800552e <_dtoa_r+0x70e>
 80054c0:	f7fa fe54 	bl	800016c <__adddf3>
 80054c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054c8:	4680      	mov	r8, r0
 80054ca:	4689      	mov	r9, r1
 80054cc:	f7fb fa94 	bl	80009f8 <__aeabi_dcmpgt>
 80054d0:	bb58      	cbnz	r0, 800552a <_dtoa_r+0x70a>
 80054d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054d6:	4640      	mov	r0, r8
 80054d8:	4649      	mov	r1, r9
 80054da:	f7fb fa65 	bl	80009a8 <__aeabi_dcmpeq>
 80054de:	b108      	cbz	r0, 80054e4 <_dtoa_r+0x6c4>
 80054e0:	07e1      	lsls	r1, r4, #31
 80054e2:	d422      	bmi.n	800552a <_dtoa_r+0x70a>
 80054e4:	4628      	mov	r0, r5
 80054e6:	4659      	mov	r1, fp
 80054e8:	f000 faf0 	bl	8005acc <_Bfree>
 80054ec:	2300      	movs	r3, #0
 80054ee:	703b      	strb	r3, [r7, #0]
 80054f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80054f2:	f10a 0001 	add.w	r0, sl, #1
 80054f6:	6018      	str	r0, [r3, #0]
 80054f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f43f acde 	beq.w	8004ebc <_dtoa_r+0x9c>
 8005500:	601f      	str	r7, [r3, #0]
 8005502:	e4db      	b.n	8004ebc <_dtoa_r+0x9c>
 8005504:	4627      	mov	r7, r4
 8005506:	463b      	mov	r3, r7
 8005508:	461f      	mov	r7, r3
 800550a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800550e:	2a39      	cmp	r2, #57	; 0x39
 8005510:	d107      	bne.n	8005522 <_dtoa_r+0x702>
 8005512:	9a03      	ldr	r2, [sp, #12]
 8005514:	429a      	cmp	r2, r3
 8005516:	d1f7      	bne.n	8005508 <_dtoa_r+0x6e8>
 8005518:	2230      	movs	r2, #48	; 0x30
 800551a:	9903      	ldr	r1, [sp, #12]
 800551c:	f108 0801 	add.w	r8, r8, #1
 8005520:	700a      	strb	r2, [r1, #0]
 8005522:	781a      	ldrb	r2, [r3, #0]
 8005524:	3201      	adds	r2, #1
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	e79e      	b.n	8005468 <_dtoa_r+0x648>
 800552a:	46d0      	mov	r8, sl
 800552c:	e7eb      	b.n	8005506 <_dtoa_r+0x6e6>
 800552e:	2200      	movs	r2, #0
 8005530:	4b6e      	ldr	r3, [pc, #440]	; (80056ec <_dtoa_r+0x8cc>)
 8005532:	f7fa ffd1 	bl	80004d8 <__aeabi_dmul>
 8005536:	2200      	movs	r2, #0
 8005538:	2300      	movs	r3, #0
 800553a:	4680      	mov	r8, r0
 800553c:	4689      	mov	r9, r1
 800553e:	f7fb fa33 	bl	80009a8 <__aeabi_dcmpeq>
 8005542:	2800      	cmp	r0, #0
 8005544:	d09b      	beq.n	800547e <_dtoa_r+0x65e>
 8005546:	e7cd      	b.n	80054e4 <_dtoa_r+0x6c4>
 8005548:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800554a:	2a00      	cmp	r2, #0
 800554c:	f000 80d0 	beq.w	80056f0 <_dtoa_r+0x8d0>
 8005550:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005552:	2a01      	cmp	r2, #1
 8005554:	f300 80ae 	bgt.w	80056b4 <_dtoa_r+0x894>
 8005558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800555a:	2a00      	cmp	r2, #0
 800555c:	f000 80a6 	beq.w	80056ac <_dtoa_r+0x88c>
 8005560:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005564:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005566:	9f06      	ldr	r7, [sp, #24]
 8005568:	9a06      	ldr	r2, [sp, #24]
 800556a:	2101      	movs	r1, #1
 800556c:	441a      	add	r2, r3
 800556e:	9206      	str	r2, [sp, #24]
 8005570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005572:	4628      	mov	r0, r5
 8005574:	441a      	add	r2, r3
 8005576:	9209      	str	r2, [sp, #36]	; 0x24
 8005578:	f000 fb5e 	bl	8005c38 <__i2b>
 800557c:	4606      	mov	r6, r0
 800557e:	2f00      	cmp	r7, #0
 8005580:	dd0c      	ble.n	800559c <_dtoa_r+0x77c>
 8005582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	dd09      	ble.n	800559c <_dtoa_r+0x77c>
 8005588:	42bb      	cmp	r3, r7
 800558a:	bfa8      	it	ge
 800558c:	463b      	movge	r3, r7
 800558e:	9a06      	ldr	r2, [sp, #24]
 8005590:	1aff      	subs	r7, r7, r3
 8005592:	1ad2      	subs	r2, r2, r3
 8005594:	9206      	str	r2, [sp, #24]
 8005596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	9309      	str	r3, [sp, #36]	; 0x24
 800559c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800559e:	b1f3      	cbz	r3, 80055de <_dtoa_r+0x7be>
 80055a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80a8 	beq.w	80056f8 <_dtoa_r+0x8d8>
 80055a8:	2c00      	cmp	r4, #0
 80055aa:	dd10      	ble.n	80055ce <_dtoa_r+0x7ae>
 80055ac:	4631      	mov	r1, r6
 80055ae:	4622      	mov	r2, r4
 80055b0:	4628      	mov	r0, r5
 80055b2:	f000 fbff 	bl	8005db4 <__pow5mult>
 80055b6:	465a      	mov	r2, fp
 80055b8:	4601      	mov	r1, r0
 80055ba:	4606      	mov	r6, r0
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 fb51 	bl	8005c64 <__multiply>
 80055c2:	4680      	mov	r8, r0
 80055c4:	4659      	mov	r1, fp
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 fa80 	bl	8005acc <_Bfree>
 80055cc:	46c3      	mov	fp, r8
 80055ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d0:	1b1a      	subs	r2, r3, r4
 80055d2:	d004      	beq.n	80055de <_dtoa_r+0x7be>
 80055d4:	4659      	mov	r1, fp
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 fbec 	bl	8005db4 <__pow5mult>
 80055dc:	4683      	mov	fp, r0
 80055de:	2101      	movs	r1, #1
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 fb29 	bl	8005c38 <__i2b>
 80055e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055e8:	4604      	mov	r4, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f340 8086 	ble.w	80056fc <_dtoa_r+0x8dc>
 80055f0:	461a      	mov	r2, r3
 80055f2:	4601      	mov	r1, r0
 80055f4:	4628      	mov	r0, r5
 80055f6:	f000 fbdd 	bl	8005db4 <__pow5mult>
 80055fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055fc:	4604      	mov	r4, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	dd7f      	ble.n	8005702 <_dtoa_r+0x8e2>
 8005602:	f04f 0800 	mov.w	r8, #0
 8005606:	6923      	ldr	r3, [r4, #16]
 8005608:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800560c:	6918      	ldr	r0, [r3, #16]
 800560e:	f000 fac5 	bl	8005b9c <__hi0bits>
 8005612:	f1c0 0020 	rsb	r0, r0, #32
 8005616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005618:	4418      	add	r0, r3
 800561a:	f010 001f 	ands.w	r0, r0, #31
 800561e:	f000 8092 	beq.w	8005746 <_dtoa_r+0x926>
 8005622:	f1c0 0320 	rsb	r3, r0, #32
 8005626:	2b04      	cmp	r3, #4
 8005628:	f340 808a 	ble.w	8005740 <_dtoa_r+0x920>
 800562c:	f1c0 001c 	rsb	r0, r0, #28
 8005630:	9b06      	ldr	r3, [sp, #24]
 8005632:	4407      	add	r7, r0
 8005634:	4403      	add	r3, r0
 8005636:	9306      	str	r3, [sp, #24]
 8005638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563a:	4403      	add	r3, r0
 800563c:	9309      	str	r3, [sp, #36]	; 0x24
 800563e:	9b06      	ldr	r3, [sp, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	dd05      	ble.n	8005650 <_dtoa_r+0x830>
 8005644:	4659      	mov	r1, fp
 8005646:	461a      	mov	r2, r3
 8005648:	4628      	mov	r0, r5
 800564a:	f000 fc0d 	bl	8005e68 <__lshift>
 800564e:	4683      	mov	fp, r0
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	dd05      	ble.n	8005662 <_dtoa_r+0x842>
 8005656:	4621      	mov	r1, r4
 8005658:	461a      	mov	r2, r3
 800565a:	4628      	mov	r0, r5
 800565c:	f000 fc04 	bl	8005e68 <__lshift>
 8005660:	4604      	mov	r4, r0
 8005662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d070      	beq.n	800574a <_dtoa_r+0x92a>
 8005668:	4621      	mov	r1, r4
 800566a:	4658      	mov	r0, fp
 800566c:	f000 fc6c 	bl	8005f48 <__mcmp>
 8005670:	2800      	cmp	r0, #0
 8005672:	da6a      	bge.n	800574a <_dtoa_r+0x92a>
 8005674:	2300      	movs	r3, #0
 8005676:	4659      	mov	r1, fp
 8005678:	220a      	movs	r2, #10
 800567a:	4628      	mov	r0, r5
 800567c:	f000 fa48 	bl	8005b10 <__multadd>
 8005680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005682:	4683      	mov	fp, r0
 8005684:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8194 	beq.w	80059b6 <_dtoa_r+0xb96>
 800568e:	4631      	mov	r1, r6
 8005690:	2300      	movs	r3, #0
 8005692:	220a      	movs	r2, #10
 8005694:	4628      	mov	r0, r5
 8005696:	f000 fa3b 	bl	8005b10 <__multadd>
 800569a:	f1b9 0f00 	cmp.w	r9, #0
 800569e:	4606      	mov	r6, r0
 80056a0:	f300 8093 	bgt.w	80057ca <_dtoa_r+0x9aa>
 80056a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	dc57      	bgt.n	800575a <_dtoa_r+0x93a>
 80056aa:	e08e      	b.n	80057ca <_dtoa_r+0x9aa>
 80056ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056b2:	e757      	b.n	8005564 <_dtoa_r+0x744>
 80056b4:	9b08      	ldr	r3, [sp, #32]
 80056b6:	1e5c      	subs	r4, r3, #1
 80056b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ba:	42a3      	cmp	r3, r4
 80056bc:	bfb7      	itett	lt
 80056be:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80056c0:	1b1c      	subge	r4, r3, r4
 80056c2:	1ae2      	sublt	r2, r4, r3
 80056c4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80056c6:	bfbe      	ittt	lt
 80056c8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80056ca:	189b      	addlt	r3, r3, r2
 80056cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80056ce:	9b08      	ldr	r3, [sp, #32]
 80056d0:	bfb8      	it	lt
 80056d2:	2400      	movlt	r4, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bfbb      	ittet	lt
 80056d8:	9b06      	ldrlt	r3, [sp, #24]
 80056da:	9a08      	ldrlt	r2, [sp, #32]
 80056dc:	9f06      	ldrge	r7, [sp, #24]
 80056de:	1a9f      	sublt	r7, r3, r2
 80056e0:	bfac      	ite	ge
 80056e2:	9b08      	ldrge	r3, [sp, #32]
 80056e4:	2300      	movlt	r3, #0
 80056e6:	e73f      	b.n	8005568 <_dtoa_r+0x748>
 80056e8:	3fe00000 	.word	0x3fe00000
 80056ec:	40240000 	.word	0x40240000
 80056f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80056f2:	9f06      	ldr	r7, [sp, #24]
 80056f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80056f6:	e742      	b.n	800557e <_dtoa_r+0x75e>
 80056f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056fa:	e76b      	b.n	80055d4 <_dtoa_r+0x7b4>
 80056fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056fe:	2b01      	cmp	r3, #1
 8005700:	dc19      	bgt.n	8005736 <_dtoa_r+0x916>
 8005702:	9b04      	ldr	r3, [sp, #16]
 8005704:	b9bb      	cbnz	r3, 8005736 <_dtoa_r+0x916>
 8005706:	9b05      	ldr	r3, [sp, #20]
 8005708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800570c:	b99b      	cbnz	r3, 8005736 <_dtoa_r+0x916>
 800570e:	9b05      	ldr	r3, [sp, #20]
 8005710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005714:	0d1b      	lsrs	r3, r3, #20
 8005716:	051b      	lsls	r3, r3, #20
 8005718:	b183      	cbz	r3, 800573c <_dtoa_r+0x91c>
 800571a:	f04f 0801 	mov.w	r8, #1
 800571e:	9b06      	ldr	r3, [sp, #24]
 8005720:	3301      	adds	r3, #1
 8005722:	9306      	str	r3, [sp, #24]
 8005724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005726:	3301      	adds	r3, #1
 8005728:	9309      	str	r3, [sp, #36]	; 0x24
 800572a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800572c:	2b00      	cmp	r3, #0
 800572e:	f47f af6a 	bne.w	8005606 <_dtoa_r+0x7e6>
 8005732:	2001      	movs	r0, #1
 8005734:	e76f      	b.n	8005616 <_dtoa_r+0x7f6>
 8005736:	f04f 0800 	mov.w	r8, #0
 800573a:	e7f6      	b.n	800572a <_dtoa_r+0x90a>
 800573c:	4698      	mov	r8, r3
 800573e:	e7f4      	b.n	800572a <_dtoa_r+0x90a>
 8005740:	f43f af7d 	beq.w	800563e <_dtoa_r+0x81e>
 8005744:	4618      	mov	r0, r3
 8005746:	301c      	adds	r0, #28
 8005748:	e772      	b.n	8005630 <_dtoa_r+0x810>
 800574a:	9b08      	ldr	r3, [sp, #32]
 800574c:	2b00      	cmp	r3, #0
 800574e:	dc36      	bgt.n	80057be <_dtoa_r+0x99e>
 8005750:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005752:	2b02      	cmp	r3, #2
 8005754:	dd33      	ble.n	80057be <_dtoa_r+0x99e>
 8005756:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800575a:	f1b9 0f00 	cmp.w	r9, #0
 800575e:	d10d      	bne.n	800577c <_dtoa_r+0x95c>
 8005760:	4621      	mov	r1, r4
 8005762:	464b      	mov	r3, r9
 8005764:	2205      	movs	r2, #5
 8005766:	4628      	mov	r0, r5
 8005768:	f000 f9d2 	bl	8005b10 <__multadd>
 800576c:	4601      	mov	r1, r0
 800576e:	4604      	mov	r4, r0
 8005770:	4658      	mov	r0, fp
 8005772:	f000 fbe9 	bl	8005f48 <__mcmp>
 8005776:	2800      	cmp	r0, #0
 8005778:	f73f adb8 	bgt.w	80052ec <_dtoa_r+0x4cc>
 800577c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800577e:	9f03      	ldr	r7, [sp, #12]
 8005780:	ea6f 0a03 	mvn.w	sl, r3
 8005784:	f04f 0800 	mov.w	r8, #0
 8005788:	4621      	mov	r1, r4
 800578a:	4628      	mov	r0, r5
 800578c:	f000 f99e 	bl	8005acc <_Bfree>
 8005790:	2e00      	cmp	r6, #0
 8005792:	f43f aea7 	beq.w	80054e4 <_dtoa_r+0x6c4>
 8005796:	f1b8 0f00 	cmp.w	r8, #0
 800579a:	d005      	beq.n	80057a8 <_dtoa_r+0x988>
 800579c:	45b0      	cmp	r8, r6
 800579e:	d003      	beq.n	80057a8 <_dtoa_r+0x988>
 80057a0:	4641      	mov	r1, r8
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f992 	bl	8005acc <_Bfree>
 80057a8:	4631      	mov	r1, r6
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 f98e 	bl	8005acc <_Bfree>
 80057b0:	e698      	b.n	80054e4 <_dtoa_r+0x6c4>
 80057b2:	2400      	movs	r4, #0
 80057b4:	4626      	mov	r6, r4
 80057b6:	e7e1      	b.n	800577c <_dtoa_r+0x95c>
 80057b8:	46c2      	mov	sl, r8
 80057ba:	4626      	mov	r6, r4
 80057bc:	e596      	b.n	80052ec <_dtoa_r+0x4cc>
 80057be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80fd 	beq.w	80059c4 <_dtoa_r+0xba4>
 80057ca:	2f00      	cmp	r7, #0
 80057cc:	dd05      	ble.n	80057da <_dtoa_r+0x9ba>
 80057ce:	4631      	mov	r1, r6
 80057d0:	463a      	mov	r2, r7
 80057d2:	4628      	mov	r0, r5
 80057d4:	f000 fb48 	bl	8005e68 <__lshift>
 80057d8:	4606      	mov	r6, r0
 80057da:	f1b8 0f00 	cmp.w	r8, #0
 80057de:	d05c      	beq.n	800589a <_dtoa_r+0xa7a>
 80057e0:	4628      	mov	r0, r5
 80057e2:	6871      	ldr	r1, [r6, #4]
 80057e4:	f000 f932 	bl	8005a4c <_Balloc>
 80057e8:	4607      	mov	r7, r0
 80057ea:	b928      	cbnz	r0, 80057f8 <_dtoa_r+0x9d8>
 80057ec:	4602      	mov	r2, r0
 80057ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80057f2:	4b7f      	ldr	r3, [pc, #508]	; (80059f0 <_dtoa_r+0xbd0>)
 80057f4:	f7ff bb28 	b.w	8004e48 <_dtoa_r+0x28>
 80057f8:	6932      	ldr	r2, [r6, #16]
 80057fa:	f106 010c 	add.w	r1, r6, #12
 80057fe:	3202      	adds	r2, #2
 8005800:	0092      	lsls	r2, r2, #2
 8005802:	300c      	adds	r0, #12
 8005804:	f000 f914 	bl	8005a30 <memcpy>
 8005808:	2201      	movs	r2, #1
 800580a:	4639      	mov	r1, r7
 800580c:	4628      	mov	r0, r5
 800580e:	f000 fb2b 	bl	8005e68 <__lshift>
 8005812:	46b0      	mov	r8, r6
 8005814:	4606      	mov	r6, r0
 8005816:	9b03      	ldr	r3, [sp, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	9308      	str	r3, [sp, #32]
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	444b      	add	r3, r9
 8005820:	930a      	str	r3, [sp, #40]	; 0x28
 8005822:	9b04      	ldr	r3, [sp, #16]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	9309      	str	r3, [sp, #36]	; 0x24
 800582a:	9b08      	ldr	r3, [sp, #32]
 800582c:	4621      	mov	r1, r4
 800582e:	3b01      	subs	r3, #1
 8005830:	4658      	mov	r0, fp
 8005832:	9304      	str	r3, [sp, #16]
 8005834:	f7ff fa67 	bl	8004d06 <quorem>
 8005838:	4603      	mov	r3, r0
 800583a:	4641      	mov	r1, r8
 800583c:	3330      	adds	r3, #48	; 0x30
 800583e:	9006      	str	r0, [sp, #24]
 8005840:	4658      	mov	r0, fp
 8005842:	930b      	str	r3, [sp, #44]	; 0x2c
 8005844:	f000 fb80 	bl	8005f48 <__mcmp>
 8005848:	4632      	mov	r2, r6
 800584a:	4681      	mov	r9, r0
 800584c:	4621      	mov	r1, r4
 800584e:	4628      	mov	r0, r5
 8005850:	f000 fb96 	bl	8005f80 <__mdiff>
 8005854:	68c2      	ldr	r2, [r0, #12]
 8005856:	4607      	mov	r7, r0
 8005858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800585a:	bb02      	cbnz	r2, 800589e <_dtoa_r+0xa7e>
 800585c:	4601      	mov	r1, r0
 800585e:	4658      	mov	r0, fp
 8005860:	f000 fb72 	bl	8005f48 <__mcmp>
 8005864:	4602      	mov	r2, r0
 8005866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005868:	4639      	mov	r1, r7
 800586a:	4628      	mov	r0, r5
 800586c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005870:	f000 f92c 	bl	8005acc <_Bfree>
 8005874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005878:	9f08      	ldr	r7, [sp, #32]
 800587a:	ea43 0102 	orr.w	r1, r3, r2
 800587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005880:	430b      	orrs	r3, r1
 8005882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005884:	d10d      	bne.n	80058a2 <_dtoa_r+0xa82>
 8005886:	2b39      	cmp	r3, #57	; 0x39
 8005888:	d029      	beq.n	80058de <_dtoa_r+0xabe>
 800588a:	f1b9 0f00 	cmp.w	r9, #0
 800588e:	dd01      	ble.n	8005894 <_dtoa_r+0xa74>
 8005890:	9b06      	ldr	r3, [sp, #24]
 8005892:	3331      	adds	r3, #49	; 0x31
 8005894:	9a04      	ldr	r2, [sp, #16]
 8005896:	7013      	strb	r3, [r2, #0]
 8005898:	e776      	b.n	8005788 <_dtoa_r+0x968>
 800589a:	4630      	mov	r0, r6
 800589c:	e7b9      	b.n	8005812 <_dtoa_r+0x9f2>
 800589e:	2201      	movs	r2, #1
 80058a0:	e7e2      	b.n	8005868 <_dtoa_r+0xa48>
 80058a2:	f1b9 0f00 	cmp.w	r9, #0
 80058a6:	db06      	blt.n	80058b6 <_dtoa_r+0xa96>
 80058a8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80058aa:	ea41 0909 	orr.w	r9, r1, r9
 80058ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058b0:	ea59 0101 	orrs.w	r1, r9, r1
 80058b4:	d120      	bne.n	80058f8 <_dtoa_r+0xad8>
 80058b6:	2a00      	cmp	r2, #0
 80058b8:	ddec      	ble.n	8005894 <_dtoa_r+0xa74>
 80058ba:	4659      	mov	r1, fp
 80058bc:	2201      	movs	r2, #1
 80058be:	4628      	mov	r0, r5
 80058c0:	9308      	str	r3, [sp, #32]
 80058c2:	f000 fad1 	bl	8005e68 <__lshift>
 80058c6:	4621      	mov	r1, r4
 80058c8:	4683      	mov	fp, r0
 80058ca:	f000 fb3d 	bl	8005f48 <__mcmp>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	9b08      	ldr	r3, [sp, #32]
 80058d2:	dc02      	bgt.n	80058da <_dtoa_r+0xaba>
 80058d4:	d1de      	bne.n	8005894 <_dtoa_r+0xa74>
 80058d6:	07da      	lsls	r2, r3, #31
 80058d8:	d5dc      	bpl.n	8005894 <_dtoa_r+0xa74>
 80058da:	2b39      	cmp	r3, #57	; 0x39
 80058dc:	d1d8      	bne.n	8005890 <_dtoa_r+0xa70>
 80058de:	2339      	movs	r3, #57	; 0x39
 80058e0:	9a04      	ldr	r2, [sp, #16]
 80058e2:	7013      	strb	r3, [r2, #0]
 80058e4:	463b      	mov	r3, r7
 80058e6:	461f      	mov	r7, r3
 80058e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	2a39      	cmp	r2, #57	; 0x39
 80058f0:	d050      	beq.n	8005994 <_dtoa_r+0xb74>
 80058f2:	3201      	adds	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	e747      	b.n	8005788 <_dtoa_r+0x968>
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	dd03      	ble.n	8005904 <_dtoa_r+0xae4>
 80058fc:	2b39      	cmp	r3, #57	; 0x39
 80058fe:	d0ee      	beq.n	80058de <_dtoa_r+0xabe>
 8005900:	3301      	adds	r3, #1
 8005902:	e7c7      	b.n	8005894 <_dtoa_r+0xa74>
 8005904:	9a08      	ldr	r2, [sp, #32]
 8005906:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005908:	f802 3c01 	strb.w	r3, [r2, #-1]
 800590c:	428a      	cmp	r2, r1
 800590e:	d02a      	beq.n	8005966 <_dtoa_r+0xb46>
 8005910:	4659      	mov	r1, fp
 8005912:	2300      	movs	r3, #0
 8005914:	220a      	movs	r2, #10
 8005916:	4628      	mov	r0, r5
 8005918:	f000 f8fa 	bl	8005b10 <__multadd>
 800591c:	45b0      	cmp	r8, r6
 800591e:	4683      	mov	fp, r0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	f04f 020a 	mov.w	r2, #10
 8005928:	4641      	mov	r1, r8
 800592a:	4628      	mov	r0, r5
 800592c:	d107      	bne.n	800593e <_dtoa_r+0xb1e>
 800592e:	f000 f8ef 	bl	8005b10 <__multadd>
 8005932:	4680      	mov	r8, r0
 8005934:	4606      	mov	r6, r0
 8005936:	9b08      	ldr	r3, [sp, #32]
 8005938:	3301      	adds	r3, #1
 800593a:	9308      	str	r3, [sp, #32]
 800593c:	e775      	b.n	800582a <_dtoa_r+0xa0a>
 800593e:	f000 f8e7 	bl	8005b10 <__multadd>
 8005942:	4631      	mov	r1, r6
 8005944:	4680      	mov	r8, r0
 8005946:	2300      	movs	r3, #0
 8005948:	220a      	movs	r2, #10
 800594a:	4628      	mov	r0, r5
 800594c:	f000 f8e0 	bl	8005b10 <__multadd>
 8005950:	4606      	mov	r6, r0
 8005952:	e7f0      	b.n	8005936 <_dtoa_r+0xb16>
 8005954:	f1b9 0f00 	cmp.w	r9, #0
 8005958:	bfcc      	ite	gt
 800595a:	464f      	movgt	r7, r9
 800595c:	2701      	movle	r7, #1
 800595e:	f04f 0800 	mov.w	r8, #0
 8005962:	9a03      	ldr	r2, [sp, #12]
 8005964:	4417      	add	r7, r2
 8005966:	4659      	mov	r1, fp
 8005968:	2201      	movs	r2, #1
 800596a:	4628      	mov	r0, r5
 800596c:	9308      	str	r3, [sp, #32]
 800596e:	f000 fa7b 	bl	8005e68 <__lshift>
 8005972:	4621      	mov	r1, r4
 8005974:	4683      	mov	fp, r0
 8005976:	f000 fae7 	bl	8005f48 <__mcmp>
 800597a:	2800      	cmp	r0, #0
 800597c:	dcb2      	bgt.n	80058e4 <_dtoa_r+0xac4>
 800597e:	d102      	bne.n	8005986 <_dtoa_r+0xb66>
 8005980:	9b08      	ldr	r3, [sp, #32]
 8005982:	07db      	lsls	r3, r3, #31
 8005984:	d4ae      	bmi.n	80058e4 <_dtoa_r+0xac4>
 8005986:	463b      	mov	r3, r7
 8005988:	461f      	mov	r7, r3
 800598a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800598e:	2a30      	cmp	r2, #48	; 0x30
 8005990:	d0fa      	beq.n	8005988 <_dtoa_r+0xb68>
 8005992:	e6f9      	b.n	8005788 <_dtoa_r+0x968>
 8005994:	9a03      	ldr	r2, [sp, #12]
 8005996:	429a      	cmp	r2, r3
 8005998:	d1a5      	bne.n	80058e6 <_dtoa_r+0xac6>
 800599a:	2331      	movs	r3, #49	; 0x31
 800599c:	f10a 0a01 	add.w	sl, sl, #1
 80059a0:	e779      	b.n	8005896 <_dtoa_r+0xa76>
 80059a2:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <_dtoa_r+0xbd4>)
 80059a4:	f7ff baa8 	b.w	8004ef8 <_dtoa_r+0xd8>
 80059a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f47f aa81 	bne.w	8004eb2 <_dtoa_r+0x92>
 80059b0:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <_dtoa_r+0xbd8>)
 80059b2:	f7ff baa1 	b.w	8004ef8 <_dtoa_r+0xd8>
 80059b6:	f1b9 0f00 	cmp.w	r9, #0
 80059ba:	dc03      	bgt.n	80059c4 <_dtoa_r+0xba4>
 80059bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059be:	2b02      	cmp	r3, #2
 80059c0:	f73f aecb 	bgt.w	800575a <_dtoa_r+0x93a>
 80059c4:	9f03      	ldr	r7, [sp, #12]
 80059c6:	4621      	mov	r1, r4
 80059c8:	4658      	mov	r0, fp
 80059ca:	f7ff f99c 	bl	8004d06 <quorem>
 80059ce:	9a03      	ldr	r2, [sp, #12]
 80059d0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80059d4:	f807 3b01 	strb.w	r3, [r7], #1
 80059d8:	1aba      	subs	r2, r7, r2
 80059da:	4591      	cmp	r9, r2
 80059dc:	ddba      	ble.n	8005954 <_dtoa_r+0xb34>
 80059de:	4659      	mov	r1, fp
 80059e0:	2300      	movs	r3, #0
 80059e2:	220a      	movs	r2, #10
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 f893 	bl	8005b10 <__multadd>
 80059ea:	4683      	mov	fp, r0
 80059ec:	e7eb      	b.n	80059c6 <_dtoa_r+0xba6>
 80059ee:	bf00      	nop
 80059f0:	0800734b 	.word	0x0800734b
 80059f4:	080072a8 	.word	0x080072a8
 80059f8:	080072cc 	.word	0x080072cc

080059fc <_localeconv_r>:
 80059fc:	4800      	ldr	r0, [pc, #0]	; (8005a00 <_localeconv_r+0x4>)
 80059fe:	4770      	bx	lr
 8005a00:	20000170 	.word	0x20000170

08005a04 <malloc>:
 8005a04:	4b02      	ldr	r3, [pc, #8]	; (8005a10 <malloc+0xc>)
 8005a06:	4601      	mov	r1, r0
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	f000 bc1d 	b.w	8006248 <_malloc_r>
 8005a0e:	bf00      	nop
 8005a10:	2000001c 	.word	0x2000001c

08005a14 <memchr>:
 8005a14:	4603      	mov	r3, r0
 8005a16:	b510      	push	{r4, lr}
 8005a18:	b2c9      	uxtb	r1, r1
 8005a1a:	4402      	add	r2, r0
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	d101      	bne.n	8005a26 <memchr+0x12>
 8005a22:	2000      	movs	r0, #0
 8005a24:	e003      	b.n	8005a2e <memchr+0x1a>
 8005a26:	7804      	ldrb	r4, [r0, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	428c      	cmp	r4, r1
 8005a2c:	d1f6      	bne.n	8005a1c <memchr+0x8>
 8005a2e:	bd10      	pop	{r4, pc}

08005a30 <memcpy>:
 8005a30:	440a      	add	r2, r1
 8005a32:	4291      	cmp	r1, r2
 8005a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a38:	d100      	bne.n	8005a3c <memcpy+0xc>
 8005a3a:	4770      	bx	lr
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a42:	4291      	cmp	r1, r2
 8005a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a48:	d1f9      	bne.n	8005a3e <memcpy+0xe>
 8005a4a:	bd10      	pop	{r4, pc}

08005a4c <_Balloc>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a50:	4604      	mov	r4, r0
 8005a52:	460d      	mov	r5, r1
 8005a54:	b976      	cbnz	r6, 8005a74 <_Balloc+0x28>
 8005a56:	2010      	movs	r0, #16
 8005a58:	f7ff ffd4 	bl	8005a04 <malloc>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6260      	str	r0, [r4, #36]	; 0x24
 8005a60:	b920      	cbnz	r0, 8005a6c <_Balloc+0x20>
 8005a62:	2166      	movs	r1, #102	; 0x66
 8005a64:	4b17      	ldr	r3, [pc, #92]	; (8005ac4 <_Balloc+0x78>)
 8005a66:	4818      	ldr	r0, [pc, #96]	; (8005ac8 <_Balloc+0x7c>)
 8005a68:	f000 fdce 	bl	8006608 <__assert_func>
 8005a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a70:	6006      	str	r6, [r0, #0]
 8005a72:	60c6      	str	r6, [r0, #12]
 8005a74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a76:	68f3      	ldr	r3, [r6, #12]
 8005a78:	b183      	cbz	r3, 8005a9c <_Balloc+0x50>
 8005a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a82:	b9b8      	cbnz	r0, 8005ab4 <_Balloc+0x68>
 8005a84:	2101      	movs	r1, #1
 8005a86:	fa01 f605 	lsl.w	r6, r1, r5
 8005a8a:	1d72      	adds	r2, r6, #5
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	0092      	lsls	r2, r2, #2
 8005a90:	f000 fb5e 	bl	8006150 <_calloc_r>
 8005a94:	b160      	cbz	r0, 8005ab0 <_Balloc+0x64>
 8005a96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a9a:	e00e      	b.n	8005aba <_Balloc+0x6e>
 8005a9c:	2221      	movs	r2, #33	; 0x21
 8005a9e:	2104      	movs	r1, #4
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 fb55 	bl	8006150 <_calloc_r>
 8005aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa8:	60f0      	str	r0, [r6, #12]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e4      	bne.n	8005a7a <_Balloc+0x2e>
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	6802      	ldr	r2, [r0, #0]
 8005ab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005aba:	2300      	movs	r3, #0
 8005abc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ac0:	e7f7      	b.n	8005ab2 <_Balloc+0x66>
 8005ac2:	bf00      	nop
 8005ac4:	080072d9 	.word	0x080072d9
 8005ac8:	0800735c 	.word	0x0800735c

08005acc <_Bfree>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	b976      	cbnz	r6, 8005af4 <_Bfree+0x28>
 8005ad6:	2010      	movs	r0, #16
 8005ad8:	f7ff ff94 	bl	8005a04 <malloc>
 8005adc:	4602      	mov	r2, r0
 8005ade:	6268      	str	r0, [r5, #36]	; 0x24
 8005ae0:	b920      	cbnz	r0, 8005aec <_Bfree+0x20>
 8005ae2:	218a      	movs	r1, #138	; 0x8a
 8005ae4:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <_Bfree+0x3c>)
 8005ae6:	4809      	ldr	r0, [pc, #36]	; (8005b0c <_Bfree+0x40>)
 8005ae8:	f000 fd8e 	bl	8006608 <__assert_func>
 8005aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005af0:	6006      	str	r6, [r0, #0]
 8005af2:	60c6      	str	r6, [r0, #12]
 8005af4:	b13c      	cbz	r4, 8005b06 <_Bfree+0x3a>
 8005af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005af8:	6862      	ldr	r2, [r4, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b00:	6021      	str	r1, [r4, #0]
 8005b02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	080072d9 	.word	0x080072d9
 8005b0c:	0800735c 	.word	0x0800735c

08005b10 <__multadd>:
 8005b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b14:	4607      	mov	r7, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	461e      	mov	r6, r3
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	690d      	ldr	r5, [r1, #16]
 8005b1e:	f101 0c14 	add.w	ip, r1, #20
 8005b22:	f8dc 3000 	ldr.w	r3, [ip]
 8005b26:	3001      	adds	r0, #1
 8005b28:	b299      	uxth	r1, r3
 8005b2a:	fb02 6101 	mla	r1, r2, r1, r6
 8005b2e:	0c1e      	lsrs	r6, r3, #16
 8005b30:	0c0b      	lsrs	r3, r1, #16
 8005b32:	fb02 3306 	mla	r3, r2, r6, r3
 8005b36:	b289      	uxth	r1, r1
 8005b38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b3c:	4285      	cmp	r5, r0
 8005b3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b42:	f84c 1b04 	str.w	r1, [ip], #4
 8005b46:	dcec      	bgt.n	8005b22 <__multadd+0x12>
 8005b48:	b30e      	cbz	r6, 8005b8e <__multadd+0x7e>
 8005b4a:	68a3      	ldr	r3, [r4, #8]
 8005b4c:	42ab      	cmp	r3, r5
 8005b4e:	dc19      	bgt.n	8005b84 <__multadd+0x74>
 8005b50:	6861      	ldr	r1, [r4, #4]
 8005b52:	4638      	mov	r0, r7
 8005b54:	3101      	adds	r1, #1
 8005b56:	f7ff ff79 	bl	8005a4c <_Balloc>
 8005b5a:	4680      	mov	r8, r0
 8005b5c:	b928      	cbnz	r0, 8005b6a <__multadd+0x5a>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	21b5      	movs	r1, #181	; 0xb5
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <__multadd+0x84>)
 8005b64:	480c      	ldr	r0, [pc, #48]	; (8005b98 <__multadd+0x88>)
 8005b66:	f000 fd4f 	bl	8006608 <__assert_func>
 8005b6a:	6922      	ldr	r2, [r4, #16]
 8005b6c:	f104 010c 	add.w	r1, r4, #12
 8005b70:	3202      	adds	r2, #2
 8005b72:	0092      	lsls	r2, r2, #2
 8005b74:	300c      	adds	r0, #12
 8005b76:	f7ff ff5b 	bl	8005a30 <memcpy>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f7ff ffa5 	bl	8005acc <_Bfree>
 8005b82:	4644      	mov	r4, r8
 8005b84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b88:	3501      	adds	r5, #1
 8005b8a:	615e      	str	r6, [r3, #20]
 8005b8c:	6125      	str	r5, [r4, #16]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b94:	0800734b 	.word	0x0800734b
 8005b98:	0800735c 	.word	0x0800735c

08005b9c <__hi0bits>:
 8005b9c:	0c02      	lsrs	r2, r0, #16
 8005b9e:	0412      	lsls	r2, r2, #16
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	b9ca      	cbnz	r2, 8005bd8 <__hi0bits+0x3c>
 8005ba4:	0403      	lsls	r3, r0, #16
 8005ba6:	2010      	movs	r0, #16
 8005ba8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005bac:	bf04      	itt	eq
 8005bae:	021b      	lsleq	r3, r3, #8
 8005bb0:	3008      	addeq	r0, #8
 8005bb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005bb6:	bf04      	itt	eq
 8005bb8:	011b      	lsleq	r3, r3, #4
 8005bba:	3004      	addeq	r0, #4
 8005bbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005bc0:	bf04      	itt	eq
 8005bc2:	009b      	lsleq	r3, r3, #2
 8005bc4:	3002      	addeq	r0, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	db05      	blt.n	8005bd6 <__hi0bits+0x3a>
 8005bca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005bce:	f100 0001 	add.w	r0, r0, #1
 8005bd2:	bf08      	it	eq
 8005bd4:	2020      	moveq	r0, #32
 8005bd6:	4770      	bx	lr
 8005bd8:	2000      	movs	r0, #0
 8005bda:	e7e5      	b.n	8005ba8 <__hi0bits+0xc>

08005bdc <__lo0bits>:
 8005bdc:	6803      	ldr	r3, [r0, #0]
 8005bde:	4602      	mov	r2, r0
 8005be0:	f013 0007 	ands.w	r0, r3, #7
 8005be4:	d00b      	beq.n	8005bfe <__lo0bits+0x22>
 8005be6:	07d9      	lsls	r1, r3, #31
 8005be8:	d421      	bmi.n	8005c2e <__lo0bits+0x52>
 8005bea:	0798      	lsls	r0, r3, #30
 8005bec:	bf49      	itett	mi
 8005bee:	085b      	lsrmi	r3, r3, #1
 8005bf0:	089b      	lsrpl	r3, r3, #2
 8005bf2:	2001      	movmi	r0, #1
 8005bf4:	6013      	strmi	r3, [r2, #0]
 8005bf6:	bf5c      	itt	pl
 8005bf8:	2002      	movpl	r0, #2
 8005bfa:	6013      	strpl	r3, [r2, #0]
 8005bfc:	4770      	bx	lr
 8005bfe:	b299      	uxth	r1, r3
 8005c00:	b909      	cbnz	r1, 8005c06 <__lo0bits+0x2a>
 8005c02:	2010      	movs	r0, #16
 8005c04:	0c1b      	lsrs	r3, r3, #16
 8005c06:	b2d9      	uxtb	r1, r3
 8005c08:	b909      	cbnz	r1, 8005c0e <__lo0bits+0x32>
 8005c0a:	3008      	adds	r0, #8
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	0719      	lsls	r1, r3, #28
 8005c10:	bf04      	itt	eq
 8005c12:	091b      	lsreq	r3, r3, #4
 8005c14:	3004      	addeq	r0, #4
 8005c16:	0799      	lsls	r1, r3, #30
 8005c18:	bf04      	itt	eq
 8005c1a:	089b      	lsreq	r3, r3, #2
 8005c1c:	3002      	addeq	r0, #2
 8005c1e:	07d9      	lsls	r1, r3, #31
 8005c20:	d403      	bmi.n	8005c2a <__lo0bits+0x4e>
 8005c22:	085b      	lsrs	r3, r3, #1
 8005c24:	f100 0001 	add.w	r0, r0, #1
 8005c28:	d003      	beq.n	8005c32 <__lo0bits+0x56>
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	4770      	bx	lr
 8005c2e:	2000      	movs	r0, #0
 8005c30:	4770      	bx	lr
 8005c32:	2020      	movs	r0, #32
 8005c34:	4770      	bx	lr
	...

08005c38 <__i2b>:
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	f7ff ff05 	bl	8005a4c <_Balloc>
 8005c42:	4602      	mov	r2, r0
 8005c44:	b928      	cbnz	r0, 8005c52 <__i2b+0x1a>
 8005c46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c4a:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <__i2b+0x24>)
 8005c4c:	4804      	ldr	r0, [pc, #16]	; (8005c60 <__i2b+0x28>)
 8005c4e:	f000 fcdb 	bl	8006608 <__assert_func>
 8005c52:	2301      	movs	r3, #1
 8005c54:	6144      	str	r4, [r0, #20]
 8005c56:	6103      	str	r3, [r0, #16]
 8005c58:	bd10      	pop	{r4, pc}
 8005c5a:	bf00      	nop
 8005c5c:	0800734b 	.word	0x0800734b
 8005c60:	0800735c 	.word	0x0800735c

08005c64 <__multiply>:
 8005c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c68:	4691      	mov	r9, r2
 8005c6a:	690a      	ldr	r2, [r1, #16]
 8005c6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c70:	460c      	mov	r4, r1
 8005c72:	429a      	cmp	r2, r3
 8005c74:	bfbe      	ittt	lt
 8005c76:	460b      	movlt	r3, r1
 8005c78:	464c      	movlt	r4, r9
 8005c7a:	4699      	movlt	r9, r3
 8005c7c:	6927      	ldr	r7, [r4, #16]
 8005c7e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c82:	68a3      	ldr	r3, [r4, #8]
 8005c84:	6861      	ldr	r1, [r4, #4]
 8005c86:	eb07 060a 	add.w	r6, r7, sl
 8005c8a:	42b3      	cmp	r3, r6
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	bfb8      	it	lt
 8005c90:	3101      	addlt	r1, #1
 8005c92:	f7ff fedb 	bl	8005a4c <_Balloc>
 8005c96:	b930      	cbnz	r0, 8005ca6 <__multiply+0x42>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	f240 115d 	movw	r1, #349	; 0x15d
 8005c9e:	4b43      	ldr	r3, [pc, #268]	; (8005dac <__multiply+0x148>)
 8005ca0:	4843      	ldr	r0, [pc, #268]	; (8005db0 <__multiply+0x14c>)
 8005ca2:	f000 fcb1 	bl	8006608 <__assert_func>
 8005ca6:	f100 0514 	add.w	r5, r0, #20
 8005caa:	462b      	mov	r3, r5
 8005cac:	2200      	movs	r2, #0
 8005cae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cb2:	4543      	cmp	r3, r8
 8005cb4:	d321      	bcc.n	8005cfa <__multiply+0x96>
 8005cb6:	f104 0314 	add.w	r3, r4, #20
 8005cba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005cbe:	f109 0314 	add.w	r3, r9, #20
 8005cc2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005cc6:	9202      	str	r2, [sp, #8]
 8005cc8:	1b3a      	subs	r2, r7, r4
 8005cca:	3a15      	subs	r2, #21
 8005ccc:	f022 0203 	bic.w	r2, r2, #3
 8005cd0:	3204      	adds	r2, #4
 8005cd2:	f104 0115 	add.w	r1, r4, #21
 8005cd6:	428f      	cmp	r7, r1
 8005cd8:	bf38      	it	cc
 8005cda:	2204      	movcc	r2, #4
 8005cdc:	9201      	str	r2, [sp, #4]
 8005cde:	9a02      	ldr	r2, [sp, #8]
 8005ce0:	9303      	str	r3, [sp, #12]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d80c      	bhi.n	8005d00 <__multiply+0x9c>
 8005ce6:	2e00      	cmp	r6, #0
 8005ce8:	dd03      	ble.n	8005cf2 <__multiply+0x8e>
 8005cea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d059      	beq.n	8005da6 <__multiply+0x142>
 8005cf2:	6106      	str	r6, [r0, #16]
 8005cf4:	b005      	add	sp, #20
 8005cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfa:	f843 2b04 	str.w	r2, [r3], #4
 8005cfe:	e7d8      	b.n	8005cb2 <__multiply+0x4e>
 8005d00:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d04:	f1ba 0f00 	cmp.w	sl, #0
 8005d08:	d023      	beq.n	8005d52 <__multiply+0xee>
 8005d0a:	46a9      	mov	r9, r5
 8005d0c:	f04f 0c00 	mov.w	ip, #0
 8005d10:	f104 0e14 	add.w	lr, r4, #20
 8005d14:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d18:	f8d9 1000 	ldr.w	r1, [r9]
 8005d1c:	fa1f fb82 	uxth.w	fp, r2
 8005d20:	b289      	uxth	r1, r1
 8005d22:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d26:	4461      	add	r1, ip
 8005d28:	f8d9 c000 	ldr.w	ip, [r9]
 8005d2c:	0c12      	lsrs	r2, r2, #16
 8005d2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d32:	fb0a c202 	mla	r2, sl, r2, ip
 8005d36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d3a:	b289      	uxth	r1, r1
 8005d3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d40:	4577      	cmp	r7, lr
 8005d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d46:	f849 1b04 	str.w	r1, [r9], #4
 8005d4a:	d8e3      	bhi.n	8005d14 <__multiply+0xb0>
 8005d4c:	9a01      	ldr	r2, [sp, #4]
 8005d4e:	f845 c002 	str.w	ip, [r5, r2]
 8005d52:	9a03      	ldr	r2, [sp, #12]
 8005d54:	3304      	adds	r3, #4
 8005d56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d5a:	f1b9 0f00 	cmp.w	r9, #0
 8005d5e:	d020      	beq.n	8005da2 <__multiply+0x13e>
 8005d60:	46ae      	mov	lr, r5
 8005d62:	f04f 0a00 	mov.w	sl, #0
 8005d66:	6829      	ldr	r1, [r5, #0]
 8005d68:	f104 0c14 	add.w	ip, r4, #20
 8005d6c:	f8bc b000 	ldrh.w	fp, [ip]
 8005d70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d74:	b289      	uxth	r1, r1
 8005d76:	fb09 220b 	mla	r2, r9, fp, r2
 8005d7a:	4492      	add	sl, r2
 8005d7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005d80:	f84e 1b04 	str.w	r1, [lr], #4
 8005d84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005d88:	f8be 1000 	ldrh.w	r1, [lr]
 8005d8c:	0c12      	lsrs	r2, r2, #16
 8005d8e:	fb09 1102 	mla	r1, r9, r2, r1
 8005d92:	4567      	cmp	r7, ip
 8005d94:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d9c:	d8e6      	bhi.n	8005d6c <__multiply+0x108>
 8005d9e:	9a01      	ldr	r2, [sp, #4]
 8005da0:	50a9      	str	r1, [r5, r2]
 8005da2:	3504      	adds	r5, #4
 8005da4:	e79b      	b.n	8005cde <__multiply+0x7a>
 8005da6:	3e01      	subs	r6, #1
 8005da8:	e79d      	b.n	8005ce6 <__multiply+0x82>
 8005daa:	bf00      	nop
 8005dac:	0800734b 	.word	0x0800734b
 8005db0:	0800735c 	.word	0x0800735c

08005db4 <__pow5mult>:
 8005db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db8:	4615      	mov	r5, r2
 8005dba:	f012 0203 	ands.w	r2, r2, #3
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	460f      	mov	r7, r1
 8005dc2:	d007      	beq.n	8005dd4 <__pow5mult+0x20>
 8005dc4:	4c25      	ldr	r4, [pc, #148]	; (8005e5c <__pow5mult+0xa8>)
 8005dc6:	3a01      	subs	r2, #1
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dce:	f7ff fe9f 	bl	8005b10 <__multadd>
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	10ad      	asrs	r5, r5, #2
 8005dd6:	d03d      	beq.n	8005e54 <__pow5mult+0xa0>
 8005dd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dda:	b97c      	cbnz	r4, 8005dfc <__pow5mult+0x48>
 8005ddc:	2010      	movs	r0, #16
 8005dde:	f7ff fe11 	bl	8005a04 <malloc>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6270      	str	r0, [r6, #36]	; 0x24
 8005de6:	b928      	cbnz	r0, 8005df4 <__pow5mult+0x40>
 8005de8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005dec:	4b1c      	ldr	r3, [pc, #112]	; (8005e60 <__pow5mult+0xac>)
 8005dee:	481d      	ldr	r0, [pc, #116]	; (8005e64 <__pow5mult+0xb0>)
 8005df0:	f000 fc0a 	bl	8006608 <__assert_func>
 8005df4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005df8:	6004      	str	r4, [r0, #0]
 8005dfa:	60c4      	str	r4, [r0, #12]
 8005dfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e04:	b94c      	cbnz	r4, 8005e1a <__pow5mult+0x66>
 8005e06:	f240 2171 	movw	r1, #625	; 0x271
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff ff14 	bl	8005c38 <__i2b>
 8005e10:	2300      	movs	r3, #0
 8005e12:	4604      	mov	r4, r0
 8005e14:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e18:	6003      	str	r3, [r0, #0]
 8005e1a:	f04f 0900 	mov.w	r9, #0
 8005e1e:	07eb      	lsls	r3, r5, #31
 8005e20:	d50a      	bpl.n	8005e38 <__pow5mult+0x84>
 8005e22:	4639      	mov	r1, r7
 8005e24:	4622      	mov	r2, r4
 8005e26:	4630      	mov	r0, r6
 8005e28:	f7ff ff1c 	bl	8005c64 <__multiply>
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	4639      	mov	r1, r7
 8005e30:	4630      	mov	r0, r6
 8005e32:	f7ff fe4b 	bl	8005acc <_Bfree>
 8005e36:	4647      	mov	r7, r8
 8005e38:	106d      	asrs	r5, r5, #1
 8005e3a:	d00b      	beq.n	8005e54 <__pow5mult+0xa0>
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	b938      	cbnz	r0, 8005e50 <__pow5mult+0x9c>
 8005e40:	4622      	mov	r2, r4
 8005e42:	4621      	mov	r1, r4
 8005e44:	4630      	mov	r0, r6
 8005e46:	f7ff ff0d 	bl	8005c64 <__multiply>
 8005e4a:	6020      	str	r0, [r4, #0]
 8005e4c:	f8c0 9000 	str.w	r9, [r0]
 8005e50:	4604      	mov	r4, r0
 8005e52:	e7e4      	b.n	8005e1e <__pow5mult+0x6a>
 8005e54:	4638      	mov	r0, r7
 8005e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e5a:	bf00      	nop
 8005e5c:	080074a8 	.word	0x080074a8
 8005e60:	080072d9 	.word	0x080072d9
 8005e64:	0800735c 	.word	0x0800735c

08005e68 <__lshift>:
 8005e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	4607      	mov	r7, r0
 8005e70:	4691      	mov	r9, r2
 8005e72:	6923      	ldr	r3, [r4, #16]
 8005e74:	6849      	ldr	r1, [r1, #4]
 8005e76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e7a:	68a3      	ldr	r3, [r4, #8]
 8005e7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e80:	f108 0601 	add.w	r6, r8, #1
 8005e84:	42b3      	cmp	r3, r6
 8005e86:	db0b      	blt.n	8005ea0 <__lshift+0x38>
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7ff fddf 	bl	8005a4c <_Balloc>
 8005e8e:	4605      	mov	r5, r0
 8005e90:	b948      	cbnz	r0, 8005ea6 <__lshift+0x3e>
 8005e92:	4602      	mov	r2, r0
 8005e94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e98:	4b29      	ldr	r3, [pc, #164]	; (8005f40 <__lshift+0xd8>)
 8005e9a:	482a      	ldr	r0, [pc, #168]	; (8005f44 <__lshift+0xdc>)
 8005e9c:	f000 fbb4 	bl	8006608 <__assert_func>
 8005ea0:	3101      	adds	r1, #1
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	e7ee      	b.n	8005e84 <__lshift+0x1c>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f100 0114 	add.w	r1, r0, #20
 8005eac:	f100 0210 	add.w	r2, r0, #16
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	4553      	cmp	r3, sl
 8005eb4:	db37      	blt.n	8005f26 <__lshift+0xbe>
 8005eb6:	6920      	ldr	r0, [r4, #16]
 8005eb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ebc:	f104 0314 	add.w	r3, r4, #20
 8005ec0:	f019 091f 	ands.w	r9, r9, #31
 8005ec4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ec8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ecc:	d02f      	beq.n	8005f2e <__lshift+0xc6>
 8005ece:	468a      	mov	sl, r1
 8005ed0:	f04f 0c00 	mov.w	ip, #0
 8005ed4:	f1c9 0e20 	rsb	lr, r9, #32
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	fa02 f209 	lsl.w	r2, r2, r9
 8005ede:	ea42 020c 	orr.w	r2, r2, ip
 8005ee2:	f84a 2b04 	str.w	r2, [sl], #4
 8005ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eea:	4298      	cmp	r0, r3
 8005eec:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005ef0:	d8f2      	bhi.n	8005ed8 <__lshift+0x70>
 8005ef2:	1b03      	subs	r3, r0, r4
 8005ef4:	3b15      	subs	r3, #21
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	3304      	adds	r3, #4
 8005efc:	f104 0215 	add.w	r2, r4, #21
 8005f00:	4290      	cmp	r0, r2
 8005f02:	bf38      	it	cc
 8005f04:	2304      	movcc	r3, #4
 8005f06:	f841 c003 	str.w	ip, [r1, r3]
 8005f0a:	f1bc 0f00 	cmp.w	ip, #0
 8005f0e:	d001      	beq.n	8005f14 <__lshift+0xac>
 8005f10:	f108 0602 	add.w	r6, r8, #2
 8005f14:	3e01      	subs	r6, #1
 8005f16:	4638      	mov	r0, r7
 8005f18:	4621      	mov	r1, r4
 8005f1a:	612e      	str	r6, [r5, #16]
 8005f1c:	f7ff fdd6 	bl	8005acc <_Bfree>
 8005f20:	4628      	mov	r0, r5
 8005f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f26:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	e7c1      	b.n	8005eb2 <__lshift+0x4a>
 8005f2e:	3904      	subs	r1, #4
 8005f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f34:	4298      	cmp	r0, r3
 8005f36:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f3a:	d8f9      	bhi.n	8005f30 <__lshift+0xc8>
 8005f3c:	e7ea      	b.n	8005f14 <__lshift+0xac>
 8005f3e:	bf00      	nop
 8005f40:	0800734b 	.word	0x0800734b
 8005f44:	0800735c 	.word	0x0800735c

08005f48 <__mcmp>:
 8005f48:	4603      	mov	r3, r0
 8005f4a:	690a      	ldr	r2, [r1, #16]
 8005f4c:	6900      	ldr	r0, [r0, #16]
 8005f4e:	b530      	push	{r4, r5, lr}
 8005f50:	1a80      	subs	r0, r0, r2
 8005f52:	d10d      	bne.n	8005f70 <__mcmp+0x28>
 8005f54:	3314      	adds	r3, #20
 8005f56:	3114      	adds	r1, #20
 8005f58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f68:	4295      	cmp	r5, r2
 8005f6a:	d002      	beq.n	8005f72 <__mcmp+0x2a>
 8005f6c:	d304      	bcc.n	8005f78 <__mcmp+0x30>
 8005f6e:	2001      	movs	r0, #1
 8005f70:	bd30      	pop	{r4, r5, pc}
 8005f72:	42a3      	cmp	r3, r4
 8005f74:	d3f4      	bcc.n	8005f60 <__mcmp+0x18>
 8005f76:	e7fb      	b.n	8005f70 <__mcmp+0x28>
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7c:	e7f8      	b.n	8005f70 <__mcmp+0x28>
	...

08005f80 <__mdiff>:
 8005f80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	460d      	mov	r5, r1
 8005f86:	4607      	mov	r7, r0
 8005f88:	4611      	mov	r1, r2
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	f7ff ffdb 	bl	8005f48 <__mcmp>
 8005f92:	1e06      	subs	r6, r0, #0
 8005f94:	d111      	bne.n	8005fba <__mdiff+0x3a>
 8005f96:	4631      	mov	r1, r6
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f7ff fd57 	bl	8005a4c <_Balloc>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	b928      	cbnz	r0, 8005fae <__mdiff+0x2e>
 8005fa2:	f240 2132 	movw	r1, #562	; 0x232
 8005fa6:	4b3a      	ldr	r3, [pc, #232]	; (8006090 <__mdiff+0x110>)
 8005fa8:	483a      	ldr	r0, [pc, #232]	; (8006094 <__mdiff+0x114>)
 8005faa:	f000 fb2d 	bl	8006608 <__assert_func>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fba:	bfa4      	itt	ge
 8005fbc:	4623      	movge	r3, r4
 8005fbe:	462c      	movge	r4, r5
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	6861      	ldr	r1, [r4, #4]
 8005fc4:	bfa6      	itte	ge
 8005fc6:	461d      	movge	r5, r3
 8005fc8:	2600      	movge	r6, #0
 8005fca:	2601      	movlt	r6, #1
 8005fcc:	f7ff fd3e 	bl	8005a4c <_Balloc>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	b918      	cbnz	r0, 8005fdc <__mdiff+0x5c>
 8005fd4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005fd8:	4b2d      	ldr	r3, [pc, #180]	; (8006090 <__mdiff+0x110>)
 8005fda:	e7e5      	b.n	8005fa8 <__mdiff+0x28>
 8005fdc:	f102 0814 	add.w	r8, r2, #20
 8005fe0:	46c2      	mov	sl, r8
 8005fe2:	f04f 0c00 	mov.w	ip, #0
 8005fe6:	6927      	ldr	r7, [r4, #16]
 8005fe8:	60c6      	str	r6, [r0, #12]
 8005fea:	692e      	ldr	r6, [r5, #16]
 8005fec:	f104 0014 	add.w	r0, r4, #20
 8005ff0:	f105 0914 	add.w	r9, r5, #20
 8005ff4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005ff8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ffc:	3410      	adds	r4, #16
 8005ffe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006002:	f859 3b04 	ldr.w	r3, [r9], #4
 8006006:	fa1f f18b 	uxth.w	r1, fp
 800600a:	448c      	add	ip, r1
 800600c:	b299      	uxth	r1, r3
 800600e:	0c1b      	lsrs	r3, r3, #16
 8006010:	ebac 0101 	sub.w	r1, ip, r1
 8006014:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006018:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800601c:	b289      	uxth	r1, r1
 800601e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006022:	454e      	cmp	r6, r9
 8006024:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006028:	f84a 3b04 	str.w	r3, [sl], #4
 800602c:	d8e7      	bhi.n	8005ffe <__mdiff+0x7e>
 800602e:	1b73      	subs	r3, r6, r5
 8006030:	3b15      	subs	r3, #21
 8006032:	f023 0303 	bic.w	r3, r3, #3
 8006036:	3515      	adds	r5, #21
 8006038:	3304      	adds	r3, #4
 800603a:	42ae      	cmp	r6, r5
 800603c:	bf38      	it	cc
 800603e:	2304      	movcc	r3, #4
 8006040:	4418      	add	r0, r3
 8006042:	4443      	add	r3, r8
 8006044:	461e      	mov	r6, r3
 8006046:	4605      	mov	r5, r0
 8006048:	4575      	cmp	r5, lr
 800604a:	d30e      	bcc.n	800606a <__mdiff+0xea>
 800604c:	f10e 0103 	add.w	r1, lr, #3
 8006050:	1a09      	subs	r1, r1, r0
 8006052:	f021 0103 	bic.w	r1, r1, #3
 8006056:	3803      	subs	r0, #3
 8006058:	4586      	cmp	lr, r0
 800605a:	bf38      	it	cc
 800605c:	2100      	movcc	r1, #0
 800605e:	4419      	add	r1, r3
 8006060:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006064:	b18b      	cbz	r3, 800608a <__mdiff+0x10a>
 8006066:	6117      	str	r7, [r2, #16]
 8006068:	e7a4      	b.n	8005fb4 <__mdiff+0x34>
 800606a:	f855 8b04 	ldr.w	r8, [r5], #4
 800606e:	fa1f f188 	uxth.w	r1, r8
 8006072:	4461      	add	r1, ip
 8006074:	140c      	asrs	r4, r1, #16
 8006076:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800607a:	b289      	uxth	r1, r1
 800607c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006080:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006084:	f846 1b04 	str.w	r1, [r6], #4
 8006088:	e7de      	b.n	8006048 <__mdiff+0xc8>
 800608a:	3f01      	subs	r7, #1
 800608c:	e7e8      	b.n	8006060 <__mdiff+0xe0>
 800608e:	bf00      	nop
 8006090:	0800734b 	.word	0x0800734b
 8006094:	0800735c 	.word	0x0800735c

08006098 <__d2b>:
 8006098:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800609c:	2101      	movs	r1, #1
 800609e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80060a2:	4690      	mov	r8, r2
 80060a4:	461d      	mov	r5, r3
 80060a6:	f7ff fcd1 	bl	8005a4c <_Balloc>
 80060aa:	4604      	mov	r4, r0
 80060ac:	b930      	cbnz	r0, 80060bc <__d2b+0x24>
 80060ae:	4602      	mov	r2, r0
 80060b0:	f240 310a 	movw	r1, #778	; 0x30a
 80060b4:	4b24      	ldr	r3, [pc, #144]	; (8006148 <__d2b+0xb0>)
 80060b6:	4825      	ldr	r0, [pc, #148]	; (800614c <__d2b+0xb4>)
 80060b8:	f000 faa6 	bl	8006608 <__assert_func>
 80060bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80060c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80060c4:	bb2d      	cbnz	r5, 8006112 <__d2b+0x7a>
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	f1b8 0300 	subs.w	r3, r8, #0
 80060cc:	d026      	beq.n	800611c <__d2b+0x84>
 80060ce:	4668      	mov	r0, sp
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	f7ff fd83 	bl	8005bdc <__lo0bits>
 80060d6:	9900      	ldr	r1, [sp, #0]
 80060d8:	b1f0      	cbz	r0, 8006118 <__d2b+0x80>
 80060da:	9a01      	ldr	r2, [sp, #4]
 80060dc:	f1c0 0320 	rsb	r3, r0, #32
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	430b      	orrs	r3, r1
 80060e6:	40c2      	lsrs	r2, r0
 80060e8:	6163      	str	r3, [r4, #20]
 80060ea:	9201      	str	r2, [sp, #4]
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	bf14      	ite	ne
 80060f2:	2102      	movne	r1, #2
 80060f4:	2101      	moveq	r1, #1
 80060f6:	61a3      	str	r3, [r4, #24]
 80060f8:	6121      	str	r1, [r4, #16]
 80060fa:	b1c5      	cbz	r5, 800612e <__d2b+0x96>
 80060fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006100:	4405      	add	r5, r0
 8006102:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006106:	603d      	str	r5, [r7, #0]
 8006108:	6030      	str	r0, [r6, #0]
 800610a:	4620      	mov	r0, r4
 800610c:	b002      	add	sp, #8
 800610e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006116:	e7d6      	b.n	80060c6 <__d2b+0x2e>
 8006118:	6161      	str	r1, [r4, #20]
 800611a:	e7e7      	b.n	80060ec <__d2b+0x54>
 800611c:	a801      	add	r0, sp, #4
 800611e:	f7ff fd5d 	bl	8005bdc <__lo0bits>
 8006122:	2101      	movs	r1, #1
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	6121      	str	r1, [r4, #16]
 8006128:	6163      	str	r3, [r4, #20]
 800612a:	3020      	adds	r0, #32
 800612c:	e7e5      	b.n	80060fa <__d2b+0x62>
 800612e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006132:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006136:	6038      	str	r0, [r7, #0]
 8006138:	6918      	ldr	r0, [r3, #16]
 800613a:	f7ff fd2f 	bl	8005b9c <__hi0bits>
 800613e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006142:	6031      	str	r1, [r6, #0]
 8006144:	e7e1      	b.n	800610a <__d2b+0x72>
 8006146:	bf00      	nop
 8006148:	0800734b 	.word	0x0800734b
 800614c:	0800735c 	.word	0x0800735c

08006150 <_calloc_r>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	fba1 5402 	umull	r5, r4, r1, r2
 8006156:	b934      	cbnz	r4, 8006166 <_calloc_r+0x16>
 8006158:	4629      	mov	r1, r5
 800615a:	f000 f875 	bl	8006248 <_malloc_r>
 800615e:	4606      	mov	r6, r0
 8006160:	b928      	cbnz	r0, 800616e <_calloc_r+0x1e>
 8006162:	4630      	mov	r0, r6
 8006164:	bd70      	pop	{r4, r5, r6, pc}
 8006166:	220c      	movs	r2, #12
 8006168:	2600      	movs	r6, #0
 800616a:	6002      	str	r2, [r0, #0]
 800616c:	e7f9      	b.n	8006162 <_calloc_r+0x12>
 800616e:	462a      	mov	r2, r5
 8006170:	4621      	mov	r1, r4
 8006172:	f7fe f92d 	bl	80043d0 <memset>
 8006176:	e7f4      	b.n	8006162 <_calloc_r+0x12>

08006178 <_free_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4605      	mov	r5, r0
 800617c:	2900      	cmp	r1, #0
 800617e:	d040      	beq.n	8006202 <_free_r+0x8a>
 8006180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006184:	1f0c      	subs	r4, r1, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	bfb8      	it	lt
 800618a:	18e4      	addlt	r4, r4, r3
 800618c:	f000 fa98 	bl	80066c0 <__malloc_lock>
 8006190:	4a1c      	ldr	r2, [pc, #112]	; (8006204 <_free_r+0x8c>)
 8006192:	6813      	ldr	r3, [r2, #0]
 8006194:	b933      	cbnz	r3, 80061a4 <_free_r+0x2c>
 8006196:	6063      	str	r3, [r4, #4]
 8006198:	6014      	str	r4, [r2, #0]
 800619a:	4628      	mov	r0, r5
 800619c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a0:	f000 ba94 	b.w	80066cc <__malloc_unlock>
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d908      	bls.n	80061ba <_free_r+0x42>
 80061a8:	6820      	ldr	r0, [r4, #0]
 80061aa:	1821      	adds	r1, r4, r0
 80061ac:	428b      	cmp	r3, r1
 80061ae:	bf01      	itttt	eq
 80061b0:	6819      	ldreq	r1, [r3, #0]
 80061b2:	685b      	ldreq	r3, [r3, #4]
 80061b4:	1809      	addeq	r1, r1, r0
 80061b6:	6021      	streq	r1, [r4, #0]
 80061b8:	e7ed      	b.n	8006196 <_free_r+0x1e>
 80061ba:	461a      	mov	r2, r3
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	b10b      	cbz	r3, 80061c4 <_free_r+0x4c>
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	d9fa      	bls.n	80061ba <_free_r+0x42>
 80061c4:	6811      	ldr	r1, [r2, #0]
 80061c6:	1850      	adds	r0, r2, r1
 80061c8:	42a0      	cmp	r0, r4
 80061ca:	d10b      	bne.n	80061e4 <_free_r+0x6c>
 80061cc:	6820      	ldr	r0, [r4, #0]
 80061ce:	4401      	add	r1, r0
 80061d0:	1850      	adds	r0, r2, r1
 80061d2:	4283      	cmp	r3, r0
 80061d4:	6011      	str	r1, [r2, #0]
 80061d6:	d1e0      	bne.n	800619a <_free_r+0x22>
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4401      	add	r1, r0
 80061de:	6011      	str	r1, [r2, #0]
 80061e0:	6053      	str	r3, [r2, #4]
 80061e2:	e7da      	b.n	800619a <_free_r+0x22>
 80061e4:	d902      	bls.n	80061ec <_free_r+0x74>
 80061e6:	230c      	movs	r3, #12
 80061e8:	602b      	str	r3, [r5, #0]
 80061ea:	e7d6      	b.n	800619a <_free_r+0x22>
 80061ec:	6820      	ldr	r0, [r4, #0]
 80061ee:	1821      	adds	r1, r4, r0
 80061f0:	428b      	cmp	r3, r1
 80061f2:	bf01      	itttt	eq
 80061f4:	6819      	ldreq	r1, [r3, #0]
 80061f6:	685b      	ldreq	r3, [r3, #4]
 80061f8:	1809      	addeq	r1, r1, r0
 80061fa:	6021      	streq	r1, [r4, #0]
 80061fc:	6063      	str	r3, [r4, #4]
 80061fe:	6054      	str	r4, [r2, #4]
 8006200:	e7cb      	b.n	800619a <_free_r+0x22>
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	20000360 	.word	0x20000360

08006208 <sbrk_aligned>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	4e0e      	ldr	r6, [pc, #56]	; (8006244 <sbrk_aligned+0x3c>)
 800620c:	460c      	mov	r4, r1
 800620e:	6831      	ldr	r1, [r6, #0]
 8006210:	4605      	mov	r5, r0
 8006212:	b911      	cbnz	r1, 800621a <sbrk_aligned+0x12>
 8006214:	f000 f9e8 	bl	80065e8 <_sbrk_r>
 8006218:	6030      	str	r0, [r6, #0]
 800621a:	4621      	mov	r1, r4
 800621c:	4628      	mov	r0, r5
 800621e:	f000 f9e3 	bl	80065e8 <_sbrk_r>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	d00a      	beq.n	800623c <sbrk_aligned+0x34>
 8006226:	1cc4      	adds	r4, r0, #3
 8006228:	f024 0403 	bic.w	r4, r4, #3
 800622c:	42a0      	cmp	r0, r4
 800622e:	d007      	beq.n	8006240 <sbrk_aligned+0x38>
 8006230:	1a21      	subs	r1, r4, r0
 8006232:	4628      	mov	r0, r5
 8006234:	f000 f9d8 	bl	80065e8 <_sbrk_r>
 8006238:	3001      	adds	r0, #1
 800623a:	d101      	bne.n	8006240 <sbrk_aligned+0x38>
 800623c:	f04f 34ff 	mov.w	r4, #4294967295
 8006240:	4620      	mov	r0, r4
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	20000364 	.word	0x20000364

08006248 <_malloc_r>:
 8006248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800624c:	1ccd      	adds	r5, r1, #3
 800624e:	f025 0503 	bic.w	r5, r5, #3
 8006252:	3508      	adds	r5, #8
 8006254:	2d0c      	cmp	r5, #12
 8006256:	bf38      	it	cc
 8006258:	250c      	movcc	r5, #12
 800625a:	2d00      	cmp	r5, #0
 800625c:	4607      	mov	r7, r0
 800625e:	db01      	blt.n	8006264 <_malloc_r+0x1c>
 8006260:	42a9      	cmp	r1, r5
 8006262:	d905      	bls.n	8006270 <_malloc_r+0x28>
 8006264:	230c      	movs	r3, #12
 8006266:	2600      	movs	r6, #0
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	4630      	mov	r0, r6
 800626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006270:	4e2e      	ldr	r6, [pc, #184]	; (800632c <_malloc_r+0xe4>)
 8006272:	f000 fa25 	bl	80066c0 <__malloc_lock>
 8006276:	6833      	ldr	r3, [r6, #0]
 8006278:	461c      	mov	r4, r3
 800627a:	bb34      	cbnz	r4, 80062ca <_malloc_r+0x82>
 800627c:	4629      	mov	r1, r5
 800627e:	4638      	mov	r0, r7
 8006280:	f7ff ffc2 	bl	8006208 <sbrk_aligned>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	4604      	mov	r4, r0
 8006288:	d14d      	bne.n	8006326 <_malloc_r+0xde>
 800628a:	6834      	ldr	r4, [r6, #0]
 800628c:	4626      	mov	r6, r4
 800628e:	2e00      	cmp	r6, #0
 8006290:	d140      	bne.n	8006314 <_malloc_r+0xcc>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	4631      	mov	r1, r6
 8006296:	4638      	mov	r0, r7
 8006298:	eb04 0803 	add.w	r8, r4, r3
 800629c:	f000 f9a4 	bl	80065e8 <_sbrk_r>
 80062a0:	4580      	cmp	r8, r0
 80062a2:	d13a      	bne.n	800631a <_malloc_r+0xd2>
 80062a4:	6821      	ldr	r1, [r4, #0]
 80062a6:	3503      	adds	r5, #3
 80062a8:	1a6d      	subs	r5, r5, r1
 80062aa:	f025 0503 	bic.w	r5, r5, #3
 80062ae:	3508      	adds	r5, #8
 80062b0:	2d0c      	cmp	r5, #12
 80062b2:	bf38      	it	cc
 80062b4:	250c      	movcc	r5, #12
 80062b6:	4638      	mov	r0, r7
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7ff ffa5 	bl	8006208 <sbrk_aligned>
 80062be:	3001      	adds	r0, #1
 80062c0:	d02b      	beq.n	800631a <_malloc_r+0xd2>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	442b      	add	r3, r5
 80062c6:	6023      	str	r3, [r4, #0]
 80062c8:	e00e      	b.n	80062e8 <_malloc_r+0xa0>
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	1b52      	subs	r2, r2, r5
 80062ce:	d41e      	bmi.n	800630e <_malloc_r+0xc6>
 80062d0:	2a0b      	cmp	r2, #11
 80062d2:	d916      	bls.n	8006302 <_malloc_r+0xba>
 80062d4:	1961      	adds	r1, r4, r5
 80062d6:	42a3      	cmp	r3, r4
 80062d8:	6025      	str	r5, [r4, #0]
 80062da:	bf18      	it	ne
 80062dc:	6059      	strne	r1, [r3, #4]
 80062de:	6863      	ldr	r3, [r4, #4]
 80062e0:	bf08      	it	eq
 80062e2:	6031      	streq	r1, [r6, #0]
 80062e4:	5162      	str	r2, [r4, r5]
 80062e6:	604b      	str	r3, [r1, #4]
 80062e8:	4638      	mov	r0, r7
 80062ea:	f104 060b 	add.w	r6, r4, #11
 80062ee:	f000 f9ed 	bl	80066cc <__malloc_unlock>
 80062f2:	f026 0607 	bic.w	r6, r6, #7
 80062f6:	1d23      	adds	r3, r4, #4
 80062f8:	1af2      	subs	r2, r6, r3
 80062fa:	d0b6      	beq.n	800626a <_malloc_r+0x22>
 80062fc:	1b9b      	subs	r3, r3, r6
 80062fe:	50a3      	str	r3, [r4, r2]
 8006300:	e7b3      	b.n	800626a <_malloc_r+0x22>
 8006302:	6862      	ldr	r2, [r4, #4]
 8006304:	42a3      	cmp	r3, r4
 8006306:	bf0c      	ite	eq
 8006308:	6032      	streq	r2, [r6, #0]
 800630a:	605a      	strne	r2, [r3, #4]
 800630c:	e7ec      	b.n	80062e8 <_malloc_r+0xa0>
 800630e:	4623      	mov	r3, r4
 8006310:	6864      	ldr	r4, [r4, #4]
 8006312:	e7b2      	b.n	800627a <_malloc_r+0x32>
 8006314:	4634      	mov	r4, r6
 8006316:	6876      	ldr	r6, [r6, #4]
 8006318:	e7b9      	b.n	800628e <_malloc_r+0x46>
 800631a:	230c      	movs	r3, #12
 800631c:	4638      	mov	r0, r7
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	f000 f9d4 	bl	80066cc <__malloc_unlock>
 8006324:	e7a1      	b.n	800626a <_malloc_r+0x22>
 8006326:	6025      	str	r5, [r4, #0]
 8006328:	e7de      	b.n	80062e8 <_malloc_r+0xa0>
 800632a:	bf00      	nop
 800632c:	20000360 	.word	0x20000360

08006330 <__ssputs_r>:
 8006330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006334:	688e      	ldr	r6, [r1, #8]
 8006336:	4682      	mov	sl, r0
 8006338:	429e      	cmp	r6, r3
 800633a:	460c      	mov	r4, r1
 800633c:	4690      	mov	r8, r2
 800633e:	461f      	mov	r7, r3
 8006340:	d838      	bhi.n	80063b4 <__ssputs_r+0x84>
 8006342:	898a      	ldrh	r2, [r1, #12]
 8006344:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006348:	d032      	beq.n	80063b0 <__ssputs_r+0x80>
 800634a:	6825      	ldr	r5, [r4, #0]
 800634c:	6909      	ldr	r1, [r1, #16]
 800634e:	3301      	adds	r3, #1
 8006350:	eba5 0901 	sub.w	r9, r5, r1
 8006354:	6965      	ldr	r5, [r4, #20]
 8006356:	444b      	add	r3, r9
 8006358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800635c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006360:	106d      	asrs	r5, r5, #1
 8006362:	429d      	cmp	r5, r3
 8006364:	bf38      	it	cc
 8006366:	461d      	movcc	r5, r3
 8006368:	0553      	lsls	r3, r2, #21
 800636a:	d531      	bpl.n	80063d0 <__ssputs_r+0xa0>
 800636c:	4629      	mov	r1, r5
 800636e:	f7ff ff6b 	bl	8006248 <_malloc_r>
 8006372:	4606      	mov	r6, r0
 8006374:	b950      	cbnz	r0, 800638c <__ssputs_r+0x5c>
 8006376:	230c      	movs	r3, #12
 8006378:	f04f 30ff 	mov.w	r0, #4294967295
 800637c:	f8ca 3000 	str.w	r3, [sl]
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638c:	464a      	mov	r2, r9
 800638e:	6921      	ldr	r1, [r4, #16]
 8006390:	f7ff fb4e 	bl	8005a30 <memcpy>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800639a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639e:	81a3      	strh	r3, [r4, #12]
 80063a0:	6126      	str	r6, [r4, #16]
 80063a2:	444e      	add	r6, r9
 80063a4:	6026      	str	r6, [r4, #0]
 80063a6:	463e      	mov	r6, r7
 80063a8:	6165      	str	r5, [r4, #20]
 80063aa:	eba5 0509 	sub.w	r5, r5, r9
 80063ae:	60a5      	str	r5, [r4, #8]
 80063b0:	42be      	cmp	r6, r7
 80063b2:	d900      	bls.n	80063b6 <__ssputs_r+0x86>
 80063b4:	463e      	mov	r6, r7
 80063b6:	4632      	mov	r2, r6
 80063b8:	4641      	mov	r1, r8
 80063ba:	6820      	ldr	r0, [r4, #0]
 80063bc:	f000 f966 	bl	800668c <memmove>
 80063c0:	68a3      	ldr	r3, [r4, #8]
 80063c2:	2000      	movs	r0, #0
 80063c4:	1b9b      	subs	r3, r3, r6
 80063c6:	60a3      	str	r3, [r4, #8]
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	4433      	add	r3, r6
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	e7db      	b.n	8006388 <__ssputs_r+0x58>
 80063d0:	462a      	mov	r2, r5
 80063d2:	f000 f981 	bl	80066d8 <_realloc_r>
 80063d6:	4606      	mov	r6, r0
 80063d8:	2800      	cmp	r0, #0
 80063da:	d1e1      	bne.n	80063a0 <__ssputs_r+0x70>
 80063dc:	4650      	mov	r0, sl
 80063de:	6921      	ldr	r1, [r4, #16]
 80063e0:	f7ff feca 	bl	8006178 <_free_r>
 80063e4:	e7c7      	b.n	8006376 <__ssputs_r+0x46>
	...

080063e8 <_svfiprintf_r>:
 80063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	4698      	mov	r8, r3
 80063ee:	898b      	ldrh	r3, [r1, #12]
 80063f0:	4607      	mov	r7, r0
 80063f2:	061b      	lsls	r3, r3, #24
 80063f4:	460d      	mov	r5, r1
 80063f6:	4614      	mov	r4, r2
 80063f8:	b09d      	sub	sp, #116	; 0x74
 80063fa:	d50e      	bpl.n	800641a <_svfiprintf_r+0x32>
 80063fc:	690b      	ldr	r3, [r1, #16]
 80063fe:	b963      	cbnz	r3, 800641a <_svfiprintf_r+0x32>
 8006400:	2140      	movs	r1, #64	; 0x40
 8006402:	f7ff ff21 	bl	8006248 <_malloc_r>
 8006406:	6028      	str	r0, [r5, #0]
 8006408:	6128      	str	r0, [r5, #16]
 800640a:	b920      	cbnz	r0, 8006416 <_svfiprintf_r+0x2e>
 800640c:	230c      	movs	r3, #12
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	f04f 30ff 	mov.w	r0, #4294967295
 8006414:	e0d1      	b.n	80065ba <_svfiprintf_r+0x1d2>
 8006416:	2340      	movs	r3, #64	; 0x40
 8006418:	616b      	str	r3, [r5, #20]
 800641a:	2300      	movs	r3, #0
 800641c:	9309      	str	r3, [sp, #36]	; 0x24
 800641e:	2320      	movs	r3, #32
 8006420:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006424:	2330      	movs	r3, #48	; 0x30
 8006426:	f04f 0901 	mov.w	r9, #1
 800642a:	f8cd 800c 	str.w	r8, [sp, #12]
 800642e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80065d4 <_svfiprintf_r+0x1ec>
 8006432:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006436:	4623      	mov	r3, r4
 8006438:	469a      	mov	sl, r3
 800643a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800643e:	b10a      	cbz	r2, 8006444 <_svfiprintf_r+0x5c>
 8006440:	2a25      	cmp	r2, #37	; 0x25
 8006442:	d1f9      	bne.n	8006438 <_svfiprintf_r+0x50>
 8006444:	ebba 0b04 	subs.w	fp, sl, r4
 8006448:	d00b      	beq.n	8006462 <_svfiprintf_r+0x7a>
 800644a:	465b      	mov	r3, fp
 800644c:	4622      	mov	r2, r4
 800644e:	4629      	mov	r1, r5
 8006450:	4638      	mov	r0, r7
 8006452:	f7ff ff6d 	bl	8006330 <__ssputs_r>
 8006456:	3001      	adds	r0, #1
 8006458:	f000 80aa 	beq.w	80065b0 <_svfiprintf_r+0x1c8>
 800645c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800645e:	445a      	add	r2, fp
 8006460:	9209      	str	r2, [sp, #36]	; 0x24
 8006462:	f89a 3000 	ldrb.w	r3, [sl]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80a2 	beq.w	80065b0 <_svfiprintf_r+0x1c8>
 800646c:	2300      	movs	r3, #0
 800646e:	f04f 32ff 	mov.w	r2, #4294967295
 8006472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006476:	f10a 0a01 	add.w	sl, sl, #1
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	9307      	str	r3, [sp, #28]
 800647e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006482:	931a      	str	r3, [sp, #104]	; 0x68
 8006484:	4654      	mov	r4, sl
 8006486:	2205      	movs	r2, #5
 8006488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648c:	4851      	ldr	r0, [pc, #324]	; (80065d4 <_svfiprintf_r+0x1ec>)
 800648e:	f7ff fac1 	bl	8005a14 <memchr>
 8006492:	9a04      	ldr	r2, [sp, #16]
 8006494:	b9d8      	cbnz	r0, 80064ce <_svfiprintf_r+0xe6>
 8006496:	06d0      	lsls	r0, r2, #27
 8006498:	bf44      	itt	mi
 800649a:	2320      	movmi	r3, #32
 800649c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064a0:	0711      	lsls	r1, r2, #28
 80064a2:	bf44      	itt	mi
 80064a4:	232b      	movmi	r3, #43	; 0x2b
 80064a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064aa:	f89a 3000 	ldrb.w	r3, [sl]
 80064ae:	2b2a      	cmp	r3, #42	; 0x2a
 80064b0:	d015      	beq.n	80064de <_svfiprintf_r+0xf6>
 80064b2:	4654      	mov	r4, sl
 80064b4:	2000      	movs	r0, #0
 80064b6:	f04f 0c0a 	mov.w	ip, #10
 80064ba:	9a07      	ldr	r2, [sp, #28]
 80064bc:	4621      	mov	r1, r4
 80064be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064c2:	3b30      	subs	r3, #48	; 0x30
 80064c4:	2b09      	cmp	r3, #9
 80064c6:	d94e      	bls.n	8006566 <_svfiprintf_r+0x17e>
 80064c8:	b1b0      	cbz	r0, 80064f8 <_svfiprintf_r+0x110>
 80064ca:	9207      	str	r2, [sp, #28]
 80064cc:	e014      	b.n	80064f8 <_svfiprintf_r+0x110>
 80064ce:	eba0 0308 	sub.w	r3, r0, r8
 80064d2:	fa09 f303 	lsl.w	r3, r9, r3
 80064d6:	4313      	orrs	r3, r2
 80064d8:	46a2      	mov	sl, r4
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	e7d2      	b.n	8006484 <_svfiprintf_r+0x9c>
 80064de:	9b03      	ldr	r3, [sp, #12]
 80064e0:	1d19      	adds	r1, r3, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	9103      	str	r1, [sp, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bfbb      	ittet	lt
 80064ea:	425b      	neglt	r3, r3
 80064ec:	f042 0202 	orrlt.w	r2, r2, #2
 80064f0:	9307      	strge	r3, [sp, #28]
 80064f2:	9307      	strlt	r3, [sp, #28]
 80064f4:	bfb8      	it	lt
 80064f6:	9204      	strlt	r2, [sp, #16]
 80064f8:	7823      	ldrb	r3, [r4, #0]
 80064fa:	2b2e      	cmp	r3, #46	; 0x2e
 80064fc:	d10c      	bne.n	8006518 <_svfiprintf_r+0x130>
 80064fe:	7863      	ldrb	r3, [r4, #1]
 8006500:	2b2a      	cmp	r3, #42	; 0x2a
 8006502:	d135      	bne.n	8006570 <_svfiprintf_r+0x188>
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	3402      	adds	r4, #2
 8006508:	1d1a      	adds	r2, r3, #4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	9203      	str	r2, [sp, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	bfb8      	it	lt
 8006512:	f04f 33ff 	movlt.w	r3, #4294967295
 8006516:	9305      	str	r3, [sp, #20]
 8006518:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80065d8 <_svfiprintf_r+0x1f0>
 800651c:	2203      	movs	r2, #3
 800651e:	4650      	mov	r0, sl
 8006520:	7821      	ldrb	r1, [r4, #0]
 8006522:	f7ff fa77 	bl	8005a14 <memchr>
 8006526:	b140      	cbz	r0, 800653a <_svfiprintf_r+0x152>
 8006528:	2340      	movs	r3, #64	; 0x40
 800652a:	eba0 000a 	sub.w	r0, r0, sl
 800652e:	fa03 f000 	lsl.w	r0, r3, r0
 8006532:	9b04      	ldr	r3, [sp, #16]
 8006534:	3401      	adds	r4, #1
 8006536:	4303      	orrs	r3, r0
 8006538:	9304      	str	r3, [sp, #16]
 800653a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653e:	2206      	movs	r2, #6
 8006540:	4826      	ldr	r0, [pc, #152]	; (80065dc <_svfiprintf_r+0x1f4>)
 8006542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006546:	f7ff fa65 	bl	8005a14 <memchr>
 800654a:	2800      	cmp	r0, #0
 800654c:	d038      	beq.n	80065c0 <_svfiprintf_r+0x1d8>
 800654e:	4b24      	ldr	r3, [pc, #144]	; (80065e0 <_svfiprintf_r+0x1f8>)
 8006550:	bb1b      	cbnz	r3, 800659a <_svfiprintf_r+0x1b2>
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	3307      	adds	r3, #7
 8006556:	f023 0307 	bic.w	r3, r3, #7
 800655a:	3308      	adds	r3, #8
 800655c:	9303      	str	r3, [sp, #12]
 800655e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006560:	4433      	add	r3, r6
 8006562:	9309      	str	r3, [sp, #36]	; 0x24
 8006564:	e767      	b.n	8006436 <_svfiprintf_r+0x4e>
 8006566:	460c      	mov	r4, r1
 8006568:	2001      	movs	r0, #1
 800656a:	fb0c 3202 	mla	r2, ip, r2, r3
 800656e:	e7a5      	b.n	80064bc <_svfiprintf_r+0xd4>
 8006570:	2300      	movs	r3, #0
 8006572:	f04f 0c0a 	mov.w	ip, #10
 8006576:	4619      	mov	r1, r3
 8006578:	3401      	adds	r4, #1
 800657a:	9305      	str	r3, [sp, #20]
 800657c:	4620      	mov	r0, r4
 800657e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006582:	3a30      	subs	r2, #48	; 0x30
 8006584:	2a09      	cmp	r2, #9
 8006586:	d903      	bls.n	8006590 <_svfiprintf_r+0x1a8>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0c5      	beq.n	8006518 <_svfiprintf_r+0x130>
 800658c:	9105      	str	r1, [sp, #20]
 800658e:	e7c3      	b.n	8006518 <_svfiprintf_r+0x130>
 8006590:	4604      	mov	r4, r0
 8006592:	2301      	movs	r3, #1
 8006594:	fb0c 2101 	mla	r1, ip, r1, r2
 8006598:	e7f0      	b.n	800657c <_svfiprintf_r+0x194>
 800659a:	ab03      	add	r3, sp, #12
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	462a      	mov	r2, r5
 80065a0:	4638      	mov	r0, r7
 80065a2:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <_svfiprintf_r+0x1fc>)
 80065a4:	a904      	add	r1, sp, #16
 80065a6:	f7fd ffb9 	bl	800451c <_printf_float>
 80065aa:	1c42      	adds	r2, r0, #1
 80065ac:	4606      	mov	r6, r0
 80065ae:	d1d6      	bne.n	800655e <_svfiprintf_r+0x176>
 80065b0:	89ab      	ldrh	r3, [r5, #12]
 80065b2:	065b      	lsls	r3, r3, #25
 80065b4:	f53f af2c 	bmi.w	8006410 <_svfiprintf_r+0x28>
 80065b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ba:	b01d      	add	sp, #116	; 0x74
 80065bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c0:	ab03      	add	r3, sp, #12
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	462a      	mov	r2, r5
 80065c6:	4638      	mov	r0, r7
 80065c8:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <_svfiprintf_r+0x1fc>)
 80065ca:	a904      	add	r1, sp, #16
 80065cc:	f7fe fa42 	bl	8004a54 <_printf_i>
 80065d0:	e7eb      	b.n	80065aa <_svfiprintf_r+0x1c2>
 80065d2:	bf00      	nop
 80065d4:	080074b4 	.word	0x080074b4
 80065d8:	080074ba 	.word	0x080074ba
 80065dc:	080074be 	.word	0x080074be
 80065e0:	0800451d 	.word	0x0800451d
 80065e4:	08006331 	.word	0x08006331

080065e8 <_sbrk_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	2300      	movs	r3, #0
 80065ec:	4d05      	ldr	r5, [pc, #20]	; (8006604 <_sbrk_r+0x1c>)
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	602b      	str	r3, [r5, #0]
 80065f4:	f7fb fb9a 	bl	8001d2c <_sbrk>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_sbrk_r+0x1a>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_sbrk_r+0x1a>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	20000368 	.word	0x20000368

08006608 <__assert_func>:
 8006608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800660a:	4614      	mov	r4, r2
 800660c:	461a      	mov	r2, r3
 800660e:	4b09      	ldr	r3, [pc, #36]	; (8006634 <__assert_func+0x2c>)
 8006610:	4605      	mov	r5, r0
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68d8      	ldr	r0, [r3, #12]
 8006616:	b14c      	cbz	r4, 800662c <__assert_func+0x24>
 8006618:	4b07      	ldr	r3, [pc, #28]	; (8006638 <__assert_func+0x30>)
 800661a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800661e:	9100      	str	r1, [sp, #0]
 8006620:	462b      	mov	r3, r5
 8006622:	4906      	ldr	r1, [pc, #24]	; (800663c <__assert_func+0x34>)
 8006624:	f000 f80e 	bl	8006644 <fiprintf>
 8006628:	f000 faaa 	bl	8006b80 <abort>
 800662c:	4b04      	ldr	r3, [pc, #16]	; (8006640 <__assert_func+0x38>)
 800662e:	461c      	mov	r4, r3
 8006630:	e7f3      	b.n	800661a <__assert_func+0x12>
 8006632:	bf00      	nop
 8006634:	2000001c 	.word	0x2000001c
 8006638:	080074c5 	.word	0x080074c5
 800663c:	080074d2 	.word	0x080074d2
 8006640:	08007500 	.word	0x08007500

08006644 <fiprintf>:
 8006644:	b40e      	push	{r1, r2, r3}
 8006646:	b503      	push	{r0, r1, lr}
 8006648:	4601      	mov	r1, r0
 800664a:	ab03      	add	r3, sp, #12
 800664c:	4805      	ldr	r0, [pc, #20]	; (8006664 <fiprintf+0x20>)
 800664e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006652:	6800      	ldr	r0, [r0, #0]
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	f000 f895 	bl	8006784 <_vfiprintf_r>
 800665a:	b002      	add	sp, #8
 800665c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006660:	b003      	add	sp, #12
 8006662:	4770      	bx	lr
 8006664:	2000001c 	.word	0x2000001c

08006668 <__ascii_mbtowc>:
 8006668:	b082      	sub	sp, #8
 800666a:	b901      	cbnz	r1, 800666e <__ascii_mbtowc+0x6>
 800666c:	a901      	add	r1, sp, #4
 800666e:	b142      	cbz	r2, 8006682 <__ascii_mbtowc+0x1a>
 8006670:	b14b      	cbz	r3, 8006686 <__ascii_mbtowc+0x1e>
 8006672:	7813      	ldrb	r3, [r2, #0]
 8006674:	600b      	str	r3, [r1, #0]
 8006676:	7812      	ldrb	r2, [r2, #0]
 8006678:	1e10      	subs	r0, r2, #0
 800667a:	bf18      	it	ne
 800667c:	2001      	movne	r0, #1
 800667e:	b002      	add	sp, #8
 8006680:	4770      	bx	lr
 8006682:	4610      	mov	r0, r2
 8006684:	e7fb      	b.n	800667e <__ascii_mbtowc+0x16>
 8006686:	f06f 0001 	mvn.w	r0, #1
 800668a:	e7f8      	b.n	800667e <__ascii_mbtowc+0x16>

0800668c <memmove>:
 800668c:	4288      	cmp	r0, r1
 800668e:	b510      	push	{r4, lr}
 8006690:	eb01 0402 	add.w	r4, r1, r2
 8006694:	d902      	bls.n	800669c <memmove+0x10>
 8006696:	4284      	cmp	r4, r0
 8006698:	4623      	mov	r3, r4
 800669a:	d807      	bhi.n	80066ac <memmove+0x20>
 800669c:	1e43      	subs	r3, r0, #1
 800669e:	42a1      	cmp	r1, r4
 80066a0:	d008      	beq.n	80066b4 <memmove+0x28>
 80066a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066aa:	e7f8      	b.n	800669e <memmove+0x12>
 80066ac:	4601      	mov	r1, r0
 80066ae:	4402      	add	r2, r0
 80066b0:	428a      	cmp	r2, r1
 80066b2:	d100      	bne.n	80066b6 <memmove+0x2a>
 80066b4:	bd10      	pop	{r4, pc}
 80066b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066be:	e7f7      	b.n	80066b0 <memmove+0x24>

080066c0 <__malloc_lock>:
 80066c0:	4801      	ldr	r0, [pc, #4]	; (80066c8 <__malloc_lock+0x8>)
 80066c2:	f000 bc19 	b.w	8006ef8 <__retarget_lock_acquire_recursive>
 80066c6:	bf00      	nop
 80066c8:	2000036c 	.word	0x2000036c

080066cc <__malloc_unlock>:
 80066cc:	4801      	ldr	r0, [pc, #4]	; (80066d4 <__malloc_unlock+0x8>)
 80066ce:	f000 bc14 	b.w	8006efa <__retarget_lock_release_recursive>
 80066d2:	bf00      	nop
 80066d4:	2000036c 	.word	0x2000036c

080066d8 <_realloc_r>:
 80066d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066dc:	4680      	mov	r8, r0
 80066de:	4614      	mov	r4, r2
 80066e0:	460e      	mov	r6, r1
 80066e2:	b921      	cbnz	r1, 80066ee <_realloc_r+0x16>
 80066e4:	4611      	mov	r1, r2
 80066e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ea:	f7ff bdad 	b.w	8006248 <_malloc_r>
 80066ee:	b92a      	cbnz	r2, 80066fc <_realloc_r+0x24>
 80066f0:	f7ff fd42 	bl	8006178 <_free_r>
 80066f4:	4625      	mov	r5, r4
 80066f6:	4628      	mov	r0, r5
 80066f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066fc:	f000 fc64 	bl	8006fc8 <_malloc_usable_size_r>
 8006700:	4284      	cmp	r4, r0
 8006702:	4607      	mov	r7, r0
 8006704:	d802      	bhi.n	800670c <_realloc_r+0x34>
 8006706:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800670a:	d812      	bhi.n	8006732 <_realloc_r+0x5a>
 800670c:	4621      	mov	r1, r4
 800670e:	4640      	mov	r0, r8
 8006710:	f7ff fd9a 	bl	8006248 <_malloc_r>
 8006714:	4605      	mov	r5, r0
 8006716:	2800      	cmp	r0, #0
 8006718:	d0ed      	beq.n	80066f6 <_realloc_r+0x1e>
 800671a:	42bc      	cmp	r4, r7
 800671c:	4622      	mov	r2, r4
 800671e:	4631      	mov	r1, r6
 8006720:	bf28      	it	cs
 8006722:	463a      	movcs	r2, r7
 8006724:	f7ff f984 	bl	8005a30 <memcpy>
 8006728:	4631      	mov	r1, r6
 800672a:	4640      	mov	r0, r8
 800672c:	f7ff fd24 	bl	8006178 <_free_r>
 8006730:	e7e1      	b.n	80066f6 <_realloc_r+0x1e>
 8006732:	4635      	mov	r5, r6
 8006734:	e7df      	b.n	80066f6 <_realloc_r+0x1e>

08006736 <__sfputc_r>:
 8006736:	6893      	ldr	r3, [r2, #8]
 8006738:	b410      	push	{r4}
 800673a:	3b01      	subs	r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	6093      	str	r3, [r2, #8]
 8006740:	da07      	bge.n	8006752 <__sfputc_r+0x1c>
 8006742:	6994      	ldr	r4, [r2, #24]
 8006744:	42a3      	cmp	r3, r4
 8006746:	db01      	blt.n	800674c <__sfputc_r+0x16>
 8006748:	290a      	cmp	r1, #10
 800674a:	d102      	bne.n	8006752 <__sfputc_r+0x1c>
 800674c:	bc10      	pop	{r4}
 800674e:	f000 b949 	b.w	80069e4 <__swbuf_r>
 8006752:	6813      	ldr	r3, [r2, #0]
 8006754:	1c58      	adds	r0, r3, #1
 8006756:	6010      	str	r0, [r2, #0]
 8006758:	7019      	strb	r1, [r3, #0]
 800675a:	4608      	mov	r0, r1
 800675c:	bc10      	pop	{r4}
 800675e:	4770      	bx	lr

08006760 <__sfputs_r>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	4606      	mov	r6, r0
 8006764:	460f      	mov	r7, r1
 8006766:	4614      	mov	r4, r2
 8006768:	18d5      	adds	r5, r2, r3
 800676a:	42ac      	cmp	r4, r5
 800676c:	d101      	bne.n	8006772 <__sfputs_r+0x12>
 800676e:	2000      	movs	r0, #0
 8006770:	e007      	b.n	8006782 <__sfputs_r+0x22>
 8006772:	463a      	mov	r2, r7
 8006774:	4630      	mov	r0, r6
 8006776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800677a:	f7ff ffdc 	bl	8006736 <__sfputc_r>
 800677e:	1c43      	adds	r3, r0, #1
 8006780:	d1f3      	bne.n	800676a <__sfputs_r+0xa>
 8006782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006784 <_vfiprintf_r>:
 8006784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006788:	460d      	mov	r5, r1
 800678a:	4614      	mov	r4, r2
 800678c:	4698      	mov	r8, r3
 800678e:	4606      	mov	r6, r0
 8006790:	b09d      	sub	sp, #116	; 0x74
 8006792:	b118      	cbz	r0, 800679c <_vfiprintf_r+0x18>
 8006794:	6983      	ldr	r3, [r0, #24]
 8006796:	b90b      	cbnz	r3, 800679c <_vfiprintf_r+0x18>
 8006798:	f000 fb10 	bl	8006dbc <__sinit>
 800679c:	4b89      	ldr	r3, [pc, #548]	; (80069c4 <_vfiprintf_r+0x240>)
 800679e:	429d      	cmp	r5, r3
 80067a0:	d11b      	bne.n	80067da <_vfiprintf_r+0x56>
 80067a2:	6875      	ldr	r5, [r6, #4]
 80067a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067a6:	07d9      	lsls	r1, r3, #31
 80067a8:	d405      	bmi.n	80067b6 <_vfiprintf_r+0x32>
 80067aa:	89ab      	ldrh	r3, [r5, #12]
 80067ac:	059a      	lsls	r2, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_vfiprintf_r+0x32>
 80067b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067b2:	f000 fba1 	bl	8006ef8 <__retarget_lock_acquire_recursive>
 80067b6:	89ab      	ldrh	r3, [r5, #12]
 80067b8:	071b      	lsls	r3, r3, #28
 80067ba:	d501      	bpl.n	80067c0 <_vfiprintf_r+0x3c>
 80067bc:	692b      	ldr	r3, [r5, #16]
 80067be:	b9eb      	cbnz	r3, 80067fc <_vfiprintf_r+0x78>
 80067c0:	4629      	mov	r1, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	f000 f96e 	bl	8006aa4 <__swsetup_r>
 80067c8:	b1c0      	cbz	r0, 80067fc <_vfiprintf_r+0x78>
 80067ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067cc:	07dc      	lsls	r4, r3, #31
 80067ce:	d50e      	bpl.n	80067ee <_vfiprintf_r+0x6a>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	b01d      	add	sp, #116	; 0x74
 80067d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067da:	4b7b      	ldr	r3, [pc, #492]	; (80069c8 <_vfiprintf_r+0x244>)
 80067dc:	429d      	cmp	r5, r3
 80067de:	d101      	bne.n	80067e4 <_vfiprintf_r+0x60>
 80067e0:	68b5      	ldr	r5, [r6, #8]
 80067e2:	e7df      	b.n	80067a4 <_vfiprintf_r+0x20>
 80067e4:	4b79      	ldr	r3, [pc, #484]	; (80069cc <_vfiprintf_r+0x248>)
 80067e6:	429d      	cmp	r5, r3
 80067e8:	bf08      	it	eq
 80067ea:	68f5      	ldreq	r5, [r6, #12]
 80067ec:	e7da      	b.n	80067a4 <_vfiprintf_r+0x20>
 80067ee:	89ab      	ldrh	r3, [r5, #12]
 80067f0:	0598      	lsls	r0, r3, #22
 80067f2:	d4ed      	bmi.n	80067d0 <_vfiprintf_r+0x4c>
 80067f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067f6:	f000 fb80 	bl	8006efa <__retarget_lock_release_recursive>
 80067fa:	e7e9      	b.n	80067d0 <_vfiprintf_r+0x4c>
 80067fc:	2300      	movs	r3, #0
 80067fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006800:	2320      	movs	r3, #32
 8006802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006806:	2330      	movs	r3, #48	; 0x30
 8006808:	f04f 0901 	mov.w	r9, #1
 800680c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006810:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80069d0 <_vfiprintf_r+0x24c>
 8006814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006818:	4623      	mov	r3, r4
 800681a:	469a      	mov	sl, r3
 800681c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006820:	b10a      	cbz	r2, 8006826 <_vfiprintf_r+0xa2>
 8006822:	2a25      	cmp	r2, #37	; 0x25
 8006824:	d1f9      	bne.n	800681a <_vfiprintf_r+0x96>
 8006826:	ebba 0b04 	subs.w	fp, sl, r4
 800682a:	d00b      	beq.n	8006844 <_vfiprintf_r+0xc0>
 800682c:	465b      	mov	r3, fp
 800682e:	4622      	mov	r2, r4
 8006830:	4629      	mov	r1, r5
 8006832:	4630      	mov	r0, r6
 8006834:	f7ff ff94 	bl	8006760 <__sfputs_r>
 8006838:	3001      	adds	r0, #1
 800683a:	f000 80aa 	beq.w	8006992 <_vfiprintf_r+0x20e>
 800683e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006840:	445a      	add	r2, fp
 8006842:	9209      	str	r2, [sp, #36]	; 0x24
 8006844:	f89a 3000 	ldrb.w	r3, [sl]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80a2 	beq.w	8006992 <_vfiprintf_r+0x20e>
 800684e:	2300      	movs	r3, #0
 8006850:	f04f 32ff 	mov.w	r2, #4294967295
 8006854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006858:	f10a 0a01 	add.w	sl, sl, #1
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	9307      	str	r3, [sp, #28]
 8006860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006864:	931a      	str	r3, [sp, #104]	; 0x68
 8006866:	4654      	mov	r4, sl
 8006868:	2205      	movs	r2, #5
 800686a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686e:	4858      	ldr	r0, [pc, #352]	; (80069d0 <_vfiprintf_r+0x24c>)
 8006870:	f7ff f8d0 	bl	8005a14 <memchr>
 8006874:	9a04      	ldr	r2, [sp, #16]
 8006876:	b9d8      	cbnz	r0, 80068b0 <_vfiprintf_r+0x12c>
 8006878:	06d1      	lsls	r1, r2, #27
 800687a:	bf44      	itt	mi
 800687c:	2320      	movmi	r3, #32
 800687e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006882:	0713      	lsls	r3, r2, #28
 8006884:	bf44      	itt	mi
 8006886:	232b      	movmi	r3, #43	; 0x2b
 8006888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800688c:	f89a 3000 	ldrb.w	r3, [sl]
 8006890:	2b2a      	cmp	r3, #42	; 0x2a
 8006892:	d015      	beq.n	80068c0 <_vfiprintf_r+0x13c>
 8006894:	4654      	mov	r4, sl
 8006896:	2000      	movs	r0, #0
 8006898:	f04f 0c0a 	mov.w	ip, #10
 800689c:	9a07      	ldr	r2, [sp, #28]
 800689e:	4621      	mov	r1, r4
 80068a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068a4:	3b30      	subs	r3, #48	; 0x30
 80068a6:	2b09      	cmp	r3, #9
 80068a8:	d94e      	bls.n	8006948 <_vfiprintf_r+0x1c4>
 80068aa:	b1b0      	cbz	r0, 80068da <_vfiprintf_r+0x156>
 80068ac:	9207      	str	r2, [sp, #28]
 80068ae:	e014      	b.n	80068da <_vfiprintf_r+0x156>
 80068b0:	eba0 0308 	sub.w	r3, r0, r8
 80068b4:	fa09 f303 	lsl.w	r3, r9, r3
 80068b8:	4313      	orrs	r3, r2
 80068ba:	46a2      	mov	sl, r4
 80068bc:	9304      	str	r3, [sp, #16]
 80068be:	e7d2      	b.n	8006866 <_vfiprintf_r+0xe2>
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	1d19      	adds	r1, r3, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	9103      	str	r1, [sp, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bfbb      	ittet	lt
 80068cc:	425b      	neglt	r3, r3
 80068ce:	f042 0202 	orrlt.w	r2, r2, #2
 80068d2:	9307      	strge	r3, [sp, #28]
 80068d4:	9307      	strlt	r3, [sp, #28]
 80068d6:	bfb8      	it	lt
 80068d8:	9204      	strlt	r2, [sp, #16]
 80068da:	7823      	ldrb	r3, [r4, #0]
 80068dc:	2b2e      	cmp	r3, #46	; 0x2e
 80068de:	d10c      	bne.n	80068fa <_vfiprintf_r+0x176>
 80068e0:	7863      	ldrb	r3, [r4, #1]
 80068e2:	2b2a      	cmp	r3, #42	; 0x2a
 80068e4:	d135      	bne.n	8006952 <_vfiprintf_r+0x1ce>
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	3402      	adds	r4, #2
 80068ea:	1d1a      	adds	r2, r3, #4
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	9203      	str	r2, [sp, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bfb8      	it	lt
 80068f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80068f8:	9305      	str	r3, [sp, #20]
 80068fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80069d4 <_vfiprintf_r+0x250>
 80068fe:	2203      	movs	r2, #3
 8006900:	4650      	mov	r0, sl
 8006902:	7821      	ldrb	r1, [r4, #0]
 8006904:	f7ff f886 	bl	8005a14 <memchr>
 8006908:	b140      	cbz	r0, 800691c <_vfiprintf_r+0x198>
 800690a:	2340      	movs	r3, #64	; 0x40
 800690c:	eba0 000a 	sub.w	r0, r0, sl
 8006910:	fa03 f000 	lsl.w	r0, r3, r0
 8006914:	9b04      	ldr	r3, [sp, #16]
 8006916:	3401      	adds	r4, #1
 8006918:	4303      	orrs	r3, r0
 800691a:	9304      	str	r3, [sp, #16]
 800691c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006920:	2206      	movs	r2, #6
 8006922:	482d      	ldr	r0, [pc, #180]	; (80069d8 <_vfiprintf_r+0x254>)
 8006924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006928:	f7ff f874 	bl	8005a14 <memchr>
 800692c:	2800      	cmp	r0, #0
 800692e:	d03f      	beq.n	80069b0 <_vfiprintf_r+0x22c>
 8006930:	4b2a      	ldr	r3, [pc, #168]	; (80069dc <_vfiprintf_r+0x258>)
 8006932:	bb1b      	cbnz	r3, 800697c <_vfiprintf_r+0x1f8>
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	3307      	adds	r3, #7
 8006938:	f023 0307 	bic.w	r3, r3, #7
 800693c:	3308      	adds	r3, #8
 800693e:	9303      	str	r3, [sp, #12]
 8006940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006942:	443b      	add	r3, r7
 8006944:	9309      	str	r3, [sp, #36]	; 0x24
 8006946:	e767      	b.n	8006818 <_vfiprintf_r+0x94>
 8006948:	460c      	mov	r4, r1
 800694a:	2001      	movs	r0, #1
 800694c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006950:	e7a5      	b.n	800689e <_vfiprintf_r+0x11a>
 8006952:	2300      	movs	r3, #0
 8006954:	f04f 0c0a 	mov.w	ip, #10
 8006958:	4619      	mov	r1, r3
 800695a:	3401      	adds	r4, #1
 800695c:	9305      	str	r3, [sp, #20]
 800695e:	4620      	mov	r0, r4
 8006960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006964:	3a30      	subs	r2, #48	; 0x30
 8006966:	2a09      	cmp	r2, #9
 8006968:	d903      	bls.n	8006972 <_vfiprintf_r+0x1ee>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0c5      	beq.n	80068fa <_vfiprintf_r+0x176>
 800696e:	9105      	str	r1, [sp, #20]
 8006970:	e7c3      	b.n	80068fa <_vfiprintf_r+0x176>
 8006972:	4604      	mov	r4, r0
 8006974:	2301      	movs	r3, #1
 8006976:	fb0c 2101 	mla	r1, ip, r1, r2
 800697a:	e7f0      	b.n	800695e <_vfiprintf_r+0x1da>
 800697c:	ab03      	add	r3, sp, #12
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	462a      	mov	r2, r5
 8006982:	4630      	mov	r0, r6
 8006984:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <_vfiprintf_r+0x25c>)
 8006986:	a904      	add	r1, sp, #16
 8006988:	f7fd fdc8 	bl	800451c <_printf_float>
 800698c:	4607      	mov	r7, r0
 800698e:	1c78      	adds	r0, r7, #1
 8006990:	d1d6      	bne.n	8006940 <_vfiprintf_r+0x1bc>
 8006992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006994:	07d9      	lsls	r1, r3, #31
 8006996:	d405      	bmi.n	80069a4 <_vfiprintf_r+0x220>
 8006998:	89ab      	ldrh	r3, [r5, #12]
 800699a:	059a      	lsls	r2, r3, #22
 800699c:	d402      	bmi.n	80069a4 <_vfiprintf_r+0x220>
 800699e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a0:	f000 faab 	bl	8006efa <__retarget_lock_release_recursive>
 80069a4:	89ab      	ldrh	r3, [r5, #12]
 80069a6:	065b      	lsls	r3, r3, #25
 80069a8:	f53f af12 	bmi.w	80067d0 <_vfiprintf_r+0x4c>
 80069ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ae:	e711      	b.n	80067d4 <_vfiprintf_r+0x50>
 80069b0:	ab03      	add	r3, sp, #12
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	462a      	mov	r2, r5
 80069b6:	4630      	mov	r0, r6
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <_vfiprintf_r+0x25c>)
 80069ba:	a904      	add	r1, sp, #16
 80069bc:	f7fe f84a 	bl	8004a54 <_printf_i>
 80069c0:	e7e4      	b.n	800698c <_vfiprintf_r+0x208>
 80069c2:	bf00      	nop
 80069c4:	0800762c 	.word	0x0800762c
 80069c8:	0800764c 	.word	0x0800764c
 80069cc:	0800760c 	.word	0x0800760c
 80069d0:	080074b4 	.word	0x080074b4
 80069d4:	080074ba 	.word	0x080074ba
 80069d8:	080074be 	.word	0x080074be
 80069dc:	0800451d 	.word	0x0800451d
 80069e0:	08006761 	.word	0x08006761

080069e4 <__swbuf_r>:
 80069e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e6:	460e      	mov	r6, r1
 80069e8:	4614      	mov	r4, r2
 80069ea:	4605      	mov	r5, r0
 80069ec:	b118      	cbz	r0, 80069f6 <__swbuf_r+0x12>
 80069ee:	6983      	ldr	r3, [r0, #24]
 80069f0:	b90b      	cbnz	r3, 80069f6 <__swbuf_r+0x12>
 80069f2:	f000 f9e3 	bl	8006dbc <__sinit>
 80069f6:	4b21      	ldr	r3, [pc, #132]	; (8006a7c <__swbuf_r+0x98>)
 80069f8:	429c      	cmp	r4, r3
 80069fa:	d12b      	bne.n	8006a54 <__swbuf_r+0x70>
 80069fc:	686c      	ldr	r4, [r5, #4]
 80069fe:	69a3      	ldr	r3, [r4, #24]
 8006a00:	60a3      	str	r3, [r4, #8]
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	071a      	lsls	r2, r3, #28
 8006a06:	d52f      	bpl.n	8006a68 <__swbuf_r+0x84>
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	b36b      	cbz	r3, 8006a68 <__swbuf_r+0x84>
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	6820      	ldr	r0, [r4, #0]
 8006a10:	b2f6      	uxtb	r6, r6
 8006a12:	1ac0      	subs	r0, r0, r3
 8006a14:	6963      	ldr	r3, [r4, #20]
 8006a16:	4637      	mov	r7, r6
 8006a18:	4283      	cmp	r3, r0
 8006a1a:	dc04      	bgt.n	8006a26 <__swbuf_r+0x42>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f000 f938 	bl	8006c94 <_fflush_r>
 8006a24:	bb30      	cbnz	r0, 8006a74 <__swbuf_r+0x90>
 8006a26:	68a3      	ldr	r3, [r4, #8]
 8006a28:	3001      	adds	r0, #1
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	60a3      	str	r3, [r4, #8]
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	6022      	str	r2, [r4, #0]
 8006a34:	701e      	strb	r6, [r3, #0]
 8006a36:	6963      	ldr	r3, [r4, #20]
 8006a38:	4283      	cmp	r3, r0
 8006a3a:	d004      	beq.n	8006a46 <__swbuf_r+0x62>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	07db      	lsls	r3, r3, #31
 8006a40:	d506      	bpl.n	8006a50 <__swbuf_r+0x6c>
 8006a42:	2e0a      	cmp	r6, #10
 8006a44:	d104      	bne.n	8006a50 <__swbuf_r+0x6c>
 8006a46:	4621      	mov	r1, r4
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f000 f923 	bl	8006c94 <_fflush_r>
 8006a4e:	b988      	cbnz	r0, 8006a74 <__swbuf_r+0x90>
 8006a50:	4638      	mov	r0, r7
 8006a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <__swbuf_r+0x9c>)
 8006a56:	429c      	cmp	r4, r3
 8006a58:	d101      	bne.n	8006a5e <__swbuf_r+0x7a>
 8006a5a:	68ac      	ldr	r4, [r5, #8]
 8006a5c:	e7cf      	b.n	80069fe <__swbuf_r+0x1a>
 8006a5e:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <__swbuf_r+0xa0>)
 8006a60:	429c      	cmp	r4, r3
 8006a62:	bf08      	it	eq
 8006a64:	68ec      	ldreq	r4, [r5, #12]
 8006a66:	e7ca      	b.n	80069fe <__swbuf_r+0x1a>
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f000 f81a 	bl	8006aa4 <__swsetup_r>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d0cb      	beq.n	8006a0c <__swbuf_r+0x28>
 8006a74:	f04f 37ff 	mov.w	r7, #4294967295
 8006a78:	e7ea      	b.n	8006a50 <__swbuf_r+0x6c>
 8006a7a:	bf00      	nop
 8006a7c:	0800762c 	.word	0x0800762c
 8006a80:	0800764c 	.word	0x0800764c
 8006a84:	0800760c 	.word	0x0800760c

08006a88 <__ascii_wctomb>:
 8006a88:	4603      	mov	r3, r0
 8006a8a:	4608      	mov	r0, r1
 8006a8c:	b141      	cbz	r1, 8006aa0 <__ascii_wctomb+0x18>
 8006a8e:	2aff      	cmp	r2, #255	; 0xff
 8006a90:	d904      	bls.n	8006a9c <__ascii_wctomb+0x14>
 8006a92:	228a      	movs	r2, #138	; 0x8a
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	4770      	bx	lr
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	700a      	strb	r2, [r1, #0]
 8006aa0:	4770      	bx	lr
	...

08006aa4 <__swsetup_r>:
 8006aa4:	4b32      	ldr	r3, [pc, #200]	; (8006b70 <__swsetup_r+0xcc>)
 8006aa6:	b570      	push	{r4, r5, r6, lr}
 8006aa8:	681d      	ldr	r5, [r3, #0]
 8006aaa:	4606      	mov	r6, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	b125      	cbz	r5, 8006aba <__swsetup_r+0x16>
 8006ab0:	69ab      	ldr	r3, [r5, #24]
 8006ab2:	b913      	cbnz	r3, 8006aba <__swsetup_r+0x16>
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f000 f981 	bl	8006dbc <__sinit>
 8006aba:	4b2e      	ldr	r3, [pc, #184]	; (8006b74 <__swsetup_r+0xd0>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	d10f      	bne.n	8006ae0 <__swsetup_r+0x3c>
 8006ac0:	686c      	ldr	r4, [r5, #4]
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ac8:	0719      	lsls	r1, r3, #28
 8006aca:	d42c      	bmi.n	8006b26 <__swsetup_r+0x82>
 8006acc:	06dd      	lsls	r5, r3, #27
 8006ace:	d411      	bmi.n	8006af4 <__swsetup_r+0x50>
 8006ad0:	2309      	movs	r3, #9
 8006ad2:	6033      	str	r3, [r6, #0]
 8006ad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	81a3      	strh	r3, [r4, #12]
 8006ade:	e03e      	b.n	8006b5e <__swsetup_r+0xba>
 8006ae0:	4b25      	ldr	r3, [pc, #148]	; (8006b78 <__swsetup_r+0xd4>)
 8006ae2:	429c      	cmp	r4, r3
 8006ae4:	d101      	bne.n	8006aea <__swsetup_r+0x46>
 8006ae6:	68ac      	ldr	r4, [r5, #8]
 8006ae8:	e7eb      	b.n	8006ac2 <__swsetup_r+0x1e>
 8006aea:	4b24      	ldr	r3, [pc, #144]	; (8006b7c <__swsetup_r+0xd8>)
 8006aec:	429c      	cmp	r4, r3
 8006aee:	bf08      	it	eq
 8006af0:	68ec      	ldreq	r4, [r5, #12]
 8006af2:	e7e6      	b.n	8006ac2 <__swsetup_r+0x1e>
 8006af4:	0758      	lsls	r0, r3, #29
 8006af6:	d512      	bpl.n	8006b1e <__swsetup_r+0x7a>
 8006af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006afa:	b141      	cbz	r1, 8006b0e <__swsetup_r+0x6a>
 8006afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b00:	4299      	cmp	r1, r3
 8006b02:	d002      	beq.n	8006b0a <__swsetup_r+0x66>
 8006b04:	4630      	mov	r0, r6
 8006b06:	f7ff fb37 	bl	8006178 <_free_r>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	2300      	movs	r3, #0
 8006b18:	6063      	str	r3, [r4, #4]
 8006b1a:	6923      	ldr	r3, [r4, #16]
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	f043 0308 	orr.w	r3, r3, #8
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	b94b      	cbnz	r3, 8006b3e <__swsetup_r+0x9a>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b34:	d003      	beq.n	8006b3e <__swsetup_r+0x9a>
 8006b36:	4621      	mov	r1, r4
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f000 fa05 	bl	8006f48 <__smakebuf_r>
 8006b3e:	89a0      	ldrh	r0, [r4, #12]
 8006b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b44:	f010 0301 	ands.w	r3, r0, #1
 8006b48:	d00a      	beq.n	8006b60 <__swsetup_r+0xbc>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60a3      	str	r3, [r4, #8]
 8006b4e:	6963      	ldr	r3, [r4, #20]
 8006b50:	425b      	negs	r3, r3
 8006b52:	61a3      	str	r3, [r4, #24]
 8006b54:	6923      	ldr	r3, [r4, #16]
 8006b56:	b943      	cbnz	r3, 8006b6a <__swsetup_r+0xc6>
 8006b58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b5c:	d1ba      	bne.n	8006ad4 <__swsetup_r+0x30>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	0781      	lsls	r1, r0, #30
 8006b62:	bf58      	it	pl
 8006b64:	6963      	ldrpl	r3, [r4, #20]
 8006b66:	60a3      	str	r3, [r4, #8]
 8006b68:	e7f4      	b.n	8006b54 <__swsetup_r+0xb0>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	e7f7      	b.n	8006b5e <__swsetup_r+0xba>
 8006b6e:	bf00      	nop
 8006b70:	2000001c 	.word	0x2000001c
 8006b74:	0800762c 	.word	0x0800762c
 8006b78:	0800764c 	.word	0x0800764c
 8006b7c:	0800760c 	.word	0x0800760c

08006b80 <abort>:
 8006b80:	2006      	movs	r0, #6
 8006b82:	b508      	push	{r3, lr}
 8006b84:	f000 fa50 	bl	8007028 <raise>
 8006b88:	2001      	movs	r0, #1
 8006b8a:	f7fb f85c 	bl	8001c46 <_exit>
	...

08006b90 <__sflush_r>:
 8006b90:	898a      	ldrh	r2, [r1, #12]
 8006b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b94:	4605      	mov	r5, r0
 8006b96:	0710      	lsls	r0, r2, #28
 8006b98:	460c      	mov	r4, r1
 8006b9a:	d457      	bmi.n	8006c4c <__sflush_r+0xbc>
 8006b9c:	684b      	ldr	r3, [r1, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	dc04      	bgt.n	8006bac <__sflush_r+0x1c>
 8006ba2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dc01      	bgt.n	8006bac <__sflush_r+0x1c>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bae:	2e00      	cmp	r6, #0
 8006bb0:	d0fa      	beq.n	8006ba8 <__sflush_r+0x18>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bb8:	682f      	ldr	r7, [r5, #0]
 8006bba:	602b      	str	r3, [r5, #0]
 8006bbc:	d032      	beq.n	8006c24 <__sflush_r+0x94>
 8006bbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	075a      	lsls	r2, r3, #29
 8006bc4:	d505      	bpl.n	8006bd2 <__sflush_r+0x42>
 8006bc6:	6863      	ldr	r3, [r4, #4]
 8006bc8:	1ac0      	subs	r0, r0, r3
 8006bca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bcc:	b10b      	cbz	r3, 8006bd2 <__sflush_r+0x42>
 8006bce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bd0:	1ac0      	subs	r0, r0, r3
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bd8:	4628      	mov	r0, r5
 8006bda:	6a21      	ldr	r1, [r4, #32]
 8006bdc:	47b0      	blx	r6
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	d106      	bne.n	8006bf2 <__sflush_r+0x62>
 8006be4:	6829      	ldr	r1, [r5, #0]
 8006be6:	291d      	cmp	r1, #29
 8006be8:	d82c      	bhi.n	8006c44 <__sflush_r+0xb4>
 8006bea:	4a29      	ldr	r2, [pc, #164]	; (8006c90 <__sflush_r+0x100>)
 8006bec:	40ca      	lsrs	r2, r1
 8006bee:	07d6      	lsls	r6, r2, #31
 8006bf0:	d528      	bpl.n	8006c44 <__sflush_r+0xb4>
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	6062      	str	r2, [r4, #4]
 8006bf6:	6922      	ldr	r2, [r4, #16]
 8006bf8:	04d9      	lsls	r1, r3, #19
 8006bfa:	6022      	str	r2, [r4, #0]
 8006bfc:	d504      	bpl.n	8006c08 <__sflush_r+0x78>
 8006bfe:	1c42      	adds	r2, r0, #1
 8006c00:	d101      	bne.n	8006c06 <__sflush_r+0x76>
 8006c02:	682b      	ldr	r3, [r5, #0]
 8006c04:	b903      	cbnz	r3, 8006c08 <__sflush_r+0x78>
 8006c06:	6560      	str	r0, [r4, #84]	; 0x54
 8006c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c0a:	602f      	str	r7, [r5, #0]
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	d0cb      	beq.n	8006ba8 <__sflush_r+0x18>
 8006c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c14:	4299      	cmp	r1, r3
 8006c16:	d002      	beq.n	8006c1e <__sflush_r+0x8e>
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f7ff faad 	bl	8006178 <_free_r>
 8006c1e:	2000      	movs	r0, #0
 8006c20:	6360      	str	r0, [r4, #52]	; 0x34
 8006c22:	e7c2      	b.n	8006baa <__sflush_r+0x1a>
 8006c24:	6a21      	ldr	r1, [r4, #32]
 8006c26:	2301      	movs	r3, #1
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b0      	blx	r6
 8006c2c:	1c41      	adds	r1, r0, #1
 8006c2e:	d1c7      	bne.n	8006bc0 <__sflush_r+0x30>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0c4      	beq.n	8006bc0 <__sflush_r+0x30>
 8006c36:	2b1d      	cmp	r3, #29
 8006c38:	d001      	beq.n	8006c3e <__sflush_r+0xae>
 8006c3a:	2b16      	cmp	r3, #22
 8006c3c:	d101      	bne.n	8006c42 <__sflush_r+0xb2>
 8006c3e:	602f      	str	r7, [r5, #0]
 8006c40:	e7b2      	b.n	8006ba8 <__sflush_r+0x18>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	e7ae      	b.n	8006baa <__sflush_r+0x1a>
 8006c4c:	690f      	ldr	r7, [r1, #16]
 8006c4e:	2f00      	cmp	r7, #0
 8006c50:	d0aa      	beq.n	8006ba8 <__sflush_r+0x18>
 8006c52:	0793      	lsls	r3, r2, #30
 8006c54:	bf18      	it	ne
 8006c56:	2300      	movne	r3, #0
 8006c58:	680e      	ldr	r6, [r1, #0]
 8006c5a:	bf08      	it	eq
 8006c5c:	694b      	ldreq	r3, [r1, #20]
 8006c5e:	1bf6      	subs	r6, r6, r7
 8006c60:	600f      	str	r7, [r1, #0]
 8006c62:	608b      	str	r3, [r1, #8]
 8006c64:	2e00      	cmp	r6, #0
 8006c66:	dd9f      	ble.n	8006ba8 <__sflush_r+0x18>
 8006c68:	4633      	mov	r3, r6
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	6a21      	ldr	r1, [r4, #32]
 8006c70:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c74:	47e0      	blx	ip
 8006c76:	2800      	cmp	r0, #0
 8006c78:	dc06      	bgt.n	8006c88 <__sflush_r+0xf8>
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c84:	81a3      	strh	r3, [r4, #12]
 8006c86:	e790      	b.n	8006baa <__sflush_r+0x1a>
 8006c88:	4407      	add	r7, r0
 8006c8a:	1a36      	subs	r6, r6, r0
 8006c8c:	e7ea      	b.n	8006c64 <__sflush_r+0xd4>
 8006c8e:	bf00      	nop
 8006c90:	20400001 	.word	0x20400001

08006c94 <_fflush_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	690b      	ldr	r3, [r1, #16]
 8006c98:	4605      	mov	r5, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	b913      	cbnz	r3, 8006ca4 <_fflush_r+0x10>
 8006c9e:	2500      	movs	r5, #0
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	b118      	cbz	r0, 8006cae <_fflush_r+0x1a>
 8006ca6:	6983      	ldr	r3, [r0, #24]
 8006ca8:	b90b      	cbnz	r3, 8006cae <_fflush_r+0x1a>
 8006caa:	f000 f887 	bl	8006dbc <__sinit>
 8006cae:	4b14      	ldr	r3, [pc, #80]	; (8006d00 <_fflush_r+0x6c>)
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d11b      	bne.n	8006cec <_fflush_r+0x58>
 8006cb4:	686c      	ldr	r4, [r5, #4]
 8006cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0ef      	beq.n	8006c9e <_fflush_r+0xa>
 8006cbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cc0:	07d0      	lsls	r0, r2, #31
 8006cc2:	d404      	bmi.n	8006cce <_fflush_r+0x3a>
 8006cc4:	0599      	lsls	r1, r3, #22
 8006cc6:	d402      	bmi.n	8006cce <_fflush_r+0x3a>
 8006cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cca:	f000 f915 	bl	8006ef8 <__retarget_lock_acquire_recursive>
 8006cce:	4628      	mov	r0, r5
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	f7ff ff5d 	bl	8006b90 <__sflush_r>
 8006cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cd8:	4605      	mov	r5, r0
 8006cda:	07da      	lsls	r2, r3, #31
 8006cdc:	d4e0      	bmi.n	8006ca0 <_fflush_r+0xc>
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	059b      	lsls	r3, r3, #22
 8006ce2:	d4dd      	bmi.n	8006ca0 <_fflush_r+0xc>
 8006ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ce6:	f000 f908 	bl	8006efa <__retarget_lock_release_recursive>
 8006cea:	e7d9      	b.n	8006ca0 <_fflush_r+0xc>
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <_fflush_r+0x70>)
 8006cee:	429c      	cmp	r4, r3
 8006cf0:	d101      	bne.n	8006cf6 <_fflush_r+0x62>
 8006cf2:	68ac      	ldr	r4, [r5, #8]
 8006cf4:	e7df      	b.n	8006cb6 <_fflush_r+0x22>
 8006cf6:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <_fflush_r+0x74>)
 8006cf8:	429c      	cmp	r4, r3
 8006cfa:	bf08      	it	eq
 8006cfc:	68ec      	ldreq	r4, [r5, #12]
 8006cfe:	e7da      	b.n	8006cb6 <_fflush_r+0x22>
 8006d00:	0800762c 	.word	0x0800762c
 8006d04:	0800764c 	.word	0x0800764c
 8006d08:	0800760c 	.word	0x0800760c

08006d0c <std>:
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	4604      	mov	r4, r0
 8006d12:	e9c0 3300 	strd	r3, r3, [r0]
 8006d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d1a:	6083      	str	r3, [r0, #8]
 8006d1c:	8181      	strh	r1, [r0, #12]
 8006d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d20:	81c2      	strh	r2, [r0, #14]
 8006d22:	6183      	str	r3, [r0, #24]
 8006d24:	4619      	mov	r1, r3
 8006d26:	2208      	movs	r2, #8
 8006d28:	305c      	adds	r0, #92	; 0x5c
 8006d2a:	f7fd fb51 	bl	80043d0 <memset>
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <std+0x38>)
 8006d30:	6224      	str	r4, [r4, #32]
 8006d32:	6263      	str	r3, [r4, #36]	; 0x24
 8006d34:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <std+0x3c>)
 8006d36:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d38:	4b04      	ldr	r3, [pc, #16]	; (8006d4c <std+0x40>)
 8006d3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d3c:	4b04      	ldr	r3, [pc, #16]	; (8006d50 <std+0x44>)
 8006d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d40:	bd10      	pop	{r4, pc}
 8006d42:	bf00      	nop
 8006d44:	08007061 	.word	0x08007061
 8006d48:	08007083 	.word	0x08007083
 8006d4c:	080070bb 	.word	0x080070bb
 8006d50:	080070df 	.word	0x080070df

08006d54 <_cleanup_r>:
 8006d54:	4901      	ldr	r1, [pc, #4]	; (8006d5c <_cleanup_r+0x8>)
 8006d56:	f000 b8af 	b.w	8006eb8 <_fwalk_reent>
 8006d5a:	bf00      	nop
 8006d5c:	08006c95 	.word	0x08006c95

08006d60 <__sfmoreglue>:
 8006d60:	2268      	movs	r2, #104	; 0x68
 8006d62:	b570      	push	{r4, r5, r6, lr}
 8006d64:	1e4d      	subs	r5, r1, #1
 8006d66:	4355      	muls	r5, r2
 8006d68:	460e      	mov	r6, r1
 8006d6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d6e:	f7ff fa6b 	bl	8006248 <_malloc_r>
 8006d72:	4604      	mov	r4, r0
 8006d74:	b140      	cbz	r0, 8006d88 <__sfmoreglue+0x28>
 8006d76:	2100      	movs	r1, #0
 8006d78:	e9c0 1600 	strd	r1, r6, [r0]
 8006d7c:	300c      	adds	r0, #12
 8006d7e:	60a0      	str	r0, [r4, #8]
 8006d80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d84:	f7fd fb24 	bl	80043d0 <memset>
 8006d88:	4620      	mov	r0, r4
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}

08006d8c <__sfp_lock_acquire>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	; (8006d94 <__sfp_lock_acquire+0x8>)
 8006d8e:	f000 b8b3 	b.w	8006ef8 <__retarget_lock_acquire_recursive>
 8006d92:	bf00      	nop
 8006d94:	2000036d 	.word	0x2000036d

08006d98 <__sfp_lock_release>:
 8006d98:	4801      	ldr	r0, [pc, #4]	; (8006da0 <__sfp_lock_release+0x8>)
 8006d9a:	f000 b8ae 	b.w	8006efa <__retarget_lock_release_recursive>
 8006d9e:	bf00      	nop
 8006da0:	2000036d 	.word	0x2000036d

08006da4 <__sinit_lock_acquire>:
 8006da4:	4801      	ldr	r0, [pc, #4]	; (8006dac <__sinit_lock_acquire+0x8>)
 8006da6:	f000 b8a7 	b.w	8006ef8 <__retarget_lock_acquire_recursive>
 8006daa:	bf00      	nop
 8006dac:	2000036e 	.word	0x2000036e

08006db0 <__sinit_lock_release>:
 8006db0:	4801      	ldr	r0, [pc, #4]	; (8006db8 <__sinit_lock_release+0x8>)
 8006db2:	f000 b8a2 	b.w	8006efa <__retarget_lock_release_recursive>
 8006db6:	bf00      	nop
 8006db8:	2000036e 	.word	0x2000036e

08006dbc <__sinit>:
 8006dbc:	b510      	push	{r4, lr}
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	f7ff fff0 	bl	8006da4 <__sinit_lock_acquire>
 8006dc4:	69a3      	ldr	r3, [r4, #24]
 8006dc6:	b11b      	cbz	r3, 8006dd0 <__sinit+0x14>
 8006dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dcc:	f7ff bff0 	b.w	8006db0 <__sinit_lock_release>
 8006dd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006dd4:	6523      	str	r3, [r4, #80]	; 0x50
 8006dd6:	4b13      	ldr	r3, [pc, #76]	; (8006e24 <__sinit+0x68>)
 8006dd8:	4a13      	ldr	r2, [pc, #76]	; (8006e28 <__sinit+0x6c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dde:	42a3      	cmp	r3, r4
 8006de0:	bf08      	it	eq
 8006de2:	2301      	moveq	r3, #1
 8006de4:	4620      	mov	r0, r4
 8006de6:	bf08      	it	eq
 8006de8:	61a3      	streq	r3, [r4, #24]
 8006dea:	f000 f81f 	bl	8006e2c <__sfp>
 8006dee:	6060      	str	r0, [r4, #4]
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 f81b 	bl	8006e2c <__sfp>
 8006df6:	60a0      	str	r0, [r4, #8]
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 f817 	bl	8006e2c <__sfp>
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2104      	movs	r1, #4
 8006e02:	60e0      	str	r0, [r4, #12]
 8006e04:	6860      	ldr	r0, [r4, #4]
 8006e06:	f7ff ff81 	bl	8006d0c <std>
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	2109      	movs	r1, #9
 8006e0e:	68a0      	ldr	r0, [r4, #8]
 8006e10:	f7ff ff7c 	bl	8006d0c <std>
 8006e14:	2202      	movs	r2, #2
 8006e16:	2112      	movs	r1, #18
 8006e18:	68e0      	ldr	r0, [r4, #12]
 8006e1a:	f7ff ff77 	bl	8006d0c <std>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	61a3      	str	r3, [r4, #24]
 8006e22:	e7d1      	b.n	8006dc8 <__sinit+0xc>
 8006e24:	08007294 	.word	0x08007294
 8006e28:	08006d55 	.word	0x08006d55

08006e2c <__sfp>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	4607      	mov	r7, r0
 8006e30:	f7ff ffac 	bl	8006d8c <__sfp_lock_acquire>
 8006e34:	4b1e      	ldr	r3, [pc, #120]	; (8006eb0 <__sfp+0x84>)
 8006e36:	681e      	ldr	r6, [r3, #0]
 8006e38:	69b3      	ldr	r3, [r6, #24]
 8006e3a:	b913      	cbnz	r3, 8006e42 <__sfp+0x16>
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f7ff ffbd 	bl	8006dbc <__sinit>
 8006e42:	3648      	adds	r6, #72	; 0x48
 8006e44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	d503      	bpl.n	8006e54 <__sfp+0x28>
 8006e4c:	6833      	ldr	r3, [r6, #0]
 8006e4e:	b30b      	cbz	r3, 8006e94 <__sfp+0x68>
 8006e50:	6836      	ldr	r6, [r6, #0]
 8006e52:	e7f7      	b.n	8006e44 <__sfp+0x18>
 8006e54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e58:	b9d5      	cbnz	r5, 8006e90 <__sfp+0x64>
 8006e5a:	4b16      	ldr	r3, [pc, #88]	; (8006eb4 <__sfp+0x88>)
 8006e5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e60:	60e3      	str	r3, [r4, #12]
 8006e62:	6665      	str	r5, [r4, #100]	; 0x64
 8006e64:	f000 f847 	bl	8006ef6 <__retarget_lock_init_recursive>
 8006e68:	f7ff ff96 	bl	8006d98 <__sfp_lock_release>
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	4629      	mov	r1, r5
 8006e70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e78:	6025      	str	r5, [r4, #0]
 8006e7a:	61a5      	str	r5, [r4, #24]
 8006e7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e80:	f7fd faa6 	bl	80043d0 <memset>
 8006e84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e90:	3468      	adds	r4, #104	; 0x68
 8006e92:	e7d9      	b.n	8006e48 <__sfp+0x1c>
 8006e94:	2104      	movs	r1, #4
 8006e96:	4638      	mov	r0, r7
 8006e98:	f7ff ff62 	bl	8006d60 <__sfmoreglue>
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	6030      	str	r0, [r6, #0]
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d1d5      	bne.n	8006e50 <__sfp+0x24>
 8006ea4:	f7ff ff78 	bl	8006d98 <__sfp_lock_release>
 8006ea8:	230c      	movs	r3, #12
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	e7ee      	b.n	8006e8c <__sfp+0x60>
 8006eae:	bf00      	nop
 8006eb0:	08007294 	.word	0x08007294
 8006eb4:	ffff0001 	.word	0xffff0001

08006eb8 <_fwalk_reent>:
 8006eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	4688      	mov	r8, r1
 8006ec0:	2700      	movs	r7, #0
 8006ec2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ec6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eca:	f1b9 0901 	subs.w	r9, r9, #1
 8006ece:	d505      	bpl.n	8006edc <_fwalk_reent+0x24>
 8006ed0:	6824      	ldr	r4, [r4, #0]
 8006ed2:	2c00      	cmp	r4, #0
 8006ed4:	d1f7      	bne.n	8006ec6 <_fwalk_reent+0xe>
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006edc:	89ab      	ldrh	r3, [r5, #12]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d907      	bls.n	8006ef2 <_fwalk_reent+0x3a>
 8006ee2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	d003      	beq.n	8006ef2 <_fwalk_reent+0x3a>
 8006eea:	4629      	mov	r1, r5
 8006eec:	4630      	mov	r0, r6
 8006eee:	47c0      	blx	r8
 8006ef0:	4307      	orrs	r7, r0
 8006ef2:	3568      	adds	r5, #104	; 0x68
 8006ef4:	e7e9      	b.n	8006eca <_fwalk_reent+0x12>

08006ef6 <__retarget_lock_init_recursive>:
 8006ef6:	4770      	bx	lr

08006ef8 <__retarget_lock_acquire_recursive>:
 8006ef8:	4770      	bx	lr

08006efa <__retarget_lock_release_recursive>:
 8006efa:	4770      	bx	lr

08006efc <__swhatbuf_r>:
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	460e      	mov	r6, r1
 8006f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f04:	4614      	mov	r4, r2
 8006f06:	2900      	cmp	r1, #0
 8006f08:	461d      	mov	r5, r3
 8006f0a:	b096      	sub	sp, #88	; 0x58
 8006f0c:	da08      	bge.n	8006f20 <__swhatbuf_r+0x24>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f14:	602a      	str	r2, [r5, #0]
 8006f16:	061a      	lsls	r2, r3, #24
 8006f18:	d410      	bmi.n	8006f3c <__swhatbuf_r+0x40>
 8006f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f1e:	e00e      	b.n	8006f3e <__swhatbuf_r+0x42>
 8006f20:	466a      	mov	r2, sp
 8006f22:	f000 f903 	bl	800712c <_fstat_r>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	dbf1      	blt.n	8006f0e <__swhatbuf_r+0x12>
 8006f2a:	9a01      	ldr	r2, [sp, #4]
 8006f2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f34:	425a      	negs	r2, r3
 8006f36:	415a      	adcs	r2, r3
 8006f38:	602a      	str	r2, [r5, #0]
 8006f3a:	e7ee      	b.n	8006f1a <__swhatbuf_r+0x1e>
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	2000      	movs	r0, #0
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	b016      	add	sp, #88	; 0x58
 8006f44:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f48 <__smakebuf_r>:
 8006f48:	898b      	ldrh	r3, [r1, #12]
 8006f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f4c:	079d      	lsls	r5, r3, #30
 8006f4e:	4606      	mov	r6, r0
 8006f50:	460c      	mov	r4, r1
 8006f52:	d507      	bpl.n	8006f64 <__smakebuf_r+0x1c>
 8006f54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	6163      	str	r3, [r4, #20]
 8006f60:	b002      	add	sp, #8
 8006f62:	bd70      	pop	{r4, r5, r6, pc}
 8006f64:	466a      	mov	r2, sp
 8006f66:	ab01      	add	r3, sp, #4
 8006f68:	f7ff ffc8 	bl	8006efc <__swhatbuf_r>
 8006f6c:	9900      	ldr	r1, [sp, #0]
 8006f6e:	4605      	mov	r5, r0
 8006f70:	4630      	mov	r0, r6
 8006f72:	f7ff f969 	bl	8006248 <_malloc_r>
 8006f76:	b948      	cbnz	r0, 8006f8c <__smakebuf_r+0x44>
 8006f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f7c:	059a      	lsls	r2, r3, #22
 8006f7e:	d4ef      	bmi.n	8006f60 <__smakebuf_r+0x18>
 8006f80:	f023 0303 	bic.w	r3, r3, #3
 8006f84:	f043 0302 	orr.w	r3, r3, #2
 8006f88:	81a3      	strh	r3, [r4, #12]
 8006f8a:	e7e3      	b.n	8006f54 <__smakebuf_r+0xc>
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <__smakebuf_r+0x7c>)
 8006f8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	6020      	str	r0, [r4, #0]
 8006f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f98:	81a3      	strh	r3, [r4, #12]
 8006f9a:	9b00      	ldr	r3, [sp, #0]
 8006f9c:	6120      	str	r0, [r4, #16]
 8006f9e:	6163      	str	r3, [r4, #20]
 8006fa0:	9b01      	ldr	r3, [sp, #4]
 8006fa2:	b15b      	cbz	r3, 8006fbc <__smakebuf_r+0x74>
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006faa:	f000 f8d1 	bl	8007150 <_isatty_r>
 8006fae:	b128      	cbz	r0, 8006fbc <__smakebuf_r+0x74>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	f023 0303 	bic.w	r3, r3, #3
 8006fb6:	f043 0301 	orr.w	r3, r3, #1
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	89a0      	ldrh	r0, [r4, #12]
 8006fbe:	4305      	orrs	r5, r0
 8006fc0:	81a5      	strh	r5, [r4, #12]
 8006fc2:	e7cd      	b.n	8006f60 <__smakebuf_r+0x18>
 8006fc4:	08006d55 	.word	0x08006d55

08006fc8 <_malloc_usable_size_r>:
 8006fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fcc:	1f18      	subs	r0, r3, #4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bfbc      	itt	lt
 8006fd2:	580b      	ldrlt	r3, [r1, r0]
 8006fd4:	18c0      	addlt	r0, r0, r3
 8006fd6:	4770      	bx	lr

08006fd8 <_raise_r>:
 8006fd8:	291f      	cmp	r1, #31
 8006fda:	b538      	push	{r3, r4, r5, lr}
 8006fdc:	4604      	mov	r4, r0
 8006fde:	460d      	mov	r5, r1
 8006fe0:	d904      	bls.n	8006fec <_raise_r+0x14>
 8006fe2:	2316      	movs	r3, #22
 8006fe4:	6003      	str	r3, [r0, #0]
 8006fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006fee:	b112      	cbz	r2, 8006ff6 <_raise_r+0x1e>
 8006ff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ff4:	b94b      	cbnz	r3, 800700a <_raise_r+0x32>
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f000 f830 	bl	800705c <_getpid_r>
 8006ffc:	462a      	mov	r2, r5
 8006ffe:	4601      	mov	r1, r0
 8007000:	4620      	mov	r0, r4
 8007002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007006:	f000 b817 	b.w	8007038 <_kill_r>
 800700a:	2b01      	cmp	r3, #1
 800700c:	d00a      	beq.n	8007024 <_raise_r+0x4c>
 800700e:	1c59      	adds	r1, r3, #1
 8007010:	d103      	bne.n	800701a <_raise_r+0x42>
 8007012:	2316      	movs	r3, #22
 8007014:	6003      	str	r3, [r0, #0]
 8007016:	2001      	movs	r0, #1
 8007018:	e7e7      	b.n	8006fea <_raise_r+0x12>
 800701a:	2400      	movs	r4, #0
 800701c:	4628      	mov	r0, r5
 800701e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007022:	4798      	blx	r3
 8007024:	2000      	movs	r0, #0
 8007026:	e7e0      	b.n	8006fea <_raise_r+0x12>

08007028 <raise>:
 8007028:	4b02      	ldr	r3, [pc, #8]	; (8007034 <raise+0xc>)
 800702a:	4601      	mov	r1, r0
 800702c:	6818      	ldr	r0, [r3, #0]
 800702e:	f7ff bfd3 	b.w	8006fd8 <_raise_r>
 8007032:	bf00      	nop
 8007034:	2000001c 	.word	0x2000001c

08007038 <_kill_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	2300      	movs	r3, #0
 800703c:	4d06      	ldr	r5, [pc, #24]	; (8007058 <_kill_r+0x20>)
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	4611      	mov	r1, r2
 8007044:	602b      	str	r3, [r5, #0]
 8007046:	f7fa fdee 	bl	8001c26 <_kill>
 800704a:	1c43      	adds	r3, r0, #1
 800704c:	d102      	bne.n	8007054 <_kill_r+0x1c>
 800704e:	682b      	ldr	r3, [r5, #0]
 8007050:	b103      	cbz	r3, 8007054 <_kill_r+0x1c>
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	bd38      	pop	{r3, r4, r5, pc}
 8007056:	bf00      	nop
 8007058:	20000368 	.word	0x20000368

0800705c <_getpid_r>:
 800705c:	f7fa bddc 	b.w	8001c18 <_getpid>

08007060 <__sread>:
 8007060:	b510      	push	{r4, lr}
 8007062:	460c      	mov	r4, r1
 8007064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007068:	f000 f894 	bl	8007194 <_read_r>
 800706c:	2800      	cmp	r0, #0
 800706e:	bfab      	itete	ge
 8007070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007072:	89a3      	ldrhlt	r3, [r4, #12]
 8007074:	181b      	addge	r3, r3, r0
 8007076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800707a:	bfac      	ite	ge
 800707c:	6563      	strge	r3, [r4, #84]	; 0x54
 800707e:	81a3      	strhlt	r3, [r4, #12]
 8007080:	bd10      	pop	{r4, pc}

08007082 <__swrite>:
 8007082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007086:	461f      	mov	r7, r3
 8007088:	898b      	ldrh	r3, [r1, #12]
 800708a:	4605      	mov	r5, r0
 800708c:	05db      	lsls	r3, r3, #23
 800708e:	460c      	mov	r4, r1
 8007090:	4616      	mov	r6, r2
 8007092:	d505      	bpl.n	80070a0 <__swrite+0x1e>
 8007094:	2302      	movs	r3, #2
 8007096:	2200      	movs	r2, #0
 8007098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709c:	f000 f868 	bl	8007170 <_lseek_r>
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	4632      	mov	r2, r6
 80070a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a8:	81a3      	strh	r3, [r4, #12]
 80070aa:	4628      	mov	r0, r5
 80070ac:	463b      	mov	r3, r7
 80070ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b6:	f000 b817 	b.w	80070e8 <_write_r>

080070ba <__sseek>:
 80070ba:	b510      	push	{r4, lr}
 80070bc:	460c      	mov	r4, r1
 80070be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c2:	f000 f855 	bl	8007170 <_lseek_r>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	bf15      	itete	ne
 80070cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80070ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070d6:	81a3      	strheq	r3, [r4, #12]
 80070d8:	bf18      	it	ne
 80070da:	81a3      	strhne	r3, [r4, #12]
 80070dc:	bd10      	pop	{r4, pc}

080070de <__sclose>:
 80070de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e2:	f000 b813 	b.w	800710c <_close_r>
	...

080070e8 <_write_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4604      	mov	r4, r0
 80070ec:	4608      	mov	r0, r1
 80070ee:	4611      	mov	r1, r2
 80070f0:	2200      	movs	r2, #0
 80070f2:	4d05      	ldr	r5, [pc, #20]	; (8007108 <_write_r+0x20>)
 80070f4:	602a      	str	r2, [r5, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f7fa fdcc 	bl	8001c94 <_write>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_write_r+0x1e>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_write_r+0x1e>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	20000368 	.word	0x20000368

0800710c <_close_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	2300      	movs	r3, #0
 8007110:	4d05      	ldr	r5, [pc, #20]	; (8007128 <_close_r+0x1c>)
 8007112:	4604      	mov	r4, r0
 8007114:	4608      	mov	r0, r1
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	f7fa fdd8 	bl	8001ccc <_close>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_close_r+0x1a>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_close_r+0x1a>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20000368 	.word	0x20000368

0800712c <_fstat_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	2300      	movs	r3, #0
 8007130:	4d06      	ldr	r5, [pc, #24]	; (800714c <_fstat_r+0x20>)
 8007132:	4604      	mov	r4, r0
 8007134:	4608      	mov	r0, r1
 8007136:	4611      	mov	r1, r2
 8007138:	602b      	str	r3, [r5, #0]
 800713a:	f7fa fdd2 	bl	8001ce2 <_fstat>
 800713e:	1c43      	adds	r3, r0, #1
 8007140:	d102      	bne.n	8007148 <_fstat_r+0x1c>
 8007142:	682b      	ldr	r3, [r5, #0]
 8007144:	b103      	cbz	r3, 8007148 <_fstat_r+0x1c>
 8007146:	6023      	str	r3, [r4, #0]
 8007148:	bd38      	pop	{r3, r4, r5, pc}
 800714a:	bf00      	nop
 800714c:	20000368 	.word	0x20000368

08007150 <_isatty_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	2300      	movs	r3, #0
 8007154:	4d05      	ldr	r5, [pc, #20]	; (800716c <_isatty_r+0x1c>)
 8007156:	4604      	mov	r4, r0
 8007158:	4608      	mov	r0, r1
 800715a:	602b      	str	r3, [r5, #0]
 800715c:	f7fa fdd0 	bl	8001d00 <_isatty>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d102      	bne.n	800716a <_isatty_r+0x1a>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	b103      	cbz	r3, 800716a <_isatty_r+0x1a>
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	20000368 	.word	0x20000368

08007170 <_lseek_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	2200      	movs	r2, #0
 800717a:	4d05      	ldr	r5, [pc, #20]	; (8007190 <_lseek_r+0x20>)
 800717c:	602a      	str	r2, [r5, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	f7fa fdc8 	bl	8001d14 <_lseek>
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	d102      	bne.n	800718e <_lseek_r+0x1e>
 8007188:	682b      	ldr	r3, [r5, #0]
 800718a:	b103      	cbz	r3, 800718e <_lseek_r+0x1e>
 800718c:	6023      	str	r3, [r4, #0]
 800718e:	bd38      	pop	{r3, r4, r5, pc}
 8007190:	20000368 	.word	0x20000368

08007194 <_read_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4604      	mov	r4, r0
 8007198:	4608      	mov	r0, r1
 800719a:	4611      	mov	r1, r2
 800719c:	2200      	movs	r2, #0
 800719e:	4d05      	ldr	r5, [pc, #20]	; (80071b4 <_read_r+0x20>)
 80071a0:	602a      	str	r2, [r5, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	f7fa fd59 	bl	8001c5a <_read>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d102      	bne.n	80071b2 <_read_r+0x1e>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	b103      	cbz	r3, 80071b2 <_read_r+0x1e>
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	20000368 	.word	0x20000368

080071b8 <_init>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	bf00      	nop
 80071bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071be:	bc08      	pop	{r3}
 80071c0:	469e      	mov	lr, r3
 80071c2:	4770      	bx	lr

080071c4 <_fini>:
 80071c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c6:	bf00      	nop
 80071c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ca:	bc08      	pop	{r3}
 80071cc:	469e      	mov	lr, r3
 80071ce:	4770      	bx	lr
